// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0--rc2
// source: payrpc.proto

package payrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BindAccountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BankAccount   string                 `protobuf:"bytes,1,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`
	BankUser      string                 `protobuf:"bytes,2,opt,name=bank_user,json=bankUser,proto3" json:"bank_user,omitempty"`
	BindType      int32                  `protobuf:"varint,3,opt,name=bind_type,json=bindType,proto3" json:"bind_type,omitempty"`
	Sign          bool                   `protobuf:"varint,4,opt,name=sign,proto3" json:"sign,omitempty"`
	BankName      string                 `protobuf:"bytes,5,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankCode      string                 `protobuf:"bytes,6,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindAccountReq) Reset() {
	*x = BindAccountReq{}
	mi := &file_payrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindAccountReq) ProtoMessage() {}

func (x *BindAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindAccountReq.ProtoReflect.Descriptor instead.
func (*BindAccountReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{0}
}

func (x *BindAccountReq) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *BindAccountReq) GetBankUser() string {
	if x != nil {
		return x.BankUser
	}
	return ""
}

func (x *BindAccountReq) GetBindType() int32 {
	if x != nil {
		return x.BindType
	}
	return 0
}

func (x *BindAccountReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *BindAccountReq) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *BindAccountReq) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type BindAccountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindAccountResp) Reset() {
	*x = BindAccountResp{}
	mi := &file_payrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindAccountResp) ProtoMessage() {}

func (x *BindAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindAccountResp.ProtoReflect.Descriptor instead.
func (*BindAccountResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{1}
}

func (x *BindAccountResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BindAccountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BindAccountResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type PayAccountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BankId        int64                  `protobuf:"varint,1,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	Sign          bool                   `protobuf:"varint,2,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayAccountReq) Reset() {
	*x = PayAccountReq{}
	mi := &file_payrpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAccountReq) ProtoMessage() {}

func (x *PayAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAccountReq.ProtoReflect.Descriptor instead.
func (*PayAccountReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{2}
}

func (x *PayAccountReq) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *PayAccountReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type PayAccountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *PayAccountData        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayAccountResp) Reset() {
	*x = PayAccountResp{}
	mi := &file_payrpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAccountResp) ProtoMessage() {}

func (x *PayAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAccountResp.ProtoReflect.Descriptor instead.
func (*PayAccountResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{3}
}

func (x *PayAccountResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PayAccountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PayAccountResp) GetData() *PayAccountData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayAccountData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BankAddress   string                 `protobuf:"bytes,1,opt,name=bank_address,json=bankAddress,proto3" json:"bank_address,omitempty"`
	BankName      string                 `protobuf:"bytes,2,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankUser      string                 `protobuf:"bytes,3,opt,name=bank_user,json=bankUser,proto3" json:"bank_user,omitempty"`
	Coin          float64                `protobuf:"fixed64,4,opt,name=coin,proto3" json:"coin,omitempty"`
	BankCode      string                 `protobuf:"bytes,5,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayAccountData) Reset() {
	*x = PayAccountData{}
	mi := &file_payrpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAccountData) ProtoMessage() {}

func (x *PayAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAccountData.ProtoReflect.Descriptor instead.
func (*PayAccountData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{4}
}

func (x *PayAccountData) GetBankAddress() string {
	if x != nil {
		return x.BankAddress
	}
	return ""
}

func (x *PayAccountData) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *PayAccountData) GetBankUser() string {
	if x != nil {
		return x.BankUser
	}
	return ""
}

func (x *PayAccountData) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *PayAccountData) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type WithdrawConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sign          bool                   `protobuf:"varint,1,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawConfigReq) Reset() {
	*x = WithdrawConfigReq{}
	mi := &file_payrpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawConfigReq) ProtoMessage() {}

func (x *WithdrawConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawConfigReq.ProtoReflect.Descriptor instead.
func (*WithdrawConfigReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{5}
}

func (x *WithdrawConfigReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type WithdrawConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *WithdrawConfigData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawConfigResp) Reset() {
	*x = WithdrawConfigResp{}
	mi := &file_payrpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawConfigResp) ProtoMessage() {}

func (x *WithdrawConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawConfigResp.ProtoReflect.Descriptor instead.
func (*WithdrawConfigResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{6}
}

func (x *WithdrawConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawConfigResp) GetData() *WithdrawConfigData {
	if x != nil {
		return x.Data
	}
	return nil
}

type WithdrawConfigData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WithdrawCount      int32                  `protobuf:"varint,1,opt,name=withdrawCount,proto3" json:"withdrawCount,omitempty"`
	WithdrawCountDaily int32                  `protobuf:"varint,2,opt,name=withdrawCountDaily,proto3" json:"withdrawCountDaily,omitempty"`
	WithdrawMaxCoin    int32                  `protobuf:"varint,3,opt,name=withdrawMaxCoin,proto3" json:"withdrawMaxCoin,omitempty"`
	WithdrawMinCoin    int32                  `protobuf:"varint,4,opt,name=withdrawMinCoin,proto3" json:"withdrawMinCoin,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WithdrawConfigData) Reset() {
	*x = WithdrawConfigData{}
	mi := &file_payrpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawConfigData) ProtoMessage() {}

func (x *WithdrawConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawConfigData.ProtoReflect.Descriptor instead.
func (*WithdrawConfigData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{7}
}

func (x *WithdrawConfigData) GetWithdrawCount() int32 {
	if x != nil {
		return x.WithdrawCount
	}
	return 0
}

func (x *WithdrawConfigData) GetWithdrawCountDaily() int32 {
	if x != nil {
		return x.WithdrawCountDaily
	}
	return 0
}

func (x *WithdrawConfigData) GetWithdrawMaxCoin() int32 {
	if x != nil {
		return x.WithdrawMaxCoin
	}
	return 0
}

func (x *WithdrawConfigData) GetWithdrawMinCoin() int32 {
	if x != nil {
		return x.WithdrawMinCoin
	}
	return 0
}

type ChannelListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      int32                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Sign          bool                   `protobuf:"varint,2,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelListReq) Reset() {
	*x = ChannelListReq{}
	mi := &file_payrpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelListReq) ProtoMessage() {}

func (x *ChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelListReq.ProtoReflect.Descriptor instead.
func (*ChannelListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelListReq) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ChannelListReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type ChannelListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          []*ChannelListData     `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelListResp) Reset() {
	*x = ChannelListResp{}
	mi := &file_payrpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelListResp) ProtoMessage() {}

func (x *ChannelListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelListResp.ProtoReflect.Descriptor instead.
func (*ChannelListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{9}
}

func (x *ChannelListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ChannelListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChannelListResp) GetData() []*ChannelListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChannelListData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ChannelAppShowName   string                 `protobuf:"bytes,1,opt,name=channelAppShowName,proto3" json:"channelAppShowName,omitempty"`
	Chips                string                 `protobuf:"bytes,2,opt,name=chips,proto3" json:"chips,omitempty"`
	Code                 string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Currency             string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	LogoUrl              string                 `protobuf:"bytes,5,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	MaxCoin              int64                  `protobuf:"varint,6,opt,name=maxCoin,proto3" json:"maxCoin,omitempty"`
	MinCoin              int64                  `protobuf:"varint,7,opt,name=minCoin,proto3" json:"minCoin,omitempty"`
	Name                 string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	SkipCategory         int32                  `protobuf:"varint,9,opt,name=skipCategory,proto3" json:"skipCategory,omitempty"`
	ChannelAppShowNameAr string                 `protobuf:"bytes,10,opt,name=channelAppShowNameAr,proto3" json:"channelAppShowNameAr,omitempty"` //阿拉伯语
	Sort                 int64                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ChannelListData) Reset() {
	*x = ChannelListData{}
	mi := &file_payrpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelListData) ProtoMessage() {}

func (x *ChannelListData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelListData.ProtoReflect.Descriptor instead.
func (*ChannelListData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelListData) GetChannelAppShowName() string {
	if x != nil {
		return x.ChannelAppShowName
	}
	return ""
}

func (x *ChannelListData) GetChips() string {
	if x != nil {
		return x.Chips
	}
	return ""
}

func (x *ChannelListData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ChannelListData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ChannelListData) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ChannelListData) GetMaxCoin() int64 {
	if x != nil {
		return x.MaxCoin
	}
	return 0
}

func (x *ChannelListData) GetMinCoin() int64 {
	if x != nil {
		return x.MinCoin
	}
	return 0
}

func (x *ChannelListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelListData) GetSkipCategory() int32 {
	if x != nil {
		return x.SkipCategory
	}
	return 0
}

func (x *ChannelListData) GetChannelAppShowNameAr() string {
	if x != nil {
		return x.ChannelAppShowNameAr
	}
	return ""
}

func (x *ChannelListData) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type WithdrawReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BankId           int64                  `protobuf:"varint,1,opt,name=bankId,proto3" json:"bankId,omitempty"`
	WithdrawalAmount float64                `protobuf:"fixed64,2,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"`
	Category         int32                  `protobuf:"varint,3,opt,name=category,proto3" json:"category,omitempty"`
	PayType          int64                  `protobuf:"varint,4,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WithdrawReq) Reset() {
	*x = WithdrawReq{}
	mi := &file_payrpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawReq) ProtoMessage() {}

func (x *WithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawReq.ProtoReflect.Descriptor instead.
func (*WithdrawReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawReq) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *WithdrawReq) GetWithdrawalAmount() float64 {
	if x != nil {
		return x.WithdrawalAmount
	}
	return 0
}

func (x *WithdrawReq) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *WithdrawReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type WithdrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawResp) Reset() {
	*x = WithdrawResp{}
	mi := &file_payrpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResp) ProtoMessage() {}

func (x *WithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResp.ProtoReflect.Descriptor instead.
func (*WithdrawResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{12}
}

func (x *WithdrawResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DepositReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coin          int64                  `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`        // 通道编号
	PayType       int64                  `protobuf:"varint,4,opt,name=payType,proto3" json:"payType,omitempty"` //支付方式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositReq) Reset() {
	*x = DepositReq{}
	mi := &file_payrpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositReq) ProtoMessage() {}

func (x *DepositReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositReq.ProtoReflect.Descriptor instead.
func (*DepositReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{13}
}

func (x *DepositReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DepositReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DepositReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepositReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type DepositResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositResp) Reset() {
	*x = DepositResp{}
	mi := &file_payrpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositResp) ProtoMessage() {}

func (x *DepositResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositResp.ProtoReflect.Descriptor instead.
func (*DepositResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{14}
}

func (x *DepositResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                    //平台订单号
	MchId         string                 `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                          //商户号
	OutTradeNo    string                 `protobuf:"bytes,3,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`         //商户订单号
	State         string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`                                       //状态 1成功 其他失败
	FinishTime    int64                  `protobuf:"varint,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`          //结束时间戳
	NotifyTime    int64                  `protobuf:"varint,6,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`          //通知时间戳
	HandlingFee   int64                  `protobuf:"varint,7,opt,name=handling_fee,json=handlingFee,proto3" json:"handling_fee,omitempty"`       //手续费（分）
	TotalFee      int64                  `protobuf:"varint,8,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`                //提交时的总金额（分）
	RealFee       int64                  `protobuf:"varint,9,opt,name=real_fee,json=realFee,proto3" json:"real_fee,omitempty"`                   //真实付款金额（分）*注意已这个金额为准
	TransactionId string                 `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` //三方订单号
	Attach        string                 `protobuf:"bytes,11,opt,name=attach,proto3" json:"attach,omitempty"`                                    //附加信息。下单时有提交就原样返回
	Sign          string                 `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`                                        //签名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositCallBackReq) Reset() {
	*x = DepositCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositCallBackReq) ProtoMessage() {}

func (x *DepositCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{15}
}

func (x *DepositCallBackReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositCallBackReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *DepositCallBackReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *DepositCallBackReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *DepositCallBackReq) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *DepositCallBackReq) GetNotifyTime() int64 {
	if x != nil {
		return x.NotifyTime
	}
	return 0
}

func (x *DepositCallBackReq) GetHandlingFee() int64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *DepositCallBackReq) GetTotalFee() int64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *DepositCallBackReq) GetRealFee() int64 {
	if x != nil {
		return x.RealFee
	}
	return 0
}

func (x *DepositCallBackReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *DepositCallBackReq) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *DepositCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DepositCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositCallBackResp) Reset() {
	*x = DepositCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositCallBackResp) ProtoMessage() {}

func (x *DepositCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{16}
}

func (x *DepositCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositSearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutTradeNo    string                 `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"` // 商家订单号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositSearchReq) Reset() {
	*x = DepositSearchReq{}
	mi := &file_payrpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSearchReq) ProtoMessage() {}

func (x *DepositSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSearchReq.ProtoReflect.Descriptor instead.
func (*DepositSearchReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{17}
}

func (x *DepositSearchReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type DepositSearchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositSearchResp) Reset() {
	*x = DepositSearchResp{}
	mi := &file_payrpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositSearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSearchResp) ProtoMessage() {}

func (x *DepositSearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSearchResp.ProtoReflect.Descriptor instead.
func (*DepositSearchResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{18}
}

func (x *DepositSearchResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositSearchResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositSearchResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                   //平台订单号
	MchId         string                 `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                         //商户号
	OutTradeNo    string                 `protobuf:"bytes,3,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`        //商户订单号
	State         string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`                                      //状态 2成功 3拒绝 4 冲正
	FinishTime    int64                  `protobuf:"varint,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`         //结束时间戳
	NotifyTime    int64                  `protobuf:"varint,6,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`         //通知时间戳
	HandlingFee   int64                  `protobuf:"varint,7,opt,name=handling_fee,json=handlingFee,proto3" json:"handling_fee,omitempty"`      //手续费（分）
	TotalFee      int64                  `protobuf:"varint,8,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`               //提交时的总金额（分）
	TransactionId string                 `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` //三方订单号
	Remark        string                 `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`                                   // 备注
	Sign          string                 `protobuf:"bytes,11,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawCallBackReq) Reset() {
	*x = WithdrawCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawCallBackReq) ProtoMessage() {}

func (x *WithdrawCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{19}
}

func (x *WithdrawCallBackReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *WithdrawCallBackReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WithdrawCallBackReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *WithdrawCallBackReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *WithdrawCallBackReq) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *WithdrawCallBackReq) GetNotifyTime() int64 {
	if x != nil {
		return x.NotifyTime
	}
	return 0
}

func (x *WithdrawCallBackReq) GetHandlingFee() int64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *WithdrawCallBackReq) GetTotalFee() int64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *WithdrawCallBackReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *WithdrawCallBackReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *WithdrawCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type WithdrawCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawCallBackResp) Reset() {
	*x = WithdrawCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawCallBackResp) ProtoMessage() {}

func (x *WithdrawCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{20}
}

func (x *WithdrawCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawSearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutTradeNo    string                 `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawSearchReq) Reset() {
	*x = WithdrawSearchReq{}
	mi := &file_payrpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSearchReq) ProtoMessage() {}

func (x *WithdrawSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSearchReq.ProtoReflect.Descriptor instead.
func (*WithdrawSearchReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{21}
}

func (x *WithdrawSearchReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type WithdrawSearchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawSearchResp) Reset() {
	*x = WithdrawSearchResp{}
	mi := &file_payrpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawSearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSearchResp) ProtoMessage() {}

func (x *WithdrawSearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSearchResp.ProtoReflect.Descriptor instead.
func (*WithdrawSearchResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{22}
}

func (x *WithdrawSearchResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawSearchResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawSearchResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type FindMerchantBlanceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sign          bool                   `protobuf:"varint,1,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindMerchantBlanceReq) Reset() {
	*x = FindMerchantBlanceReq{}
	mi := &file_payrpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindMerchantBlanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMerchantBlanceReq) ProtoMessage() {}

func (x *FindMerchantBlanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMerchantBlanceReq.ProtoReflect.Descriptor instead.
func (*FindMerchantBlanceReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{23}
}

func (x *FindMerchantBlanceReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type FindMerchantBlanceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindMerchantBlanceResp) Reset() {
	*x = FindMerchantBlanceResp{}
	mi := &file_payrpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindMerchantBlanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMerchantBlanceResp) ProtoMessage() {}

func (x *FindMerchantBlanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMerchantBlanceResp.ProtoReflect.Descriptor instead.
func (*FindMerchantBlanceResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{24}
}

func (x *FindMerchantBlanceResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FindMerchantBlanceResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FindMerchantBlanceResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RefundOrderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutTradeNo    string                 `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`            //商户订单号
	RefOutTradeNo string                 `protobuf:"bytes,2,opt,name=ref_out_trade_no,json=refOutTradeNo,proto3" json:"ref_out_trade_no,omitempty"` // 要退款得订单编号
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                        //退款金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefundOrderReq) Reset() {
	*x = RefundOrderReq{}
	mi := &file_payrpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefundOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrderReq) ProtoMessage() {}

func (x *RefundOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrderReq.ProtoReflect.Descriptor instead.
func (*RefundOrderReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{25}
}

func (x *RefundOrderReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *RefundOrderReq) GetRefOutTradeNo() string {
	if x != nil {
		return x.RefOutTradeNo
	}
	return ""
}

func (x *RefundOrderReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type RefundOrderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefundOrderResp) Reset() {
	*x = RefundOrderResp{}
	mi := &file_payrpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefundOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrderResp) ProtoMessage() {}

func (x *RefundOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrderResp.ProtoReflect.Descriptor instead.
func (*RefundOrderResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{26}
}

func (x *RefundOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RefundOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RefundOrderCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                       // 平台订单号
	MchId         string                 `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                             //  商户号
	OutTradeNo    string                 `protobuf:"bytes,3,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`            //   商户订单号
	RefOutTradeNo string                 `protobuf:"bytes,4,opt,name=ref_out_trade_no,json=refOutTradeNo,proto3" json:"ref_out_trade_no,omitempty"` // 原商户退款单号
	RefOrderId    string                 `protobuf:"bytes,5,opt,name=ref_order_id,json=refOrderId,proto3" json:"ref_order_id,omitempty"`            // 原平台订单号
	State         string                 `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`                                          //    状态 1成功 2失败
	FinishTime    int64                  `protobuf:"varint,7,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`             //结束时间戳
	NotifyTime    int64                  `protobuf:"varint,8,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`             // 通知时间戳
	Amount        int64                  `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`                                       //      退款金额（分）
	OrderAmount   int64                  `protobuf:"varint,10,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`         // 订单金额（分）
	TransactionId string                 `protobuf:"bytes,11,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`    //三方订单号有就返回
	Remark        string                 `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`                                       // 备注
	Sign          string                 `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefundOrderCallBackReq) Reset() {
	*x = RefundOrderCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefundOrderCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrderCallBackReq) ProtoMessage() {}

func (x *RefundOrderCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrderCallBackReq.ProtoReflect.Descriptor instead.
func (*RefundOrderCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{27}
}

func (x *RefundOrderCallBackReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetRefOutTradeNo() string {
	if x != nil {
		return x.RefOutTradeNo
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetRefOrderId() string {
	if x != nil {
		return x.RefOrderId
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *RefundOrderCallBackReq) GetNotifyTime() int64 {
	if x != nil {
		return x.NotifyTime
	}
	return 0
}

func (x *RefundOrderCallBackReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RefundOrderCallBackReq) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *RefundOrderCallBackReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RefundOrderCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type RefundOrderCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefundOrderCallBackResp) Reset() {
	*x = RefundOrderCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefundOrderCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrderCallBackResp) ProtoMessage() {}

func (x *RefundOrderCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrderCallBackResp.ProtoReflect.Descriptor instead.
func (*RefundOrderCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{28}
}

func (x *RefundOrderCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RefundOrderCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RefundOrderCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CheckDepositReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckDepositReq) Reset() {
	*x = CheckDepositReq{}
	mi := &file_payrpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckDepositReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDepositReq) ProtoMessage() {}

func (x *CheckDepositReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDepositReq.ProtoReflect.Descriptor instead.
func (*CheckDepositReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{29}
}

func (x *CheckDepositReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type CheckDepositResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckDepositResp) Reset() {
	*x = CheckDepositResp{}
	mi := &file_payrpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckDepositResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDepositResp) ProtoMessage() {}

func (x *CheckDepositResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDepositResp.ProtoReflect.Descriptor instead.
func (*CheckDepositResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{30}
}

func (x *CheckDepositResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckDepositResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckDepositResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetCoinLogListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int32                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sign          bool                   `protobuf:"varint,3,opt,name=sign,proto3" json:"sign,omitempty"`
	Data          *GetCoinLogListDataReq `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinLogListReq) Reset() {
	*x = GetCoinLogListReq{}
	mi := &file_payrpc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinLogListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinLogListReq) ProtoMessage() {}

func (x *GetCoinLogListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinLogListReq.ProtoReflect.Descriptor instead.
func (*GetCoinLogListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{31}
}

func (x *GetCoinLogListReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetCoinLogListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetCoinLogListReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *GetCoinLogListReq) GetData() *GetCoinLogListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCoinLogListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	OutIn         string                 `protobuf:"bytes,2,opt,name=outIn,proto3" json:"outIn,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinLogListDataReq) Reset() {
	*x = GetCoinLogListDataReq{}
	mi := &file_payrpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinLogListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinLogListDataReq) ProtoMessage() {}

func (x *GetCoinLogListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinLogListDataReq.ProtoReflect.Descriptor instead.
func (*GetCoinLogListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{32}
}

func (x *GetCoinLogListDataReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetCoinLogListDataReq) GetOutIn() string {
	if x != nil {
		return x.OutIn
	}
	return ""
}

func (x *GetCoinLogListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetCoinLogListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetCoinLogListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *CoinLogListData       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinLogListResp) Reset() {
	*x = GetCoinLogListResp{}
	mi := &file_payrpc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinLogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinLogListResp) ProtoMessage() {}

func (x *GetCoinLogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinLogListResp.ProtoReflect.Descriptor instead.
func (*GetCoinLogListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{33}
}

func (x *GetCoinLogListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCoinLogListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetCoinLogListResp) GetData() *CoinLogListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CoinLogListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       string                 `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          string                 `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages         string                 `protobuf:"bytes,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Total         string                 `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*CoinLogListItem     `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinLogListData) Reset() {
	*x = CoinLogListData{}
	mi := &file_payrpc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinLogListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinLogListData) ProtoMessage() {}

func (x *CoinLogListData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinLogListData.ProtoReflect.Descriptor instead.
func (*CoinLogListData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{34}
}

func (x *CoinLogListData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *CoinLogListData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CoinLogListData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *CoinLogListData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *CoinLogListData) GetList() []*CoinLogListItem {
	if x != nil {
		return x.List
	}
	return nil
}

type CoinLogListItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutIn         int32                  `protobuf:"varint,1,opt,name=outIn,proto3" json:"outIn,omitempty"`
	Category      int32                  `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Coin          float64                `protobuf:"fixed64,4,opt,name=coin,proto3" json:"coin,omitempty"`             // 账变金额
	CoinBefore    float64                `protobuf:"fixed64,5,opt,name=coinBefore,proto3" json:"coinBefore,omitempty"` //账变前金额
	CoinAfter     float64                `protobuf:"fixed64,6,opt,name=coinAfter,proto3" json:"coinAfter,omitempty"`   // 账变后金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinLogListItem) Reset() {
	*x = CoinLogListItem{}
	mi := &file_payrpc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinLogListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinLogListItem) ProtoMessage() {}

func (x *CoinLogListItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinLogListItem.ProtoReflect.Descriptor instead.
func (*CoinLogListItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{35}
}

func (x *CoinLogListItem) GetOutIn() int32 {
	if x != nil {
		return x.OutIn
	}
	return 0
}

func (x *CoinLogListItem) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *CoinLogListItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CoinLogListItem) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *CoinLogListItem) GetCoinBefore() float64 {
	if x != nil {
		return x.CoinBefore
	}
	return 0
}

func (x *CoinLogListItem) GetCoinAfter() float64 {
	if x != nil {
		return x.CoinAfter
	}
	return 0
}

type GetAuditWithdrawalRecordReq struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Current       int32                            `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int32                            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                           `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                         `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *GetAuditWithdrawalRecordDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditWithdrawalRecordReq) Reset() {
	*x = GetAuditWithdrawalRecordReq{}
	mi := &file_payrpc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditWithdrawalRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditWithdrawalRecordReq) ProtoMessage() {}

func (x *GetAuditWithdrawalRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditWithdrawalRecordReq.ProtoReflect.Descriptor instead.
func (*GetAuditWithdrawalRecordReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{36}
}

func (x *GetAuditWithdrawalRecordReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetAuditWithdrawalRecordReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetAuditWithdrawalRecordReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *GetAuditWithdrawalRecordReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *GetAuditWithdrawalRecordReq) GetData() *GetAuditWithdrawalRecordDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAuditWithdrawalRecordDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     int64                  `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	TimeType      string                 `protobuf:"bytes,3,opt,name=timeType,proto3" json:"timeType,omitempty"` // 时间类型1-创建时间，2-最后登录时间
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	LastLoginIp   string                 `protobuf:"bytes,5,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`
	Id            string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	AdminUsername string                 `protobuf:"bytes,7,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
	Status        string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	PayType       int64                  `protobuf:"varint,9,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditWithdrawalRecordDataReq) Reset() {
	*x = GetAuditWithdrawalRecordDataReq{}
	mi := &file_payrpc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditWithdrawalRecordDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditWithdrawalRecordDataReq) ProtoMessage() {}

func (x *GetAuditWithdrawalRecordDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditWithdrawalRecordDataReq.ProtoReflect.Descriptor instead.
func (*GetAuditWithdrawalRecordDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{37}
}

func (x *GetAuditWithdrawalRecordDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataReq) GetTimeType() string {
	if x != nil {
		return x.TimeType
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataReq) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataReq) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type GetAuditWithdrawalRecordResp struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Code          int32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *GetAuditWithdrawalRecordData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditWithdrawalRecordResp) Reset() {
	*x = GetAuditWithdrawalRecordResp{}
	mi := &file_payrpc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditWithdrawalRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditWithdrawalRecordResp) ProtoMessage() {}

func (x *GetAuditWithdrawalRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditWithdrawalRecordResp.ProtoReflect.Descriptor instead.
func (*GetAuditWithdrawalRecordResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{38}
}

func (x *GetAuditWithdrawalRecordResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAuditWithdrawalRecordResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAuditWithdrawalRecordResp) GetData() *GetAuditWithdrawalRecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAuditWithdrawalRecordData struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Current       string                                  `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                                  `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                                  `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                                  `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	SortId        string                                  `protobuf:"bytes,5,opt,name=sortId,proto3" json:"sortId,omitempty"`
	SortValue     string                                  `protobuf:"bytes,6,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	List          []*GetAuditWithdrawalRecordDataListItem `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditWithdrawalRecordData) Reset() {
	*x = GetAuditWithdrawalRecordData{}
	mi := &file_payrpc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditWithdrawalRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditWithdrawalRecordData) ProtoMessage() {}

func (x *GetAuditWithdrawalRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditWithdrawalRecordData.ProtoReflect.Descriptor instead.
func (*GetAuditWithdrawalRecordData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetAuditWithdrawalRecordData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *GetAuditWithdrawalRecordData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *GetAuditWithdrawalRecordData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *GetAuditWithdrawalRecordData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *GetAuditWithdrawalRecordData) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *GetAuditWithdrawalRecordData) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *GetAuditWithdrawalRecordData) GetList() []*GetAuditWithdrawalRecordDataListItem {
	if x != nil {
		return x.List
	}
	return nil
}

type GetAuditWithdrawalRecordDataListItem struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId                 string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`                                  //订单号
	PlatOrderId             string                 `protobuf:"bytes,3,opt,name=platOrderId,proto3" json:"platOrderId,omitempty"`                          // 三方支付订单号
	Uid                     int64                  `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`                                         // 用户ID
	Username                string                 `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`                                //用户名
	PlatName                string                 `protobuf:"bytes,6,opt,name=platName,proto3" json:"platName,omitempty"`                                // 平台名称
	PlatNickName            string                 `protobuf:"bytes,7,opt,name=platNickName,proto3" json:"platNickName,omitempty"`                        //自定义平台名称
	Code                    string                 `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`                                        // 支付通道
	WithdrawalAmount        string                 `protobuf:"bytes,9,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"`                //提款金额
	CoinBefore              float64                `protobuf:"fixed64,10,opt,name=coinBefore,proto3" json:"coinBefore,omitempty"`                         //当前余额
	ExchangeRate            string                 `protobuf:"bytes,11,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`                       //当前汇率
	MainNetFees             string                 `protobuf:"bytes,12,opt,name=mainNetFees,proto3" json:"mainNetFees,omitempty"`                         // 主网费
	RealAmount              string                 `protobuf:"bytes,13,opt,name=realAmount,proto3" json:"realAmount,omitempty"`                           //到账金额
	Status                  int64                  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`                                  // 状态: 0-申请中，1-成功，2-失败;字典:dic_withdrawal_record_status
	AdminUid                string                 `protobuf:"bytes,15,opt,name=adminUid,proto3" json:"adminUid,omitempty"`                               //审核人ID
	Mark                    string                 `protobuf:"bytes,16,opt,name=mark,proto3" json:"mark,omitempty"`                                       //备注
	CreatedAt               int64                  `protobuf:"varint,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                            //创建时间
	UpdatedAt               int64                  `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                            //审核时间
	CoinDeposit             float64                `protobuf:"fixed64,19,opt,name=coinDeposit,proto3" json:"coinDeposit,omitempty"`                       //总存款
	CoinWithdrawal          float64                `protobuf:"fixed64,20,opt,name=coinWithdrawal,proto3" json:"coinWithdrawal,omitempty"`                 //总提款
	CategoryCurrency        int64                  `protobuf:"varint,21,opt,name=categoryCurrency,proto3" json:"categoryCurrency,omitempty"`              // 货币类型:dic_category_currency
	CategoryTransfer        int64                  `protobuf:"varint,22,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"`              // 转账类型：1-TRC,2-ERC,3-BANK,4-PIX,5-GCASH,6-MAYA,7-BPIA,8-GRAB
	CategoryTransferName    string                 `protobuf:"bytes,23,opt,name=categoryTransferName,proto3" json:"categoryTransferName,omitempty"`       //转账名称
	AccountNo               string                 `protobuf:"bytes,24,opt,name=accountNo,proto3" json:"accountNo,omitempty"`                             //提款人姓名
	AccountNumber           string                 `protobuf:"bytes,25,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`                     //提款人卡号
	AdminUsername           string                 `protobuf:"bytes,26,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`                     //审核人信息
	WithdrawalAdminUsername string                 `protobuf:"bytes,27,opt,name=withdrawalAdminUsername,proto3" json:"withdrawalAdminUsername,omitempty"` //提现操作人
	CustomizeNoticeContent  string                 `protobuf:"bytes,28,opt,name=customizeNoticeContent,proto3" json:"customizeNoticeContent,omitempty"`   //自定义通知客户信息
	UserFlagList            []*UserFlagInfo        `protobuf:"bytes,29,rep,name=userFlagList,proto3" json:"userFlagList,omitempty"`                       //会员旗列表
	AuditType               int64                  `protobuf:"varint,30,opt,name=auditType,proto3" json:"auditType,omitempty"`                            //  稽核审核类型 0人工,1自动
	DepositWithdrawDiff     float64                `protobuf:"fixed64,31,opt,name=depositWithdrawDiff,proto3" json:"depositWithdrawDiff,omitempty"`       // 充提差
	LastLoginIp             string                 `protobuf:"bytes,32,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`                         // 最后登录ip
	LastLoginIpRegion       string                 `protobuf:"bytes,33,opt,name=lastLoginIpRegion,proto3" json:"lastLoginIpRegion,omitempty"`             // 最后登录归属地
	LastLoginTime           int64                  `protobuf:"varint,34,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`                    //最后登录时间
	FinanceOperatorAt       int64                  `protobuf:"varint,35,opt,name=financeOperatorAt,proto3" json:"financeOperatorAt,omitempty"`            //财务操作时间
	LevelText               string                 `protobuf:"bytes,36,opt,name=levelText,proto3" json:"levelText,omitempty"`                             // 会员等级:vip1-乒乓球达人
	MerchantId              int64                  `protobuf:"varint,37,opt,name=merchantId,proto3" json:"merchantId,omitempty"`                          //
	MerchantName            string                 `protobuf:"bytes,38,opt,name=merchantName,proto3" json:"merchantName,omitempty"`                       //门店店名
	MerchantCategory        int32                  `protobuf:"varint,39,opt,name=merchantCategory,proto3" json:"merchantCategory,omitempty"`              // 商户类型 1线下门店 2线上
	PlatTypeName            string                 `protobuf:"bytes,40,opt,name=platTypeName,proto3" json:"platTypeName,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetAuditWithdrawalRecordDataListItem) Reset() {
	*x = GetAuditWithdrawalRecordDataListItem{}
	mi := &file_payrpc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditWithdrawalRecordDataListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditWithdrawalRecordDataListItem) ProtoMessage() {}

func (x *GetAuditWithdrawalRecordDataListItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditWithdrawalRecordDataListItem.ProtoReflect.Descriptor instead.
func (*GetAuditWithdrawalRecordDataListItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetAuditWithdrawalRecordDataListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetPlatOrderId() string {
	if x != nil {
		return x.PlatOrderId
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetWithdrawalAmount() string {
	if x != nil {
		return x.WithdrawalAmount
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCoinBefore() float64 {
	if x != nil {
		return x.CoinBefore
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetMainNetFees() string {
	if x != nil {
		return x.MainNetFees
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetAdminUid() string {
	if x != nil {
		return x.AdminUid
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCoinDeposit() float64 {
	if x != nil {
		return x.CoinDeposit
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCoinWithdrawal() float64 {
	if x != nil {
		return x.CoinWithdrawal
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCategoryCurrency() int64 {
	if x != nil {
		return x.CategoryCurrency
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCategoryTransferName() string {
	if x != nil {
		return x.CategoryTransferName
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetAccountNo() string {
	if x != nil {
		return x.AccountNo
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetWithdrawalAdminUsername() string {
	if x != nil {
		return x.WithdrawalAdminUsername
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetCustomizeNoticeContent() string {
	if x != nil {
		return x.CustomizeNoticeContent
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetUserFlagList() []*UserFlagInfo {
	if x != nil {
		return x.UserFlagList
	}
	return nil
}

func (x *GetAuditWithdrawalRecordDataListItem) GetAuditType() int64 {
	if x != nil {
		return x.AuditType
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetDepositWithdrawDiff() float64 {
	if x != nil {
		return x.DepositWithdrawDiff
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetLastLoginIpRegion() string {
	if x != nil {
		return x.LastLoginIpRegion
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetFinanceOperatorAt() int64 {
	if x != nil {
		return x.FinanceOperatorAt
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *GetAuditWithdrawalRecordDataListItem) GetMerchantCategory() int32 {
	if x != nil {
		return x.MerchantCategory
	}
	return 0
}

func (x *GetAuditWithdrawalRecordDataListItem) GetPlatTypeName() string {
	if x != nil {
		return x.PlatTypeName
	}
	return ""
}

type UserFlagInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Icon          string                 `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`           //图标
	IconColor     string                 `protobuf:"bytes,2,opt,name=iconColor,proto3" json:"iconColor,omitempty"` //图标颜色
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`           //会员旗名称
	BitCode       int32                  `protobuf:"varint,4,opt,name=bitCode,proto3" json:"bitCode,omitempty"`    // 会员旗
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserFlagInfo) Reset() {
	*x = UserFlagInfo{}
	mi := &file_payrpc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFlagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFlagInfo) ProtoMessage() {}

func (x *UserFlagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFlagInfo.ProtoReflect.Descriptor instead.
func (*UserFlagInfo) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{41}
}

func (x *UserFlagInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserFlagInfo) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

func (x *UserFlagInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserFlagInfo) GetBitCode() int32 {
	if x != nil {
		return x.BitCode
	}
	return 0
}

type GetDepositWithdrawalStatisticsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDepositWithdrawalStatisticsReq) Reset() {
	*x = GetDepositWithdrawalStatisticsReq{}
	mi := &file_payrpc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepositWithdrawalStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositWithdrawalStatisticsReq) ProtoMessage() {}

func (x *GetDepositWithdrawalStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositWithdrawalStatisticsReq.ProtoReflect.Descriptor instead.
func (*GetDepositWithdrawalStatisticsReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetDepositWithdrawalStatisticsReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetDepositWithdrawalStatisticsResp struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Code          int32                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *GetDepositWithdrawalStatisticsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDepositWithdrawalStatisticsResp) Reset() {
	*x = GetDepositWithdrawalStatisticsResp{}
	mi := &file_payrpc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepositWithdrawalStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositWithdrawalStatisticsResp) ProtoMessage() {}

func (x *GetDepositWithdrawalStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositWithdrawalStatisticsResp.ProtoReflect.Descriptor instead.
func (*GetDepositWithdrawalStatisticsResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{43}
}

func (x *GetDepositWithdrawalStatisticsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDepositWithdrawalStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDepositWithdrawalStatisticsResp) GetData() *GetDepositWithdrawalStatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDepositWithdrawalStatisticsData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CoinDeposit         string                 `protobuf:"bytes,1,opt,name=coinDeposit,proto3" json:"coinDeposit,omitempty"`
	CoinWithdrawal      string                 `protobuf:"bytes,2,opt,name=coinWithdrawal,proto3" json:"coinWithdrawal,omitempty"`
	DepositWithdrawDiff string                 `protobuf:"bytes,3,opt,name=depositWithdrawDiff,proto3" json:"depositWithdrawDiff,omitempty"`
	Uid                 int64                  `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetDepositWithdrawalStatisticsData) Reset() {
	*x = GetDepositWithdrawalStatisticsData{}
	mi := &file_payrpc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepositWithdrawalStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositWithdrawalStatisticsData) ProtoMessage() {}

func (x *GetDepositWithdrawalStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositWithdrawalStatisticsData.ProtoReflect.Descriptor instead.
func (*GetDepositWithdrawalStatisticsData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{44}
}

func (x *GetDepositWithdrawalStatisticsData) GetCoinDeposit() string {
	if x != nil {
		return x.CoinDeposit
	}
	return ""
}

func (x *GetDepositWithdrawalStatisticsData) GetCoinWithdrawal() string {
	if x != nil {
		return x.CoinWithdrawal
	}
	return ""
}

func (x *GetDepositWithdrawalStatisticsData) GetDepositWithdrawDiff() string {
	if x != nil {
		return x.DepositWithdrawDiff
	}
	return ""
}

func (x *GetDepositWithdrawalStatisticsData) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type IsAuditReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuditReq) Reset() {
	*x = IsAuditReq{}
	mi := &file_payrpc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuditReq) ProtoMessage() {}

func (x *IsAuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuditReq.ProtoReflect.Descriptor instead.
func (*IsAuditReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{45}
}

func (x *IsAuditReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IsAuditResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *IsAuditData           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuditResp) Reset() {
	*x = IsAuditResp{}
	mi := &file_payrpc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuditResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuditResp) ProtoMessage() {}

func (x *IsAuditResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuditResp.ProtoReflect.Descriptor instead.
func (*IsAuditResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{46}
}

func (x *IsAuditResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IsAuditResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *IsAuditResp) GetData() *IsAuditData {
	if x != nil {
		return x.Data
	}
	return nil
}

type IsAuditData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuditFlag     bool                   `protobuf:"varint,1,opt,name=auditFlag,proto3" json:"auditFlag,omitempty"`
	AuditMsg      string                 `protobuf:"bytes,2,opt,name=auditMsg,proto3" json:"auditMsg,omitempty"`
	ErrMsg        string                 `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAuditData) Reset() {
	*x = IsAuditData{}
	mi := &file_payrpc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAuditData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuditData) ProtoMessage() {}

func (x *IsAuditData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuditData.ProtoReflect.Descriptor instead.
func (*IsAuditData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{47}
}

func (x *IsAuditData) GetAuditFlag() bool {
	if x != nil {
		return x.AuditFlag
	}
	return false
}

func (x *IsAuditData) GetAuditMsg() string {
	if x != nil {
		return x.AuditMsg
	}
	return ""
}

func (x *IsAuditData) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type FinanceWithDrawReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`       //通道编号
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"` // 提款订单号
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`       //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinanceWithDrawReq) Reset() {
	*x = FinanceWithDrawReq{}
	mi := &file_payrpc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinanceWithDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinanceWithDrawReq) ProtoMessage() {}

func (x *FinanceWithDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinanceWithDrawReq.ProtoReflect.Descriptor instead.
func (*FinanceWithDrawReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{48}
}

func (x *FinanceWithDrawReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FinanceWithDrawReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FinanceWithDrawReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FinanceWithDrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinanceWithDrawResp) Reset() {
	*x = FinanceWithDrawResp{}
	mi := &file_payrpc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinanceWithDrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinanceWithDrawResp) ProtoMessage() {}

func (x *FinanceWithDrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinanceWithDrawResp.ProtoReflect.Descriptor instead.
func (*FinanceWithDrawResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{49}
}

func (x *FinanceWithDrawResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FinanceWithDrawResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *FinanceWithDrawResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DailyReportStatisticsCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     int64                  `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyReportStatisticsCountReq) Reset() {
	*x = DailyReportStatisticsCountReq{}
	mi := &file_payrpc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyReportStatisticsCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyReportStatisticsCountReq) ProtoMessage() {}

func (x *DailyReportStatisticsCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyReportStatisticsCountReq.ProtoReflect.Descriptor instead.
func (*DailyReportStatisticsCountReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{50}
}

func (x *DailyReportStatisticsCountReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DailyReportStatisticsCountReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DailyReportStatisticsCountReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DailyReportStatisticsCountReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DailyReportStatisticsCountResp struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Code          int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DailyReportStatisticsCountData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyReportStatisticsCountResp) Reset() {
	*x = DailyReportStatisticsCountResp{}
	mi := &file_payrpc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyReportStatisticsCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyReportStatisticsCountResp) ProtoMessage() {}

func (x *DailyReportStatisticsCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyReportStatisticsCountResp.ProtoReflect.Descriptor instead.
func (*DailyReportStatisticsCountResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{51}
}

func (x *DailyReportStatisticsCountResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DailyReportStatisticsCountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DailyReportStatisticsCountResp) GetData() *DailyReportStatisticsCountData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DailyReportStatisticsCountData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BetCount            int64                  `protobuf:"varint,1,opt,name=betCount,proto3" json:"betCount,omitempty"`                       //笔数
	BetUserCount        int64                  `protobuf:"varint,2,opt,name=betUserCount,proto3" json:"betUserCount,omitempty"`               //人数
	DepositCount        int64                  `protobuf:"varint,3,opt,name=depositCount,proto3" json:"depositCount,omitempty"`               //充值笔数
	DepositUserCount    int64                  `protobuf:"varint,4,opt,name=depositUserCount,proto3" json:"depositUserCount,omitempty"`       //充值人数
	WithdrawalCount     int64                  `protobuf:"varint,5,opt,name=withdrawalCount,proto3" json:"withdrawalCount,omitempty"`         //提现笔数
	WithdrawalUserCount int64                  `protobuf:"varint,6,opt,name=withdrawalUserCount,proto3" json:"withdrawalUserCount,omitempty"` //提现人数
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DailyReportStatisticsCountData) Reset() {
	*x = DailyReportStatisticsCountData{}
	mi := &file_payrpc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyReportStatisticsCountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyReportStatisticsCountData) ProtoMessage() {}

func (x *DailyReportStatisticsCountData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyReportStatisticsCountData.ProtoReflect.Descriptor instead.
func (*DailyReportStatisticsCountData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{52}
}

func (x *DailyReportStatisticsCountData) GetBetCount() int64 {
	if x != nil {
		return x.BetCount
	}
	return 0
}

func (x *DailyReportStatisticsCountData) GetBetUserCount() int64 {
	if x != nil {
		return x.BetUserCount
	}
	return 0
}

func (x *DailyReportStatisticsCountData) GetDepositCount() int64 {
	if x != nil {
		return x.DepositCount
	}
	return 0
}

func (x *DailyReportStatisticsCountData) GetDepositUserCount() int64 {
	if x != nil {
		return x.DepositUserCount
	}
	return 0
}

func (x *DailyReportStatisticsCountData) GetWithdrawalCount() int64 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *DailyReportStatisticsCountData) GetWithdrawalUserCount() int64 {
	if x != nil {
		return x.WithdrawalUserCount
	}
	return 0
}

type GetUserCoinReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCoinReq) Reset() {
	*x = GetUserCoinReq{}
	mi := &file_payrpc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinReq) ProtoMessage() {}

func (x *GetUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinReq.ProtoReflect.Descriptor instead.
func (*GetUserCoinReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{53}
}

func (x *GetUserCoinReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetUserCoinResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *GetUserCoinData       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCoinResp) Reset() {
	*x = GetUserCoinResp{}
	mi := &file_payrpc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinResp) ProtoMessage() {}

func (x *GetUserCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinResp.ProtoReflect.Descriptor instead.
func (*GetUserCoinResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{54}
}

func (x *GetUserCoinResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserCoinResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserCoinResp) GetData() *GetUserCoinData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserCoinData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coin          float64                `protobuf:"fixed64,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Uid           int64                  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCoinData) Reset() {
	*x = GetUserCoinData{}
	mi := &file_payrpc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoinData) ProtoMessage() {}

func (x *GetUserCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoinData.ProtoReflect.Descriptor instead.
func (*GetUserCoinData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{55}
}

func (x *GetUserCoinData) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *GetUserCoinData) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type CoinRateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortField     []string               `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey       string                 `protobuf:"bytes,4,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinRateReq) Reset() {
	*x = CoinRateReq{}
	mi := &file_payrpc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinRateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinRateReq) ProtoMessage() {}

func (x *CoinRateReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinRateReq.ProtoReflect.Descriptor instead.
func (*CoinRateReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{56}
}

func (x *CoinRateReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *CoinRateReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CoinRateReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *CoinRateReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type CoinRateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *CoinRateData          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinRateResp) Reset() {
	*x = CoinRateResp{}
	mi := &file_payrpc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinRateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinRateResp) ProtoMessage() {}

func (x *CoinRateResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinRateResp.ProtoReflect.Descriptor instead.
func (*CoinRateResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{57}
}

func (x *CoinRateResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CoinRateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CoinRateResp) GetData() *CoinRateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CoinRateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       string                 `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                 `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                 `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                 `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	SortId        string                 `protobuf:"bytes,5,opt,name=sortId,proto3" json:"sortId,omitempty"`
	SortValue     string                 `protobuf:"bytes,6,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	List          []*CoinRateDataItem    `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinRateData) Reset() {
	*x = CoinRateData{}
	mi := &file_payrpc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinRateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinRateData) ProtoMessage() {}

func (x *CoinRateData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinRateData.ProtoReflect.Descriptor instead.
func (*CoinRateData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{58}
}

func (x *CoinRateData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *CoinRateData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *CoinRateData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CoinRateData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *CoinRateData) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *CoinRateData) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *CoinRateData) GetList() []*CoinRateDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type CoinRateDataItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginalCurrency string                 `protobuf:"bytes,2,opt,name=originalCurrency,proto3" json:"originalCurrency,omitempty"` // 原始币种
	Rate             float64                `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`                       // 汇率
	Status           int64                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OperatorName     string                 `protobuf:"bytes,6,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CoinRateDataItem) Reset() {
	*x = CoinRateDataItem{}
	mi := &file_payrpc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinRateDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinRateDataItem) ProtoMessage() {}

func (x *CoinRateDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinRateDataItem.ProtoReflect.Descriptor instead.
func (*CoinRateDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{59}
}

func (x *CoinRateDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CoinRateDataItem) GetOriginalCurrency() string {
	if x != nil {
		return x.OriginalCurrency
	}
	return ""
}

func (x *CoinRateDataItem) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *CoinRateDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CoinRateDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CoinRateDataItem) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

type PagcorDailyTaxReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortField     []string               `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey       string                 `protobuf:"bytes,4,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	Data          *PagcorDailyTaxDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PagcorDailyTaxReq) Reset() {
	*x = PagcorDailyTaxReq{}
	mi := &file_payrpc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagcorDailyTaxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagcorDailyTaxReq) ProtoMessage() {}

func (x *PagcorDailyTaxReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagcorDailyTaxReq.ProtoReflect.Descriptor instead.
func (*PagcorDailyTaxReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{60}
}

func (x *PagcorDailyTaxReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PagcorDailyTaxReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PagcorDailyTaxReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *PagcorDailyTaxReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *PagcorDailyTaxReq) GetData() *PagcorDailyTaxDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type PagcorDailyTaxDataReq struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StartTime           int64                  `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime             int64                  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	TimeType            int32                  `protobuf:"varint,3,opt,name=timeType,proto3" json:"timeType,omitempty"`
	ProviderSubtypeList []int64                `protobuf:"varint,4,rep,packed,name=providerSubtypeList,proto3" json:"providerSubtypeList,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PagcorDailyTaxDataReq) Reset() {
	*x = PagcorDailyTaxDataReq{}
	mi := &file_payrpc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagcorDailyTaxDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagcorDailyTaxDataReq) ProtoMessage() {}

func (x *PagcorDailyTaxDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagcorDailyTaxDataReq.ProtoReflect.Descriptor instead.
func (*PagcorDailyTaxDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{61}
}

func (x *PagcorDailyTaxDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PagcorDailyTaxDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PagcorDailyTaxDataReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *PagcorDailyTaxDataReq) GetProviderSubtypeList() []int64 {
	if x != nil {
		return x.ProviderSubtypeList
	}
	return nil
}

type PagcorDailyTaxResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *PagcorDailyTaxData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PagcorDailyTaxResp) Reset() {
	*x = PagcorDailyTaxResp{}
	mi := &file_payrpc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagcorDailyTaxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagcorDailyTaxResp) ProtoMessage() {}

func (x *PagcorDailyTaxResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagcorDailyTaxResp.ProtoReflect.Descriptor instead.
func (*PagcorDailyTaxResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{62}
}

func (x *PagcorDailyTaxResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PagcorDailyTaxResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PagcorDailyTaxResp) GetData() *PagcorDailyTaxData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PagcorDailyTaxData struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Current       string                    `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                    `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                    `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                    `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	SortId        string                    `protobuf:"bytes,5,opt,name=sortId,proto3" json:"sortId,omitempty"`
	SortValue     string                    `protobuf:"bytes,6,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	List          []*PagcorDailyTaxDataItem `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PagcorDailyTaxData) Reset() {
	*x = PagcorDailyTaxData{}
	mi := &file_payrpc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagcorDailyTaxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagcorDailyTaxData) ProtoMessage() {}

func (x *PagcorDailyTaxData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagcorDailyTaxData.ProtoReflect.Descriptor instead.
func (*PagcorDailyTaxData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{63}
}

func (x *PagcorDailyTaxData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *PagcorDailyTaxData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *PagcorDailyTaxData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *PagcorDailyTaxData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *PagcorDailyTaxData) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *PagcorDailyTaxData) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *PagcorDailyTaxData) GetList() []*PagcorDailyTaxDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type PagcorDailyTaxDataItem struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameProviderId      int64                  `protobuf:"varint,2,opt,name=gameProviderId,proto3" json:"gameProviderId,omitempty"`
	GamePagcorId        int64                  `protobuf:"varint,3,opt,name=gamePagcorId,proto3" json:"gamePagcorId,omitempty"`
	ProviderName        string                 `protobuf:"bytes,4,opt,name=providerName,proto3" json:"providerName,omitempty"`                //厂商名称
	ProviderSubtypeName string                 `protobuf:"bytes,5,opt,name=providerSubtypeName,proto3" json:"providerSubtypeName,omitempty"`  //厂商分类
	PagcorName          string                 `protobuf:"bytes,6,opt,name=pagcorName,proto3" json:"pagcorName,omitempty"`                    //分类名称
	BetAmount           float64                `protobuf:"fixed64,7,opt,name=betAmount,proto3" json:"betAmount,omitempty"`                    //投金额
	ValidBetAmount      float64                `protobuf:"fixed64,8,opt,name=validBetAmount,proto3" json:"validBetAmount,omitempty"`          // 有效金额
	PayoutAmount        float64                `protobuf:"fixed64,9,opt,name=payoutAmount,proto3" json:"payoutAmount,omitempty"`              // 派金额
	WinLoseAmount       float64                `protobuf:"fixed64,10,opt,name=winLoseAmount,proto3" json:"winLoseAmount,omitempty"`           // 负盈利金额
	ValidWinLoseAmount  float64                `protobuf:"fixed64,11,opt,name=validWinLoseAmount,proto3" json:"validWinLoseAmount,omitempty"` //有效负盈利金额
	Rate                string                 `protobuf:"bytes,12,opt,name=rate,proto3" json:"rate,omitempty"`                               //税收比例
	ValidCoinTax        float64                `protobuf:"fixed64,13,opt,name=ValidCoinTax,proto3" json:"ValidCoinTax,omitempty"`             //有效税收金额
	CoinTax             float64                `protobuf:"fixed64,14,opt,name=coinTax,proto3" json:"coinTax,omitempty"`                       //税收金额
	LastOperator        string                 `protobuf:"bytes,15,opt,name=lastOperator,proto3" json:"lastOperator,omitempty"`               //最后操作人
	LastOperationTime   string                 `protobuf:"bytes,16,opt,name=lastOperationTime,proto3" json:"lastOperationTime,omitempty"`     //最后操作时间
	UpdatedAt           int64                  `protobuf:"varint,17,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	TaxRate             float64                `protobuf:"fixed64,18,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PagcorDailyTaxDataItem) Reset() {
	*x = PagcorDailyTaxDataItem{}
	mi := &file_payrpc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagcorDailyTaxDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagcorDailyTaxDataItem) ProtoMessage() {}

func (x *PagcorDailyTaxDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagcorDailyTaxDataItem.ProtoReflect.Descriptor instead.
func (*PagcorDailyTaxDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{64}
}

func (x *PagcorDailyTaxDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetGameProviderId() int64 {
	if x != nil {
		return x.GameProviderId
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetGamePagcorId() int64 {
	if x != nil {
		return x.GamePagcorId
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *PagcorDailyTaxDataItem) GetProviderSubtypeName() string {
	if x != nil {
		return x.ProviderSubtypeName
	}
	return ""
}

func (x *PagcorDailyTaxDataItem) GetPagcorName() string {
	if x != nil {
		return x.PagcorName
	}
	return ""
}

func (x *PagcorDailyTaxDataItem) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetValidBetAmount() float64 {
	if x != nil {
		return x.ValidBetAmount
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetPayoutAmount() float64 {
	if x != nil {
		return x.PayoutAmount
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetWinLoseAmount() float64 {
	if x != nil {
		return x.WinLoseAmount
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetValidWinLoseAmount() float64 {
	if x != nil {
		return x.ValidWinLoseAmount
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *PagcorDailyTaxDataItem) GetValidCoinTax() float64 {
	if x != nil {
		return x.ValidCoinTax
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetCoinTax() float64 {
	if x != nil {
		return x.CoinTax
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetLastOperator() string {
	if x != nil {
		return x.LastOperator
	}
	return ""
}

func (x *PagcorDailyTaxDataItem) GetLastOperationTime() string {
	if x != nil {
		return x.LastOperationTime
	}
	return ""
}

func (x *PagcorDailyTaxDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PagcorDailyTaxDataItem) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

type GetDepositRecordReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Current       int64                    `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data          *GetDepositRecordDataReq `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDepositRecordReq) Reset() {
	*x = GetDepositRecordReq{}
	mi := &file_payrpc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepositRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositRecordReq) ProtoMessage() {}

func (x *GetDepositRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositRecordReq.ProtoReflect.Descriptor instead.
func (*GetDepositRecordReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{65}
}

func (x *GetDepositRecordReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetDepositRecordReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetDepositRecordReq) GetData() *GetDepositRecordDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDepositRecordDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //状态: 0-申请中 1-成功;字典:dic_deposit_record_status
	StartTime     int64                  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDepositRecordDataReq) Reset() {
	*x = GetDepositRecordDataReq{}
	mi := &file_payrpc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepositRecordDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositRecordDataReq) ProtoMessage() {}

func (x *GetDepositRecordDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositRecordDataReq.ProtoReflect.Descriptor instead.
func (*GetDepositRecordDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{66}
}

func (x *GetDepositRecordDataReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDepositRecordDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetDepositRecordDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetDepositRecordResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DepositRecordData     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDepositRecordResp) Reset() {
	*x = GetDepositRecordResp{}
	mi := &file_payrpc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepositRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositRecordResp) ProtoMessage() {}

func (x *GetDepositRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositRecordResp.ProtoReflect.Descriptor instead.
func (*GetDepositRecordResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{67}
}

func (x *GetDepositRecordResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDepositRecordResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDepositRecordResp) GetData() *DepositRecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositRecordData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Current       string                   `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                   `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                   `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                   `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	SortId        string                   `protobuf:"bytes,5,opt,name=sortId,proto3" json:"sortId,omitempty"`
	SortValue     string                   `protobuf:"bytes,6,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	List          []*DepositRecordDataItem `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositRecordData) Reset() {
	*x = DepositRecordData{}
	mi := &file_payrpc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordData) ProtoMessage() {}

func (x *DepositRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordData.ProtoReflect.Descriptor instead.
func (*DepositRecordData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{68}
}

func (x *DepositRecordData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *DepositRecordData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *DepositRecordData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DepositRecordData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *DepositRecordData) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *DepositRecordData) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *DepositRecordData) GetList() []*DepositRecordDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type DepositRecordDataItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatName      string                 `protobuf:"bytes,1,opt,name=platName,proto3" json:"platName,omitempty"`         // 支付通道名称
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`           // 订单号
	PayAmount     string                 `protobuf:"bytes,3,opt,name=payAmount,proto3" json:"payAmount,omitempty"`       //充值金额
	PayAddress    string                 `protobuf:"bytes,4,opt,name=payAddress,proto3" json:"payAddress,omitempty"`     //加密地址
	ExchangeRate  string                 `protobuf:"bytes,5,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"` //汇率
	RealAmount    string                 `protobuf:"bytes,6,opt,name=realAmount,proto3" json:"realAmount,omitempty"`     //到账金额
	Status        int64                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`            //状态
	CreatedAt     int64                  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`      //创建时间
	Id            int64                  `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositRecordDataItem) Reset() {
	*x = DepositRecordDataItem{}
	mi := &file_payrpc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordDataItem) ProtoMessage() {}

func (x *DepositRecordDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordDataItem.ProtoReflect.Descriptor instead.
func (*DepositRecordDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{69}
}

func (x *DepositRecordDataItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *DepositRecordDataItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositRecordDataItem) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *DepositRecordDataItem) GetPayAddress() string {
	if x != nil {
		return x.PayAddress
	}
	return ""
}

func (x *DepositRecordDataItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *DepositRecordDataItem) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *DepositRecordDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DepositRecordDataItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DepositRecordDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetFrontWithdrawalRecordReq struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Current       int64                            `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data          *GetFrontWithdrawalRecordDataReq `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFrontWithdrawalRecordReq) Reset() {
	*x = GetFrontWithdrawalRecordReq{}
	mi := &file_payrpc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFrontWithdrawalRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrontWithdrawalRecordReq) ProtoMessage() {}

func (x *GetFrontWithdrawalRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrontWithdrawalRecordReq.ProtoReflect.Descriptor instead.
func (*GetFrontWithdrawalRecordReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{70}
}

func (x *GetFrontWithdrawalRecordReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetFrontWithdrawalRecordReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetFrontWithdrawalRecordReq) GetData() *GetFrontWithdrawalRecordDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetFrontWithdrawalRecordDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` //状态: 0-申请中 1-成功;字典:dic_deposit_record_status
	StartTime     int64                  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFrontWithdrawalRecordDataReq) Reset() {
	*x = GetFrontWithdrawalRecordDataReq{}
	mi := &file_payrpc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFrontWithdrawalRecordDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrontWithdrawalRecordDataReq) ProtoMessage() {}

func (x *GetFrontWithdrawalRecordDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrontWithdrawalRecordDataReq.ProtoReflect.Descriptor instead.
func (*GetFrontWithdrawalRecordDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{71}
}

func (x *GetFrontWithdrawalRecordDataReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetFrontWithdrawalRecordDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetFrontWithdrawalRecordDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetFrontWithdrawalRecordResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Code          int32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *FrontWithdrawalRecordData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFrontWithdrawalRecordResp) Reset() {
	*x = GetFrontWithdrawalRecordResp{}
	mi := &file_payrpc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFrontWithdrawalRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrontWithdrawalRecordResp) ProtoMessage() {}

func (x *GetFrontWithdrawalRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrontWithdrawalRecordResp.ProtoReflect.Descriptor instead.
func (*GetFrontWithdrawalRecordResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{72}
}

func (x *GetFrontWithdrawalRecordResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetFrontWithdrawalRecordResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFrontWithdrawalRecordResp) GetData() *FrontWithdrawalRecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FrontWithdrawalRecordData struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Current       string                           `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                           `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                           `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                           `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	SortId        string                           `protobuf:"bytes,5,opt,name=sortId,proto3" json:"sortId,omitempty"`
	SortValue     string                           `protobuf:"bytes,6,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	List          []*FrontWithdrawalRecordDataItem `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrontWithdrawalRecordData) Reset() {
	*x = FrontWithdrawalRecordData{}
	mi := &file_payrpc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrontWithdrawalRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontWithdrawalRecordData) ProtoMessage() {}

func (x *FrontWithdrawalRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontWithdrawalRecordData.ProtoReflect.Descriptor instead.
func (*FrontWithdrawalRecordData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{73}
}

func (x *FrontWithdrawalRecordData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *FrontWithdrawalRecordData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *FrontWithdrawalRecordData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *FrontWithdrawalRecordData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *FrontWithdrawalRecordData) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *FrontWithdrawalRecordData) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *FrontWithdrawalRecordData) GetList() []*FrontWithdrawalRecordDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type FrontWithdrawalRecordDataItem struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OrderId           string                 `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`                     // 订单号
	PlatName          string                 `protobuf:"bytes,2,opt,name=platName,proto3" json:"platName,omitempty"`                   // 支付通道名称
	Code              string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                           // 支付通道编码
	WithdrawalAddress string                 `protobuf:"bytes,4,opt,name=withdrawalAddress,proto3" json:"withdrawalAddress,omitempty"` //提款地址
	WithdrawalAmount  string                 `protobuf:"bytes,5,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"`   //提款金额
	ExchangeRate      string                 `protobuf:"bytes,6,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`           //汇率
	MainNetFees       float64                `protobuf:"fixed64,7,opt,name=mainNetFees,proto3" json:"mainNetFees,omitempty"`           //主网费
	RealAmount        string                 `protobuf:"bytes,8,opt,name=realAmount,proto3" json:"realAmount,omitempty"`               //到账金额
	Status            int64                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                      //状态: 0-申请中，1-成功，2-失败;字典:dic_withdrawal_record_status
	CreatedAt         int64                  `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`               //创建时间
	Id                int64                  `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FrontWithdrawalRecordDataItem) Reset() {
	*x = FrontWithdrawalRecordDataItem{}
	mi := &file_payrpc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrontWithdrawalRecordDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontWithdrawalRecordDataItem) ProtoMessage() {}

func (x *FrontWithdrawalRecordDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontWithdrawalRecordDataItem.ProtoReflect.Descriptor instead.
func (*FrontWithdrawalRecordDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{74}
}

func (x *FrontWithdrawalRecordDataItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetWithdrawalAddress() string {
	if x != nil {
		return x.WithdrawalAddress
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetWithdrawalAmount() string {
	if x != nil {
		return x.WithdrawalAmount
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetMainNetFees() float64 {
	if x != nil {
		return x.MainNetFees
	}
	return 0
}

func (x *FrontWithdrawalRecordDataItem) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *FrontWithdrawalRecordDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FrontWithdrawalRecordDataItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FrontWithdrawalRecordDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TotalSummaryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalSummaryReq) Reset() {
	*x = TotalSummaryReq{}
	mi := &file_payrpc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalSummaryReq) ProtoMessage() {}

func (x *TotalSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalSummaryReq.ProtoReflect.Descriptor instead.
func (*TotalSummaryReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{75}
}

func (x *TotalSummaryReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TotalSummaryReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TotalSummaryReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TotalSummaryReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TotalSummaryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *TotalSummaryData      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalSummaryResp) Reset() {
	*x = TotalSummaryResp{}
	mi := &file_payrpc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalSummaryResp) ProtoMessage() {}

func (x *TotalSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalSummaryResp.ProtoReflect.Descriptor instead.
func (*TotalSummaryResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{76}
}

func (x *TotalSummaryResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TotalSummaryResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TotalSummaryResp) GetData() *TotalSummaryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TotalSummaryData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CoinDeposit          string                 `protobuf:"bytes,1,opt,name=coinDeposit,proto3" json:"coinDeposit,omitempty"`
	CoinWithdrawal       string                 `protobuf:"bytes,2,opt,name=coinWithdrawal,proto3" json:"coinWithdrawal,omitempty"`
	CoinWithdrawalReally string                 `protobuf:"bytes,3,opt,name=coinWithdrawalReally,proto3" json:"coinWithdrawalReally,omitempty"`
	Count                string                 `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	Profit               string                 `protobuf:"bytes,5,opt,name=profit,proto3" json:"profit,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TotalSummaryData) Reset() {
	*x = TotalSummaryData{}
	mi := &file_payrpc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalSummaryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalSummaryData) ProtoMessage() {}

func (x *TotalSummaryData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalSummaryData.ProtoReflect.Descriptor instead.
func (*TotalSummaryData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{77}
}

func (x *TotalSummaryData) GetCoinDeposit() string {
	if x != nil {
		return x.CoinDeposit
	}
	return ""
}

func (x *TotalSummaryData) GetCoinWithdrawal() string {
	if x != nil {
		return x.CoinWithdrawal
	}
	return ""
}

func (x *TotalSummaryData) GetCoinWithdrawalReally() string {
	if x != nil {
		return x.CoinWithdrawalReally
	}
	return ""
}

func (x *TotalSummaryData) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *TotalSummaryData) GetProfit() string {
	if x != nil {
		return x.Profit
	}
	return ""
}

type DepositAndWithdrawalChartReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	GameListId    int64                  `protobuf:"varint,5,opt,name=gameListId,proto3" json:"gameListId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositAndWithdrawalChartReq) Reset() {
	*x = DepositAndWithdrawalChartReq{}
	mi := &file_payrpc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositAndWithdrawalChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAndWithdrawalChartReq) ProtoMessage() {}

func (x *DepositAndWithdrawalChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAndWithdrawalChartReq.ProtoReflect.Descriptor instead.
func (*DepositAndWithdrawalChartReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{78}
}

func (x *DepositAndWithdrawalChartReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DepositAndWithdrawalChartReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DepositAndWithdrawalChartReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DepositAndWithdrawalChartReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DepositAndWithdrawalChartReq) GetGameListId() int64 {
	if x != nil {
		return x.GameListId
	}
	return 0
}

type DepositAndWithdrawalChartResp struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Code          int32                              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DepositAndWithdrawalChartDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositAndWithdrawalChartResp) Reset() {
	*x = DepositAndWithdrawalChartResp{}
	mi := &file_payrpc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositAndWithdrawalChartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAndWithdrawalChartResp) ProtoMessage() {}

func (x *DepositAndWithdrawalChartResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAndWithdrawalChartResp.ProtoReflect.Descriptor instead.
func (*DepositAndWithdrawalChartResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{79}
}

func (x *DepositAndWithdrawalChartResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositAndWithdrawalChartResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositAndWithdrawalChartResp) GetData() *DepositAndWithdrawalChartDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositAndWithdrawalChartDataResp struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Deposit       []*DepositAndWithdrawalChartDataItem `protobuf:"bytes,1,rep,name=deposit,proto3" json:"deposit,omitempty"`
	Withdrawal    []*DepositAndWithdrawalChartDataItem `protobuf:"bytes,2,rep,name=withdrawal,proto3" json:"withdrawal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositAndWithdrawalChartDataResp) Reset() {
	*x = DepositAndWithdrawalChartDataResp{}
	mi := &file_payrpc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositAndWithdrawalChartDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAndWithdrawalChartDataResp) ProtoMessage() {}

func (x *DepositAndWithdrawalChartDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAndWithdrawalChartDataResp.ProtoReflect.Descriptor instead.
func (*DepositAndWithdrawalChartDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{80}
}

func (x *DepositAndWithdrawalChartDataResp) GetDeposit() []*DepositAndWithdrawalChartDataItem {
	if x != nil {
		return x.Deposit
	}
	return nil
}

func (x *DepositAndWithdrawalChartDataResp) GetWithdrawal() []*DepositAndWithdrawalChartDataItem {
	if x != nil {
		return x.Withdrawal
	}
	return nil
}

type DepositAndWithdrawalChartDataItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin          string                 `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositAndWithdrawalChartDataItem) Reset() {
	*x = DepositAndWithdrawalChartDataItem{}
	mi := &file_payrpc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositAndWithdrawalChartDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAndWithdrawalChartDataItem) ProtoMessage() {}

func (x *DepositAndWithdrawalChartDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAndWithdrawalChartDataItem.ProtoReflect.Descriptor instead.
func (*DepositAndWithdrawalChartDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{81}
}

func (x *DepositAndWithdrawalChartDataItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DepositAndWithdrawalChartDataItem) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type DailyConversionReportListReq struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Current       int64                             `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortField     []string                          `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey       string                            `protobuf:"bytes,4,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	Data          *DailyConversionReportListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyConversionReportListReq) Reset() {
	*x = DailyConversionReportListReq{}
	mi := &file_payrpc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportListReq) ProtoMessage() {}

func (x *DailyConversionReportListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportListReq.ProtoReflect.Descriptor instead.
func (*DailyConversionReportListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{82}
}

func (x *DailyConversionReportListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DailyConversionReportListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DailyConversionReportListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *DailyConversionReportListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *DailyConversionReportListReq) GetData() *DailyConversionReportListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type DailyConversionReportListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     int64                  `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyConversionReportListDataReq) Reset() {
	*x = DailyConversionReportListDataReq{}
	mi := &file_payrpc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportListDataReq) ProtoMessage() {}

func (x *DailyConversionReportListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportListDataReq.ProtoReflect.Descriptor instead.
func (*DailyConversionReportListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{83}
}

func (x *DailyConversionReportListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DailyConversionReportListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DailyConversionReportListResp struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Code          int32                              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DailyConversionReportListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyConversionReportListResp) Reset() {
	*x = DailyConversionReportListResp{}
	mi := &file_payrpc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportListResp) ProtoMessage() {}

func (x *DailyConversionReportListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportListResp.ProtoReflect.Descriptor instead.
func (*DailyConversionReportListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{84}
}

func (x *DailyConversionReportListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DailyConversionReportListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DailyConversionReportListResp) GetData() *DailyConversionReportListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type DailyConversionReportListDataResp struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Current       string                               `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                               `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                               `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                               `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	SortId        string                               `protobuf:"bytes,5,opt,name=sortId,proto3" json:"sortId,omitempty"`
	SortValue     string                               `protobuf:"bytes,6,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	List          []*DailyConversionReportListDataItem `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyConversionReportListDataResp) Reset() {
	*x = DailyConversionReportListDataResp{}
	mi := &file_payrpc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportListDataResp) ProtoMessage() {}

func (x *DailyConversionReportListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportListDataResp.ProtoReflect.Descriptor instead.
func (*DailyConversionReportListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{85}
}

func (x *DailyConversionReportListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *DailyConversionReportListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *DailyConversionReportListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DailyConversionReportListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *DailyConversionReportListDataResp) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *DailyConversionReportListDataResp) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *DailyConversionReportListDataResp) GetList() []*DailyConversionReportListDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type DailyConversionReportListDataItem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConversionRates    string                 `protobuf:"bytes,2,opt,name=conversionRates,proto3" json:"conversionRates,omitempty"`
	DepositCoin        string                 `protobuf:"bytes,3,opt,name=depositCoin,proto3" json:"depositCoin,omitempty"`
	DepositCount       int64                  `protobuf:"varint,4,opt,name=depositCount,proto3" json:"depositCount,omitempty"`
	DepositNum         int64                  `protobuf:"varint,5,opt,name=depositNum,proto3" json:"depositNum,omitempty"`
	FirstDepositCoin   string                 `protobuf:"bytes,6,opt,name=firstDepositCoin,proto3" json:"firstDepositCoin,omitempty"`
	FirstDepositCount  int64                  `protobuf:"varint,7,opt,name=firstDepositCount,proto3" json:"firstDepositCount,omitempty"`
	Profit             string                 `protobuf:"bytes,8,opt,name=profit,proto3" json:"profit,omitempty"`
	RegisteredNum      int64                  `protobuf:"varint,9,opt,name=registeredNum,proto3" json:"registeredNum,omitempty"`
	SecondDepositCoin  string                 `protobuf:"bytes,10,opt,name=secondDepositCoin,proto3" json:"secondDepositCoin,omitempty"`
	SecondDepositCount int64                  `protobuf:"varint,11,opt,name=secondDepositCount,proto3" json:"secondDepositCount,omitempty"`
	WithdrawalCoin     string                 `protobuf:"bytes,12,opt,name=withdrawalCoin,proto3" json:"withdrawalCoin,omitempty"`
	WithdrawalCount    int64                  `protobuf:"varint,13,opt,name=withdrawalCount,proto3" json:"withdrawalCount,omitempty"`
	WithdrawalNum      int64                  `protobuf:"varint,14,opt,name=withdrawalNum,proto3" json:"withdrawalNum,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DailyConversionReportListDataItem) Reset() {
	*x = DailyConversionReportListDataItem{}
	mi := &file_payrpc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportListDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportListDataItem) ProtoMessage() {}

func (x *DailyConversionReportListDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportListDataItem.ProtoReflect.Descriptor instead.
func (*DailyConversionReportListDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{86}
}

func (x *DailyConversionReportListDataItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetConversionRates() string {
	if x != nil {
		return x.ConversionRates
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetDepositCoin() string {
	if x != nil {
		return x.DepositCoin
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetDepositCount() int64 {
	if x != nil {
		return x.DepositCount
	}
	return 0
}

func (x *DailyConversionReportListDataItem) GetDepositNum() int64 {
	if x != nil {
		return x.DepositNum
	}
	return 0
}

func (x *DailyConversionReportListDataItem) GetFirstDepositCoin() string {
	if x != nil {
		return x.FirstDepositCoin
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetFirstDepositCount() int64 {
	if x != nil {
		return x.FirstDepositCount
	}
	return 0
}

func (x *DailyConversionReportListDataItem) GetProfit() string {
	if x != nil {
		return x.Profit
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetRegisteredNum() int64 {
	if x != nil {
		return x.RegisteredNum
	}
	return 0
}

func (x *DailyConversionReportListDataItem) GetSecondDepositCoin() string {
	if x != nil {
		return x.SecondDepositCoin
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetSecondDepositCount() int64 {
	if x != nil {
		return x.SecondDepositCount
	}
	return 0
}

func (x *DailyConversionReportListDataItem) GetWithdrawalCoin() string {
	if x != nil {
		return x.WithdrawalCoin
	}
	return ""
}

func (x *DailyConversionReportListDataItem) GetWithdrawalCount() int64 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *DailyConversionReportListDataItem) GetWithdrawalNum() int64 {
	if x != nil {
		return x.WithdrawalNum
	}
	return 0
}

type DailyConversionReportStatisticsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     int64                  `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyConversionReportStatisticsReq) Reset() {
	*x = DailyConversionReportStatisticsReq{}
	mi := &file_payrpc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportStatisticsReq) ProtoMessage() {}

func (x *DailyConversionReportStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportStatisticsReq.ProtoReflect.Descriptor instead.
func (*DailyConversionReportStatisticsReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{87}
}

func (x *DailyConversionReportStatisticsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DailyConversionReportStatisticsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DailyConversionReportStatisticsResp struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Code          int32                                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DailyConversionReportStatisticsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyConversionReportStatisticsResp) Reset() {
	*x = DailyConversionReportStatisticsResp{}
	mi := &file_payrpc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportStatisticsResp) ProtoMessage() {}

func (x *DailyConversionReportStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportStatisticsResp.ProtoReflect.Descriptor instead.
func (*DailyConversionReportStatisticsResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{88}
}

func (x *DailyConversionReportStatisticsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DailyConversionReportStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DailyConversionReportStatisticsResp) GetData() *DailyConversionReportStatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DailyConversionReportStatisticsData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RegisteredNum  int64                  `protobuf:"varint,1,opt,name=registeredNum,proto3" json:"registeredNum,omitempty"`
	DepositCoin    string                 `protobuf:"bytes,2,opt,name=depositCoin,proto3" json:"depositCoin,omitempty"`
	Profit         string                 `protobuf:"bytes,3,opt,name=profit,proto3" json:"profit,omitempty"`
	WithdrawalCoin string                 `protobuf:"bytes,4,opt,name=withdrawalCoin,proto3" json:"withdrawalCoin,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DailyConversionReportStatisticsData) Reset() {
	*x = DailyConversionReportStatisticsData{}
	mi := &file_payrpc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyConversionReportStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyConversionReportStatisticsData) ProtoMessage() {}

func (x *DailyConversionReportStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyConversionReportStatisticsData.ProtoReflect.Descriptor instead.
func (*DailyConversionReportStatisticsData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{89}
}

func (x *DailyConversionReportStatisticsData) GetRegisteredNum() int64 {
	if x != nil {
		return x.RegisteredNum
	}
	return 0
}

func (x *DailyConversionReportStatisticsData) GetDepositCoin() string {
	if x != nil {
		return x.DepositCoin
	}
	return ""
}

func (x *DailyConversionReportStatisticsData) GetProfit() string {
	if x != nil {
		return x.Profit
	}
	return ""
}

func (x *DailyConversionReportStatisticsData) GetWithdrawalCoin() string {
	if x != nil {
		return x.WithdrawalCoin
	}
	return ""
}

type PlatBetCoinChartReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlatBetCoinChartReq) Reset() {
	*x = PlatBetCoinChartReq{}
	mi := &file_payrpc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlatBetCoinChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatBetCoinChartReq) ProtoMessage() {}

func (x *PlatBetCoinChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatBetCoinChartReq.ProtoReflect.Descriptor instead.
func (*PlatBetCoinChartReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{90}
}

func (x *PlatBetCoinChartReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlatBetCoinChartReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlatBetCoinChartReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PlatBetCoinChartReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type PlatBetCoinChartResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Code          int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          []*PlatBetCoinChartData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlatBetCoinChartResp) Reset() {
	*x = PlatBetCoinChartResp{}
	mi := &file_payrpc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlatBetCoinChartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatBetCoinChartResp) ProtoMessage() {}

func (x *PlatBetCoinChartResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatBetCoinChartResp.ProtoReflect.Descriptor instead.
func (*PlatBetCoinChartResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{91}
}

func (x *PlatBetCoinChartResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlatBetCoinChartResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlatBetCoinChartResp) GetData() []*PlatBetCoinChartData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlatBetCoinChartData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin          string                 `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlatBetCoinChartData) Reset() {
	*x = PlatBetCoinChartData{}
	mi := &file_payrpc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlatBetCoinChartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatBetCoinChartData) ProtoMessage() {}

func (x *PlatBetCoinChartData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatBetCoinChartData.ProtoReflect.Descriptor instead.
func (*PlatBetCoinChartData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{92}
}

func (x *PlatBetCoinChartData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlatBetCoinChartData) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type WalletOutTransferReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                   //用户ID
	Amount        float64                `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`            // 金额
	TransferType  int32                  `protobuf:"varint,3,opt,name=transferType,proto3" json:"transferType,omitempty"` //类型  1==转入  3==转出
	ReferID       int64                  `protobuf:"varint,4,opt,name=referID,proto3" json:"referID,omitempty"`           //关联ID
	PlatID        int64                  `protobuf:"varint,5,opt,name=platID,proto3" json:"platID,omitempty"`             // 平台ID
	GameID        int64                  `protobuf:"varint,6,opt,name=gameID,proto3" json:"gameID,omitempty"`             // 游戏ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletOutTransferReq) Reset() {
	*x = WalletOutTransferReq{}
	mi := &file_payrpc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletOutTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletOutTransferReq) ProtoMessage() {}

func (x *WalletOutTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletOutTransferReq.ProtoReflect.Descriptor instead.
func (*WalletOutTransferReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{93}
}

func (x *WalletOutTransferReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WalletOutTransferReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WalletOutTransferReq) GetTransferType() int32 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *WalletOutTransferReq) GetReferID() int64 {
	if x != nil {
		return x.ReferID
	}
	return 0
}

func (x *WalletOutTransferReq) GetPlatID() int64 {
	if x != nil {
		return x.PlatID
	}
	return 0
}

func (x *WalletOutTransferReq) GetGameID() int64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

type WalletOutTransferResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletOutTransferResp) Reset() {
	*x = WalletOutTransferResp{}
	mi := &file_payrpc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletOutTransferResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletOutTransferResp) ProtoMessage() {}

func (x *WalletOutTransferResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletOutTransferResp.ProtoReflect.Descriptor instead.
func (*WalletOutTransferResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{94}
}

func (x *WalletOutTransferResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WalletOutTransferResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WalletOutTransferResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ReplenishmentOrderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mark          string                 `protobuf:"bytes,2,opt,name=mark,proto3" json:"mark,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplenishmentOrderReq) Reset() {
	*x = ReplenishmentOrderReq{}
	mi := &file_payrpc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplenishmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplenishmentOrderReq) ProtoMessage() {}

func (x *ReplenishmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplenishmentOrderReq.ProtoReflect.Descriptor instead.
func (*ReplenishmentOrderReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{95}
}

func (x *ReplenishmentOrderReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplenishmentOrderReq) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *ReplenishmentOrderReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ReplenishmentOrderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          bool                   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplenishmentOrderResp) Reset() {
	*x = ReplenishmentOrderResp{}
	mi := &file_payrpc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplenishmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplenishmentOrderResp) ProtoMessage() {}

func (x *ReplenishmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplenishmentOrderResp.ProtoReflect.Descriptor instead.
func (*ReplenishmentOrderResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{96}
}

func (x *ReplenishmentOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReplenishmentOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReplenishmentOrderResp) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type WithdrawalListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                 `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string               `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *WithdrawalListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalListReq) Reset() {
	*x = WithdrawalListReq{}
	mi := &file_payrpc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalListReq) ProtoMessage() {}

func (x *WithdrawalListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalListReq.ProtoReflect.Descriptor instead.
func (*WithdrawalListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{97}
}

func (x *WithdrawalListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WithdrawalListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WithdrawalListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *WithdrawalListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *WithdrawalListReq) GetData() *WithdrawalListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type WithdrawalListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Mobile        string                 `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	AdminUsername string                 `protobuf:"bytes,5,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
	StartTime     int64                  `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Code          string                 `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	PayType       int64                  `protobuf:"varint,9,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalListDataReq) Reset() {
	*x = WithdrawalListDataReq{}
	mi := &file_payrpc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalListDataReq) ProtoMessage() {}

func (x *WithdrawalListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalListDataReq.ProtoReflect.Descriptor instead.
func (*WithdrawalListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{98}
}

func (x *WithdrawalListDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WithdrawalListDataReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WithdrawalListDataReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WithdrawalListDataReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WithdrawalListDataReq) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *WithdrawalListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WithdrawalListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *WithdrawalListDataReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawalListDataReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type WithdrawalListResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Code          int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *WithdrawalListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalListResp) Reset() {
	*x = WithdrawalListResp{}
	mi := &file_payrpc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalListResp) ProtoMessage() {}

func (x *WithdrawalListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalListResp.ProtoReflect.Descriptor instead.
func (*WithdrawalListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{99}
}

func (x *WithdrawalListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawalListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawalListResp) GetData() *WithdrawalListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type WithdrawalListDataResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Current       string                    `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                    `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                    `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                    `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*WithdrawalListDataItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalListDataResp) Reset() {
	*x = WithdrawalListDataResp{}
	mi := &file_payrpc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalListDataResp) ProtoMessage() {}

func (x *WithdrawalListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalListDataResp.ProtoReflect.Descriptor instead.
func (*WithdrawalListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{100}
}

func (x *WithdrawalListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *WithdrawalListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *WithdrawalListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *WithdrawalListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *WithdrawalListDataResp) GetList() []*WithdrawalListDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type WithdrawalListDataItem struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AdminUid                int64                  `protobuf:"varint,1,opt,name=adminUid,proto3" json:"adminUid,omitempty"`
	AdminUsername           string                 `protobuf:"bytes,2,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
	AuditType               int64                  `protobuf:"varint,3,opt,name=auditType,proto3" json:"auditType,omitempty"`
	CategoryTransfer        int64                  `protobuf:"varint,4,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"`
	CategoryTransferName    string                 `protobuf:"bytes,5,opt,name=categoryTransferName,proto3" json:"categoryTransferName,omitempty"`
	Code                    string                 `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	CoinBefore              string                 `protobuf:"bytes,7,opt,name=coinBefore,proto3" json:"coinBefore,omitempty"`
	CreatedAt               int64                  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CustomizeNoticeContent  string                 `protobuf:"bytes,9,opt,name=customizeNoticeContent,proto3" json:"customizeNoticeContent,omitempty"`
	ExchangeRate            string                 `protobuf:"bytes,10,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	FinanceOperatorAt       int64                  `protobuf:"varint,11,opt,name=financeOperatorAt,proto3" json:"financeOperatorAt,omitempty"`
	Id                      string                 `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
	MainNetFees             string                 `protobuf:"bytes,13,opt,name=mainNetFees,proto3" json:"mainNetFees,omitempty"`
	Mark                    string                 `protobuf:"bytes,14,opt,name=mark,proto3" json:"mark,omitempty"`
	MerchantCategory        int64                  `protobuf:"varint,15,opt,name=merchantCategory,proto3" json:"merchantCategory,omitempty"`
	MerchantId              int64                  `protobuf:"varint,16,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	MerchantName            string                 `protobuf:"bytes,17,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	Mobile                  string                 `protobuf:"bytes,18,opt,name=mobile,proto3" json:"mobile,omitempty"`
	PlatName                string                 `protobuf:"bytes,19,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName            string                 `protobuf:"bytes,20,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	RealAmount              string                 `protobuf:"bytes,21,opt,name=realAmount,proto3" json:"realAmount,omitempty"`
	Status                  int64                  `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
	Uid                     int64                  `protobuf:"varint,23,opt,name=uid,proto3" json:"uid,omitempty"`
	UpdatedAt               int64                  `protobuf:"varint,24,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UserLevel               string                 `protobuf:"bytes,25,opt,name=userLevel,proto3" json:"userLevel,omitempty"`
	Username                string                 `protobuf:"bytes,26,opt,name=username,proto3" json:"username,omitempty"`
	WithdrawalAddress       string                 `protobuf:"bytes,27,opt,name=withdrawalAddress,proto3" json:"withdrawalAddress,omitempty"`
	WithdrawalAdminUsername string                 `protobuf:"bytes,28,opt,name=withdrawalAdminUsername,proto3" json:"withdrawalAdminUsername,omitempty"`
	WithdrawalAmount        string                 `protobuf:"bytes,29,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"`
	PlatTypeName            string                 `protobuf:"bytes,30,opt,name=platTypeName,proto3" json:"platTypeName,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WithdrawalListDataItem) Reset() {
	*x = WithdrawalListDataItem{}
	mi := &file_payrpc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalListDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalListDataItem) ProtoMessage() {}

func (x *WithdrawalListDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalListDataItem.ProtoReflect.Descriptor instead.
func (*WithdrawalListDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{101}
}

func (x *WithdrawalListDataItem) GetAdminUid() int64 {
	if x != nil {
		return x.AdminUid
	}
	return 0
}

func (x *WithdrawalListDataItem) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *WithdrawalListDataItem) GetAuditType() int64 {
	if x != nil {
		return x.AuditType
	}
	return 0
}

func (x *WithdrawalListDataItem) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *WithdrawalListDataItem) GetCategoryTransferName() string {
	if x != nil {
		return x.CategoryTransferName
	}
	return ""
}

func (x *WithdrawalListDataItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawalListDataItem) GetCoinBefore() string {
	if x != nil {
		return x.CoinBefore
	}
	return ""
}

func (x *WithdrawalListDataItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WithdrawalListDataItem) GetCustomizeNoticeContent() string {
	if x != nil {
		return x.CustomizeNoticeContent
	}
	return ""
}

func (x *WithdrawalListDataItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *WithdrawalListDataItem) GetFinanceOperatorAt() int64 {
	if x != nil {
		return x.FinanceOperatorAt
	}
	return 0
}

func (x *WithdrawalListDataItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WithdrawalListDataItem) GetMainNetFees() string {
	if x != nil {
		return x.MainNetFees
	}
	return ""
}

func (x *WithdrawalListDataItem) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *WithdrawalListDataItem) GetMerchantCategory() int64 {
	if x != nil {
		return x.MerchantCategory
	}
	return 0
}

func (x *WithdrawalListDataItem) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *WithdrawalListDataItem) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *WithdrawalListDataItem) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WithdrawalListDataItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *WithdrawalListDataItem) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *WithdrawalListDataItem) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *WithdrawalListDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WithdrawalListDataItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WithdrawalListDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *WithdrawalListDataItem) GetUserLevel() string {
	if x != nil {
		return x.UserLevel
	}
	return ""
}

func (x *WithdrawalListDataItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WithdrawalListDataItem) GetWithdrawalAddress() string {
	if x != nil {
		return x.WithdrawalAddress
	}
	return ""
}

func (x *WithdrawalListDataItem) GetWithdrawalAdminUsername() string {
	if x != nil {
		return x.WithdrawalAdminUsername
	}
	return ""
}

func (x *WithdrawalListDataItem) GetWithdrawalAmount() string {
	if x != nil {
		return x.WithdrawalAmount
	}
	return ""
}

func (x *WithdrawalListDataItem) GetPlatTypeName() string {
	if x != nil {
		return x.PlatTypeName
	}
	return ""
}

type WithdrawalStatisticsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Mobile        string                 `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	AdminUsername string                 `protobuf:"bytes,5,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
	StartTime     int64                  `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Code          string                 `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	PayType       int64                  `protobuf:"varint,9,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalStatisticsReq) Reset() {
	*x = WithdrawalStatisticsReq{}
	mi := &file_payrpc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalStatisticsReq) ProtoMessage() {}

func (x *WithdrawalStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalStatisticsReq.ProtoReflect.Descriptor instead.
func (*WithdrawalStatisticsReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{102}
}

func (x *WithdrawalStatisticsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WithdrawalStatisticsReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WithdrawalStatisticsReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *WithdrawalStatisticsReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WithdrawalStatisticsReq) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *WithdrawalStatisticsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WithdrawalStatisticsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *WithdrawalStatisticsReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawalStatisticsReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type WithdrawalStatisticsResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *WithdrawalStatisticsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalStatisticsResp) Reset() {
	*x = WithdrawalStatisticsResp{}
	mi := &file_payrpc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalStatisticsResp) ProtoMessage() {}

func (x *WithdrawalStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalStatisticsResp.ProtoReflect.Descriptor instead.
func (*WithdrawalStatisticsResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{103}
}

func (x *WithdrawalStatisticsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawalStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawalStatisticsResp) GetData() *WithdrawalStatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type WithdrawalStatisticsData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CoinWithdrawal       string                 `protobuf:"bytes,1,opt,name=coinWithdrawal,proto3" json:"coinWithdrawal,omitempty"`
	CoinWithdrawalReally string                 `protobuf:"bytes,2,opt,name=coinWithdrawalReally,proto3" json:"coinWithdrawalReally,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WithdrawalStatisticsData) Reset() {
	*x = WithdrawalStatisticsData{}
	mi := &file_payrpc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalStatisticsData) ProtoMessage() {}

func (x *WithdrawalStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalStatisticsData.ProtoReflect.Descriptor instead.
func (*WithdrawalStatisticsData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{104}
}

func (x *WithdrawalStatisticsData) GetCoinWithdrawal() string {
	if x != nil {
		return x.CoinWithdrawal
	}
	return ""
}

func (x *WithdrawalStatisticsData) GetCoinWithdrawalReally() string {
	if x != nil {
		return x.CoinWithdrawalReally
	}
	return ""
}

type DepositRecordListReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Current       int64                     `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                     `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                    `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                  `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *DepositRecordListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositRecordListReq) Reset() {
	*x = DepositRecordListReq{}
	mi := &file_payrpc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordListReq) ProtoMessage() {}

func (x *DepositRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordListReq.ProtoReflect.Descriptor instead.
func (*DepositRecordListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{105}
}

func (x *DepositRecordListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DepositRecordListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DepositRecordListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *DepositRecordListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *DepositRecordListReq) GetData() *DepositRecordListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositRecordListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"` // 充值类型
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`         //充值通道
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	StartTime     int64                  `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
	PayType       int64                  `protobuf:"varint,8,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositRecordListDataReq) Reset() {
	*x = DepositRecordListDataReq{}
	mi := &file_payrpc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordListDataReq) ProtoMessage() {}

func (x *DepositRecordListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordListDataReq.ProtoReflect.Descriptor instead.
func (*DepositRecordListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{106}
}

func (x *DepositRecordListDataReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DepositRecordListDataReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositRecordListDataReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DepositRecordListDataReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepositRecordListDataReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DepositRecordListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DepositRecordListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DepositRecordListDataReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type DepositRecordListResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Code          int32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DepositRecordListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositRecordListResp) Reset() {
	*x = DepositRecordListResp{}
	mi := &file_payrpc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordListResp) ProtoMessage() {}

func (x *DepositRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordListResp.ProtoReflect.Descriptor instead.
func (*DepositRecordListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{107}
}

func (x *DepositRecordListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositRecordListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositRecordListResp) GetData() *DepositRecordListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositRecordListDataResp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Current       string                       `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                       `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                       `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                       `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*DepositRecordListDataItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositRecordListDataResp) Reset() {
	*x = DepositRecordListDataResp{}
	mi := &file_payrpc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordListDataResp) ProtoMessage() {}

func (x *DepositRecordListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordListDataResp.ProtoReflect.Descriptor instead.
func (*DepositRecordListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{108}
}

func (x *DepositRecordListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *DepositRecordListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *DepositRecordListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DepositRecordListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *DepositRecordListDataResp) GetList() []*DepositRecordListDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type DepositRecordListDataItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Category         int64                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt        int64                  `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DepStatus        int64                  `protobuf:"varint,4,opt,name=depStatus,proto3" json:"depStatus,omitempty"`
	ExchangeRate     string                 `protobuf:"bytes,5,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	Id               string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	LevelText        string                 `protobuf:"bytes,7,opt,name=levelText,proto3" json:"levelText,omitempty"`
	MerchantCategory string                 `protobuf:"bytes,8,opt,name=merchantCategory,proto3" json:"merchantCategory,omitempty"`
	MerchantId       int64                  `protobuf:"varint,9,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	MerchantName     string                 `protobuf:"bytes,10,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	OperatorName     string                 `protobuf:"bytes,11,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	OrderId          string                 `protobuf:"bytes,12,opt,name=orderId,proto3" json:"orderId,omitempty"`
	PayAddress       string                 `protobuf:"bytes,13,opt,name=payAddress,proto3" json:"payAddress,omitempty"`
	PayAmount        string                 `protobuf:"bytes,14,opt,name=payAmount,proto3" json:"payAmount,omitempty"`
	PlatName         string                 `protobuf:"bytes,15,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName     string                 `protobuf:"bytes,16,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	PlatOrderId      string                 `protobuf:"bytes,17,opt,name=platOrderId,proto3" json:"platOrderId,omitempty"`
	RealAmount       string                 `protobuf:"bytes,18,opt,name=realAmount,proto3" json:"realAmount,omitempty"`
	Status           int64                  `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,20,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Username         string                 `protobuf:"bytes,21,opt,name=username,proto3" json:"username,omitempty"`
	Uid              int64                  `protobuf:"varint,22,opt,name=uid,proto3" json:"uid,omitempty"`
	AdminUid         int64                  `protobuf:"varint,23,opt,name=adminUid,proto3" json:"adminUid,omitempty"`
	UserFlagList     []*UserFlagList        `protobuf:"bytes,24,rep,name=userFlagList,proto3" json:"userFlagList,omitempty"`
	PlatTypeName     string                 `protobuf:"bytes,25,opt,name=platTypeName,proto3" json:"platTypeName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DepositRecordListDataItem) Reset() {
	*x = DepositRecordListDataItem{}
	mi := &file_payrpc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositRecordListDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordListDataItem) ProtoMessage() {}

func (x *DepositRecordListDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRecordListDataItem.ProtoReflect.Descriptor instead.
func (*DepositRecordListDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{109}
}

func (x *DepositRecordListDataItem) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *DepositRecordListDataItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepositRecordListDataItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DepositRecordListDataItem) GetDepStatus() int64 {
	if x != nil {
		return x.DepStatus
	}
	return 0
}

func (x *DepositRecordListDataItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *DepositRecordListDataItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DepositRecordListDataItem) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *DepositRecordListDataItem) GetMerchantCategory() string {
	if x != nil {
		return x.MerchantCategory
	}
	return ""
}

func (x *DepositRecordListDataItem) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *DepositRecordListDataItem) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *DepositRecordListDataItem) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *DepositRecordListDataItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositRecordListDataItem) GetPayAddress() string {
	if x != nil {
		return x.PayAddress
	}
	return ""
}

func (x *DepositRecordListDataItem) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *DepositRecordListDataItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *DepositRecordListDataItem) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *DepositRecordListDataItem) GetPlatOrderId() string {
	if x != nil {
		return x.PlatOrderId
	}
	return ""
}

func (x *DepositRecordListDataItem) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *DepositRecordListDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DepositRecordListDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DepositRecordListDataItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DepositRecordListDataItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DepositRecordListDataItem) GetAdminUid() int64 {
	if x != nil {
		return x.AdminUid
	}
	return 0
}

func (x *DepositRecordListDataItem) GetUserFlagList() []*UserFlagList {
	if x != nil {
		return x.UserFlagList
	}
	return nil
}

func (x *DepositRecordListDataItem) GetPlatTypeName() string {
	if x != nil {
		return x.PlatTypeName
	}
	return ""
}

type UserFlagList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BitCode       int64                  `protobuf:"varint,3,opt,name=bitCode,proto3" json:"bitCode,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	IconColor     string                 `protobuf:"bytes,5,opt,name=iconColor,proto3" json:"iconColor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserFlagList) Reset() {
	*x = UserFlagList{}
	mi := &file_payrpc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFlagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFlagList) ProtoMessage() {}

func (x *UserFlagList) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFlagList.ProtoReflect.Descriptor instead.
func (*UserFlagList) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{110}
}

func (x *UserFlagList) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserFlagList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserFlagList) GetBitCode() int64 {
	if x != nil {
		return x.BitCode
	}
	return 0
}

func (x *UserFlagList) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserFlagList) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

type DepositSumReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"` // 充值类型
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`         //充值通道
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	StartTime     int64                  `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
	PayType       int64                  `protobuf:"varint,8,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositSumReq) Reset() {
	*x = DepositSumReq{}
	mi := &file_payrpc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositSumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSumReq) ProtoMessage() {}

func (x *DepositSumReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSumReq.ProtoReflect.Descriptor instead.
func (*DepositSumReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{111}
}

func (x *DepositSumReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DepositSumReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositSumReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DepositSumReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepositSumReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DepositSumReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DepositSumReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DepositSumReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type DepositSumResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DepositSumData        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositSumResp) Reset() {
	*x = DepositSumResp{}
	mi := &file_payrpc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositSumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSumResp) ProtoMessage() {}

func (x *DepositSumResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSumResp.ProtoReflect.Descriptor instead.
func (*DepositSumResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{112}
}

func (x *DepositSumResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositSumResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositSumResp) GetData() *DepositSumData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositSumData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CommTotalCoin   string                 `protobuf:"bytes,1,opt,name=commTotalCoin,proto3" json:"commTotalCoin,omitempty"`
	WalletTotalCoin string                 `protobuf:"bytes,2,opt,name=walletTotalCoin,proto3" json:"walletTotalCoin,omitempty"`
	Count           int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	CountComm       int64                  `protobuf:"varint,4,opt,name=countComm,proto3" json:"countComm,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DepositSumData) Reset() {
	*x = DepositSumData{}
	mi := &file_payrpc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositSumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSumData) ProtoMessage() {}

func (x *DepositSumData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSumData.ProtoReflect.Descriptor instead.
func (*DepositSumData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{113}
}

func (x *DepositSumData) GetCommTotalCoin() string {
	if x != nil {
		return x.CommTotalCoin
	}
	return ""
}

func (x *DepositSumData) GetWalletTotalCoin() string {
	if x != nil {
		return x.WalletTotalCoin
	}
	return ""
}

func (x *DepositSumData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DepositSumData) GetCountComm() int64 {
	if x != nil {
		return x.CountComm
	}
	return 0
}

type PayAllChannelListReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CategoryTransfer int64                  `protobuf:"varint,1,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"`
	OrderId          int64                  `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayAllChannelListReq) Reset() {
	*x = PayAllChannelListReq{}
	mi := &file_payrpc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAllChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAllChannelListReq) ProtoMessage() {}

func (x *PayAllChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAllChannelListReq.ProtoReflect.Descriptor instead.
func (*PayAllChannelListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{114}
}

func (x *PayAllChannelListReq) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *PayAllChannelListReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type PayAllChannelListResp struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Code          int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          []*PayAllChannelListData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayAllChannelListResp) Reset() {
	*x = PayAllChannelListResp{}
	mi := &file_payrpc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAllChannelListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAllChannelListResp) ProtoMessage() {}

func (x *PayAllChannelListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAllChannelListResp.ProtoReflect.Descriptor instead.
func (*PayAllChannelListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{115}
}

func (x *PayAllChannelListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PayAllChannelListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PayAllChannelListResp) GetData() []*PayAllChannelListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayAllChannelListData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                 //通道编码
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                 // 通道名称
	PlatName         string                 `protobuf:"bytes,4,opt,name=platName,proto3" json:"platName,omitempty"`         //平台名称
	PlatNickName     string                 `protobuf:"bytes,5,opt,name=platNickName,proto3" json:"platNickName,omitempty"` //平台昵称名称
	Category         int64                  `protobuf:"varint,6,opt,name=category,proto3" json:"category,omitempty"`        // 通道类型；1:代收 2:代付；字典：dic_pay_channel_category
	SubCategory      int64                  `protobuf:"varint,7,opt,name=subCategory,proto3" json:"subCategory,omitempty"`  //
	RequestUrl       string                 `protobuf:"bytes,8,opt,name=requestUrl,proto3" json:"requestUrl,omitempty"`
	NotifyUrl        string                 `protobuf:"bytes,9,opt,name=notifyUrl,proto3" json:"notifyUrl,omitempty"`
	Currency         string                 `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	Status           int64                  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"` //状态：0-关闭；1-开启 字典：dic_on_off_status
	Remark           string                 `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`  //备注
	UpdatedAt        int64                  `protobuf:"varint,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OperatorName     string                 `protobuf:"bytes,14,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	CategoryTransfer int64                  `protobuf:"varint,15,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"` //转账类型
	PlatNameAr       string                 `protobuf:"bytes,16,opt,name=platNameAr,proto3" json:"platNameAr,omitempty"`              // 阿拉伯语
	Sort             int64                  `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                         //排序号
	PayType          int64                  `protobuf:"varint,18,opt,name=payType,proto3" json:"payType,omitempty"`                   //支付类型
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayAllChannelListData) Reset() {
	*x = PayAllChannelListData{}
	mi := &file_payrpc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAllChannelListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAllChannelListData) ProtoMessage() {}

func (x *PayAllChannelListData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAllChannelListData.ProtoReflect.Descriptor instead.
func (*PayAllChannelListData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{116}
}

func (x *PayAllChannelListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayAllChannelListData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayAllChannelListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayAllChannelListData) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *PayAllChannelListData) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *PayAllChannelListData) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *PayAllChannelListData) GetSubCategory() int64 {
	if x != nil {
		return x.SubCategory
	}
	return 0
}

func (x *PayAllChannelListData) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *PayAllChannelListData) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *PayAllChannelListData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PayAllChannelListData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayAllChannelListData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PayAllChannelListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PayAllChannelListData) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *PayAllChannelListData) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *PayAllChannelListData) GetPlatNameAr() string {
	if x != nil {
		return x.PlatNameAr
	}
	return ""
}

func (x *PayAllChannelListData) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *PayAllChannelListData) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type DepositByWowIdrCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MchId         string                 `protobuf:"bytes,1,opt,name=mchId,proto3" json:"mchId,omitempty"`
	Sign          string                 `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByWowIdrCallBackReq) Reset() {
	*x = DepositByWowIdrCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByWowIdrCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByWowIdrCallBackReq) ProtoMessage() {}

func (x *DepositByWowIdrCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByWowIdrCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositByWowIdrCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{117}
}

func (x *DepositByWowIdrCallBackReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *DepositByWowIdrCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *DepositByWowIdrCallBackReq) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type DepositByWowIdrCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByWowIdrCallBackResp) Reset() {
	*x = DepositByWowIdrCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByWowIdrCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByWowIdrCallBackResp) ProtoMessage() {}

func (x *DepositByWowIdrCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByWowIdrCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositByWowIdrCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{118}
}

func (x *DepositByWowIdrCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositByWowIdrCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositByWowIdrCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositByBasePayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradeResult   string                 `protobuf:"bytes,1,opt,name=tradeResult,proto3" json:"tradeResult,omitempty"` //订单状态
	MchId         string                 `protobuf:"bytes,2,opt,name=mchId,proto3" json:"mchId,omitempty"`             //商户号
	MchOrderNo    string                 `protobuf:"bytes,3,opt,name=mchOrderNo,proto3" json:"mchOrderNo,omitempty"`   // 商家订单号
	OriAmount     string                 `protobuf:"bytes,4,opt,name=oriAmount,proto3" json:"oriAmount,omitempty"`     // 原始订单金额
	Amount        string                 `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`           // 交易金额
	OrderDate     string                 `protobuf:"bytes,6,opt,name=orderDate,proto3" json:"orderDate,omitempty"`     //订单时间
	OrderNo       string                 `protobuf:"bytes,7,opt,name=orderNo,proto3" json:"orderNo,omitempty"`         //平台支付订单号
	MerRetMsg     string                 `protobuf:"bytes,8,opt,name=merRetMsg,proto3" json:"merRetMsg,omitempty"`     //  透传参数
	SignType      string                 `protobuf:"bytes,9,opt,name=signType,proto3" json:"signType,omitempty"`       // 签名方式
	Sign          string                 `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`              //签名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByBasePayCallBackReq) Reset() {
	*x = DepositByBasePayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByBasePayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByBasePayCallBackReq) ProtoMessage() {}

func (x *DepositByBasePayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByBasePayCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositByBasePayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{119}
}

func (x *DepositByBasePayCallBackReq) GetTradeResult() string {
	if x != nil {
		return x.TradeResult
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetMchOrderNo() string {
	if x != nil {
		return x.MchOrderNo
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetOriAmount() string {
	if x != nil {
		return x.OriAmount
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetMerRetMsg() string {
	if x != nil {
		return x.MerRetMsg
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *DepositByBasePayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DepositByBasePayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByBasePayCallBackResp) Reset() {
	*x = DepositByBasePayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByBasePayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByBasePayCallBackResp) ProtoMessage() {}

func (x *DepositByBasePayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByBasePayCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositByBasePayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{120}
}

func (x *DepositByBasePayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositByBasePayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositByBasePayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawByWowIdrCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MchId         string                 `protobuf:"bytes,1,opt,name=mchId,proto3" json:"mchId,omitempty"`
	Sign          string                 `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByWowIdrCallBackReq) Reset() {
	*x = WithdrawByWowIdrCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByWowIdrCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByWowIdrCallBackReq) ProtoMessage() {}

func (x *WithdrawByWowIdrCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByWowIdrCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawByWowIdrCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{121}
}

func (x *WithdrawByWowIdrCallBackReq) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WithdrawByWowIdrCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *WithdrawByWowIdrCallBackReq) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type WithdrawByWowIdrCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByWowIdrCallBackResp) Reset() {
	*x = WithdrawByWowIdrCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByWowIdrCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByWowIdrCallBackResp) ProtoMessage() {}

func (x *WithdrawByWowIdrCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByWowIdrCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawByWowIdrCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{122}
}

func (x *WithdrawByWowIdrCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawByWowIdrCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawByWowIdrCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawByBasePayCallBackReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TradeResult    string                 `protobuf:"bytes,1,opt,name=tradeResult,proto3" json:"tradeResult,omitempty"`
	MerTransferId  string                 `protobuf:"bytes,2,opt,name=merTransferId,proto3" json:"merTransferId,omitempty"`
	MerNo          string                 `protobuf:"bytes,3,opt,name=merNo,proto3" json:"merNo,omitempty"`
	TradeNo        string                 `protobuf:"bytes,4,opt,name=tradeNo,proto3" json:"tradeNo,omitempty"`
	TransferAmount string                 `protobuf:"bytes,5,opt,name=transferAmount,proto3" json:"transferAmount,omitempty"`
	ApplyDate      string                 `protobuf:"bytes,6,opt,name=applyDate,proto3" json:"applyDate,omitempty"`
	Version        string                 `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	RespCode       string                 `protobuf:"bytes,8,opt,name=respCode,proto3" json:"respCode,omitempty"`
	Sign           string                 `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
	SignType       string                 `protobuf:"bytes,10,opt,name=signType,proto3" json:"signType,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WithdrawByBasePayCallBackReq) Reset() {
	*x = WithdrawByBasePayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByBasePayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByBasePayCallBackReq) ProtoMessage() {}

func (x *WithdrawByBasePayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByBasePayCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawByBasePayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{123}
}

func (x *WithdrawByBasePayCallBackReq) GetTradeResult() string {
	if x != nil {
		return x.TradeResult
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetMerTransferId() string {
	if x != nil {
		return x.MerTransferId
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetMerNo() string {
	if x != nil {
		return x.MerNo
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetApplyDate() string {
	if x != nil {
		return x.ApplyDate
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetRespCode() string {
	if x != nil {
		return x.RespCode
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *WithdrawByBasePayCallBackReq) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

type WithdrawByBasePayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByBasePayCallBackResp) Reset() {
	*x = WithdrawByBasePayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByBasePayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByBasePayCallBackResp) ProtoMessage() {}

func (x *WithdrawByBasePayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByBasePayCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawByBasePayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{124}
}

func (x *WithdrawByBasePayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawByBasePayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawByBasePayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositByMoonPayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantNo    string                 `protobuf:"bytes,1,opt,name=merchantNo,proto3" json:"merchantNo,omitempty"`
	OrderNo       string                 `protobuf:"bytes,2,opt,name=orderNo,proto3" json:"orderNo,omitempty"`
	POrderNo      string                 `protobuf:"bytes,3,opt,name=pOrderNo,proto3" json:"pOrderNo,omitempty"`
	Amount        int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	State         int32                  `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	Utr           string                 `protobuf:"bytes,7,opt,name=utr,proto3" json:"utr,omitempty"`
	Sign          string                 `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByMoonPayCallBackReq) Reset() {
	*x = DepositByMoonPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByMoonPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByMoonPayCallBackReq) ProtoMessage() {}

func (x *DepositByMoonPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByMoonPayCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositByMoonPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{125}
}

func (x *DepositByMoonPayCallBackReq) GetMerchantNo() string {
	if x != nil {
		return x.MerchantNo
	}
	return ""
}

func (x *DepositByMoonPayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DepositByMoonPayCallBackReq) GetPOrderNo() string {
	if x != nil {
		return x.POrderNo
	}
	return ""
}

func (x *DepositByMoonPayCallBackReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DepositByMoonPayCallBackReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DepositByMoonPayCallBackReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DepositByMoonPayCallBackReq) GetUtr() string {
	if x != nil {
		return x.Utr
	}
	return ""
}

func (x *DepositByMoonPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DepositByMoonPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByMoonPayCallBackResp) Reset() {
	*x = DepositByMoonPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByMoonPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByMoonPayCallBackResp) ProtoMessage() {}

func (x *DepositByMoonPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByMoonPayCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositByMoonPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{126}
}

func (x *DepositByMoonPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositByMoonPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositByMoonPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositByBfPayCallBackReq struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Head          *BfPayCallBackHead             `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Body          *DepositByBfPayCallBackBodyReq `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Sign          string                         `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByBfPayCallBackReq) Reset() {
	*x = DepositByBfPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByBfPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByBfPayCallBackReq) ProtoMessage() {}

func (x *DepositByBfPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByBfPayCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositByBfPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{127}
}

func (x *DepositByBfPayCallBackReq) GetHead() *BfPayCallBackHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *DepositByBfPayCallBackReq) GetBody() *DepositByBfPayCallBackBodyReq {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *DepositByBfPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type BfPayCallBackHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RespCode      string                 `protobuf:"bytes,1,opt,name=respCode,proto3" json:"respCode,omitempty"`
	RespMsg       string                 `protobuf:"bytes,2,opt,name=respMsg,proto3" json:"respMsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BfPayCallBackHead) Reset() {
	*x = BfPayCallBackHead{}
	mi := &file_payrpc_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BfPayCallBackHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfPayCallBackHead) ProtoMessage() {}

func (x *BfPayCallBackHead) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfPayCallBackHead.ProtoReflect.Descriptor instead.
func (*BfPayCallBackHead) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{128}
}

func (x *BfPayCallBackHead) GetRespCode() string {
	if x != nil {
		return x.RespCode
	}
	return ""
}

func (x *BfPayCallBackHead) GetRespMsg() string {
	if x != nil {
		return x.RespMsg
	}
	return ""
}

type DepositByBfPayCallBackBodyReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MchtId        string                 `protobuf:"bytes,1,opt,name=mchtId,proto3" json:"mchtId,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	TradeId       string                 `protobuf:"bytes,3,opt,name=tradeId,proto3" json:"tradeId,omitempty"`       //支付平台返回的交易流水号
	Amount        string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`         // 总金额，通下单时金额一样
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`         // 支付结果 ，支付结果 ， SUCCESS:支付成功
	PayType       string                 `protobuf:"bytes,6,opt,name=payType,proto3" json:"payType,omitempty"`       //  具体支付类型
	ChargeTime    string                 `protobuf:"bytes,7,opt,name=chargeTime,proto3" json:"chargeTime,omitempty"` // 订单支付时间yyyyMMddHHmmss
	Seq           string                 `protobuf:"bytes,8,opt,name=seq,proto3" json:"seq,omitempty"`               //平台随机序号
	Biz           string                 `protobuf:"bytes,9,opt,name=biz,proto3" json:"biz,omitempty"`               // 支付类型,同下单时一样
	Param         string                 `protobuf:"bytes,10,opt,name=param,proto3" json:"param,omitempty"`          // 保留字段
	Phone         string                 `protobuf:"bytes,11,opt,name=phone,proto3" json:"phone,omitempty"`          // 手机号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByBfPayCallBackBodyReq) Reset() {
	*x = DepositByBfPayCallBackBodyReq{}
	mi := &file_payrpc_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByBfPayCallBackBodyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByBfPayCallBackBodyReq) ProtoMessage() {}

func (x *DepositByBfPayCallBackBodyReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByBfPayCallBackBodyReq.ProtoReflect.Descriptor instead.
func (*DepositByBfPayCallBackBodyReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{129}
}

func (x *DepositByBfPayCallBackBodyReq) GetMchtId() string {
	if x != nil {
		return x.MchtId
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetChargeTime() string {
	if x != nil {
		return x.ChargeTime
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetBiz() string {
	if x != nil {
		return x.Biz
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *DepositByBfPayCallBackBodyReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type DepositByBfPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByBfPayCallBackResp) Reset() {
	*x = DepositByBfPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByBfPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByBfPayCallBackResp) ProtoMessage() {}

func (x *DepositByBfPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByBfPayCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositByBfPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{130}
}

func (x *DepositByBfPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositByBfPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositByBfPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositBySixPayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayResult     string                 `protobuf:"bytes,1,opt,name=payResult,proto3" json:"payResult,omitempty"`      // 1：支付成功 其他:失败
	MerNo         string                 `protobuf:"bytes,2,opt,name=mer_no,json=merNo,proto3" json:"mer_no,omitempty"` //商户编号
	OrderNo       string                 `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo,omitempty"`          //商家代收订单号
	PayAmount     string                 `protobuf:"bytes,4,opt,name=payAmount,proto3" json:"payAmount,omitempty"`
	PtOrderNo     string                 `protobuf:"bytes,5,opt,name=ptOrderNo,proto3" json:"ptOrderNo,omitempty"`
	Currency      string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Sign          string                 `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositBySixPayCallBackReq) Reset() {
	*x = DepositBySixPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositBySixPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositBySixPayCallBackReq) ProtoMessage() {}

func (x *DepositBySixPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositBySixPayCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositBySixPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{131}
}

func (x *DepositBySixPayCallBackReq) GetPayResult() string {
	if x != nil {
		return x.PayResult
	}
	return ""
}

func (x *DepositBySixPayCallBackReq) GetMerNo() string {
	if x != nil {
		return x.MerNo
	}
	return ""
}

func (x *DepositBySixPayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DepositBySixPayCallBackReq) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *DepositBySixPayCallBackReq) GetPtOrderNo() string {
	if x != nil {
		return x.PtOrderNo
	}
	return ""
}

func (x *DepositBySixPayCallBackReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DepositBySixPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DepositBySixPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositBySixPayCallBackResp) Reset() {
	*x = DepositBySixPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositBySixPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositBySixPayCallBackResp) ProtoMessage() {}

func (x *DepositBySixPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositBySixPayCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositBySixPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{132}
}

func (x *DepositBySixPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositBySixPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositBySixPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositByAiPayCallBackReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MerNo              string                 `protobuf:"bytes,1,opt,name=mer_no,json=merNo,proto3" json:"mer_no,omitempty"`       //商户编号
	OrderNo            string                 `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"` //
	Paytypecode        string                 `protobuf:"bytes,3,opt,name=paytypecode,proto3" json:"paytypecode,omitempty"`
	OrderAmount        string                 `protobuf:"bytes,4,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	OrderRealityamount string                 `protobuf:"bytes,5,opt,name=order_realityamount,json=orderRealityamount,proto3" json:"order_realityamount,omitempty"`
	Status             string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`            // success:交易成功；fail:交易失败；waiting:等待支付
	Fee                string                 `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`                  // 实际手续费
	SysNo              string                 `protobuf:"bytes,8,opt,name=sys_no,json=sysNo,proto3" json:"sys_no,omitempty"` // 平台系统流水单号
	Sign               string                 `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DepositByAiPayCallBackReq) Reset() {
	*x = DepositByAiPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByAiPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByAiPayCallBackReq) ProtoMessage() {}

func (x *DepositByAiPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByAiPayCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositByAiPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{133}
}

func (x *DepositByAiPayCallBackReq) GetMerNo() string {
	if x != nil {
		return x.MerNo
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetPaytypecode() string {
	if x != nil {
		return x.Paytypecode
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetOrderAmount() string {
	if x != nil {
		return x.OrderAmount
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetOrderRealityamount() string {
	if x != nil {
		return x.OrderRealityamount
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetSysNo() string {
	if x != nil {
		return x.SysNo
	}
	return ""
}

func (x *DepositByAiPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DepositByAiPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByAiPayCallBackResp) Reset() {
	*x = DepositByAiPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByAiPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByAiPayCallBackResp) ProtoMessage() {}

func (x *DepositByAiPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByAiPayCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositByAiPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{134}
}

func (x *DepositByAiPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositByAiPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositByAiPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawByAiPayCallBackReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MerNo              string                 `protobuf:"bytes,1,opt,name=mer_no,json=merNo,proto3" json:"mer_no,omitempty"`
	OrderNo            string                 `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	OrderAmount        string                 `protobuf:"bytes,3,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	OrderRealityamount string                 `protobuf:"bytes,4,opt,name=order_realityamount,json=orderRealityamount,proto3" json:"order_realityamount,omitempty"`
	Currency           string                 `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Result             string                 `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	SysNo              string                 `protobuf:"bytes,7,opt,name=sys_no,json=sysNo,proto3" json:"sys_no,omitempty"`
	Fee                string                 `protobuf:"bytes,8,opt,name=fee,proto3" json:"fee,omitempty"`
	ExtInfo            string                 `protobuf:"bytes,9,opt,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	Sign               string                 `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WithdrawByAiPayCallBackReq) Reset() {
	*x = WithdrawByAiPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByAiPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByAiPayCallBackReq) ProtoMessage() {}

func (x *WithdrawByAiPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByAiPayCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawByAiPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{135}
}

func (x *WithdrawByAiPayCallBackReq) GetMerNo() string {
	if x != nil {
		return x.MerNo
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetOrderAmount() string {
	if x != nil {
		return x.OrderAmount
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetOrderRealityamount() string {
	if x != nil {
		return x.OrderRealityamount
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetSysNo() string {
	if x != nil {
		return x.SysNo
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

func (x *WithdrawByAiPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type WithdrawByAiPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByAiPayCallBackResp) Reset() {
	*x = WithdrawByAiPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByAiPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByAiPayCallBackResp) ProtoMessage() {}

func (x *WithdrawByAiPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByAiPayCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawByAiPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{136}
}

func (x *WithdrawByAiPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawByAiPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawByAiPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawBySixPayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayResult     string                 `protobuf:"bytes,1,opt,name=payResult,proto3" json:"payResult,omitempty"`      // 1：代付成功 2：代付失败
	MerNo         string                 `protobuf:"bytes,2,opt,name=mer_no,json=merNo,proto3" json:"mer_no,omitempty"` //商户编号
	OrderNo       string                 `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo,omitempty"`          //商家代付订单号
	PayAmount     string                 `protobuf:"bytes,4,opt,name=payAmount,proto3" json:"payAmount,omitempty"`
	PtOrderNo     string                 `protobuf:"bytes,5,opt,name=ptOrderNo,proto3" json:"ptOrderNo,omitempty"`
	Currency      string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Sign          string                 `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawBySixPayCallBackReq) Reset() {
	*x = WithdrawBySixPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawBySixPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawBySixPayCallBackReq) ProtoMessage() {}

func (x *WithdrawBySixPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawBySixPayCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawBySixPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{137}
}

func (x *WithdrawBySixPayCallBackReq) GetPayResult() string {
	if x != nil {
		return x.PayResult
	}
	return ""
}

func (x *WithdrawBySixPayCallBackReq) GetMerNo() string {
	if x != nil {
		return x.MerNo
	}
	return ""
}

func (x *WithdrawBySixPayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawBySixPayCallBackReq) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *WithdrawBySixPayCallBackReq) GetPtOrderNo() string {
	if x != nil {
		return x.PtOrderNo
	}
	return ""
}

func (x *WithdrawBySixPayCallBackReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *WithdrawBySixPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type WithdrawBySixPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawBySixPayCallBackResp) Reset() {
	*x = WithdrawBySixPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawBySixPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawBySixPayCallBackResp) ProtoMessage() {}

func (x *WithdrawBySixPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawBySixPayCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawBySixPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{138}
}

func (x *WithdrawBySixPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawBySixPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawBySixPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawByMoonPayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantNo    string                 `protobuf:"bytes,1,opt,name=merchantNo,proto3" json:"merchantNo,omitempty"`
	OrderNo       string                 `protobuf:"bytes,2,opt,name=orderNo,proto3" json:"orderNo,omitempty"`
	POrderNo      string                 `protobuf:"bytes,3,opt,name=pOrderNo,proto3" json:"pOrderNo,omitempty"`
	Amount        int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	State         int32                  `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	Utr           string                 `protobuf:"bytes,7,opt,name=utr,proto3" json:"utr,omitempty"`
	Sign          string                 `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByMoonPayCallBackReq) Reset() {
	*x = WithdrawByMoonPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByMoonPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByMoonPayCallBackReq) ProtoMessage() {}

func (x *WithdrawByMoonPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByMoonPayCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawByMoonPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{139}
}

func (x *WithdrawByMoonPayCallBackReq) GetMerchantNo() string {
	if x != nil {
		return x.MerchantNo
	}
	return ""
}

func (x *WithdrawByMoonPayCallBackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawByMoonPayCallBackReq) GetPOrderNo() string {
	if x != nil {
		return x.POrderNo
	}
	return ""
}

func (x *WithdrawByMoonPayCallBackReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawByMoonPayCallBackReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WithdrawByMoonPayCallBackReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *WithdrawByMoonPayCallBackReq) GetUtr() string {
	if x != nil {
		return x.Utr
	}
	return ""
}

func (x *WithdrawByMoonPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type WithdrawByMoonPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByMoonPayCallBackResp) Reset() {
	*x = WithdrawByMoonPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByMoonPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByMoonPayCallBackResp) ProtoMessage() {}

func (x *WithdrawByMoonPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByMoonPayCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawByMoonPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{140}
}

func (x *WithdrawByMoonPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawByMoonPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawByMoonPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawByBfPayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *BfPayCallBackHead     `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Body          string                 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByBfPayCallBackReq) Reset() {
	*x = WithdrawByBfPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByBfPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByBfPayCallBackReq) ProtoMessage() {}

func (x *WithdrawByBfPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByBfPayCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawByBfPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{141}
}

func (x *WithdrawByBfPayCallBackReq) GetHead() *BfPayCallBackHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *WithdrawByBfPayCallBackReq) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type WithdrawByBfPayCallBackBody struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	BatchOrderNo  string                               `protobuf:"bytes,1,opt,name=batchOrderNo,proto3" json:"batchOrderNo,omitempty"`
	TradeId       string                               `protobuf:"bytes,2,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	TotalNum      string                               `protobuf:"bytes,3,opt,name=totalNum,proto3" json:"totalNum,omitempty"`
	TotalAmount   string                               `protobuf:"bytes,4,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	Status        string                               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Desc          string                               `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Detail        []*WithdrawByBfPayCallBackBodyDetail `protobuf:"bytes,7,rep,name=detail,proto3" json:"detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByBfPayCallBackBody) Reset() {
	*x = WithdrawByBfPayCallBackBody{}
	mi := &file_payrpc_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByBfPayCallBackBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByBfPayCallBackBody) ProtoMessage() {}

func (x *WithdrawByBfPayCallBackBody) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByBfPayCallBackBody.ProtoReflect.Descriptor instead.
func (*WithdrawByBfPayCallBackBody) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{142}
}

func (x *WithdrawByBfPayCallBackBody) GetBatchOrderNo() string {
	if x != nil {
		return x.BatchOrderNo
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBody) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBody) GetTotalNum() string {
	if x != nil {
		return x.TotalNum
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBody) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBody) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBody) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBody) GetDetail() []*WithdrawByBfPayCallBackBodyDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type WithdrawByBfPayCallBackBodyDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DetailId      string                 `protobuf:"bytes,1,opt,name=detailId,proto3" json:"detailId,omitempty"`
	Seq           string                 `protobuf:"bytes,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"` //金额 单位:分
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"` // 状态  AUDIT_DOING 审核中  AUDIT_SUCCESS审核通过  AUDIT_FAIL审核未通过  COMMITTED已提交   COMMITTED_SUCCESS提交成功   COMMITED_FAIL提交失败   DOING代付处理中   SUCCESS 代付成功   FAIL 代付失败   UNKNOWN 未知
	Desc          string                 `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	FinishTime    string                 `protobuf:"bytes,6,opt,name=finishTime,proto3" json:"finishTime,omitempty"` // 代付完成时间（币种时间）格式： yyyyMMddHHmmss
	Utr           string                 `protobuf:"bytes,7,opt,name=utr,proto3" json:"utr,omitempty"`               // 代付成功返回
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByBfPayCallBackBodyDetail) Reset() {
	*x = WithdrawByBfPayCallBackBodyDetail{}
	mi := &file_payrpc_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByBfPayCallBackBodyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByBfPayCallBackBodyDetail) ProtoMessage() {}

func (x *WithdrawByBfPayCallBackBodyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByBfPayCallBackBodyDetail.ProtoReflect.Descriptor instead.
func (*WithdrawByBfPayCallBackBodyDetail) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{143}
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *WithdrawByBfPayCallBackBodyDetail) GetUtr() string {
	if x != nil {
		return x.Utr
	}
	return ""
}

type WithdrawByBfPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByBfPayCallBackResp) Reset() {
	*x = WithdrawByBfPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByBfPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByBfPayCallBackResp) ProtoMessage() {}

func (x *WithdrawByBfPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByBfPayCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawByBfPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{144}
}

func (x *WithdrawByBfPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawByBfPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawByBfPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type UpdateWithdrawalStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mark          string                 `protobuf:"bytes,2,opt,name=mark,proto3" json:"mark,omitempty"`
	NoticeContent string                 `protobuf:"bytes,3,opt,name=noticeContent,proto3" json:"noticeContent,omitempty"`
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWithdrawalStatusReq) Reset() {
	*x = UpdateWithdrawalStatusReq{}
	mi := &file_payrpc_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWithdrawalStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawalStatusReq) ProtoMessage() {}

func (x *UpdateWithdrawalStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawalStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawalStatusReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateWithdrawalStatusReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWithdrawalStatusReq) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *UpdateWithdrawalStatusReq) GetNoticeContent() string {
	if x != nil {
		return x.NoticeContent
	}
	return ""
}

func (x *UpdateWithdrawalStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateWithdrawalStatusResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Code          int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *UpdateWithdrawalStatusData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWithdrawalStatusResp) Reset() {
	*x = UpdateWithdrawalStatusResp{}
	mi := &file_payrpc_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWithdrawalStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawalStatusResp) ProtoMessage() {}

func (x *UpdateWithdrawalStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawalStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawalStatusResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{146}
}

func (x *UpdateWithdrawalStatusResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateWithdrawalStatusResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateWithdrawalStatusResp) GetData() *UpdateWithdrawalStatusData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateWithdrawalStatusData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuditFlag     bool                   `protobuf:"varint,1,opt,name=auditFlag,proto3" json:"auditFlag,omitempty"`
	AuditMsg      string                 `protobuf:"bytes,2,opt,name=auditMsg,proto3" json:"auditMsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWithdrawalStatusData) Reset() {
	*x = UpdateWithdrawalStatusData{}
	mi := &file_payrpc_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWithdrawalStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawalStatusData) ProtoMessage() {}

func (x *UpdateWithdrawalStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawalStatusData.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawalStatusData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{147}
}

func (x *UpdateWithdrawalStatusData) GetAuditFlag() bool {
	if x != nil {
		return x.AuditFlag
	}
	return false
}

func (x *UpdateWithdrawalStatusData) GetAuditMsg() string {
	if x != nil {
		return x.AuditMsg
	}
	return ""
}

type EditChannelReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Remark               string                 `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	ChannelAppShowName   string                 `protobuf:"bytes,3,opt,name=channelAppShowName,proto3" json:"channelAppShowName,omitempty"`
	Sort                 int64                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	LogoUrl              string                 `protobuf:"bytes,5,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	MinCoin              int64                  `protobuf:"varint,6,opt,name=minCoin,proto3" json:"minCoin,omitempty"`
	MaxCoin              int64                  `protobuf:"varint,7,opt,name=maxCoin,proto3" json:"maxCoin,omitempty"`
	ChannelAppShowNameAr string                 `protobuf:"bytes,8,opt,name=channelAppShowNameAr,proto3" json:"channelAppShowNameAr,omitempty"`
	Chips                []string               `protobuf:"bytes,9,rep,name=chips,proto3" json:"chips,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EditChannelReq) Reset() {
	*x = EditChannelReq{}
	mi := &file_payrpc_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChannelReq) ProtoMessage() {}

func (x *EditChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChannelReq.ProtoReflect.Descriptor instead.
func (*EditChannelReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{148}
}

func (x *EditChannelReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EditChannelReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *EditChannelReq) GetChannelAppShowName() string {
	if x != nil {
		return x.ChannelAppShowName
	}
	return ""
}

func (x *EditChannelReq) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *EditChannelReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *EditChannelReq) GetMinCoin() int64 {
	if x != nil {
		return x.MinCoin
	}
	return 0
}

func (x *EditChannelReq) GetMaxCoin() int64 {
	if x != nil {
		return x.MaxCoin
	}
	return 0
}

func (x *EditChannelReq) GetChannelAppShowNameAr() string {
	if x != nil {
		return x.ChannelAppShowNameAr
	}
	return ""
}

func (x *EditChannelReq) GetChips() []string {
	if x != nil {
		return x.Chips
	}
	return nil
}

type EditChannelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditChannelResp) Reset() {
	*x = EditChannelResp{}
	mi := &file_payrpc_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditChannelResp) ProtoMessage() {}

func (x *EditChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditChannelResp.ProtoReflect.Descriptor instead.
func (*EditChannelResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{149}
}

func (x *EditChannelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EditChannelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EditChannelResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AuditWithdrawalSumReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeType      string                 `protobuf:"bytes,1,opt,name=timeType,proto3" json:"timeType,omitempty"` // 1 创建时间 2==登录时间
	StartTime     int64                  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	LastLoginIp   string                 `protobuf:"bytes,5,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`
	Id            string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	AdminUsername string                 `protobuf:"bytes,7,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
	PayType       int64                  `protobuf:"varint,8,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditWithdrawalSumReq) Reset() {
	*x = AuditWithdrawalSumReq{}
	mi := &file_payrpc_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditWithdrawalSumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditWithdrawalSumReq) ProtoMessage() {}

func (x *AuditWithdrawalSumReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditWithdrawalSumReq.ProtoReflect.Descriptor instead.
func (*AuditWithdrawalSumReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{150}
}

func (x *AuditWithdrawalSumReq) GetTimeType() string {
	if x != nil {
		return x.TimeType
	}
	return ""
}

func (x *AuditWithdrawalSumReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AuditWithdrawalSumReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AuditWithdrawalSumReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuditWithdrawalSumReq) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *AuditWithdrawalSumReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditWithdrawalSumReq) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *AuditWithdrawalSumReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type AuditWithdrawalSumResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Code          int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *AuditWithdrawalSumData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditWithdrawalSumResp) Reset() {
	*x = AuditWithdrawalSumResp{}
	mi := &file_payrpc_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditWithdrawalSumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditWithdrawalSumResp) ProtoMessage() {}

func (x *AuditWithdrawalSumResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditWithdrawalSumResp.ProtoReflect.Descriptor instead.
func (*AuditWithdrawalSumResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{151}
}

func (x *AuditWithdrawalSumResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AuditWithdrawalSumResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AuditWithdrawalSumResp) GetData() *AuditWithdrawalSumData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuditWithdrawalSumData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	TotalCoin     string                 `protobuf:"bytes,2,opt,name=totalCoin,proto3" json:"totalCoin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditWithdrawalSumData) Reset() {
	*x = AuditWithdrawalSumData{}
	mi := &file_payrpc_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditWithdrawalSumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditWithdrawalSumData) ProtoMessage() {}

func (x *AuditWithdrawalSumData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditWithdrawalSumData.ProtoReflect.Descriptor instead.
func (*AuditWithdrawalSumData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{152}
}

func (x *AuditWithdrawalSumData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AuditWithdrawalSumData) GetTotalCoin() string {
	if x != nil {
		return x.TotalCoin
	}
	return ""
}

type CancelWithDrawReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelWithDrawReq) Reset() {
	*x = CancelWithDrawReq{}
	mi := &file_payrpc_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelWithDrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWithDrawReq) ProtoMessage() {}

func (x *CancelWithDrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWithDrawReq.ProtoReflect.Descriptor instead.
func (*CancelWithDrawReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{153}
}

func (x *CancelWithDrawReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CancelWithDrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelWithDrawResp) Reset() {
	*x = CancelWithDrawResp{}
	mi := &file_payrpc_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelWithDrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWithDrawResp) ProtoMessage() {}

func (x *CancelWithDrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWithDrawResp.ProtoReflect.Descriptor instead.
func (*CancelWithDrawResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{154}
}

func (x *CancelWithDrawResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CancelWithDrawResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CancelWithDrawResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DepositChannelListReq struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Current       int64                      `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                      `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                     `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                   `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *DepositChannelListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositChannelListReq) Reset() {
	*x = DepositChannelListReq{}
	mi := &file_payrpc_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositChannelListReq) ProtoMessage() {}

func (x *DepositChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositChannelListReq.ProtoReflect.Descriptor instead.
func (*DepositChannelListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{155}
}

func (x *DepositChannelListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *DepositChannelListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DepositChannelListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *DepositChannelListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *DepositChannelListReq) GetData() *DepositChannelListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositChannelListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositChannelListDataReq) Reset() {
	*x = DepositChannelListDataReq{}
	mi := &file_payrpc_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositChannelListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositChannelListDataReq) ProtoMessage() {}

func (x *DepositChannelListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositChannelListDataReq.ProtoReflect.Descriptor instead.
func (*DepositChannelListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{156}
}

func (x *DepositChannelListDataReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DepositChannelListDataReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DepositChannelListResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Code          int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DepositChannelListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositChannelListResp) Reset() {
	*x = DepositChannelListResp{}
	mi := &file_payrpc_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositChannelListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositChannelListResp) ProtoMessage() {}

func (x *DepositChannelListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositChannelListResp.ProtoReflect.Descriptor instead.
func (*DepositChannelListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{157}
}

func (x *DepositChannelListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositChannelListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositChannelListResp) GetData() *DepositChannelListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositChannelListDataResp struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Current       string                        `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                        `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                        `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                        `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*DepositChannelListDataItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositChannelListDataResp) Reset() {
	*x = DepositChannelListDataResp{}
	mi := &file_payrpc_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositChannelListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositChannelListDataResp) ProtoMessage() {}

func (x *DepositChannelListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositChannelListDataResp.ProtoReflect.Descriptor instead.
func (*DepositChannelListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{158}
}

func (x *DepositChannelListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *DepositChannelListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *DepositChannelListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *DepositChannelListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *DepositChannelListDataResp) GetList() []*DepositChannelListDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type DepositChannelListDataItem struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Category             int64                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	ChannelAppShowName   string                 `protobuf:"bytes,2,opt,name=channelAppShowName,proto3" json:"channelAppShowName,omitempty"`
	Code                 string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Currency             string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Id                   int64                  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	LogoUrl              string                 `protobuf:"bytes,6,opt,name=logoUrl,proto3" json:"logoUrl,omitempty"`
	MaxCoin              int64                  `protobuf:"varint,7,opt,name=maxCoin,proto3" json:"maxCoin,omitempty"`
	MinCoin              int64                  `protobuf:"varint,8,opt,name=minCoin,proto3" json:"minCoin,omitempty"`
	Name                 string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	NotifyUrl            string                 `protobuf:"bytes,10,opt,name=notifyUrl,proto3" json:"notifyUrl,omitempty"`
	Operator             string                 `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`
	PlatName             string                 `protobuf:"bytes,12,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName         string                 `protobuf:"bytes,13,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	Remark               string                 `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	RequestUrl           string                 `protobuf:"bytes,15,opt,name=requestUrl,proto3" json:"requestUrl,omitempty"`
	Sort                 int64                  `protobuf:"varint,16,opt,name=sort,proto3" json:"sort,omitempty"`
	Status               int64                  `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt            int64                  `protobuf:"varint,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ChannelAppShowNameAr string                 `protobuf:"bytes,19,opt,name=channelAppShowNameAr,proto3" json:"channelAppShowNameAr,omitempty"`
	PayType              int64                  `protobuf:"varint,20,opt,name=payType,proto3" json:"payType,omitempty"` // 支付类型
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DepositChannelListDataItem) Reset() {
	*x = DepositChannelListDataItem{}
	mi := &file_payrpc_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositChannelListDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositChannelListDataItem) ProtoMessage() {}

func (x *DepositChannelListDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositChannelListDataItem.ProtoReflect.Descriptor instead.
func (*DepositChannelListDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{159}
}

func (x *DepositChannelListDataItem) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *DepositChannelListDataItem) GetChannelAppShowName() string {
	if x != nil {
		return x.ChannelAppShowName
	}
	return ""
}

func (x *DepositChannelListDataItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepositChannelListDataItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DepositChannelListDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DepositChannelListDataItem) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *DepositChannelListDataItem) GetMaxCoin() int64 {
	if x != nil {
		return x.MaxCoin
	}
	return 0
}

func (x *DepositChannelListDataItem) GetMinCoin() int64 {
	if x != nil {
		return x.MinCoin
	}
	return 0
}

func (x *DepositChannelListDataItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DepositChannelListDataItem) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *DepositChannelListDataItem) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DepositChannelListDataItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *DepositChannelListDataItem) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *DepositChannelListDataItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DepositChannelListDataItem) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *DepositChannelListDataItem) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DepositChannelListDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DepositChannelListDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DepositChannelListDataItem) GetChannelAppShowNameAr() string {
	if x != nil {
		return x.ChannelAppShowNameAr
	}
	return ""
}

func (x *DepositChannelListDataItem) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type AdminDepositListReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Current       int64                    `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                   `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                 `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *AdminDepositListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositListReq) Reset() {
	*x = AdminDepositListReq{}
	mi := &file_payrpc_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositListReq) ProtoMessage() {}

func (x *AdminDepositListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositListReq.ProtoReflect.Descriptor instead.
func (*AdminDepositListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{160}
}

func (x *AdminDepositListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *AdminDepositListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AdminDepositListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *AdminDepositListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AdminDepositListReq) GetData() *AdminDepositListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminDepositListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	EndTime       int64                  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Id            string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Mobile        string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	StartTime     int64                  `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Status        string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Username      string                 `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	PayType       int64                  `protobuf:"varint,11,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositListDataReq) Reset() {
	*x = AdminDepositListDataReq{}
	mi := &file_payrpc_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositListDataReq) ProtoMessage() {}

func (x *AdminDepositListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositListDataReq.ProtoReflect.Descriptor instead.
func (*AdminDepositListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{161}
}

func (x *AdminDepositListDataReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AdminDepositListDataReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AdminDepositListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AdminDepositListDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminDepositListDataReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminDepositListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdminDepositListDataReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AdminDepositListDataReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminDepositListDataReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type AdminDepositListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *AdminDepositListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositListResp) Reset() {
	*x = AdminDepositListResp{}
	mi := &file_payrpc_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositListResp) ProtoMessage() {}

func (x *AdminDepositListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositListResp.ProtoReflect.Descriptor instead.
func (*AdminDepositListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{162}
}

func (x *AdminDepositListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminDepositListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AdminDepositListResp) GetData() *AdminDepositListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminDepositListDataResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Current       string                      `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                      `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                      `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                      `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AdminDepositListDataItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositListDataResp) Reset() {
	*x = AdminDepositListDataResp{}
	mi := &file_payrpc_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositListDataResp) ProtoMessage() {}

func (x *AdminDepositListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositListDataResp.ProtoReflect.Descriptor instead.
func (*AdminDepositListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{163}
}

func (x *AdminDepositListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *AdminDepositListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *AdminDepositListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *AdminDepositListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *AdminDepositListDataResp) GetList() []*AdminDepositListDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type AdminDepositListDataItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Category         int64                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt        int64                  `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ExchangeRate     string                 `protobuf:"bytes,4,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	Id               string                 `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	LevelText        string                 `protobuf:"bytes,6,opt,name=levelText,proto3" json:"levelText,omitempty"`
	MerchantCategory string                 `protobuf:"bytes,7,opt,name=merchantCategory,proto3" json:"merchantCategory,omitempty"`
	MerchantId       int64                  `protobuf:"varint,8,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	MerchantName     string                 `protobuf:"bytes,9,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	Mobile           string                 `protobuf:"bytes,10,opt,name=mobile,proto3" json:"mobile,omitempty"`
	OperatorName     string                 `protobuf:"bytes,11,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	OrderId          string                 `protobuf:"bytes,12,opt,name=orderId,proto3" json:"orderId,omitempty"`
	PayAddress       string                 `protobuf:"bytes,13,opt,name=payAddress,proto3" json:"payAddress,omitempty"`
	PayAmount        string                 `protobuf:"bytes,14,opt,name=payAmount,proto3" json:"payAmount,omitempty"`
	PlatName         string                 `protobuf:"bytes,15,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName     string                 `protobuf:"bytes,16,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	PlatOrderId      string                 `protobuf:"bytes,17,opt,name=platOrderId,proto3" json:"platOrderId,omitempty"`
	RealAmount       string                 `protobuf:"bytes,18,opt,name=realAmount,proto3" json:"realAmount,omitempty"`
	Status           int64                  `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,20,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Username         string                 `protobuf:"bytes,21,opt,name=username,proto3" json:"username,omitempty"`
	PlatTypeName     string                 `protobuf:"bytes,22,opt,name=platTypeName,proto3" json:"platTypeName,omitempty"`
	UserId           int64                  `protobuf:"varint,23,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AdminDepositListDataItem) Reset() {
	*x = AdminDepositListDataItem{}
	mi := &file_payrpc_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositListDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositListDataItem) ProtoMessage() {}

func (x *AdminDepositListDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositListDataItem.ProtoReflect.Descriptor instead.
func (*AdminDepositListDataItem) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{164}
}

func (x *AdminDepositListDataItem) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *AdminDepositListDataItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AdminDepositListDataItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AdminDepositListDataItem) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *AdminDepositListDataItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminDepositListDataItem) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *AdminDepositListDataItem) GetMerchantCategory() string {
	if x != nil {
		return x.MerchantCategory
	}
	return ""
}

func (x *AdminDepositListDataItem) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *AdminDepositListDataItem) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *AdminDepositListDataItem) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminDepositListDataItem) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *AdminDepositListDataItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AdminDepositListDataItem) GetPayAddress() string {
	if x != nil {
		return x.PayAddress
	}
	return ""
}

func (x *AdminDepositListDataItem) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *AdminDepositListDataItem) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *AdminDepositListDataItem) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *AdminDepositListDataItem) GetPlatOrderId() string {
	if x != nil {
		return x.PlatOrderId
	}
	return ""
}

func (x *AdminDepositListDataItem) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *AdminDepositListDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AdminDepositListDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AdminDepositListDataItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminDepositListDataItem) GetPlatTypeName() string {
	if x != nil {
		return x.PlatTypeName
	}
	return ""
}

func (x *AdminDepositListDataItem) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type AdminDepositStatisticsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	EndTime       int64                  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Id            string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Mobile        string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	StartTime     int64                  `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Status        string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Username      string                 `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	PayType       int64                  `protobuf:"varint,11,opt,name=payType,proto3" json:"payType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositStatisticsReq) Reset() {
	*x = AdminDepositStatisticsReq{}
	mi := &file_payrpc_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositStatisticsReq) ProtoMessage() {}

func (x *AdminDepositStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositStatisticsReq.ProtoReflect.Descriptor instead.
func (*AdminDepositStatisticsReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{165}
}

func (x *AdminDepositStatisticsReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AdminDepositStatisticsReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AdminDepositStatisticsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AdminDepositStatisticsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminDepositStatisticsReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminDepositStatisticsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdminDepositStatisticsReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AdminDepositStatisticsReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminDepositStatisticsReq) GetPayType() int64 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type AdminDepositStatisticsResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Code          int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *AdminDepositStatisticsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositStatisticsResp) Reset() {
	*x = AdminDepositStatisticsResp{}
	mi := &file_payrpc_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositStatisticsResp) ProtoMessage() {}

func (x *AdminDepositStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositStatisticsResp.ProtoReflect.Descriptor instead.
func (*AdminDepositStatisticsResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{166}
}

func (x *AdminDepositStatisticsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminDepositStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AdminDepositStatisticsResp) GetData() *AdminDepositStatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminDepositStatisticsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coin          string                 `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDepositStatisticsData) Reset() {
	*x = AdminDepositStatisticsData{}
	mi := &file_payrpc_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDepositStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDepositStatisticsData) ProtoMessage() {}

func (x *AdminDepositStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDepositStatisticsData.ProtoReflect.Descriptor instead.
func (*AdminDepositStatisticsData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{167}
}

func (x *AdminDepositStatisticsData) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type DepositByAPayCallBackReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Account         string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                 //账户名
	OrderId         string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`                 // 商户订单号
	TransactionId   string                 `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"`     // 流水号
	Status          int64                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                  //   1:success
	ErrorMsg        string                 `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`               // 失败原因
	Amount          float32                `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`                 // 客户实际支付金额
	Fee             float32                `protobuf:"fixed32,7,opt,name=fee,proto3" json:"fee,omitempty"`                       // 手续费
	TransactionTime string                 `protobuf:"bytes,8,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"` // 交易时间
	Sign            string                 `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`                       //签名
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DepositByAPayCallBackReq) Reset() {
	*x = DepositByAPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByAPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByAPayCallBackReq) ProtoMessage() {}

func (x *DepositByAPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByAPayCallBackReq.ProtoReflect.Descriptor instead.
func (*DepositByAPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{168}
}

func (x *DepositByAPayCallBackReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *DepositByAPayCallBackReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositByAPayCallBackReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *DepositByAPayCallBackReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DepositByAPayCallBackReq) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *DepositByAPayCallBackReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DepositByAPayCallBackReq) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *DepositByAPayCallBackReq) GetTransactionTime() string {
	if x != nil {
		return x.TransactionTime
	}
	return ""
}

func (x *DepositByAPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DepositByAPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositByAPayCallBackResp) Reset() {
	*x = DepositByAPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositByAPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositByAPayCallBackResp) ProtoMessage() {}

func (x *DepositByAPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositByAPayCallBackResp.ProtoReflect.Descriptor instead.
func (*DepositByAPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{169}
}

func (x *DepositByAPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositByAPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositByAPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WithdrawByAPayCallBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`             //账户名
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`             // 商户订单号
	TransactionId string                 `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"` // 流水号
	Status        int64                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`              //   1:success
	ErrorMsg      string                 `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`           // 失败原因
	Amount        float32                `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`             // 客户实际支付金额
	Fee           float32                `protobuf:"fixed32,7,opt,name=fee,proto3" json:"fee,omitempty"`                   // 手续费
	Sign          string                 `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`                   //签名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByAPayCallBackReq) Reset() {
	*x = WithdrawByAPayCallBackReq{}
	mi := &file_payrpc_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByAPayCallBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByAPayCallBackReq) ProtoMessage() {}

func (x *WithdrawByAPayCallBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByAPayCallBackReq.ProtoReflect.Descriptor instead.
func (*WithdrawByAPayCallBackReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{170}
}

func (x *WithdrawByAPayCallBackReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *WithdrawByAPayCallBackReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *WithdrawByAPayCallBackReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *WithdrawByAPayCallBackReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WithdrawByAPayCallBackReq) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *WithdrawByAPayCallBackReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawByAPayCallBackReq) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *WithdrawByAPayCallBackReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type WithdrawByAPayCallBackResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawByAPayCallBackResp) Reset() {
	*x = WithdrawByAPayCallBackResp{}
	mi := &file_payrpc_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawByAPayCallBackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawByAPayCallBackResp) ProtoMessage() {}

func (x *WithdrawByAPayCallBackResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawByAPayCallBackResp.ProtoReflect.Descriptor instead.
func (*WithdrawByAPayCallBackResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{171}
}

func (x *WithdrawByAPayCallBackResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawByAPayCallBackResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawByAPayCallBackResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetWithdrawalAddressTypeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWithdrawalAddressTypeReq) Reset() {
	*x = GetWithdrawalAddressTypeReq{}
	mi := &file_payrpc_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWithdrawalAddressTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalAddressTypeReq) ProtoMessage() {}

func (x *GetWithdrawalAddressTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalAddressTypeReq.ProtoReflect.Descriptor instead.
func (*GetWithdrawalAddressTypeReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{172}
}

type GetWithdrawalAddressTypeResp struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Code          int64                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *GetWithdrawalAddressTypeDataResp `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWithdrawalAddressTypeResp) Reset() {
	*x = GetWithdrawalAddressTypeResp{}
	mi := &file_payrpc_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWithdrawalAddressTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalAddressTypeResp) ProtoMessage() {}

func (x *GetWithdrawalAddressTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalAddressTypeResp.ProtoReflect.Descriptor instead.
func (*GetWithdrawalAddressTypeResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{173}
}

func (x *GetWithdrawalAddressTypeResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetWithdrawalAddressTypeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetWithdrawalAddressTypeResp) GetData() *GetWithdrawalAddressTypeDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetWithdrawalAddressTypeDataResp struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CategoryCurrency     int64                  `protobuf:"varint,1,opt,name=categoryCurrency,proto3" json:"categoryCurrency,omitempty"` // 货币类型:0-数字货币 1-法币
	CategoryTransfer     int64                  `protobuf:"varint,2,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"` //转账类型：1-TRC,2-ERC,3-BANK,4-PIX,5-GCASH,6-MAYA,7-BPIA,8-GRAB
	CategoryTransferName string                 `protobuf:"bytes,3,opt,name=categoryTransferName,proto3" json:"categoryTransferName,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetWithdrawalAddressTypeDataResp) Reset() {
	*x = GetWithdrawalAddressTypeDataResp{}
	mi := &file_payrpc_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWithdrawalAddressTypeDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalAddressTypeDataResp) ProtoMessage() {}

func (x *GetWithdrawalAddressTypeDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalAddressTypeDataResp.ProtoReflect.Descriptor instead.
func (*GetWithdrawalAddressTypeDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{174}
}

func (x *GetWithdrawalAddressTypeDataResp) GetCategoryCurrency() int64 {
	if x != nil {
		return x.CategoryCurrency
	}
	return 0
}

func (x *GetWithdrawalAddressTypeDataResp) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *GetWithdrawalAddressTypeDataResp) GetCategoryTransferName() string {
	if x != nil {
		return x.CategoryTransferName
	}
	return ""
}

type PayChannelListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                 `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string               `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *PayChannelListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayChannelListReq) Reset() {
	*x = PayChannelListReq{}
	mi := &file_payrpc_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayChannelListReq) ProtoMessage() {}

func (x *PayChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayChannelListReq.ProtoReflect.Descriptor instead.
func (*PayChannelListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{175}
}

func (x *PayChannelListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PayChannelListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PayChannelListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *PayChannelListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *PayChannelListReq) GetData() *PayChannelListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayChannelListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayChannelListDataReq) Reset() {
	*x = PayChannelListDataReq{}
	mi := &file_payrpc_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayChannelListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayChannelListDataReq) ProtoMessage() {}

func (x *PayChannelListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayChannelListDataReq.ProtoReflect.Descriptor instead.
func (*PayChannelListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{176}
}

func (x *PayChannelListDataReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayChannelListDataReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PayChannelListResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Code          int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *PayChannelListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayChannelListResp) Reset() {
	*x = PayChannelListResp{}
	mi := &file_payrpc_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayChannelListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayChannelListResp) ProtoMessage() {}

func (x *PayChannelListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayChannelListResp.ProtoReflect.Descriptor instead.
func (*PayChannelListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{177}
}

func (x *PayChannelListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PayChannelListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PayChannelListResp) GetData() *PayChannelListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayChannelListDataResp struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Current       string                        `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                        `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                        `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                        `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*PayChannelListDataItemResp `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayChannelListDataResp) Reset() {
	*x = PayChannelListDataResp{}
	mi := &file_payrpc_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayChannelListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayChannelListDataResp) ProtoMessage() {}

func (x *PayChannelListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayChannelListDataResp.ProtoReflect.Descriptor instead.
func (*PayChannelListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{178}
}

func (x *PayChannelListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *PayChannelListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *PayChannelListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *PayChannelListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *PayChannelListDataResp) GetList() []*PayChannelListDataItemResp {
	if x != nil {
		return x.List
	}
	return nil
}

type PayChannelListDataItemResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category         int64                  `protobuf:"varint,3,opt,name=category,proto3" json:"category,omitempty"`
	CategoryTransfer int64                  `protobuf:"varint,4,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"`
	Code             string                 `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Currency         string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	NotifyUrl        string                 `protobuf:"bytes,7,opt,name=notifyUrl,proto3" json:"notifyUrl,omitempty"`
	OperatorName     string                 `protobuf:"bytes,8,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	PlatName         string                 `protobuf:"bytes,9,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName     string                 `protobuf:"bytes,10,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	Remark           string                 `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	RequestUrl       string                 `protobuf:"bytes,12,opt,name=requestUrl,proto3" json:"requestUrl,omitempty"`
	Status           int64                  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	SubCategory      string                 `protobuf:"bytes,14,opt,name=subCategory,proto3" json:"subCategory,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayChannelListDataItemResp) Reset() {
	*x = PayChannelListDataItemResp{}
	mi := &file_payrpc_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayChannelListDataItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayChannelListDataItemResp) ProtoMessage() {}

func (x *PayChannelListDataItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayChannelListDataItemResp.ProtoReflect.Descriptor instead.
func (*PayChannelListDataItemResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{179}
}

func (x *PayChannelListDataItemResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayChannelListDataItemResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *PayChannelListDataItemResp) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *PayChannelListDataItemResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayChannelListDataItemResp) GetSubCategory() string {
	if x != nil {
		return x.SubCategory
	}
	return ""
}

func (x *PayChannelListDataItemResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PayPlatListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       int64                  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                 `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string               `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *PayPlatListDataReq    `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayPlatListReq) Reset() {
	*x = PayPlatListReq{}
	mi := &file_payrpc_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayPlatListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPlatListReq) ProtoMessage() {}

func (x *PayPlatListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPlatListReq.ProtoReflect.Descriptor instead.
func (*PayPlatListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{180}
}

func (x *PayPlatListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PayPlatListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PayPlatListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *PayPlatListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *PayPlatListReq) GetData() *PayPlatListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayPlatListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatName      string                 `protobuf:"bytes,1,opt,name=platName,proto3" json:"platName,omitempty"`
	MerchantId    string                 `protobuf:"bytes,2,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	Status        int64                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayPlatListDataReq) Reset() {
	*x = PayPlatListDataReq{}
	mi := &file_payrpc_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayPlatListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPlatListDataReq) ProtoMessage() {}

func (x *PayPlatListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPlatListDataReq.ProtoReflect.Descriptor instead.
func (*PayPlatListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{181}
}

func (x *PayPlatListDataReq) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *PayPlatListDataReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PayPlatListDataReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PayPlatListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *PayPlatListDataResp   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayPlatListResp) Reset() {
	*x = PayPlatListResp{}
	mi := &file_payrpc_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayPlatListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPlatListResp) ProtoMessage() {}

func (x *PayPlatListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPlatListResp.ProtoReflect.Descriptor instead.
func (*PayPlatListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{182}
}

func (x *PayPlatListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PayPlatListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PayPlatListResp) GetData() *PayPlatListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayPlatListDataResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Current       string                     `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                     `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                     `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                     `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*PayPlatListDataItemResp `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayPlatListDataResp) Reset() {
	*x = PayPlatListDataResp{}
	mi := &file_payrpc_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayPlatListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPlatListDataResp) ProtoMessage() {}

func (x *PayPlatListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPlatListDataResp.ProtoReflect.Descriptor instead.
func (*PayPlatListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{183}
}

func (x *PayPlatListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *PayPlatListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *PayPlatListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *PayPlatListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *PayPlatListDataResp) GetList() []*PayPlatListDataItemResp {
	if x != nil {
		return x.List
	}
	return nil
}

type PayPlatListDataItemResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlatName      string                 `protobuf:"bytes,2,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName  string                 `protobuf:"bytes,3,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	ApiKey        string                 `protobuf:"bytes,4,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	MerchantId    string                 `protobuf:"bytes,6,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	Operator      string                 `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
	PlatConfig    string                 `protobuf:"bytes,8,opt,name=platConfig,proto3" json:"platConfig,omitempty"`
	Status        int64                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayPlatListDataItemResp) Reset() {
	*x = PayPlatListDataItemResp{}
	mi := &file_payrpc_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayPlatListDataItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayPlatListDataItemResp) ProtoMessage() {}

func (x *PayPlatListDataItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayPlatListDataItemResp.ProtoReflect.Descriptor instead.
func (*PayPlatListDataItemResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{184}
}

func (x *PayPlatListDataItemResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayPlatListDataItemResp) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *PayPlatListDataItemResp) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *PayPlatListDataItemResp) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PayPlatListDataItemResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PayPlatListDataItemResp) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PayPlatListDataItemResp) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PayPlatListDataItemResp) GetPlatConfig() string {
	if x != nil {
		return x.PlatConfig
	}
	return ""
}

func (x *PayPlatListDataItemResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayPlatListDataItemResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminTransferListReq struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Current       int64                     `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                     `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                    `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                  `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *AdminTransferListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferListReq) Reset() {
	*x = AdminTransferListReq{}
	mi := &file_payrpc_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferListReq) ProtoMessage() {}

func (x *AdminTransferListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferListReq.ProtoReflect.Descriptor instead.
func (*AdminTransferListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{185}
}

func (x *AdminTransferListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *AdminTransferListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AdminTransferListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *AdminTransferListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AdminTransferListReq) GetData() *AdminTransferListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminTransferListDataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AdminId       int64                  `protobuf:"varint,4,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserType      *int64                 `protobuf:"varint,5,opt,name=userType,proto3,oneof" json:"userType,omitempty"` //0正式，4测试
	Category      int64                  `protobuf:"varint,6,opt,name=category,proto3" json:"category,omitempty"`       //调账原因:0-其他 1-误存调账 2-活动调账
	Mobile        string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	AdminName     string                 `protobuf:"bytes,8,opt,name=adminName,proto3" json:"adminName,omitempty"` //操作人
	StartTime     int64                  `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,10,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferListDataReq) Reset() {
	*x = AdminTransferListDataReq{}
	mi := &file_payrpc_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferListDataReq) ProtoMessage() {}

func (x *AdminTransferListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferListDataReq.ProtoReflect.Descriptor instead.
func (*AdminTransferListDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{186}
}

func (x *AdminTransferListDataReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AdminTransferListDataReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminTransferListDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminTransferListDataReq) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *AdminTransferListDataReq) GetUserType() int64 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *AdminTransferListDataReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *AdminTransferListDataReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminTransferListDataReq) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *AdminTransferListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdminTransferListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type AdminTransferListResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Code          int32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *AdminTransferListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferListResp) Reset() {
	*x = AdminTransferListResp{}
	mi := &file_payrpc_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferListResp) ProtoMessage() {}

func (x *AdminTransferListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferListResp.ProtoReflect.Descriptor instead.
func (*AdminTransferListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{187}
}

func (x *AdminTransferListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminTransferListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AdminTransferListResp) GetData() *AdminTransferListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminTransferListDataResp struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Current       string                           `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Pages         string                           `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Size          string                           `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Total         string                           `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AdminTransferListDataItemResp `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferListDataResp) Reset() {
	*x = AdminTransferListDataResp{}
	mi := &file_payrpc_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferListDataResp) ProtoMessage() {}

func (x *AdminTransferListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferListDataResp.ProtoReflect.Descriptor instead.
func (*AdminTransferListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{188}
}

func (x *AdminTransferListDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *AdminTransferListDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *AdminTransferListDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *AdminTransferListDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *AdminTransferListDataResp) GetList() []*AdminTransferListDataItemResp {
	if x != nil {
		return x.List
	}
	return nil
}

type AdminTransferListDataItemResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Uid              int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username         string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Id               string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AdminId          int64                  `protobuf:"varint,4,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserType         int64                  `protobuf:"varint,5,opt,name=userType,proto3" json:"userType,omitempty"` //0正式，4测试
	Category         int64                  `protobuf:"varint,6,opt,name=category,proto3" json:"category,omitempty"` //调账原因:0-其他 1-误存调账 2-活动调账
	Mobile           string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	AdminName        string                 `protobuf:"bytes,8,opt,name=adminName,proto3" json:"adminName,omitempty"`      //操作人
	Coin             float32                `protobuf:"fixed32,9,opt,name=coin,proto3" json:"coin,omitempty"`              //调账金额
	CoinBefore       float32                `protobuf:"fixed32,10,opt,name=coinBefore,proto3" json:"coinBefore,omitempty"` //调账前金额
	Mark             string                 `protobuf:"bytes,11,opt,name=mark,proto3" json:"mark,omitempty"`               //备注(调账原因)
	CreatedAt        int64                  `protobuf:"varint,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	FlowClaim        int64                  `protobuf:"varint,14,opt,name=flowClaim,proto3" json:"flowClaim,omitempty"` //流水倍数
	Message          string                 `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`      //通知客服信息
	LevelText        string                 `protobuf:"bytes,16,opt,name=levelText,proto3" json:"levelText,omitempty"`
	MerchantId       int64                  `protobuf:"varint,17,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	MerchantName     string                 `protobuf:"bytes,18,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	MerchantCategory string                 `protobuf:"bytes,19,opt,name=merchantCategory,proto3" json:"merchantCategory,omitempty"` //商户类型 1线下门店 2线上
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AdminTransferListDataItemResp) Reset() {
	*x = AdminTransferListDataItemResp{}
	mi := &file_payrpc_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferListDataItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferListDataItemResp) ProtoMessage() {}

func (x *AdminTransferListDataItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferListDataItemResp.ProtoReflect.Descriptor instead.
func (*AdminTransferListDataItemResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{189}
}

func (x *AdminTransferListDataItemResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetUserType() int64 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetCoin() float32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetCoinBefore() float32 {
	if x != nil {
		return x.CoinBefore
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetFlowClaim() int64 {
	if x != nil {
		return x.FlowClaim
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *AdminTransferListDataItemResp) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *AdminTransferListDataItemResp) GetMerchantCategory() string {
	if x != nil {
		return x.MerchantCategory
	}
	return ""
}

type AdminTransferStatisticsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AdminId       int64                  `protobuf:"varint,4,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserType      *int64                 `protobuf:"varint,5,opt,name=userType,proto3,oneof" json:"userType,omitempty"` //0正式，4测试
	Category      int64                  `protobuf:"varint,6,opt,name=category,proto3" json:"category,omitempty"`       //调账原因:0-其他 1-误存调账 2-活动调账
	Mobile        string                 `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	AdminName     string                 `protobuf:"bytes,8,opt,name=adminName,proto3" json:"adminName,omitempty"` //操作人
	StartTime     int64                  `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,10,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferStatisticsReq) Reset() {
	*x = AdminTransferStatisticsReq{}
	mi := &file_payrpc_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferStatisticsReq) ProtoMessage() {}

func (x *AdminTransferStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferStatisticsReq.ProtoReflect.Descriptor instead.
func (*AdminTransferStatisticsReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{190}
}

func (x *AdminTransferStatisticsReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AdminTransferStatisticsReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminTransferStatisticsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminTransferStatisticsReq) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *AdminTransferStatisticsReq) GetUserType() int64 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *AdminTransferStatisticsReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *AdminTransferStatisticsReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminTransferStatisticsReq) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *AdminTransferStatisticsReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdminTransferStatisticsReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type AdminTransferStatisticsResp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Code          int64                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *AdminTransferStatisticsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferStatisticsResp) Reset() {
	*x = AdminTransferStatisticsResp{}
	mi := &file_payrpc_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferStatisticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferStatisticsResp) ProtoMessage() {}

func (x *AdminTransferStatisticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferStatisticsResp.ProtoReflect.Descriptor instead.
func (*AdminTransferStatisticsResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{191}
}

func (x *AdminTransferStatisticsResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminTransferStatisticsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AdminTransferStatisticsResp) GetData() *AdminTransferStatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminTransferStatisticsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coin          string                 `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminTransferStatisticsData) Reset() {
	*x = AdminTransferStatisticsData{}
	mi := &file_payrpc_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferStatisticsData) ProtoMessage() {}

func (x *AdminTransferStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferStatisticsData.ProtoReflect.Descriptor instead.
func (*AdminTransferStatisticsData) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{192}
}

func (x *AdminTransferStatisticsData) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type GetChannelListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      int64                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"` // 通道类型；1:代收 2:代付;充值为代收，提款为代付
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChannelListReq) Reset() {
	*x = GetChannelListReq{}
	mi := &file_payrpc_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChannelListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelListReq) ProtoMessage() {}

func (x *GetChannelListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelListReq.ProtoReflect.Descriptor instead.
func (*GetChannelListReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{193}
}

func (x *GetChannelListReq) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

type GetChannelListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int64                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          []*GetChannelListDataResp `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChannelListResp) Reset() {
	*x = GetChannelListResp{}
	mi := &file_payrpc_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChannelListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelListResp) ProtoMessage() {}

func (x *GetChannelListResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelListResp.ProtoReflect.Descriptor instead.
func (*GetChannelListResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{194}
}

func (x *GetChannelListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetChannelListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetChannelListResp) GetData() []*GetChannelListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetChannelListDataResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChannelListDataResp) Reset() {
	*x = GetChannelListDataResp{}
	mi := &file_payrpc_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChannelListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelListDataResp) ProtoMessage() {}

func (x *GetChannelListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelListDataResp.ProtoReflect.Descriptor instead.
func (*GetChannelListDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{195}
}

func (x *GetChannelListDataResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetChannelListDataResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WithdrawalSumReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Username         string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Uid              int64                  `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	CategoryTransfer int64                  `protobuf:"varint,5,opt,name=categoryTransfer,proto3" json:"categoryTransfer,omitempty"` //转账类型：1-TRC,2-ERC,3-BANK,4-PIX,5-GCASH 6-MAYA
	AdminUsername    string                 `protobuf:"bytes,6,opt,name=adminUsername,proto3" json:"adminUsername,omitempty"`
	PlatName         string                 `protobuf:"bytes,7,opt,name=platName,proto3" json:"platName,omitempty"`
	StatusArr        []int64                `protobuf:"varint,8,rep,packed,name=statusArr,proto3" json:"statusArr,omitempty"` //状态: 0-申请中，1-成功，2-失败;字典:dic_withdrawal_record_status
	LastLoginIp      string                 `protobuf:"bytes,9,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`
	TimeType         int64                  `protobuf:"varint,10,opt,name=timeType,proto3" json:"timeType,omitempty"`
	StartTime        int64                  `protobuf:"varint,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime          int64                  `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Status           string                 `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WithdrawalSumReq) Reset() {
	*x = WithdrawalSumReq{}
	mi := &file_payrpc_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalSumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalSumReq) ProtoMessage() {}

func (x *WithdrawalSumReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalSumReq.ProtoReflect.Descriptor instead.
func (*WithdrawalSumReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{196}
}

func (x *WithdrawalSumReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WithdrawalSumReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawalSumReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WithdrawalSumReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *WithdrawalSumReq) GetCategoryTransfer() int64 {
	if x != nil {
		return x.CategoryTransfer
	}
	return 0
}

func (x *WithdrawalSumReq) GetAdminUsername() string {
	if x != nil {
		return x.AdminUsername
	}
	return ""
}

func (x *WithdrawalSumReq) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *WithdrawalSumReq) GetStatusArr() []int64 {
	if x != nil {
		return x.StatusArr
	}
	return nil
}

func (x *WithdrawalSumReq) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *WithdrawalSumReq) GetTimeType() int64 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *WithdrawalSumReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WithdrawalSumReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *WithdrawalSumReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WithdrawalSumResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int64                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *WithdrawalSumDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalSumResp) Reset() {
	*x = WithdrawalSumResp{}
	mi := &file_payrpc_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalSumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalSumResp) ProtoMessage() {}

func (x *WithdrawalSumResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalSumResp.ProtoReflect.Descriptor instead.
func (*WithdrawalSumResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{197}
}

func (x *WithdrawalSumResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawalSumResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WithdrawalSumResp) GetData() *WithdrawalSumDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type WithdrawalSumDataResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`        //提款笔数
	TotalCoin     string                 `protobuf:"bytes,2,opt,name=totalCoin,proto3" json:"totalCoin,omitempty"` //提款总金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawalSumDataResp) Reset() {
	*x = WithdrawalSumDataResp{}
	mi := &file_payrpc_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawalSumDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalSumDataResp) ProtoMessage() {}

func (x *WithdrawalSumDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalSumDataResp.ProtoReflect.Descriptor instead.
func (*WithdrawalSumDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{198}
}

func (x *WithdrawalSumDataResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WithdrawalSumDataResp) GetTotalCoin() string {
	if x != nil {
		return x.TotalCoin
	}
	return ""
}

type UpdateChannelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        int64                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChannelReq) Reset() {
	*x = UpdateChannelReq{}
	mi := &file_payrpc_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelReq) ProtoMessage() {}

func (x *UpdateChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelReq.ProtoReflect.Descriptor instead.
func (*UpdateChannelReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{199}
}

func (x *UpdateChannelReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateChannelReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateChannelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int64                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          bool                   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChannelResp) Reset() {
	*x = UpdateChannelResp{}
	mi := &file_payrpc_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelResp) ProtoMessage() {}

func (x *UpdateChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelResp.ProtoReflect.Descriptor instead.
func (*UpdateChannelResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{200}
}

func (x *UpdateChannelResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateChannelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateChannelResp) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type DepositDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositDetailReq) Reset() {
	*x = DepositDetailReq{}
	mi := &file_payrpc_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositDetailReq) ProtoMessage() {}

func (x *DepositDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositDetailReq.ProtoReflect.Descriptor instead.
func (*DepositDetailReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{201}
}

func (x *DepositDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DepositDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int64                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *DepositDetailDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositDetailResp) Reset() {
	*x = DepositDetailResp{}
	mi := &file_payrpc_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositDetailResp) ProtoMessage() {}

func (x *DepositDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositDetailResp.ProtoReflect.Descriptor instead.
func (*DepositDetailResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{202}
}

func (x *DepositDetailResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DepositDetailResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DepositDetailResp) GetData() *DepositDetailDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositDetailDataResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Category         int64                  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt        int64                  `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DepStatus        int64                  `protobuf:"varint,4,opt,name=depStatus,proto3" json:"depStatus,omitempty"`
	ExchangeRate     string                 `protobuf:"bytes,5,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	Id               string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	LevelText        string                 `protobuf:"bytes,7,opt,name=levelText,proto3" json:"levelText,omitempty"`
	MerchantCategory string                 `protobuf:"bytes,8,opt,name=merchantCategory,proto3" json:"merchantCategory,omitempty"`
	MerchantId       int64                  `protobuf:"varint,9,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	MerchantName     string                 `protobuf:"bytes,10,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	OperatorName     string                 `protobuf:"bytes,11,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	OrderId          string                 `protobuf:"bytes,12,opt,name=orderId,proto3" json:"orderId,omitempty"`
	PayAddress       string                 `protobuf:"bytes,13,opt,name=payAddress,proto3" json:"payAddress,omitempty"`
	PayAmount        string                 `protobuf:"bytes,14,opt,name=payAmount,proto3" json:"payAmount,omitempty"`
	PlatName         string                 `protobuf:"bytes,15,opt,name=platName,proto3" json:"platName,omitempty"`
	PlatNickName     string                 `protobuf:"bytes,16,opt,name=platNickName,proto3" json:"platNickName,omitempty"`
	PlatOrderId      string                 `protobuf:"bytes,17,opt,name=platOrderId,proto3" json:"platOrderId,omitempty"`
	RealAmount       string                 `protobuf:"bytes,18,opt,name=realAmount,proto3" json:"realAmount,omitempty"`
	Status           int64                  `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt        int64                  `protobuf:"varint,20,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Username         string                 `protobuf:"bytes,21,opt,name=username,proto3" json:"username,omitempty"`
	Uid              int64                  `protobuf:"varint,22,opt,name=uid,proto3" json:"uid,omitempty"`
	AdminUid         int64                  `protobuf:"varint,23,opt,name=adminUid,proto3" json:"adminUid,omitempty"`
	PlatTypeName     string                 `protobuf:"bytes,24,opt,name=platTypeName,proto3" json:"platTypeName,omitempty"`
	CoinBefore       float32                `protobuf:"fixed32,25,opt,name=coinBefore,proto3" json:"coinBefore,omitempty"` // 当时余额
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DepositDetailDataResp) Reset() {
	*x = DepositDetailDataResp{}
	mi := &file_payrpc_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositDetailDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositDetailDataResp) ProtoMessage() {}

func (x *DepositDetailDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositDetailDataResp.ProtoReflect.Descriptor instead.
func (*DepositDetailDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{203}
}

func (x *DepositDetailDataResp) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *DepositDetailDataResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DepositDetailDataResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DepositDetailDataResp) GetDepStatus() int64 {
	if x != nil {
		return x.DepStatus
	}
	return 0
}

func (x *DepositDetailDataResp) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *DepositDetailDataResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DepositDetailDataResp) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *DepositDetailDataResp) GetMerchantCategory() string {
	if x != nil {
		return x.MerchantCategory
	}
	return ""
}

func (x *DepositDetailDataResp) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *DepositDetailDataResp) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *DepositDetailDataResp) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *DepositDetailDataResp) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositDetailDataResp) GetPayAddress() string {
	if x != nil {
		return x.PayAddress
	}
	return ""
}

func (x *DepositDetailDataResp) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *DepositDetailDataResp) GetPlatName() string {
	if x != nil {
		return x.PlatName
	}
	return ""
}

func (x *DepositDetailDataResp) GetPlatNickName() string {
	if x != nil {
		return x.PlatNickName
	}
	return ""
}

func (x *DepositDetailDataResp) GetPlatOrderId() string {
	if x != nil {
		return x.PlatOrderId
	}
	return ""
}

func (x *DepositDetailDataResp) GetRealAmount() string {
	if x != nil {
		return x.RealAmount
	}
	return ""
}

func (x *DepositDetailDataResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DepositDetailDataResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DepositDetailDataResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DepositDetailDataResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DepositDetailDataResp) GetAdminUid() int64 {
	if x != nil {
		return x.AdminUid
	}
	return 0
}

func (x *DepositDetailDataResp) GetPlatTypeName() string {
	if x != nil {
		return x.PlatTypeName
	}
	return ""
}

func (x *DepositDetailDataResp) GetCoinBefore() float32 {
	if x != nil {
		return x.CoinBefore
	}
	return 0
}

type RevenueDailyTaxCountReq struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Current       int64                        `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                        `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                       `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                     `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *RevenueDailyTaxCountDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxCountReq) Reset() {
	*x = RevenueDailyTaxCountReq{}
	mi := &file_payrpc_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxCountReq) ProtoMessage() {}

func (x *RevenueDailyTaxCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxCountReq.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxCountReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{204}
}

func (x *RevenueDailyTaxCountReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *RevenueDailyTaxCountReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RevenueDailyTaxCountReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *RevenueDailyTaxCountReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *RevenueDailyTaxCountReq) GetData() *RevenueDailyTaxCountDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type RevenueDailyTaxCountDataReq struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StartTime           int64                  `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime             int64                  `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	TimeType            int64                  `protobuf:"varint,3,opt,name=timeType,proto3" json:"timeType,omitempty"`
	ProviderSubtypeList []int64                `protobuf:"varint,4,rep,packed,name=providerSubtypeList,proto3" json:"providerSubtypeList,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RevenueDailyTaxCountDataReq) Reset() {
	*x = RevenueDailyTaxCountDataReq{}
	mi := &file_payrpc_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxCountDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxCountDataReq) ProtoMessage() {}

func (x *RevenueDailyTaxCountDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxCountDataReq.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxCountDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{205}
}

func (x *RevenueDailyTaxCountDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RevenueDailyTaxCountDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RevenueDailyTaxCountDataReq) GetTimeType() int64 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *RevenueDailyTaxCountDataReq) GetProviderSubtypeList() []int64 {
	if x != nil {
		return x.ProviderSubtypeList
	}
	return nil
}

type RevenueDailyTaxCountResp struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Code          int64                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *RevenueDailyTaxCountDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxCountResp) Reset() {
	*x = RevenueDailyTaxCountResp{}
	mi := &file_payrpc_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxCountResp) ProtoMessage() {}

func (x *RevenueDailyTaxCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxCountResp.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxCountResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{206}
}

func (x *RevenueDailyTaxCountResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RevenueDailyTaxCountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RevenueDailyTaxCountResp) GetData() *RevenueDailyTaxCountDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type RevenueDailyTaxCountDataResp struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Total         float32                             `protobuf:"fixed32,1,opt,name=total,proto3" json:"total,omitempty"`     //总额
	DataList      []*RevenueDailyTaxCountDataItemResp `protobuf:"bytes,2,rep,name=dataList,proto3" json:"dataList,omitempty"` //列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxCountDataResp) Reset() {
	*x = RevenueDailyTaxCountDataResp{}
	mi := &file_payrpc_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxCountDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxCountDataResp) ProtoMessage() {}

func (x *RevenueDailyTaxCountDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxCountDataResp.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxCountDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{207}
}

func (x *RevenueDailyTaxCountDataResp) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RevenueDailyTaxCountDataResp) GetDataList() []*RevenueDailyTaxCountDataItemResp {
	if x != nil {
		return x.DataList
	}
	return nil
}

type RevenueDailyTaxCountDataItemResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TaxCountTotal string                 `protobuf:"bytes,2,opt,name=taxCountTotal,proto3" json:"taxCountTotal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxCountDataItemResp) Reset() {
	*x = RevenueDailyTaxCountDataItemResp{}
	mi := &file_payrpc_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxCountDataItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxCountDataItemResp) ProtoMessage() {}

func (x *RevenueDailyTaxCountDataItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxCountDataItemResp.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxCountDataItemResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{208}
}

func (x *RevenueDailyTaxCountDataItemResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RevenueDailyTaxCountDataItemResp) GetTaxCountTotal() string {
	if x != nil {
		return x.TaxCountTotal
	}
	return ""
}

type RevenueDailyTaxReq struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Current       int64                        `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          int64                        `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey       string                       `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField     []string                     `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data          *RevenueDailyTaxCountDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxReq) Reset() {
	*x = RevenueDailyTaxReq{}
	mi := &file_payrpc_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxReq) ProtoMessage() {}

func (x *RevenueDailyTaxReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxReq.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{209}
}

func (x *RevenueDailyTaxReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *RevenueDailyTaxReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RevenueDailyTaxReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *RevenueDailyTaxReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *RevenueDailyTaxReq) GetData() *RevenueDailyTaxCountDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type RevenueDailyTaxResp struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Code          int64                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *RevenueDailyTaxDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxResp) Reset() {
	*x = RevenueDailyTaxResp{}
	mi := &file_payrpc_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxResp) ProtoMessage() {}

func (x *RevenueDailyTaxResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxResp.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{210}
}

func (x *RevenueDailyTaxResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RevenueDailyTaxResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RevenueDailyTaxResp) GetData() *RevenueDailyTaxDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type RevenueDailyTaxDataResp struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Current       string                         `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Size          string                         `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages         string                         `protobuf:"bytes,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Total         string                         `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	List          []*RevenueDailyTaxDataItemResp `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevenueDailyTaxDataResp) Reset() {
	*x = RevenueDailyTaxDataResp{}
	mi := &file_payrpc_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxDataResp) ProtoMessage() {}

func (x *RevenueDailyTaxDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxDataResp.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{211}
}

func (x *RevenueDailyTaxDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *RevenueDailyTaxDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *RevenueDailyTaxDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *RevenueDailyTaxDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *RevenueDailyTaxDataResp) GetList() []*RevenueDailyTaxDataItemResp {
	if x != nil {
		return x.List
	}
	return nil
}

type RevenueDailyTaxDataItemResp struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CoinTax               string                 `protobuf:"bytes,1,opt,name=coinTax,proto3" json:"coinTax,omitempty"`
	GameProviderSubtypeId string                 `protobuf:"bytes,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"`
	LastOperationTime     string                 `protobuf:"bytes,3,opt,name=lastOperationTime,proto3" json:"lastOperationTime,omitempty"`
	LastOperator          string                 `protobuf:"bytes,4,opt,name=lastOperator,proto3" json:"lastOperator,omitempty"`
	ProviderName          string                 `protobuf:"bytes,5,opt,name=providerName,proto3" json:"providerName,omitempty"`
	ProviderRate          string                 `protobuf:"bytes,6,opt,name=providerRate,proto3" json:"providerRate,omitempty"`
	ProviderSubtypeName   string                 `protobuf:"bytes,7,opt,name=providerSubtypeName,proto3" json:"providerSubtypeName,omitempty"`
	Rate                  string                 `protobuf:"bytes,8,opt,name=rate,proto3" json:"rate,omitempty"`
	ValidBetAmount        string                 `protobuf:"bytes,9,opt,name=validBetAmount,proto3" json:"validBetAmount,omitempty"`
	WinLoseAmount         string                 `protobuf:"bytes,10,opt,name=winLoseAmount,proto3" json:"winLoseAmount,omitempty"`
	YearMonthDay          string                 `protobuf:"bytes,11,opt,name=yearMonthDay,proto3" json:"yearMonthDay,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RevenueDailyTaxDataItemResp) Reset() {
	*x = RevenueDailyTaxDataItemResp{}
	mi := &file_payrpc_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevenueDailyTaxDataItemResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueDailyTaxDataItemResp) ProtoMessage() {}

func (x *RevenueDailyTaxDataItemResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueDailyTaxDataItemResp.ProtoReflect.Descriptor instead.
func (*RevenueDailyTaxDataItemResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{212}
}

func (x *RevenueDailyTaxDataItemResp) GetCoinTax() string {
	if x != nil {
		return x.CoinTax
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetGameProviderSubtypeId() string {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetLastOperationTime() string {
	if x != nil {
		return x.LastOperationTime
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetLastOperator() string {
	if x != nil {
		return x.LastOperator
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetProviderRate() string {
	if x != nil {
		return x.ProviderRate
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetProviderSubtypeName() string {
	if x != nil {
		return x.ProviderSubtypeName
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetValidBetAmount() string {
	if x != nil {
		return x.ValidBetAmount
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetWinLoseAmount() string {
	if x != nil {
		return x.WinLoseAmount
	}
	return ""
}

func (x *RevenueDailyTaxDataItemResp) GetYearMonthDay() string {
	if x != nil {
		return x.YearMonthDay
	}
	return ""
}

type GetGameProviderSubtypeReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GameProviderId int64                  `protobuf:"varint,1,opt,name=gameProviderId,proto3" json:"gameProviderId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetGameProviderSubtypeReq) Reset() {
	*x = GetGameProviderSubtypeReq{}
	mi := &file_payrpc_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameProviderSubtypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameProviderSubtypeReq) ProtoMessage() {}

func (x *GetGameProviderSubtypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameProviderSubtypeReq.ProtoReflect.Descriptor instead.
func (*GetGameProviderSubtypeReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{213}
}

func (x *GetGameProviderSubtypeReq) GetGameProviderId() int64 {
	if x != nil {
		return x.GameProviderId
	}
	return 0
}

type GetGameProviderSubtypeResp struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Code          int64                             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          []*GetGameProviderSubtypeDataResp `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGameProviderSubtypeResp) Reset() {
	*x = GetGameProviderSubtypeResp{}
	mi := &file_payrpc_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameProviderSubtypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameProviderSubtypeResp) ProtoMessage() {}

func (x *GetGameProviderSubtypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameProviderSubtypeResp.ProtoReflect.Descriptor instead.
func (*GetGameProviderSubtypeResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{214}
}

func (x *GetGameProviderSubtypeResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetGameProviderSubtypeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetGameProviderSubtypeResp) GetData() []*GetGameProviderSubtypeDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetGameProviderSubtypeDataResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon           string                 `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	GameTypeId     int64                  `protobuf:"varint,4,opt,name=gameTypeId,proto3" json:"gameTypeId,omitempty"`
	Model          string                 `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	GamePagcorId   int64                  `protobuf:"varint,8,opt,name=gamePagcorId,proto3" json:"gamePagcorId,omitempty"`
	GameProviderId int64                  `protobuf:"varint,9,opt,name=gameProviderId,proto3" json:"gameProviderId,omitempty"`
	ProviderRate   string                 `protobuf:"bytes,10,opt,name=providerRate,proto3" json:"providerRate,omitempty"`
	PagcorRate     string                 `protobuf:"bytes,11,opt,name=pagcorRate,proto3" json:"pagcorRate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetGameProviderSubtypeDataResp) Reset() {
	*x = GetGameProviderSubtypeDataResp{}
	mi := &file_payrpc_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameProviderSubtypeDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameProviderSubtypeDataResp) ProtoMessage() {}

func (x *GetGameProviderSubtypeDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameProviderSubtypeDataResp.ProtoReflect.Descriptor instead.
func (*GetGameProviderSubtypeDataResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{215}
}

func (x *GetGameProviderSubtypeDataResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetGameProviderSubtypeDataResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGameProviderSubtypeDataResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GetGameProviderSubtypeDataResp) GetGameTypeId() int64 {
	if x != nil {
		return x.GameTypeId
	}
	return 0
}

func (x *GetGameProviderSubtypeDataResp) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetGameProviderSubtypeDataResp) GetGamePagcorId() int64 {
	if x != nil {
		return x.GamePagcorId
	}
	return 0
}

func (x *GetGameProviderSubtypeDataResp) GetGameProviderId() int64 {
	if x != nil {
		return x.GameProviderId
	}
	return 0
}

func (x *GetGameProviderSubtypeDataResp) GetProviderRate() string {
	if x != nil {
		return x.ProviderRate
	}
	return ""
}

func (x *GetGameProviderSubtypeDataResp) GetPagcorRate() string {
	if x != nil {
		return x.PagcorRate
	}
	return ""
}

type UpdateGameProviderSubtypeRateReq struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Data          []*UpdateGameProviderSubtypeRateDataReq `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGameProviderSubtypeRateReq) Reset() {
	*x = UpdateGameProviderSubtypeRateReq{}
	mi := &file_payrpc_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameProviderSubtypeRateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameProviderSubtypeRateReq) ProtoMessage() {}

func (x *UpdateGameProviderSubtypeRateReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameProviderSubtypeRateReq.ProtoReflect.Descriptor instead.
func (*UpdateGameProviderSubtypeRateReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{216}
}

func (x *UpdateGameProviderSubtypeRateReq) GetData() []*UpdateGameProviderSubtypeRateDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateGameProviderSubtypeRateDataReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GamePagcorId   int64                  `protobuf:"varint,3,opt,name=gamePagcorId,proto3" json:"gamePagcorId,omitempty"`
	GameProviderId int64                  `protobuf:"varint,4,opt,name=gameProviderId,proto3" json:"gameProviderId,omitempty"`
	GameTypeId     int64                  `protobuf:"varint,5,opt,name=gameTypeId,proto3" json:"gameTypeId,omitempty"`
	Icon           string                 `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Model          string                 `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	PagcorRate     string                 `protobuf:"bytes,8,opt,name=pagcorRate,proto3" json:"pagcorRate,omitempty"`
	ProviderRate   string                 `protobuf:"bytes,9,opt,name=providerRate,proto3" json:"providerRate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateGameProviderSubtypeRateDataReq) Reset() {
	*x = UpdateGameProviderSubtypeRateDataReq{}
	mi := &file_payrpc_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameProviderSubtypeRateDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameProviderSubtypeRateDataReq) ProtoMessage() {}

func (x *UpdateGameProviderSubtypeRateDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameProviderSubtypeRateDataReq.ProtoReflect.Descriptor instead.
func (*UpdateGameProviderSubtypeRateDataReq) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{217}
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetGamePagcorId() int64 {
	if x != nil {
		return x.GamePagcorId
	}
	return 0
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetGameProviderId() int64 {
	if x != nil {
		return x.GameProviderId
	}
	return 0
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetGameTypeId() int64 {
	if x != nil {
		return x.GameTypeId
	}
	return 0
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetPagcorRate() string {
	if x != nil {
		return x.PagcorRate
	}
	return ""
}

func (x *UpdateGameProviderSubtypeRateDataReq) GetProviderRate() string {
	if x != nil {
		return x.ProviderRate
	}
	return ""
}

type UpdateGameProviderSubtypeRateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          bool                   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGameProviderSubtypeRateResp) Reset() {
	*x = UpdateGameProviderSubtypeRateResp{}
	mi := &file_payrpc_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameProviderSubtypeRateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameProviderSubtypeRateResp) ProtoMessage() {}

func (x *UpdateGameProviderSubtypeRateResp) ProtoReflect() protoreflect.Message {
	mi := &file_payrpc_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameProviderSubtypeRateResp.ProtoReflect.Descriptor instead.
func (*UpdateGameProviderSubtypeRateResp) Descriptor() ([]byte, []int) {
	return file_payrpc_proto_rawDescGZIP(), []int{218}
}

func (x *UpdateGameProviderSubtypeRateResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateGameProviderSubtypeRateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateGameProviderSubtypeRateResp) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

var File_payrpc_proto protoreflect.FileDescriptor

var file_payrpc_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3c, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0x62, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x6a, 0x0a,
	0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x69, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x40, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x64, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70,
	0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5e, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xee, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x4d, 0x0a, 0x11, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x02, 0x0a, 0x13, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0x50, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x35, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x4e, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x52, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x0e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x27, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x75, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9d, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x53, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x49,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x02,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc,
	0x0b, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x69, 0x66, 0x66, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x44, 0x69, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49,
	0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb2, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x0b, 0x49, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5f, 0x0a, 0x0b, 0x49, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0x56, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a,
	0x1d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x02, 0x0a, 0x1e,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x0c,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x50,
	0x61, 0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x50, 0x61,
	0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x12, 0x50, 0x61, 0x67,
	0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67,
	0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x63, 0x6f, 0x72,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54,
	0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x86, 0x05, 0x0a, 0x16, 0x50, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x63, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x63, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x61,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x78, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6b,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x01, 0x0a, 0x19, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xef, 0x02, 0x0a, 0x1d, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x79, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a,
	0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x49, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x22, 0x4b, 0x0a, 0x21,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a,
	0x0a, 0x20, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xf2, 0x01, 0x0a, 0x21, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x04, 0x0a, 0x21, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x5c, 0x0a, 0x22, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x23, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x74, 0x42, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x74, 0x42, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x15, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x15, 0x52, 0x65,
	0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x52, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x08,
	0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x17, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x76, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x6f, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x6c, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x69, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x6c, 0x79,
	0x22, 0xb2, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x74, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa5, 0x06, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x22,
	0x5c, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a,
	0x15, 0x50, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x93, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x42, 0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x57, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x57, 0x6f,
	0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x02, 0x0a, 0x1b, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x58,
	0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x1b, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x58, 0x0a, 0x1c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x42, 0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc2, 0x02, 0x0a, 0x1c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x1d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xe5, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x58, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42,
	0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x2d, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42,
	0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x49, 0x0a,
	0x11, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x70, 0x4d, 0x73, 0x67, 0x22, 0xa5, 0x02, 0x0a, 0x1d, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x63,
	0x68, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x63, 0x68, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x62, 0x69, 0x7a, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0x56, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42, 0x66, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x22, 0x57, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x53,
	0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x02, 0x0a, 0x19,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x74, 0x79, 0x70, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x74, 0x79, 0x70, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x79, 0x73,
	0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x56, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae,
	0x02, 0x0a, 0x1a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x69, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x6e,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x79, 0x73, 0x4e, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0x57, 0x0a, 0x1b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x69, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x1b, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x22, 0x58, 0x0a, 0x1c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x01,
	0x0a, 0x1c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x59, 0x0a, 0x1d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5f, 0x0a, 0x1a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42,
	0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x2d, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0x88, 0x02, 0x0a, 0x1b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x79, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x66,
	0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc7, 0x01,
	0x0a, 0x21, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x66, 0x50, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x74, 0x72, 0x22, 0x57, 0x0a, 0x1b, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x7a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x4d, 0x73, 0x67, 0x22, 0x94, 0x02, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x23, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x47, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x16, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xd4, 0x04, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01,
	0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x18,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xce, 0x05, 0x0a, 0x18, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x19, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x30, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42,
	0x79, 0x41, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x55, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x01,
	0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x56, 0x0a, 0x1a, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x22, 0x82,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x03, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x12, 0x50,
	0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa4, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x17, 0x50, 0x61, 0x79, 0x50, 0x6c,
	0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xaa, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x15,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xac, 0x02, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x6e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x10, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x11, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x15, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x87, 0x06, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7a,
	0x0a, 0x18, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x1c, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x44, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x20, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x13, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x1b,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x69, 0x6e, 0x54, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x69, 0x6e, 0x54, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x79, 0x65, 0x61,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x79, 0x22, 0x43, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9e, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x63, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x63, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa4, 0x02, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x63, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x5d, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0xce, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x69,
	0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x62, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x57, 0x6f, 0x77,
	0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x57, 0x6f,
	0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x42, 0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x12, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x18, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x4d,
	0x6f, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5f, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42,
	0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x42,
	0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x42, 0x79, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79,
	0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x22,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42,
	0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x42, 0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x18, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12,
	0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x42, 0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x57, 0x6f, 0x77, 0x49, 0x64, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x19, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x4d, 0x6f, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62,
	0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x66, 0x50, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x42, 0x66, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x79, 0x42, 0x66, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x65, 0x0a, 0x18, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79,
	0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x23,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x42, 0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x53, 0x69, 0x78, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x17, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x69, 0x50, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a,
	0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x50, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x79, 0x41, 0x50,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47,
	0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x13,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x65, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x1e, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x12, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6b, 0x0a, 0x1a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x61,
	0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x12, 0x19, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x65, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x19,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x19, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x7a, 0x0a, 0x1f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x74, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x42, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x42, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x65, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x14, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x75,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x1d,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x12,
	0x19, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x65, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22,
	0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x44, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e,
	0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x79,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a,
	0x0f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78,
	0x12, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70,
	0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x54, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x61,
	0x79, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x61, 0x79, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_payrpc_proto_rawDescOnce sync.Once
	file_payrpc_proto_rawDescData []byte
)

func file_payrpc_proto_rawDescGZIP() []byte {
	file_payrpc_proto_rawDescOnce.Do(func() {
		file_payrpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_payrpc_proto_rawDesc), len(file_payrpc_proto_rawDesc)))
	})
	return file_payrpc_proto_rawDescData
}

var file_payrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 219)
var file_payrpc_proto_goTypes = []any{
	(*BindAccountReq)(nil),                       // 0: payrpc.BindAccountReq
	(*BindAccountResp)(nil),                      // 1: payrpc.BindAccountResp
	(*PayAccountReq)(nil),                        // 2: payrpc.PayAccountReq
	(*PayAccountResp)(nil),                       // 3: payrpc.PayAccountResp
	(*PayAccountData)(nil),                       // 4: payrpc.PayAccountData
	(*WithdrawConfigReq)(nil),                    // 5: payrpc.WithdrawConfigReq
	(*WithdrawConfigResp)(nil),                   // 6: payrpc.WithdrawConfigResp
	(*WithdrawConfigData)(nil),                   // 7: payrpc.WithdrawConfigData
	(*ChannelListReq)(nil),                       // 8: payrpc.ChannelListReq
	(*ChannelListResp)(nil),                      // 9: payrpc.ChannelListResp
	(*ChannelListData)(nil),                      // 10: payrpc.ChannelListData
	(*WithdrawReq)(nil),                          // 11: payrpc.WithdrawReq
	(*WithdrawResp)(nil),                         // 12: payrpc.WithdrawResp
	(*DepositReq)(nil),                           // 13: payrpc.DepositReq
	(*DepositResp)(nil),                          // 14: payrpc.DepositResp
	(*DepositCallBackReq)(nil),                   // 15: payrpc.DepositCallBackReq
	(*DepositCallBackResp)(nil),                  // 16: payrpc.DepositCallBackResp
	(*DepositSearchReq)(nil),                     // 17: payrpc.DepositSearchReq
	(*DepositSearchResp)(nil),                    // 18: payrpc.DepositSearchResp
	(*WithdrawCallBackReq)(nil),                  // 19: payrpc.WithdrawCallBackReq
	(*WithdrawCallBackResp)(nil),                 // 20: payrpc.WithdrawCallBackResp
	(*WithdrawSearchReq)(nil),                    // 21: payrpc.WithdrawSearchReq
	(*WithdrawSearchResp)(nil),                   // 22: payrpc.WithdrawSearchResp
	(*FindMerchantBlanceReq)(nil),                // 23: payrpc.FindMerchantBlanceReq
	(*FindMerchantBlanceResp)(nil),               // 24: payrpc.FindMerchantBlanceResp
	(*RefundOrderReq)(nil),                       // 25: payrpc.RefundOrderReq
	(*RefundOrderResp)(nil),                      // 26: payrpc.RefundOrderResp
	(*RefundOrderCallBackReq)(nil),               // 27: payrpc.RefundOrderCallBackReq
	(*RefundOrderCallBackResp)(nil),              // 28: payrpc.RefundOrderCallBackResp
	(*CheckDepositReq)(nil),                      // 29: payrpc.CheckDepositReq
	(*CheckDepositResp)(nil),                     // 30: payrpc.CheckDepositResp
	(*GetCoinLogListReq)(nil),                    // 31: payrpc.GetCoinLogListReq
	(*GetCoinLogListDataReq)(nil),                // 32: payrpc.GetCoinLogListDataReq
	(*GetCoinLogListResp)(nil),                   // 33: payrpc.GetCoinLogListResp
	(*CoinLogListData)(nil),                      // 34: payrpc.CoinLogListData
	(*CoinLogListItem)(nil),                      // 35: payrpc.CoinLogListItem
	(*GetAuditWithdrawalRecordReq)(nil),          // 36: payrpc.GetAuditWithdrawalRecordReq
	(*GetAuditWithdrawalRecordDataReq)(nil),      // 37: payrpc.GetAuditWithdrawalRecordDataReq
	(*GetAuditWithdrawalRecordResp)(nil),         // 38: payrpc.GetAuditWithdrawalRecordResp
	(*GetAuditWithdrawalRecordData)(nil),         // 39: payrpc.GetAuditWithdrawalRecordData
	(*GetAuditWithdrawalRecordDataListItem)(nil), // 40: payrpc.GetAuditWithdrawalRecordDataListItem
	(*UserFlagInfo)(nil),                         // 41: payrpc.UserFlagInfo
	(*GetDepositWithdrawalStatisticsReq)(nil),    // 42: payrpc.GetDepositWithdrawalStatisticsReq
	(*GetDepositWithdrawalStatisticsResp)(nil),   // 43: payrpc.GetDepositWithdrawalStatisticsResp
	(*GetDepositWithdrawalStatisticsData)(nil),   // 44: payrpc.GetDepositWithdrawalStatisticsData
	(*IsAuditReq)(nil),                           // 45: payrpc.IsAuditReq
	(*IsAuditResp)(nil),                          // 46: payrpc.IsAuditResp
	(*IsAuditData)(nil),                          // 47: payrpc.IsAuditData
	(*FinanceWithDrawReq)(nil),                   // 48: payrpc.FinanceWithDrawReq
	(*FinanceWithDrawResp)(nil),                  // 49: payrpc.FinanceWithDrawResp
	(*DailyReportStatisticsCountReq)(nil),        // 50: payrpc.DailyReportStatisticsCountReq
	(*DailyReportStatisticsCountResp)(nil),       // 51: payrpc.DailyReportStatisticsCountResp
	(*DailyReportStatisticsCountData)(nil),       // 52: payrpc.DailyReportStatisticsCountData
	(*GetUserCoinReq)(nil),                       // 53: payrpc.GetUserCoinReq
	(*GetUserCoinResp)(nil),                      // 54: payrpc.GetUserCoinResp
	(*GetUserCoinData)(nil),                      // 55: payrpc.GetUserCoinData
	(*CoinRateReq)(nil),                          // 56: payrpc.CoinRateReq
	(*CoinRateResp)(nil),                         // 57: payrpc.CoinRateResp
	(*CoinRateData)(nil),                         // 58: payrpc.CoinRateData
	(*CoinRateDataItem)(nil),                     // 59: payrpc.CoinRateDataItem
	(*PagcorDailyTaxReq)(nil),                    // 60: payrpc.PagcorDailyTaxReq
	(*PagcorDailyTaxDataReq)(nil),                // 61: payrpc.PagcorDailyTaxDataReq
	(*PagcorDailyTaxResp)(nil),                   // 62: payrpc.PagcorDailyTaxResp
	(*PagcorDailyTaxData)(nil),                   // 63: payrpc.PagcorDailyTaxData
	(*PagcorDailyTaxDataItem)(nil),               // 64: payrpc.PagcorDailyTaxDataItem
	(*GetDepositRecordReq)(nil),                  // 65: payrpc.GetDepositRecordReq
	(*GetDepositRecordDataReq)(nil),              // 66: payrpc.GetDepositRecordDataReq
	(*GetDepositRecordResp)(nil),                 // 67: payrpc.GetDepositRecordResp
	(*DepositRecordData)(nil),                    // 68: payrpc.DepositRecordData
	(*DepositRecordDataItem)(nil),                // 69: payrpc.DepositRecordDataItem
	(*GetFrontWithdrawalRecordReq)(nil),          // 70: payrpc.GetFrontWithdrawalRecordReq
	(*GetFrontWithdrawalRecordDataReq)(nil),      // 71: payrpc.GetFrontWithdrawalRecordDataReq
	(*GetFrontWithdrawalRecordResp)(nil),         // 72: payrpc.GetFrontWithdrawalRecordResp
	(*FrontWithdrawalRecordData)(nil),            // 73: payrpc.FrontWithdrawalRecordData
	(*FrontWithdrawalRecordDataItem)(nil),        // 74: payrpc.FrontWithdrawalRecordDataItem
	(*TotalSummaryReq)(nil),                      // 75: payrpc.TotalSummaryReq
	(*TotalSummaryResp)(nil),                     // 76: payrpc.TotalSummaryResp
	(*TotalSummaryData)(nil),                     // 77: payrpc.TotalSummaryData
	(*DepositAndWithdrawalChartReq)(nil),         // 78: payrpc.DepositAndWithdrawalChartReq
	(*DepositAndWithdrawalChartResp)(nil),        // 79: payrpc.DepositAndWithdrawalChartResp
	(*DepositAndWithdrawalChartDataResp)(nil),    // 80: payrpc.DepositAndWithdrawalChartDataResp
	(*DepositAndWithdrawalChartDataItem)(nil),    // 81: payrpc.DepositAndWithdrawalChartDataItem
	(*DailyConversionReportListReq)(nil),         // 82: payrpc.DailyConversionReportListReq
	(*DailyConversionReportListDataReq)(nil),     // 83: payrpc.DailyConversionReportListDataReq
	(*DailyConversionReportListResp)(nil),        // 84: payrpc.DailyConversionReportListResp
	(*DailyConversionReportListDataResp)(nil),    // 85: payrpc.DailyConversionReportListDataResp
	(*DailyConversionReportListDataItem)(nil),    // 86: payrpc.DailyConversionReportListDataItem
	(*DailyConversionReportStatisticsReq)(nil),   // 87: payrpc.DailyConversionReportStatisticsReq
	(*DailyConversionReportStatisticsResp)(nil),  // 88: payrpc.DailyConversionReportStatisticsResp
	(*DailyConversionReportStatisticsData)(nil),  // 89: payrpc.DailyConversionReportStatisticsData
	(*PlatBetCoinChartReq)(nil),                  // 90: payrpc.PlatBetCoinChartReq
	(*PlatBetCoinChartResp)(nil),                 // 91: payrpc.PlatBetCoinChartResp
	(*PlatBetCoinChartData)(nil),                 // 92: payrpc.PlatBetCoinChartData
	(*WalletOutTransferReq)(nil),                 // 93: payrpc.WalletOutTransferReq
	(*WalletOutTransferResp)(nil),                // 94: payrpc.WalletOutTransferResp
	(*ReplenishmentOrderReq)(nil),                // 95: payrpc.ReplenishmentOrderReq
	(*ReplenishmentOrderResp)(nil),               // 96: payrpc.ReplenishmentOrderResp
	(*WithdrawalListReq)(nil),                    // 97: payrpc.WithdrawalListReq
	(*WithdrawalListDataReq)(nil),                // 98: payrpc.WithdrawalListDataReq
	(*WithdrawalListResp)(nil),                   // 99: payrpc.WithdrawalListResp
	(*WithdrawalListDataResp)(nil),               // 100: payrpc.WithdrawalListDataResp
	(*WithdrawalListDataItem)(nil),               // 101: payrpc.WithdrawalListDataItem
	(*WithdrawalStatisticsReq)(nil),              // 102: payrpc.WithdrawalStatisticsReq
	(*WithdrawalStatisticsResp)(nil),             // 103: payrpc.WithdrawalStatisticsResp
	(*WithdrawalStatisticsData)(nil),             // 104: payrpc.WithdrawalStatisticsData
	(*DepositRecordListReq)(nil),                 // 105: payrpc.DepositRecordListReq
	(*DepositRecordListDataReq)(nil),             // 106: payrpc.DepositRecordListDataReq
	(*DepositRecordListResp)(nil),                // 107: payrpc.DepositRecordListResp
	(*DepositRecordListDataResp)(nil),            // 108: payrpc.DepositRecordListDataResp
	(*DepositRecordListDataItem)(nil),            // 109: payrpc.DepositRecordListDataItem
	(*UserFlagList)(nil),                         // 110: payrpc.UserFlagList
	(*DepositSumReq)(nil),                        // 111: payrpc.DepositSumReq
	(*DepositSumResp)(nil),                       // 112: payrpc.DepositSumResp
	(*DepositSumData)(nil),                       // 113: payrpc.DepositSumData
	(*PayAllChannelListReq)(nil),                 // 114: payrpc.PayAllChannelListReq
	(*PayAllChannelListResp)(nil),                // 115: payrpc.PayAllChannelListResp
	(*PayAllChannelListData)(nil),                // 116: payrpc.PayAllChannelListData
	(*DepositByWowIdrCallBackReq)(nil),           // 117: payrpc.DepositByWowIdrCallBackReq
	(*DepositByWowIdrCallBackResp)(nil),          // 118: payrpc.DepositByWowIdrCallBackResp
	(*DepositByBasePayCallBackReq)(nil),          // 119: payrpc.DepositByBasePayCallBackReq
	(*DepositByBasePayCallBackResp)(nil),         // 120: payrpc.DepositByBasePayCallBackResp
	(*WithdrawByWowIdrCallBackReq)(nil),          // 121: payrpc.WithdrawByWowIdrCallBackReq
	(*WithdrawByWowIdrCallBackResp)(nil),         // 122: payrpc.WithdrawByWowIdrCallBackResp
	(*WithdrawByBasePayCallBackReq)(nil),         // 123: payrpc.WithdrawByBasePayCallBackReq
	(*WithdrawByBasePayCallBackResp)(nil),        // 124: payrpc.WithdrawByBasePayCallBackResp
	(*DepositByMoonPayCallBackReq)(nil),          // 125: payrpc.DepositByMoonPayCallBackReq
	(*DepositByMoonPayCallBackResp)(nil),         // 126: payrpc.DepositByMoonPayCallBackResp
	(*DepositByBfPayCallBackReq)(nil),            // 127: payrpc.DepositByBfPayCallBackReq
	(*BfPayCallBackHead)(nil),                    // 128: payrpc.BfPayCallBackHead
	(*DepositByBfPayCallBackBodyReq)(nil),        // 129: payrpc.DepositByBfPayCallBackBodyReq
	(*DepositByBfPayCallBackResp)(nil),           // 130: payrpc.DepositByBfPayCallBackResp
	(*DepositBySixPayCallBackReq)(nil),           // 131: payrpc.DepositBySixPayCallBackReq
	(*DepositBySixPayCallBackResp)(nil),          // 132: payrpc.DepositBySixPayCallBackResp
	(*DepositByAiPayCallBackReq)(nil),            // 133: payrpc.DepositByAiPayCallBackReq
	(*DepositByAiPayCallBackResp)(nil),           // 134: payrpc.DepositByAiPayCallBackResp
	(*WithdrawByAiPayCallBackReq)(nil),           // 135: payrpc.WithdrawByAiPayCallBackReq
	(*WithdrawByAiPayCallBackResp)(nil),          // 136: payrpc.WithdrawByAiPayCallBackResp
	(*WithdrawBySixPayCallBackReq)(nil),          // 137: payrpc.WithdrawBySixPayCallBackReq
	(*WithdrawBySixPayCallBackResp)(nil),         // 138: payrpc.WithdrawBySixPayCallBackResp
	(*WithdrawByMoonPayCallBackReq)(nil),         // 139: payrpc.WithdrawByMoonPayCallBackReq
	(*WithdrawByMoonPayCallBackResp)(nil),        // 140: payrpc.WithdrawByMoonPayCallBackResp
	(*WithdrawByBfPayCallBackReq)(nil),           // 141: payrpc.WithdrawByBfPayCallBackReq
	(*WithdrawByBfPayCallBackBody)(nil),          // 142: payrpc.WithdrawByBfPayCallBackBody
	(*WithdrawByBfPayCallBackBodyDetail)(nil),    // 143: payrpc.WithdrawByBfPayCallBackBodyDetail
	(*WithdrawByBfPayCallBackResp)(nil),          // 144: payrpc.WithdrawByBfPayCallBackResp
	(*UpdateWithdrawalStatusReq)(nil),            // 145: payrpc.UpdateWithdrawalStatusReq
	(*UpdateWithdrawalStatusResp)(nil),           // 146: payrpc.UpdateWithdrawalStatusResp
	(*UpdateWithdrawalStatusData)(nil),           // 147: payrpc.UpdateWithdrawalStatusData
	(*EditChannelReq)(nil),                       // 148: payrpc.EditChannelReq
	(*EditChannelResp)(nil),                      // 149: payrpc.EditChannelResp
	(*AuditWithdrawalSumReq)(nil),                // 150: payrpc.AuditWithdrawalSumReq
	(*AuditWithdrawalSumResp)(nil),               // 151: payrpc.AuditWithdrawalSumResp
	(*AuditWithdrawalSumData)(nil),               // 152: payrpc.AuditWithdrawalSumData
	(*CancelWithDrawReq)(nil),                    // 153: payrpc.CancelWithDrawReq
	(*CancelWithDrawResp)(nil),                   // 154: payrpc.CancelWithDrawResp
	(*DepositChannelListReq)(nil),                // 155: payrpc.DepositChannelListReq
	(*DepositChannelListDataReq)(nil),            // 156: payrpc.DepositChannelListDataReq
	(*DepositChannelListResp)(nil),               // 157: payrpc.DepositChannelListResp
	(*DepositChannelListDataResp)(nil),           // 158: payrpc.DepositChannelListDataResp
	(*DepositChannelListDataItem)(nil),           // 159: payrpc.DepositChannelListDataItem
	(*AdminDepositListReq)(nil),                  // 160: payrpc.AdminDepositListReq
	(*AdminDepositListDataReq)(nil),              // 161: payrpc.AdminDepositListDataReq
	(*AdminDepositListResp)(nil),                 // 162: payrpc.AdminDepositListResp
	(*AdminDepositListDataResp)(nil),             // 163: payrpc.AdminDepositListDataResp
	(*AdminDepositListDataItem)(nil),             // 164: payrpc.AdminDepositListDataItem
	(*AdminDepositStatisticsReq)(nil),            // 165: payrpc.AdminDepositStatisticsReq
	(*AdminDepositStatisticsResp)(nil),           // 166: payrpc.AdminDepositStatisticsResp
	(*AdminDepositStatisticsData)(nil),           // 167: payrpc.AdminDepositStatisticsData
	(*DepositByAPayCallBackReq)(nil),             // 168: payrpc.DepositByAPayCallBackReq
	(*DepositByAPayCallBackResp)(nil),            // 169: payrpc.DepositByAPayCallBackResp
	(*WithdrawByAPayCallBackReq)(nil),            // 170: payrpc.WithdrawByAPayCallBackReq
	(*WithdrawByAPayCallBackResp)(nil),           // 171: payrpc.WithdrawByAPayCallBackResp
	(*GetWithdrawalAddressTypeReq)(nil),          // 172: payrpc.GetWithdrawalAddressTypeReq
	(*GetWithdrawalAddressTypeResp)(nil),         // 173: payrpc.GetWithdrawalAddressTypeResp
	(*GetWithdrawalAddressTypeDataResp)(nil),     // 174: payrpc.GetWithdrawalAddressTypeDataResp
	(*PayChannelListReq)(nil),                    // 175: payrpc.PayChannelListReq
	(*PayChannelListDataReq)(nil),                // 176: payrpc.PayChannelListDataReq
	(*PayChannelListResp)(nil),                   // 177: payrpc.PayChannelListResp
	(*PayChannelListDataResp)(nil),               // 178: payrpc.PayChannelListDataResp
	(*PayChannelListDataItemResp)(nil),           // 179: payrpc.PayChannelListDataItemResp
	(*PayPlatListReq)(nil),                       // 180: payrpc.PayPlatListReq
	(*PayPlatListDataReq)(nil),                   // 181: payrpc.PayPlatListDataReq
	(*PayPlatListResp)(nil),                      // 182: payrpc.PayPlatListResp
	(*PayPlatListDataResp)(nil),                  // 183: payrpc.PayPlatListDataResp
	(*PayPlatListDataItemResp)(nil),              // 184: payrpc.PayPlatListDataItemResp
	(*AdminTransferListReq)(nil),                 // 185: payrpc.AdminTransferListReq
	(*AdminTransferListDataReq)(nil),             // 186: payrpc.AdminTransferListDataReq
	(*AdminTransferListResp)(nil),                // 187: payrpc.AdminTransferListResp
	(*AdminTransferListDataResp)(nil),            // 188: payrpc.AdminTransferListDataResp
	(*AdminTransferListDataItemResp)(nil),        // 189: payrpc.AdminTransferListDataItemResp
	(*AdminTransferStatisticsReq)(nil),           // 190: payrpc.AdminTransferStatisticsReq
	(*AdminTransferStatisticsResp)(nil),          // 191: payrpc.AdminTransferStatisticsResp
	(*AdminTransferStatisticsData)(nil),          // 192: payrpc.AdminTransferStatisticsData
	(*GetChannelListReq)(nil),                    // 193: payrpc.GetChannelListReq
	(*GetChannelListResp)(nil),                   // 194: payrpc.GetChannelListResp
	(*GetChannelListDataResp)(nil),               // 195: payrpc.GetChannelListDataResp
	(*WithdrawalSumReq)(nil),                     // 196: payrpc.WithdrawalSumReq
	(*WithdrawalSumResp)(nil),                    // 197: payrpc.WithdrawalSumResp
	(*WithdrawalSumDataResp)(nil),                // 198: payrpc.WithdrawalSumDataResp
	(*UpdateChannelReq)(nil),                     // 199: payrpc.UpdateChannelReq
	(*UpdateChannelResp)(nil),                    // 200: payrpc.UpdateChannelResp
	(*DepositDetailReq)(nil),                     // 201: payrpc.DepositDetailReq
	(*DepositDetailResp)(nil),                    // 202: payrpc.DepositDetailResp
	(*DepositDetailDataResp)(nil),                // 203: payrpc.DepositDetailDataResp
	(*RevenueDailyTaxCountReq)(nil),              // 204: payrpc.RevenueDailyTaxCountReq
	(*RevenueDailyTaxCountDataReq)(nil),          // 205: payrpc.RevenueDailyTaxCountDataReq
	(*RevenueDailyTaxCountResp)(nil),             // 206: payrpc.RevenueDailyTaxCountResp
	(*RevenueDailyTaxCountDataResp)(nil),         // 207: payrpc.RevenueDailyTaxCountDataResp
	(*RevenueDailyTaxCountDataItemResp)(nil),     // 208: payrpc.RevenueDailyTaxCountDataItemResp
	(*RevenueDailyTaxReq)(nil),                   // 209: payrpc.RevenueDailyTaxReq
	(*RevenueDailyTaxResp)(nil),                  // 210: payrpc.RevenueDailyTaxResp
	(*RevenueDailyTaxDataResp)(nil),              // 211: payrpc.RevenueDailyTaxDataResp
	(*RevenueDailyTaxDataItemResp)(nil),          // 212: payrpc.RevenueDailyTaxDataItemResp
	(*GetGameProviderSubtypeReq)(nil),            // 213: payrpc.GetGameProviderSubtypeReq
	(*GetGameProviderSubtypeResp)(nil),           // 214: payrpc.GetGameProviderSubtypeResp
	(*GetGameProviderSubtypeDataResp)(nil),       // 215: payrpc.GetGameProviderSubtypeDataResp
	(*UpdateGameProviderSubtypeRateReq)(nil),     // 216: payrpc.UpdateGameProviderSubtypeRateReq
	(*UpdateGameProviderSubtypeRateDataReq)(nil), // 217: payrpc.UpdateGameProviderSubtypeRateDataReq
	(*UpdateGameProviderSubtypeRateResp)(nil),    // 218: payrpc.UpdateGameProviderSubtypeRateResp
}
var file_payrpc_proto_depIdxs = []int32{
	4,   // 0: payrpc.PayAccountResp.data:type_name -> payrpc.PayAccountData
	7,   // 1: payrpc.WithdrawConfigResp.data:type_name -> payrpc.WithdrawConfigData
	10,  // 2: payrpc.ChannelListResp.data:type_name -> payrpc.ChannelListData
	32,  // 3: payrpc.GetCoinLogListReq.data:type_name -> payrpc.GetCoinLogListDataReq
	34,  // 4: payrpc.GetCoinLogListResp.data:type_name -> payrpc.CoinLogListData
	35,  // 5: payrpc.CoinLogListData.list:type_name -> payrpc.CoinLogListItem
	37,  // 6: payrpc.GetAuditWithdrawalRecordReq.data:type_name -> payrpc.GetAuditWithdrawalRecordDataReq
	39,  // 7: payrpc.GetAuditWithdrawalRecordResp.data:type_name -> payrpc.GetAuditWithdrawalRecordData
	40,  // 8: payrpc.GetAuditWithdrawalRecordData.list:type_name -> payrpc.GetAuditWithdrawalRecordDataListItem
	41,  // 9: payrpc.GetAuditWithdrawalRecordDataListItem.userFlagList:type_name -> payrpc.UserFlagInfo
	44,  // 10: payrpc.GetDepositWithdrawalStatisticsResp.data:type_name -> payrpc.GetDepositWithdrawalStatisticsData
	47,  // 11: payrpc.IsAuditResp.data:type_name -> payrpc.IsAuditData
	52,  // 12: payrpc.DailyReportStatisticsCountResp.data:type_name -> payrpc.DailyReportStatisticsCountData
	55,  // 13: payrpc.GetUserCoinResp.data:type_name -> payrpc.GetUserCoinData
	58,  // 14: payrpc.CoinRateResp.data:type_name -> payrpc.CoinRateData
	59,  // 15: payrpc.CoinRateData.list:type_name -> payrpc.CoinRateDataItem
	61,  // 16: payrpc.PagcorDailyTaxReq.data:type_name -> payrpc.PagcorDailyTaxDataReq
	63,  // 17: payrpc.PagcorDailyTaxResp.data:type_name -> payrpc.PagcorDailyTaxData
	64,  // 18: payrpc.PagcorDailyTaxData.list:type_name -> payrpc.PagcorDailyTaxDataItem
	66,  // 19: payrpc.GetDepositRecordReq.data:type_name -> payrpc.GetDepositRecordDataReq
	68,  // 20: payrpc.GetDepositRecordResp.data:type_name -> payrpc.DepositRecordData
	69,  // 21: payrpc.DepositRecordData.list:type_name -> payrpc.DepositRecordDataItem
	71,  // 22: payrpc.GetFrontWithdrawalRecordReq.data:type_name -> payrpc.GetFrontWithdrawalRecordDataReq
	73,  // 23: payrpc.GetFrontWithdrawalRecordResp.data:type_name -> payrpc.FrontWithdrawalRecordData
	74,  // 24: payrpc.FrontWithdrawalRecordData.list:type_name -> payrpc.FrontWithdrawalRecordDataItem
	77,  // 25: payrpc.TotalSummaryResp.data:type_name -> payrpc.TotalSummaryData
	80,  // 26: payrpc.DepositAndWithdrawalChartResp.data:type_name -> payrpc.DepositAndWithdrawalChartDataResp
	81,  // 27: payrpc.DepositAndWithdrawalChartDataResp.deposit:type_name -> payrpc.DepositAndWithdrawalChartDataItem
	81,  // 28: payrpc.DepositAndWithdrawalChartDataResp.withdrawal:type_name -> payrpc.DepositAndWithdrawalChartDataItem
	83,  // 29: payrpc.DailyConversionReportListReq.data:type_name -> payrpc.DailyConversionReportListDataReq
	85,  // 30: payrpc.DailyConversionReportListResp.data:type_name -> payrpc.DailyConversionReportListDataResp
	86,  // 31: payrpc.DailyConversionReportListDataResp.list:type_name -> payrpc.DailyConversionReportListDataItem
	89,  // 32: payrpc.DailyConversionReportStatisticsResp.data:type_name -> payrpc.DailyConversionReportStatisticsData
	92,  // 33: payrpc.PlatBetCoinChartResp.data:type_name -> payrpc.PlatBetCoinChartData
	98,  // 34: payrpc.WithdrawalListReq.data:type_name -> payrpc.WithdrawalListDataReq
	100, // 35: payrpc.WithdrawalListResp.data:type_name -> payrpc.WithdrawalListDataResp
	101, // 36: payrpc.WithdrawalListDataResp.list:type_name -> payrpc.WithdrawalListDataItem
	104, // 37: payrpc.WithdrawalStatisticsResp.data:type_name -> payrpc.WithdrawalStatisticsData
	106, // 38: payrpc.DepositRecordListReq.data:type_name -> payrpc.DepositRecordListDataReq
	108, // 39: payrpc.DepositRecordListResp.data:type_name -> payrpc.DepositRecordListDataResp
	109, // 40: payrpc.DepositRecordListDataResp.list:type_name -> payrpc.DepositRecordListDataItem
	110, // 41: payrpc.DepositRecordListDataItem.userFlagList:type_name -> payrpc.UserFlagList
	113, // 42: payrpc.DepositSumResp.data:type_name -> payrpc.DepositSumData
	116, // 43: payrpc.PayAllChannelListResp.data:type_name -> payrpc.PayAllChannelListData
	128, // 44: payrpc.DepositByBfPayCallBackReq.head:type_name -> payrpc.BfPayCallBackHead
	129, // 45: payrpc.DepositByBfPayCallBackReq.body:type_name -> payrpc.DepositByBfPayCallBackBodyReq
	128, // 46: payrpc.WithdrawByBfPayCallBackReq.head:type_name -> payrpc.BfPayCallBackHead
	143, // 47: payrpc.WithdrawByBfPayCallBackBody.detail:type_name -> payrpc.WithdrawByBfPayCallBackBodyDetail
	147, // 48: payrpc.UpdateWithdrawalStatusResp.data:type_name -> payrpc.UpdateWithdrawalStatusData
	152, // 49: payrpc.AuditWithdrawalSumResp.data:type_name -> payrpc.AuditWithdrawalSumData
	156, // 50: payrpc.DepositChannelListReq.data:type_name -> payrpc.DepositChannelListDataReq
	158, // 51: payrpc.DepositChannelListResp.data:type_name -> payrpc.DepositChannelListDataResp
	159, // 52: payrpc.DepositChannelListDataResp.list:type_name -> payrpc.DepositChannelListDataItem
	161, // 53: payrpc.AdminDepositListReq.data:type_name -> payrpc.AdminDepositListDataReq
	163, // 54: payrpc.AdminDepositListResp.data:type_name -> payrpc.AdminDepositListDataResp
	164, // 55: payrpc.AdminDepositListDataResp.list:type_name -> payrpc.AdminDepositListDataItem
	167, // 56: payrpc.AdminDepositStatisticsResp.data:type_name -> payrpc.AdminDepositStatisticsData
	174, // 57: payrpc.GetWithdrawalAddressTypeResp.data:type_name -> payrpc.GetWithdrawalAddressTypeDataResp
	176, // 58: payrpc.PayChannelListReq.data:type_name -> payrpc.PayChannelListDataReq
	178, // 59: payrpc.PayChannelListResp.data:type_name -> payrpc.PayChannelListDataResp
	179, // 60: payrpc.PayChannelListDataResp.list:type_name -> payrpc.PayChannelListDataItemResp
	181, // 61: payrpc.PayPlatListReq.data:type_name -> payrpc.PayPlatListDataReq
	183, // 62: payrpc.PayPlatListResp.data:type_name -> payrpc.PayPlatListDataResp
	184, // 63: payrpc.PayPlatListDataResp.list:type_name -> payrpc.PayPlatListDataItemResp
	186, // 64: payrpc.AdminTransferListReq.data:type_name -> payrpc.AdminTransferListDataReq
	188, // 65: payrpc.AdminTransferListResp.data:type_name -> payrpc.AdminTransferListDataResp
	189, // 66: payrpc.AdminTransferListDataResp.list:type_name -> payrpc.AdminTransferListDataItemResp
	192, // 67: payrpc.AdminTransferStatisticsResp.data:type_name -> payrpc.AdminTransferStatisticsData
	195, // 68: payrpc.GetChannelListResp.data:type_name -> payrpc.GetChannelListDataResp
	198, // 69: payrpc.WithdrawalSumResp.data:type_name -> payrpc.WithdrawalSumDataResp
	203, // 70: payrpc.DepositDetailResp.data:type_name -> payrpc.DepositDetailDataResp
	205, // 71: payrpc.RevenueDailyTaxCountReq.data:type_name -> payrpc.RevenueDailyTaxCountDataReq
	207, // 72: payrpc.RevenueDailyTaxCountResp.data:type_name -> payrpc.RevenueDailyTaxCountDataResp
	208, // 73: payrpc.RevenueDailyTaxCountDataResp.dataList:type_name -> payrpc.RevenueDailyTaxCountDataItemResp
	205, // 74: payrpc.RevenueDailyTaxReq.data:type_name -> payrpc.RevenueDailyTaxCountDataReq
	211, // 75: payrpc.RevenueDailyTaxResp.data:type_name -> payrpc.RevenueDailyTaxDataResp
	212, // 76: payrpc.RevenueDailyTaxDataResp.list:type_name -> payrpc.RevenueDailyTaxDataItemResp
	215, // 77: payrpc.GetGameProviderSubtypeResp.data:type_name -> payrpc.GetGameProviderSubtypeDataResp
	217, // 78: payrpc.UpdateGameProviderSubtypeRateReq.data:type_name -> payrpc.UpdateGameProviderSubtypeRateDataReq
	0,   // 79: payrpc.payrpc.bindAccount:input_type -> payrpc.BindAccountReq
	2,   // 80: payrpc.payrpc.payAccount:input_type -> payrpc.PayAccountReq
	5,   // 81: payrpc.payrpc.withdrawConfig:input_type -> payrpc.WithdrawConfigReq
	8,   // 82: payrpc.payrpc.channelList:input_type -> payrpc.ChannelListReq
	13,  // 83: payrpc.payrpc.deposit:input_type -> payrpc.DepositReq
	15,  // 84: payrpc.payrpc.depositCallBack:input_type -> payrpc.DepositCallBackReq
	117, // 85: payrpc.payrpc.depositByWowIdrCallBack:input_type -> payrpc.DepositByWowIdrCallBackReq
	119, // 86: payrpc.payrpc.depositByBasePayCallBack:input_type -> payrpc.DepositByBasePayCallBackReq
	125, // 87: payrpc.payrpc.depositByMoonPayCallBack:input_type -> payrpc.DepositByMoonPayCallBackReq
	127, // 88: payrpc.payrpc.depositByBfPayCallBack:input_type -> payrpc.DepositByBfPayCallBackReq
	131, // 89: payrpc.payrpc.depositBySixPayCallBack:input_type -> payrpc.DepositBySixPayCallBackReq
	133, // 90: payrpc.payrpc.depositByAiPayCallBack:input_type -> payrpc.DepositByAiPayCallBackReq
	168, // 91: payrpc.payrpc.depositByAPayCallBack:input_type -> payrpc.DepositByAPayCallBackReq
	17,  // 92: payrpc.payrpc.depositSearch:input_type -> payrpc.DepositSearchReq
	11,  // 93: payrpc.payrpc.withdraws:input_type -> payrpc.WithdrawReq
	19,  // 94: payrpc.payrpc.withdrawCallBack:input_type -> payrpc.WithdrawCallBackReq
	121, // 95: payrpc.payrpc.withdrawByWowIdrCallBack:input_type -> payrpc.WithdrawByWowIdrCallBackReq
	123, // 96: payrpc.payrpc.withdrawByBasePayCallBack:input_type -> payrpc.WithdrawByBasePayCallBackReq
	139, // 97: payrpc.payrpc.withdrawByMoonPayCallBack:input_type -> payrpc.WithdrawByMoonPayCallBackReq
	141, // 98: payrpc.payrpc.withdrawByBfPayCallBack:input_type -> payrpc.WithdrawByBfPayCallBackReq
	137, // 99: payrpc.payrpc.withdrawBySixPayCallBack:input_type -> payrpc.WithdrawBySixPayCallBackReq
	135, // 100: payrpc.payrpc.withdrawByAiPayCallBack:input_type -> payrpc.WithdrawByAiPayCallBackReq
	170, // 101: payrpc.payrpc.withdrawByAPayCallBack:input_type -> payrpc.WithdrawByAPayCallBackReq
	21,  // 102: payrpc.payrpc.withdrawSearch:input_type -> payrpc.WithdrawSearchReq
	23,  // 103: payrpc.payrpc.findMerchantBlance:input_type -> payrpc.FindMerchantBlanceReq
	25,  // 104: payrpc.payrpc.refundOrder:input_type -> payrpc.RefundOrderReq
	27,  // 105: payrpc.payrpc.refundOrderCallBack:input_type -> payrpc.RefundOrderCallBackReq
	29,  // 106: payrpc.payrpc.checkDeposit:input_type -> payrpc.CheckDepositReq
	31,  // 107: payrpc.payrpc.getCoinLogList:input_type -> payrpc.GetCoinLogListReq
	36,  // 108: payrpc.payrpc.getAuditWithdrawalRecord:input_type -> payrpc.GetAuditWithdrawalRecordReq
	36,  // 109: payrpc.payrpc.getWithdrawalRecord:input_type -> payrpc.GetAuditWithdrawalRecordReq
	42,  // 110: payrpc.payrpc.getDepositWithdrawalStatistics:input_type -> payrpc.GetDepositWithdrawalStatisticsReq
	45,  // 111: payrpc.payrpc.isAudit:input_type -> payrpc.IsAuditReq
	48,  // 112: payrpc.payrpc.financeWithDraw:input_type -> payrpc.FinanceWithDrawReq
	50,  // 113: payrpc.payrpc.dailyReportStatisticsCount:input_type -> payrpc.DailyReportStatisticsCountReq
	53,  // 114: payrpc.payrpc.getUserCoin:input_type -> payrpc.GetUserCoinReq
	56,  // 115: payrpc.payrpc.coinRateList:input_type -> payrpc.CoinRateReq
	60,  // 116: payrpc.payrpc.pagcorDailyTax:input_type -> payrpc.PagcorDailyTaxReq
	65,  // 117: payrpc.payrpc.getDepositRecord:input_type -> payrpc.GetDepositRecordReq
	70,  // 118: payrpc.payrpc.getFrontWithdrawalRecord:input_type -> payrpc.GetFrontWithdrawalRecordReq
	75,  // 119: payrpc.payrpc.totalSummary:input_type -> payrpc.TotalSummaryReq
	78,  // 120: payrpc.payrpc.depositAndWithdrawalChart:input_type -> payrpc.DepositAndWithdrawalChartReq
	82,  // 121: payrpc.payrpc.dailyConversionReportList:input_type -> payrpc.DailyConversionReportListReq
	87,  // 122: payrpc.payrpc.dailyConversionReportStatistics:input_type -> payrpc.DailyConversionReportStatisticsReq
	90,  // 123: payrpc.payrpc.platBetCoinChart:input_type -> payrpc.PlatBetCoinChartReq
	93,  // 124: payrpc.payrpc.walletOutTransfer:input_type -> payrpc.WalletOutTransferReq
	95,  // 125: payrpc.payrpc.replenishmentOrder:input_type -> payrpc.ReplenishmentOrderReq
	97,  // 126: payrpc.payrpc.withdrawalList:input_type -> payrpc.WithdrawalListReq
	102, // 127: payrpc.payrpc.withdrawalStatistics:input_type -> payrpc.WithdrawalStatisticsReq
	105, // 128: payrpc.payrpc.depositRecordList:input_type -> payrpc.DepositRecordListReq
	111, // 129: payrpc.payrpc.depositSum:input_type -> payrpc.DepositSumReq
	114, // 130: payrpc.payrpc.payAllChannelList:input_type -> payrpc.PayAllChannelListReq
	145, // 131: payrpc.payrpc.updateWithdrawalStatus:input_type -> payrpc.UpdateWithdrawalStatusReq
	150, // 132: payrpc.payrpc.auditWithdrawalSum:input_type -> payrpc.AuditWithdrawalSumReq
	153, // 133: payrpc.payrpc.cancelWithDraw:input_type -> payrpc.CancelWithDrawReq
	155, // 134: payrpc.payrpc.depositChannelList:input_type -> payrpc.DepositChannelListReq
	148, // 135: payrpc.payrpc.editChannel:input_type -> payrpc.EditChannelReq
	160, // 136: payrpc.payrpc.depositList:input_type -> payrpc.AdminDepositListReq
	165, // 137: payrpc.payrpc.depositStatistics:input_type -> payrpc.AdminDepositStatisticsReq
	172, // 138: payrpc.payrpc.getWithdrawalAddressType:input_type -> payrpc.GetWithdrawalAddressTypeReq
	175, // 139: payrpc.payrpc.payChannelList:input_type -> payrpc.PayChannelListReq
	180, // 140: payrpc.payrpc.payPlatList:input_type -> payrpc.PayPlatListReq
	185, // 141: payrpc.payrpc.adminTransferList:input_type -> payrpc.AdminTransferListReq
	190, // 142: payrpc.payrpc.adminTransferStatistics:input_type -> payrpc.AdminTransferStatisticsReq
	193, // 143: payrpc.payrpc.getChannelList:input_type -> payrpc.GetChannelListReq
	196, // 144: payrpc.payrpc.WithdrawalSum:input_type -> payrpc.WithdrawalSumReq
	199, // 145: payrpc.payrpc.updateChannel:input_type -> payrpc.UpdateChannelReq
	201, // 146: payrpc.payrpc.depositDetail:input_type -> payrpc.DepositDetailReq
	204, // 147: payrpc.payrpc.revenueDailyTaxCount:input_type -> payrpc.RevenueDailyTaxCountReq
	209, // 148: payrpc.payrpc.revenueDailyTax:input_type -> payrpc.RevenueDailyTaxReq
	213, // 149: payrpc.payrpc.getGameProviderSubtype:input_type -> payrpc.GetGameProviderSubtypeReq
	216, // 150: payrpc.payrpc.UpdateGameProviderSubtypeRate:input_type -> payrpc.UpdateGameProviderSubtypeRateReq
	1,   // 151: payrpc.payrpc.bindAccount:output_type -> payrpc.BindAccountResp
	3,   // 152: payrpc.payrpc.payAccount:output_type -> payrpc.PayAccountResp
	6,   // 153: payrpc.payrpc.withdrawConfig:output_type -> payrpc.WithdrawConfigResp
	9,   // 154: payrpc.payrpc.channelList:output_type -> payrpc.ChannelListResp
	14,  // 155: payrpc.payrpc.deposit:output_type -> payrpc.DepositResp
	16,  // 156: payrpc.payrpc.depositCallBack:output_type -> payrpc.DepositCallBackResp
	118, // 157: payrpc.payrpc.depositByWowIdrCallBack:output_type -> payrpc.DepositByWowIdrCallBackResp
	120, // 158: payrpc.payrpc.depositByBasePayCallBack:output_type -> payrpc.DepositByBasePayCallBackResp
	126, // 159: payrpc.payrpc.depositByMoonPayCallBack:output_type -> payrpc.DepositByMoonPayCallBackResp
	130, // 160: payrpc.payrpc.depositByBfPayCallBack:output_type -> payrpc.DepositByBfPayCallBackResp
	132, // 161: payrpc.payrpc.depositBySixPayCallBack:output_type -> payrpc.DepositBySixPayCallBackResp
	134, // 162: payrpc.payrpc.depositByAiPayCallBack:output_type -> payrpc.DepositByAiPayCallBackResp
	169, // 163: payrpc.payrpc.depositByAPayCallBack:output_type -> payrpc.DepositByAPayCallBackResp
	18,  // 164: payrpc.payrpc.depositSearch:output_type -> payrpc.DepositSearchResp
	12,  // 165: payrpc.payrpc.withdraws:output_type -> payrpc.WithdrawResp
	20,  // 166: payrpc.payrpc.withdrawCallBack:output_type -> payrpc.WithdrawCallBackResp
	122, // 167: payrpc.payrpc.withdrawByWowIdrCallBack:output_type -> payrpc.WithdrawByWowIdrCallBackResp
	124, // 168: payrpc.payrpc.withdrawByBasePayCallBack:output_type -> payrpc.WithdrawByBasePayCallBackResp
	140, // 169: payrpc.payrpc.withdrawByMoonPayCallBack:output_type -> payrpc.WithdrawByMoonPayCallBackResp
	144, // 170: payrpc.payrpc.withdrawByBfPayCallBack:output_type -> payrpc.WithdrawByBfPayCallBackResp
	138, // 171: payrpc.payrpc.withdrawBySixPayCallBack:output_type -> payrpc.WithdrawBySixPayCallBackResp
	136, // 172: payrpc.payrpc.withdrawByAiPayCallBack:output_type -> payrpc.WithdrawByAiPayCallBackResp
	171, // 173: payrpc.payrpc.withdrawByAPayCallBack:output_type -> payrpc.WithdrawByAPayCallBackResp
	22,  // 174: payrpc.payrpc.withdrawSearch:output_type -> payrpc.WithdrawSearchResp
	24,  // 175: payrpc.payrpc.findMerchantBlance:output_type -> payrpc.FindMerchantBlanceResp
	26,  // 176: payrpc.payrpc.refundOrder:output_type -> payrpc.RefundOrderResp
	28,  // 177: payrpc.payrpc.refundOrderCallBack:output_type -> payrpc.RefundOrderCallBackResp
	30,  // 178: payrpc.payrpc.checkDeposit:output_type -> payrpc.CheckDepositResp
	33,  // 179: payrpc.payrpc.getCoinLogList:output_type -> payrpc.GetCoinLogListResp
	38,  // 180: payrpc.payrpc.getAuditWithdrawalRecord:output_type -> payrpc.GetAuditWithdrawalRecordResp
	38,  // 181: payrpc.payrpc.getWithdrawalRecord:output_type -> payrpc.GetAuditWithdrawalRecordResp
	43,  // 182: payrpc.payrpc.getDepositWithdrawalStatistics:output_type -> payrpc.GetDepositWithdrawalStatisticsResp
	46,  // 183: payrpc.payrpc.isAudit:output_type -> payrpc.IsAuditResp
	49,  // 184: payrpc.payrpc.financeWithDraw:output_type -> payrpc.FinanceWithDrawResp
	51,  // 185: payrpc.payrpc.dailyReportStatisticsCount:output_type -> payrpc.DailyReportStatisticsCountResp
	54,  // 186: payrpc.payrpc.getUserCoin:output_type -> payrpc.GetUserCoinResp
	57,  // 187: payrpc.payrpc.coinRateList:output_type -> payrpc.CoinRateResp
	62,  // 188: payrpc.payrpc.pagcorDailyTax:output_type -> payrpc.PagcorDailyTaxResp
	67,  // 189: payrpc.payrpc.getDepositRecord:output_type -> payrpc.GetDepositRecordResp
	72,  // 190: payrpc.payrpc.getFrontWithdrawalRecord:output_type -> payrpc.GetFrontWithdrawalRecordResp
	76,  // 191: payrpc.payrpc.totalSummary:output_type -> payrpc.TotalSummaryResp
	79,  // 192: payrpc.payrpc.depositAndWithdrawalChart:output_type -> payrpc.DepositAndWithdrawalChartResp
	84,  // 193: payrpc.payrpc.dailyConversionReportList:output_type -> payrpc.DailyConversionReportListResp
	88,  // 194: payrpc.payrpc.dailyConversionReportStatistics:output_type -> payrpc.DailyConversionReportStatisticsResp
	91,  // 195: payrpc.payrpc.platBetCoinChart:output_type -> payrpc.PlatBetCoinChartResp
	94,  // 196: payrpc.payrpc.walletOutTransfer:output_type -> payrpc.WalletOutTransferResp
	96,  // 197: payrpc.payrpc.replenishmentOrder:output_type -> payrpc.ReplenishmentOrderResp
	99,  // 198: payrpc.payrpc.withdrawalList:output_type -> payrpc.WithdrawalListResp
	103, // 199: payrpc.payrpc.withdrawalStatistics:output_type -> payrpc.WithdrawalStatisticsResp
	107, // 200: payrpc.payrpc.depositRecordList:output_type -> payrpc.DepositRecordListResp
	112, // 201: payrpc.payrpc.depositSum:output_type -> payrpc.DepositSumResp
	115, // 202: payrpc.payrpc.payAllChannelList:output_type -> payrpc.PayAllChannelListResp
	146, // 203: payrpc.payrpc.updateWithdrawalStatus:output_type -> payrpc.UpdateWithdrawalStatusResp
	151, // 204: payrpc.payrpc.auditWithdrawalSum:output_type -> payrpc.AuditWithdrawalSumResp
	154, // 205: payrpc.payrpc.cancelWithDraw:output_type -> payrpc.CancelWithDrawResp
	157, // 206: payrpc.payrpc.depositChannelList:output_type -> payrpc.DepositChannelListResp
	149, // 207: payrpc.payrpc.editChannel:output_type -> payrpc.EditChannelResp
	162, // 208: payrpc.payrpc.depositList:output_type -> payrpc.AdminDepositListResp
	166, // 209: payrpc.payrpc.depositStatistics:output_type -> payrpc.AdminDepositStatisticsResp
	173, // 210: payrpc.payrpc.getWithdrawalAddressType:output_type -> payrpc.GetWithdrawalAddressTypeResp
	177, // 211: payrpc.payrpc.payChannelList:output_type -> payrpc.PayChannelListResp
	182, // 212: payrpc.payrpc.payPlatList:output_type -> payrpc.PayPlatListResp
	187, // 213: payrpc.payrpc.adminTransferList:output_type -> payrpc.AdminTransferListResp
	191, // 214: payrpc.payrpc.adminTransferStatistics:output_type -> payrpc.AdminTransferStatisticsResp
	194, // 215: payrpc.payrpc.getChannelList:output_type -> payrpc.GetChannelListResp
	197, // 216: payrpc.payrpc.WithdrawalSum:output_type -> payrpc.WithdrawalSumResp
	200, // 217: payrpc.payrpc.updateChannel:output_type -> payrpc.UpdateChannelResp
	202, // 218: payrpc.payrpc.depositDetail:output_type -> payrpc.DepositDetailResp
	206, // 219: payrpc.payrpc.revenueDailyTaxCount:output_type -> payrpc.RevenueDailyTaxCountResp
	210, // 220: payrpc.payrpc.revenueDailyTax:output_type -> payrpc.RevenueDailyTaxResp
	214, // 221: payrpc.payrpc.getGameProviderSubtype:output_type -> payrpc.GetGameProviderSubtypeResp
	218, // 222: payrpc.payrpc.UpdateGameProviderSubtypeRate:output_type -> payrpc.UpdateGameProviderSubtypeRateResp
	151, // [151:223] is the sub-list for method output_type
	79,  // [79:151] is the sub-list for method input_type
	79,  // [79:79] is the sub-list for extension type_name
	79,  // [79:79] is the sub-list for extension extendee
	0,   // [0:79] is the sub-list for field type_name
}

func init() { file_payrpc_proto_init() }
func file_payrpc_proto_init() {
	if File_payrpc_proto != nil {
		return
	}
	file_payrpc_proto_msgTypes[186].OneofWrappers = []any{}
	file_payrpc_proto_msgTypes[190].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_payrpc_proto_rawDesc), len(file_payrpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   219,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_payrpc_proto_goTypes,
		DependencyIndexes: file_payrpc_proto_depIdxs,
		MessageInfos:      file_payrpc_proto_msgTypes,
	}.Build()
	File_payrpc_proto = out.File
	file_payrpc_proto_goTypes = nil
	file_payrpc_proto_depIdxs = nil
}
