// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc2
// source: payrpc.proto

package payrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Payrpc_BindAccount_FullMethodName                     = "/payrpc.payrpc/bindAccount"
	Payrpc_PayAccount_FullMethodName                      = "/payrpc.payrpc/payAccount"
	Payrpc_WithdrawConfig_FullMethodName                  = "/payrpc.payrpc/withdrawConfig"
	Payrpc_ChannelList_FullMethodName                     = "/payrpc.payrpc/channelList"
	Payrpc_Deposit_FullMethodName                         = "/payrpc.payrpc/deposit"
	Payrpc_DepositCallBack_FullMethodName                 = "/payrpc.payrpc/depositCallBack"
	Payrpc_DepositByWowIdrCallBack_FullMethodName         = "/payrpc.payrpc/depositByWowIdrCallBack"
	Payrpc_DepositByBasePayCallBack_FullMethodName        = "/payrpc.payrpc/depositByBasePayCallBack"
	Payrpc_DepositByMoonPayCallBack_FullMethodName        = "/payrpc.payrpc/depositByMoonPayCallBack"
	Payrpc_DepositByBfPayCallBack_FullMethodName          = "/payrpc.payrpc/depositByBfPayCallBack"
	Payrpc_DepositBySixPayCallBack_FullMethodName         = "/payrpc.payrpc/depositBySixPayCallBack"
	Payrpc_DepositByAiPayCallBack_FullMethodName          = "/payrpc.payrpc/depositByAiPayCallBack"
	Payrpc_DepositByAPayCallBack_FullMethodName           = "/payrpc.payrpc/depositByAPayCallBack"
	Payrpc_DepositSearch_FullMethodName                   = "/payrpc.payrpc/depositSearch"
	Payrpc_Withdraws_FullMethodName                       = "/payrpc.payrpc/withdraws"
	Payrpc_WithdrawCallBack_FullMethodName                = "/payrpc.payrpc/withdrawCallBack"
	Payrpc_WithdrawByWowIdrCallBack_FullMethodName        = "/payrpc.payrpc/withdrawByWowIdrCallBack"
	Payrpc_WithdrawByBasePayCallBack_FullMethodName       = "/payrpc.payrpc/withdrawByBasePayCallBack"
	Payrpc_WithdrawByMoonPayCallBack_FullMethodName       = "/payrpc.payrpc/withdrawByMoonPayCallBack"
	Payrpc_WithdrawByBfPayCallBack_FullMethodName         = "/payrpc.payrpc/withdrawByBfPayCallBack"
	Payrpc_WithdrawBySixPayCallBack_FullMethodName        = "/payrpc.payrpc/withdrawBySixPayCallBack"
	Payrpc_WithdrawByAiPayCallBack_FullMethodName         = "/payrpc.payrpc/withdrawByAiPayCallBack"
	Payrpc_WithdrawByAPayCallBack_FullMethodName          = "/payrpc.payrpc/withdrawByAPayCallBack"
	Payrpc_WithdrawSearch_FullMethodName                  = "/payrpc.payrpc/withdrawSearch"
	Payrpc_FindMerchantBlance_FullMethodName              = "/payrpc.payrpc/findMerchantBlance"
	Payrpc_RefundOrder_FullMethodName                     = "/payrpc.payrpc/refundOrder"
	Payrpc_RefundOrderCallBack_FullMethodName             = "/payrpc.payrpc/refundOrderCallBack"
	Payrpc_CheckDeposit_FullMethodName                    = "/payrpc.payrpc/checkDeposit"
	Payrpc_GetCoinLogList_FullMethodName                  = "/payrpc.payrpc/getCoinLogList"
	Payrpc_GetAuditWithdrawalRecord_FullMethodName        = "/payrpc.payrpc/getAuditWithdrawalRecord"
	Payrpc_GetWithdrawalRecord_FullMethodName             = "/payrpc.payrpc/getWithdrawalRecord"
	Payrpc_GetDepositWithdrawalStatistics_FullMethodName  = "/payrpc.payrpc/getDepositWithdrawalStatistics"
	Payrpc_IsAudit_FullMethodName                         = "/payrpc.payrpc/isAudit"
	Payrpc_FinanceWithDraw_FullMethodName                 = "/payrpc.payrpc/financeWithDraw"
	Payrpc_DailyReportStatisticsCount_FullMethodName      = "/payrpc.payrpc/dailyReportStatisticsCount"
	Payrpc_GetUserCoin_FullMethodName                     = "/payrpc.payrpc/getUserCoin"
	Payrpc_CoinRateList_FullMethodName                    = "/payrpc.payrpc/coinRateList"
	Payrpc_PagcorDailyTax_FullMethodName                  = "/payrpc.payrpc/pagcorDailyTax"
	Payrpc_GetDepositRecord_FullMethodName                = "/payrpc.payrpc/getDepositRecord"
	Payrpc_GetFrontWithdrawalRecord_FullMethodName        = "/payrpc.payrpc/getFrontWithdrawalRecord"
	Payrpc_TotalSummary_FullMethodName                    = "/payrpc.payrpc/totalSummary"
	Payrpc_DepositAndWithdrawalChart_FullMethodName       = "/payrpc.payrpc/depositAndWithdrawalChart"
	Payrpc_DailyConversionReportList_FullMethodName       = "/payrpc.payrpc/dailyConversionReportList"
	Payrpc_DailyConversionReportStatistics_FullMethodName = "/payrpc.payrpc/dailyConversionReportStatistics"
	Payrpc_PlatBetCoinChart_FullMethodName                = "/payrpc.payrpc/platBetCoinChart"
	Payrpc_WalletOutTransfer_FullMethodName               = "/payrpc.payrpc/walletOutTransfer"
	Payrpc_ReplenishmentOrder_FullMethodName              = "/payrpc.payrpc/replenishmentOrder"
	Payrpc_WithdrawalList_FullMethodName                  = "/payrpc.payrpc/withdrawalList"
	Payrpc_WithdrawalStatistics_FullMethodName            = "/payrpc.payrpc/withdrawalStatistics"
	Payrpc_DepositRecordList_FullMethodName               = "/payrpc.payrpc/depositRecordList"
	Payrpc_DepositSum_FullMethodName                      = "/payrpc.payrpc/depositSum"
	Payrpc_PayAllChannelList_FullMethodName               = "/payrpc.payrpc/payAllChannelList"
	Payrpc_UpdateWithdrawalStatus_FullMethodName          = "/payrpc.payrpc/updateWithdrawalStatus"
	Payrpc_AuditWithdrawalSum_FullMethodName              = "/payrpc.payrpc/auditWithdrawalSum"
	Payrpc_CancelWithDraw_FullMethodName                  = "/payrpc.payrpc/cancelWithDraw"
	Payrpc_DepositChannelList_FullMethodName              = "/payrpc.payrpc/depositChannelList"
	Payrpc_EditChannel_FullMethodName                     = "/payrpc.payrpc/editChannel"
	Payrpc_DepositList_FullMethodName                     = "/payrpc.payrpc/depositList"
	Payrpc_DepositStatistics_FullMethodName               = "/payrpc.payrpc/depositStatistics"
	Payrpc_GetWithdrawalAddressType_FullMethodName        = "/payrpc.payrpc/getWithdrawalAddressType"
	Payrpc_PayChannelList_FullMethodName                  = "/payrpc.payrpc/payChannelList"
	Payrpc_PayPlatList_FullMethodName                     = "/payrpc.payrpc/payPlatList"
)

// PayrpcClient is the client API for Payrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayrpcClient interface {
	// group: pay
	BindAccount(ctx context.Context, in *BindAccountReq, opts ...grpc.CallOption) (*BindAccountResp, error)
	// group: pay
	PayAccount(ctx context.Context, in *PayAccountReq, opts ...grpc.CallOption) (*PayAccountResp, error)
	// group: pay
	WithdrawConfig(ctx context.Context, in *WithdrawConfigReq, opts ...grpc.CallOption) (*WithdrawConfigResp, error)
	// group: pay
	ChannelList(ctx context.Context, in *ChannelListReq, opts ...grpc.CallOption) (*ChannelListResp, error)
	// group: pay
	Deposit(ctx context.Context, in *DepositReq, opts ...grpc.CallOption) (*DepositResp, error)
	// group: pay
	DepositCallBack(ctx context.Context, in *DepositCallBackReq, opts ...grpc.CallOption) (*DepositCallBackResp, error)
	// group:pay
	DepositByWowIdrCallBack(ctx context.Context, in *DepositByWowIdrCallBackReq, opts ...grpc.CallOption) (*DepositByWowIdrCallBackResp, error)
	// group:pay
	DepositByBasePayCallBack(ctx context.Context, in *DepositByBasePayCallBackReq, opts ...grpc.CallOption) (*DepositByBasePayCallBackResp, error)
	// group:pay
	DepositByMoonPayCallBack(ctx context.Context, in *DepositByMoonPayCallBackReq, opts ...grpc.CallOption) (*DepositByMoonPayCallBackResp, error)
	// group:pay
	DepositByBfPayCallBack(ctx context.Context, in *DepositByBfPayCallBackReq, opts ...grpc.CallOption) (*DepositByBfPayCallBackResp, error)
	// group:pay
	DepositBySixPayCallBack(ctx context.Context, in *DepositBySixPayCallBackReq, opts ...grpc.CallOption) (*DepositBySixPayCallBackResp, error)
	// group:pay
	DepositByAiPayCallBack(ctx context.Context, in *DepositByAiPayCallBackReq, opts ...grpc.CallOption) (*DepositByAiPayCallBackResp, error)
	// group:pay
	DepositByAPayCallBack(ctx context.Context, in *DepositByAPayCallBackReq, opts ...grpc.CallOption) (*DepositByAPayCallBackResp, error)
	// group: pay
	DepositSearch(ctx context.Context, in *DepositSearchReq, opts ...grpc.CallOption) (*DepositSearchResp, error)
	// group: pay
	Withdraws(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error)
	// group: pay
	WithdrawCallBack(ctx context.Context, in *WithdrawCallBackReq, opts ...grpc.CallOption) (*WithdrawCallBackResp, error)
	// group: pay
	WithdrawByWowIdrCallBack(ctx context.Context, in *WithdrawByWowIdrCallBackReq, opts ...grpc.CallOption) (*WithdrawByWowIdrCallBackResp, error)
	// group: pay
	WithdrawByBasePayCallBack(ctx context.Context, in *WithdrawByBasePayCallBackReq, opts ...grpc.CallOption) (*WithdrawByBasePayCallBackResp, error)
	// group: pay
	WithdrawByMoonPayCallBack(ctx context.Context, in *WithdrawByMoonPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByMoonPayCallBackResp, error)
	// group: pay
	WithdrawByBfPayCallBack(ctx context.Context, in *WithdrawByBfPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByBfPayCallBackResp, error)
	// group: pay
	WithdrawBySixPayCallBack(ctx context.Context, in *WithdrawBySixPayCallBackReq, opts ...grpc.CallOption) (*WithdrawBySixPayCallBackResp, error)
	// group: pay
	WithdrawByAiPayCallBack(ctx context.Context, in *WithdrawByAiPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByAiPayCallBackResp, error)
	// group: pay
	WithdrawByAPayCallBack(ctx context.Context, in *WithdrawByAPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByAPayCallBackResp, error)
	// group: pay
	WithdrawSearch(ctx context.Context, in *WithdrawSearchReq, opts ...grpc.CallOption) (*WithdrawSearchResp, error)
	// group: pay
	FindMerchantBlance(ctx context.Context, in *FindMerchantBlanceReq, opts ...grpc.CallOption) (*FindMerchantBlanceResp, error)
	// group: pay
	RefundOrder(ctx context.Context, in *RefundOrderReq, opts ...grpc.CallOption) (*RefundOrderResp, error)
	// group: pay
	RefundOrderCallBack(ctx context.Context, in *RefundOrderCallBackReq, opts ...grpc.CallOption) (*RefundOrderCallBackResp, error)
	// group: pay
	CheckDeposit(ctx context.Context, in *CheckDepositReq, opts ...grpc.CallOption) (*CheckDepositResp, error)
	// group: pay
	GetCoinLogList(ctx context.Context, in *GetCoinLogListReq, opts ...grpc.CallOption) (*GetCoinLogListResp, error)
	// group: pay
	GetAuditWithdrawalRecord(ctx context.Context, in *GetAuditWithdrawalRecordReq, opts ...grpc.CallOption) (*GetAuditWithdrawalRecordResp, error)
	// group: pay
	GetWithdrawalRecord(ctx context.Context, in *GetAuditWithdrawalRecordReq, opts ...grpc.CallOption) (*GetAuditWithdrawalRecordResp, error)
	// group: pay
	GetDepositWithdrawalStatistics(ctx context.Context, in *GetDepositWithdrawalStatisticsReq, opts ...grpc.CallOption) (*GetDepositWithdrawalStatisticsResp, error)
	// group: pay
	IsAudit(ctx context.Context, in *IsAuditReq, opts ...grpc.CallOption) (*IsAuditResp, error)
	// group: pay
	FinanceWithDraw(ctx context.Context, in *FinanceWithDrawReq, opts ...grpc.CallOption) (*FinanceWithDrawResp, error)
	// group: pay
	DailyReportStatisticsCount(ctx context.Context, in *DailyReportStatisticsCountReq, opts ...grpc.CallOption) (*DailyReportStatisticsCountResp, error)
	// group: pay
	GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...grpc.CallOption) (*GetUserCoinResp, error)
	// group: pay
	CoinRateList(ctx context.Context, in *CoinRateReq, opts ...grpc.CallOption) (*CoinRateResp, error)
	// group: pay
	PagcorDailyTax(ctx context.Context, in *PagcorDailyTaxReq, opts ...grpc.CallOption) (*PagcorDailyTaxResp, error)
	// group: pay
	GetDepositRecord(ctx context.Context, in *GetDepositRecordReq, opts ...grpc.CallOption) (*GetDepositRecordResp, error)
	// group: pay
	GetFrontWithdrawalRecord(ctx context.Context, in *GetFrontWithdrawalRecordReq, opts ...grpc.CallOption) (*GetFrontWithdrawalRecordResp, error)
	// group: report
	TotalSummary(ctx context.Context, in *TotalSummaryReq, opts ...grpc.CallOption) (*TotalSummaryResp, error)
	// group: report
	DepositAndWithdrawalChart(ctx context.Context, in *DepositAndWithdrawalChartReq, opts ...grpc.CallOption) (*DepositAndWithdrawalChartResp, error)
	// group: report
	DailyConversionReportList(ctx context.Context, in *DailyConversionReportListReq, opts ...grpc.CallOption) (*DailyConversionReportListResp, error)
	// group: report
	DailyConversionReportStatistics(ctx context.Context, in *DailyConversionReportStatisticsReq, opts ...grpc.CallOption) (*DailyConversionReportStatisticsResp, error)
	// group: report
	PlatBetCoinChart(ctx context.Context, in *PlatBetCoinChartReq, opts ...grpc.CallOption) (*PlatBetCoinChartResp, error)
	// group: pay
	WalletOutTransfer(ctx context.Context, in *WalletOutTransferReq, opts ...grpc.CallOption) (*WalletOutTransferResp, error)
	//group:pay
	ReplenishmentOrder(ctx context.Context, in *ReplenishmentOrderReq, opts ...grpc.CallOption) (*ReplenishmentOrderResp, error)
	//group:pay
	WithdrawalList(ctx context.Context, in *WithdrawalListReq, opts ...grpc.CallOption) (*WithdrawalListResp, error)
	//group:pay
	WithdrawalStatistics(ctx context.Context, in *WithdrawalStatisticsReq, opts ...grpc.CallOption) (*WithdrawalStatisticsResp, error)
	//group:pay
	DepositRecordList(ctx context.Context, in *DepositRecordListReq, opts ...grpc.CallOption) (*DepositRecordListResp, error)
	//group:pay
	DepositSum(ctx context.Context, in *DepositSumReq, opts ...grpc.CallOption) (*DepositSumResp, error)
	// group:pay
	PayAllChannelList(ctx context.Context, in *PayAllChannelListReq, opts ...grpc.CallOption) (*PayAllChannelListResp, error)
	//group:pay
	UpdateWithdrawalStatus(ctx context.Context, in *UpdateWithdrawalStatusReq, opts ...grpc.CallOption) (*UpdateWithdrawalStatusResp, error)
	//group:pay
	AuditWithdrawalSum(ctx context.Context, in *AuditWithdrawalSumReq, opts ...grpc.CallOption) (*AuditWithdrawalSumResp, error)
	//group:pay
	CancelWithDraw(ctx context.Context, in *CancelWithDrawReq, opts ...grpc.CallOption) (*CancelWithDrawResp, error)
	//group:pay
	DepositChannelList(ctx context.Context, in *DepositChannelListReq, opts ...grpc.CallOption) (*DepositChannelListResp, error)
	//group:pay
	EditChannel(ctx context.Context, in *EditChannelReq, opts ...grpc.CallOption) (*EditChannelResp, error)
	//group:pay
	DepositList(ctx context.Context, in *AdminDepositListReq, opts ...grpc.CallOption) (*AdminDepositListResp, error)
	//group:pay
	DepositStatistics(ctx context.Context, in *AdminDepositStatisticsReq, opts ...grpc.CallOption) (*AdminDepositStatisticsResp, error)
	// group:system
	GetWithdrawalAddressType(ctx context.Context, in *GetWithdrawalAddressTypeReq, opts ...grpc.CallOption) (*GetWithdrawalAddressTypeResp, error)
	//group:system
	PayChannelList(ctx context.Context, in *PayChannelListReq, opts ...grpc.CallOption) (*PayChannelListResp, error)
	//group:system
	PayPlatList(ctx context.Context, in *PayPlatListReq, opts ...grpc.CallOption) (*PayPlatListResp, error)
}

type payrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPayrpcClient(cc grpc.ClientConnInterface) PayrpcClient {
	return &payrpcClient{cc}
}

func (c *payrpcClient) BindAccount(ctx context.Context, in *BindAccountReq, opts ...grpc.CallOption) (*BindAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindAccountResp)
	err := c.cc.Invoke(ctx, Payrpc_BindAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) PayAccount(ctx context.Context, in *PayAccountReq, opts ...grpc.CallOption) (*PayAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAccountResp)
	err := c.cc.Invoke(ctx, Payrpc_PayAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawConfig(ctx context.Context, in *WithdrawConfigReq, opts ...grpc.CallOption) (*WithdrawConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawConfigResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) ChannelList(ctx context.Context, in *ChannelListReq, opts ...grpc.CallOption) (*ChannelListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelListResp)
	err := c.cc.Invoke(ctx, Payrpc_ChannelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) Deposit(ctx context.Context, in *DepositReq, opts ...grpc.CallOption) (*DepositResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositResp)
	err := c.cc.Invoke(ctx, Payrpc_Deposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositCallBack(ctx context.Context, in *DepositCallBackReq, opts ...grpc.CallOption) (*DepositCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositByWowIdrCallBack(ctx context.Context, in *DepositByWowIdrCallBackReq, opts ...grpc.CallOption) (*DepositByWowIdrCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositByWowIdrCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositByWowIdrCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositByBasePayCallBack(ctx context.Context, in *DepositByBasePayCallBackReq, opts ...grpc.CallOption) (*DepositByBasePayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositByBasePayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositByBasePayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositByMoonPayCallBack(ctx context.Context, in *DepositByMoonPayCallBackReq, opts ...grpc.CallOption) (*DepositByMoonPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositByMoonPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositByMoonPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositByBfPayCallBack(ctx context.Context, in *DepositByBfPayCallBackReq, opts ...grpc.CallOption) (*DepositByBfPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositByBfPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositByBfPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositBySixPayCallBack(ctx context.Context, in *DepositBySixPayCallBackReq, opts ...grpc.CallOption) (*DepositBySixPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositBySixPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositBySixPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositByAiPayCallBack(ctx context.Context, in *DepositByAiPayCallBackReq, opts ...grpc.CallOption) (*DepositByAiPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositByAiPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositByAiPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositByAPayCallBack(ctx context.Context, in *DepositByAPayCallBackReq, opts ...grpc.CallOption) (*DepositByAPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositByAPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositByAPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositSearch(ctx context.Context, in *DepositSearchReq, opts ...grpc.CallOption) (*DepositSearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositSearchResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) Withdraws(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResp)
	err := c.cc.Invoke(ctx, Payrpc_Withdraws_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawCallBack(ctx context.Context, in *WithdrawCallBackReq, opts ...grpc.CallOption) (*WithdrawCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawByWowIdrCallBack(ctx context.Context, in *WithdrawByWowIdrCallBackReq, opts ...grpc.CallOption) (*WithdrawByWowIdrCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawByWowIdrCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawByWowIdrCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawByBasePayCallBack(ctx context.Context, in *WithdrawByBasePayCallBackReq, opts ...grpc.CallOption) (*WithdrawByBasePayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawByBasePayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawByBasePayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawByMoonPayCallBack(ctx context.Context, in *WithdrawByMoonPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByMoonPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawByMoonPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawByMoonPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawByBfPayCallBack(ctx context.Context, in *WithdrawByBfPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByBfPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawByBfPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawByBfPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawBySixPayCallBack(ctx context.Context, in *WithdrawBySixPayCallBackReq, opts ...grpc.CallOption) (*WithdrawBySixPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawBySixPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawBySixPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawByAiPayCallBack(ctx context.Context, in *WithdrawByAiPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByAiPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawByAiPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawByAiPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawByAPayCallBack(ctx context.Context, in *WithdrawByAPayCallBackReq, opts ...grpc.CallOption) (*WithdrawByAPayCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawByAPayCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawByAPayCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawSearch(ctx context.Context, in *WithdrawSearchReq, opts ...grpc.CallOption) (*WithdrawSearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawSearchResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) FindMerchantBlance(ctx context.Context, in *FindMerchantBlanceReq, opts ...grpc.CallOption) (*FindMerchantBlanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindMerchantBlanceResp)
	err := c.cc.Invoke(ctx, Payrpc_FindMerchantBlance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) RefundOrder(ctx context.Context, in *RefundOrderReq, opts ...grpc.CallOption) (*RefundOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundOrderResp)
	err := c.cc.Invoke(ctx, Payrpc_RefundOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) RefundOrderCallBack(ctx context.Context, in *RefundOrderCallBackReq, opts ...grpc.CallOption) (*RefundOrderCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundOrderCallBackResp)
	err := c.cc.Invoke(ctx, Payrpc_RefundOrderCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) CheckDeposit(ctx context.Context, in *CheckDepositReq, opts ...grpc.CallOption) (*CheckDepositResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDepositResp)
	err := c.cc.Invoke(ctx, Payrpc_CheckDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetCoinLogList(ctx context.Context, in *GetCoinLogListReq, opts ...grpc.CallOption) (*GetCoinLogListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoinLogListResp)
	err := c.cc.Invoke(ctx, Payrpc_GetCoinLogList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetAuditWithdrawalRecord(ctx context.Context, in *GetAuditWithdrawalRecordReq, opts ...grpc.CallOption) (*GetAuditWithdrawalRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditWithdrawalRecordResp)
	err := c.cc.Invoke(ctx, Payrpc_GetAuditWithdrawalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetWithdrawalRecord(ctx context.Context, in *GetAuditWithdrawalRecordReq, opts ...grpc.CallOption) (*GetAuditWithdrawalRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditWithdrawalRecordResp)
	err := c.cc.Invoke(ctx, Payrpc_GetWithdrawalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetDepositWithdrawalStatistics(ctx context.Context, in *GetDepositWithdrawalStatisticsReq, opts ...grpc.CallOption) (*GetDepositWithdrawalStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepositWithdrawalStatisticsResp)
	err := c.cc.Invoke(ctx, Payrpc_GetDepositWithdrawalStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) IsAudit(ctx context.Context, in *IsAuditReq, opts ...grpc.CallOption) (*IsAuditResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsAuditResp)
	err := c.cc.Invoke(ctx, Payrpc_IsAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) FinanceWithDraw(ctx context.Context, in *FinanceWithDrawReq, opts ...grpc.CallOption) (*FinanceWithDrawResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinanceWithDrawResp)
	err := c.cc.Invoke(ctx, Payrpc_FinanceWithDraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DailyReportStatisticsCount(ctx context.Context, in *DailyReportStatisticsCountReq, opts ...grpc.CallOption) (*DailyReportStatisticsCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyReportStatisticsCountResp)
	err := c.cc.Invoke(ctx, Payrpc_DailyReportStatisticsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetUserCoin(ctx context.Context, in *GetUserCoinReq, opts ...grpc.CallOption) (*GetUserCoinResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCoinResp)
	err := c.cc.Invoke(ctx, Payrpc_GetUserCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) CoinRateList(ctx context.Context, in *CoinRateReq, opts ...grpc.CallOption) (*CoinRateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinRateResp)
	err := c.cc.Invoke(ctx, Payrpc_CoinRateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) PagcorDailyTax(ctx context.Context, in *PagcorDailyTaxReq, opts ...grpc.CallOption) (*PagcorDailyTaxResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PagcorDailyTaxResp)
	err := c.cc.Invoke(ctx, Payrpc_PagcorDailyTax_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetDepositRecord(ctx context.Context, in *GetDepositRecordReq, opts ...grpc.CallOption) (*GetDepositRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepositRecordResp)
	err := c.cc.Invoke(ctx, Payrpc_GetDepositRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetFrontWithdrawalRecord(ctx context.Context, in *GetFrontWithdrawalRecordReq, opts ...grpc.CallOption) (*GetFrontWithdrawalRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFrontWithdrawalRecordResp)
	err := c.cc.Invoke(ctx, Payrpc_GetFrontWithdrawalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) TotalSummary(ctx context.Context, in *TotalSummaryReq, opts ...grpc.CallOption) (*TotalSummaryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalSummaryResp)
	err := c.cc.Invoke(ctx, Payrpc_TotalSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositAndWithdrawalChart(ctx context.Context, in *DepositAndWithdrawalChartReq, opts ...grpc.CallOption) (*DepositAndWithdrawalChartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositAndWithdrawalChartResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositAndWithdrawalChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DailyConversionReportList(ctx context.Context, in *DailyConversionReportListReq, opts ...grpc.CallOption) (*DailyConversionReportListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyConversionReportListResp)
	err := c.cc.Invoke(ctx, Payrpc_DailyConversionReportList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DailyConversionReportStatistics(ctx context.Context, in *DailyConversionReportStatisticsReq, opts ...grpc.CallOption) (*DailyConversionReportStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyConversionReportStatisticsResp)
	err := c.cc.Invoke(ctx, Payrpc_DailyConversionReportStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) PlatBetCoinChart(ctx context.Context, in *PlatBetCoinChartReq, opts ...grpc.CallOption) (*PlatBetCoinChartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlatBetCoinChartResp)
	err := c.cc.Invoke(ctx, Payrpc_PlatBetCoinChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WalletOutTransfer(ctx context.Context, in *WalletOutTransferReq, opts ...grpc.CallOption) (*WalletOutTransferResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletOutTransferResp)
	err := c.cc.Invoke(ctx, Payrpc_WalletOutTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) ReplenishmentOrder(ctx context.Context, in *ReplenishmentOrderReq, opts ...grpc.CallOption) (*ReplenishmentOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplenishmentOrderResp)
	err := c.cc.Invoke(ctx, Payrpc_ReplenishmentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawalList(ctx context.Context, in *WithdrawalListReq, opts ...grpc.CallOption) (*WithdrawalListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalListResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawalList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) WithdrawalStatistics(ctx context.Context, in *WithdrawalStatisticsReq, opts ...grpc.CallOption) (*WithdrawalStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalStatisticsResp)
	err := c.cc.Invoke(ctx, Payrpc_WithdrawalStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositRecordList(ctx context.Context, in *DepositRecordListReq, opts ...grpc.CallOption) (*DepositRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositRecordListResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositSum(ctx context.Context, in *DepositSumReq, opts ...grpc.CallOption) (*DepositSumResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositSumResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositSum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) PayAllChannelList(ctx context.Context, in *PayAllChannelListReq, opts ...grpc.CallOption) (*PayAllChannelListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAllChannelListResp)
	err := c.cc.Invoke(ctx, Payrpc_PayAllChannelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) UpdateWithdrawalStatus(ctx context.Context, in *UpdateWithdrawalStatusReq, opts ...grpc.CallOption) (*UpdateWithdrawalStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWithdrawalStatusResp)
	err := c.cc.Invoke(ctx, Payrpc_UpdateWithdrawalStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) AuditWithdrawalSum(ctx context.Context, in *AuditWithdrawalSumReq, opts ...grpc.CallOption) (*AuditWithdrawalSumResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditWithdrawalSumResp)
	err := c.cc.Invoke(ctx, Payrpc_AuditWithdrawalSum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) CancelWithDraw(ctx context.Context, in *CancelWithDrawReq, opts ...grpc.CallOption) (*CancelWithDrawResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelWithDrawResp)
	err := c.cc.Invoke(ctx, Payrpc_CancelWithDraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositChannelList(ctx context.Context, in *DepositChannelListReq, opts ...grpc.CallOption) (*DepositChannelListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositChannelListResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositChannelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) EditChannel(ctx context.Context, in *EditChannelReq, opts ...grpc.CallOption) (*EditChannelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditChannelResp)
	err := c.cc.Invoke(ctx, Payrpc_EditChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositList(ctx context.Context, in *AdminDepositListReq, opts ...grpc.CallOption) (*AdminDepositListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminDepositListResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) DepositStatistics(ctx context.Context, in *AdminDepositStatisticsReq, opts ...grpc.CallOption) (*AdminDepositStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminDepositStatisticsResp)
	err := c.cc.Invoke(ctx, Payrpc_DepositStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) GetWithdrawalAddressType(ctx context.Context, in *GetWithdrawalAddressTypeReq, opts ...grpc.CallOption) (*GetWithdrawalAddressTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawalAddressTypeResp)
	err := c.cc.Invoke(ctx, Payrpc_GetWithdrawalAddressType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) PayChannelList(ctx context.Context, in *PayChannelListReq, opts ...grpc.CallOption) (*PayChannelListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayChannelListResp)
	err := c.cc.Invoke(ctx, Payrpc_PayChannelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrpcClient) PayPlatList(ctx context.Context, in *PayPlatListReq, opts ...grpc.CallOption) (*PayPlatListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayPlatListResp)
	err := c.cc.Invoke(ctx, Payrpc_PayPlatList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayrpcServer is the server API for Payrpc service.
// All implementations must embed UnimplementedPayrpcServer
// for forward compatibility.
type PayrpcServer interface {
	// group: pay
	BindAccount(context.Context, *BindAccountReq) (*BindAccountResp, error)
	// group: pay
	PayAccount(context.Context, *PayAccountReq) (*PayAccountResp, error)
	// group: pay
	WithdrawConfig(context.Context, *WithdrawConfigReq) (*WithdrawConfigResp, error)
	// group: pay
	ChannelList(context.Context, *ChannelListReq) (*ChannelListResp, error)
	// group: pay
	Deposit(context.Context, *DepositReq) (*DepositResp, error)
	// group: pay
	DepositCallBack(context.Context, *DepositCallBackReq) (*DepositCallBackResp, error)
	// group:pay
	DepositByWowIdrCallBack(context.Context, *DepositByWowIdrCallBackReq) (*DepositByWowIdrCallBackResp, error)
	// group:pay
	DepositByBasePayCallBack(context.Context, *DepositByBasePayCallBackReq) (*DepositByBasePayCallBackResp, error)
	// group:pay
	DepositByMoonPayCallBack(context.Context, *DepositByMoonPayCallBackReq) (*DepositByMoonPayCallBackResp, error)
	// group:pay
	DepositByBfPayCallBack(context.Context, *DepositByBfPayCallBackReq) (*DepositByBfPayCallBackResp, error)
	// group:pay
	DepositBySixPayCallBack(context.Context, *DepositBySixPayCallBackReq) (*DepositBySixPayCallBackResp, error)
	// group:pay
	DepositByAiPayCallBack(context.Context, *DepositByAiPayCallBackReq) (*DepositByAiPayCallBackResp, error)
	// group:pay
	DepositByAPayCallBack(context.Context, *DepositByAPayCallBackReq) (*DepositByAPayCallBackResp, error)
	// group: pay
	DepositSearch(context.Context, *DepositSearchReq) (*DepositSearchResp, error)
	// group: pay
	Withdraws(context.Context, *WithdrawReq) (*WithdrawResp, error)
	// group: pay
	WithdrawCallBack(context.Context, *WithdrawCallBackReq) (*WithdrawCallBackResp, error)
	// group: pay
	WithdrawByWowIdrCallBack(context.Context, *WithdrawByWowIdrCallBackReq) (*WithdrawByWowIdrCallBackResp, error)
	// group: pay
	WithdrawByBasePayCallBack(context.Context, *WithdrawByBasePayCallBackReq) (*WithdrawByBasePayCallBackResp, error)
	// group: pay
	WithdrawByMoonPayCallBack(context.Context, *WithdrawByMoonPayCallBackReq) (*WithdrawByMoonPayCallBackResp, error)
	// group: pay
	WithdrawByBfPayCallBack(context.Context, *WithdrawByBfPayCallBackReq) (*WithdrawByBfPayCallBackResp, error)
	// group: pay
	WithdrawBySixPayCallBack(context.Context, *WithdrawBySixPayCallBackReq) (*WithdrawBySixPayCallBackResp, error)
	// group: pay
	WithdrawByAiPayCallBack(context.Context, *WithdrawByAiPayCallBackReq) (*WithdrawByAiPayCallBackResp, error)
	// group: pay
	WithdrawByAPayCallBack(context.Context, *WithdrawByAPayCallBackReq) (*WithdrawByAPayCallBackResp, error)
	// group: pay
	WithdrawSearch(context.Context, *WithdrawSearchReq) (*WithdrawSearchResp, error)
	// group: pay
	FindMerchantBlance(context.Context, *FindMerchantBlanceReq) (*FindMerchantBlanceResp, error)
	// group: pay
	RefundOrder(context.Context, *RefundOrderReq) (*RefundOrderResp, error)
	// group: pay
	RefundOrderCallBack(context.Context, *RefundOrderCallBackReq) (*RefundOrderCallBackResp, error)
	// group: pay
	CheckDeposit(context.Context, *CheckDepositReq) (*CheckDepositResp, error)
	// group: pay
	GetCoinLogList(context.Context, *GetCoinLogListReq) (*GetCoinLogListResp, error)
	// group: pay
	GetAuditWithdrawalRecord(context.Context, *GetAuditWithdrawalRecordReq) (*GetAuditWithdrawalRecordResp, error)
	// group: pay
	GetWithdrawalRecord(context.Context, *GetAuditWithdrawalRecordReq) (*GetAuditWithdrawalRecordResp, error)
	// group: pay
	GetDepositWithdrawalStatistics(context.Context, *GetDepositWithdrawalStatisticsReq) (*GetDepositWithdrawalStatisticsResp, error)
	// group: pay
	IsAudit(context.Context, *IsAuditReq) (*IsAuditResp, error)
	// group: pay
	FinanceWithDraw(context.Context, *FinanceWithDrawReq) (*FinanceWithDrawResp, error)
	// group: pay
	DailyReportStatisticsCount(context.Context, *DailyReportStatisticsCountReq) (*DailyReportStatisticsCountResp, error)
	// group: pay
	GetUserCoin(context.Context, *GetUserCoinReq) (*GetUserCoinResp, error)
	// group: pay
	CoinRateList(context.Context, *CoinRateReq) (*CoinRateResp, error)
	// group: pay
	PagcorDailyTax(context.Context, *PagcorDailyTaxReq) (*PagcorDailyTaxResp, error)
	// group: pay
	GetDepositRecord(context.Context, *GetDepositRecordReq) (*GetDepositRecordResp, error)
	// group: pay
	GetFrontWithdrawalRecord(context.Context, *GetFrontWithdrawalRecordReq) (*GetFrontWithdrawalRecordResp, error)
	// group: report
	TotalSummary(context.Context, *TotalSummaryReq) (*TotalSummaryResp, error)
	// group: report
	DepositAndWithdrawalChart(context.Context, *DepositAndWithdrawalChartReq) (*DepositAndWithdrawalChartResp, error)
	// group: report
	DailyConversionReportList(context.Context, *DailyConversionReportListReq) (*DailyConversionReportListResp, error)
	// group: report
	DailyConversionReportStatistics(context.Context, *DailyConversionReportStatisticsReq) (*DailyConversionReportStatisticsResp, error)
	// group: report
	PlatBetCoinChart(context.Context, *PlatBetCoinChartReq) (*PlatBetCoinChartResp, error)
	// group: pay
	WalletOutTransfer(context.Context, *WalletOutTransferReq) (*WalletOutTransferResp, error)
	//group:pay
	ReplenishmentOrder(context.Context, *ReplenishmentOrderReq) (*ReplenishmentOrderResp, error)
	//group:pay
	WithdrawalList(context.Context, *WithdrawalListReq) (*WithdrawalListResp, error)
	//group:pay
	WithdrawalStatistics(context.Context, *WithdrawalStatisticsReq) (*WithdrawalStatisticsResp, error)
	//group:pay
	DepositRecordList(context.Context, *DepositRecordListReq) (*DepositRecordListResp, error)
	//group:pay
	DepositSum(context.Context, *DepositSumReq) (*DepositSumResp, error)
	// group:pay
	PayAllChannelList(context.Context, *PayAllChannelListReq) (*PayAllChannelListResp, error)
	//group:pay
	UpdateWithdrawalStatus(context.Context, *UpdateWithdrawalStatusReq) (*UpdateWithdrawalStatusResp, error)
	//group:pay
	AuditWithdrawalSum(context.Context, *AuditWithdrawalSumReq) (*AuditWithdrawalSumResp, error)
	//group:pay
	CancelWithDraw(context.Context, *CancelWithDrawReq) (*CancelWithDrawResp, error)
	//group:pay
	DepositChannelList(context.Context, *DepositChannelListReq) (*DepositChannelListResp, error)
	//group:pay
	EditChannel(context.Context, *EditChannelReq) (*EditChannelResp, error)
	//group:pay
	DepositList(context.Context, *AdminDepositListReq) (*AdminDepositListResp, error)
	//group:pay
	DepositStatistics(context.Context, *AdminDepositStatisticsReq) (*AdminDepositStatisticsResp, error)
	// group:system
	GetWithdrawalAddressType(context.Context, *GetWithdrawalAddressTypeReq) (*GetWithdrawalAddressTypeResp, error)
	//group:system
	PayChannelList(context.Context, *PayChannelListReq) (*PayChannelListResp, error)
	//group:system
	PayPlatList(context.Context, *PayPlatListReq) (*PayPlatListResp, error)
	mustEmbedUnimplementedPayrpcServer()
}

// UnimplementedPayrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPayrpcServer struct{}

func (UnimplementedPayrpcServer) BindAccount(context.Context, *BindAccountReq) (*BindAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAccount not implemented")
}
func (UnimplementedPayrpcServer) PayAccount(context.Context, *PayAccountReq) (*PayAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAccount not implemented")
}
func (UnimplementedPayrpcServer) WithdrawConfig(context.Context, *WithdrawConfigReq) (*WithdrawConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawConfig not implemented")
}
func (UnimplementedPayrpcServer) ChannelList(context.Context, *ChannelListReq) (*ChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelList not implemented")
}
func (UnimplementedPayrpcServer) Deposit(context.Context, *DepositReq) (*DepositResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedPayrpcServer) DepositCallBack(context.Context, *DepositCallBackReq) (*DepositCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositByWowIdrCallBack(context.Context, *DepositByWowIdrCallBackReq) (*DepositByWowIdrCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByWowIdrCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositByBasePayCallBack(context.Context, *DepositByBasePayCallBackReq) (*DepositByBasePayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByBasePayCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositByMoonPayCallBack(context.Context, *DepositByMoonPayCallBackReq) (*DepositByMoonPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByMoonPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositByBfPayCallBack(context.Context, *DepositByBfPayCallBackReq) (*DepositByBfPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByBfPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositBySixPayCallBack(context.Context, *DepositBySixPayCallBackReq) (*DepositBySixPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositBySixPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositByAiPayCallBack(context.Context, *DepositByAiPayCallBackReq) (*DepositByAiPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByAiPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositByAPayCallBack(context.Context, *DepositByAPayCallBackReq) (*DepositByAPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByAPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) DepositSearch(context.Context, *DepositSearchReq) (*DepositSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositSearch not implemented")
}
func (UnimplementedPayrpcServer) Withdraws(context.Context, *WithdrawReq) (*WithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraws not implemented")
}
func (UnimplementedPayrpcServer) WithdrawCallBack(context.Context, *WithdrawCallBackReq) (*WithdrawCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawByWowIdrCallBack(context.Context, *WithdrawByWowIdrCallBackReq) (*WithdrawByWowIdrCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawByWowIdrCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawByBasePayCallBack(context.Context, *WithdrawByBasePayCallBackReq) (*WithdrawByBasePayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawByBasePayCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawByMoonPayCallBack(context.Context, *WithdrawByMoonPayCallBackReq) (*WithdrawByMoonPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawByMoonPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawByBfPayCallBack(context.Context, *WithdrawByBfPayCallBackReq) (*WithdrawByBfPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawByBfPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawBySixPayCallBack(context.Context, *WithdrawBySixPayCallBackReq) (*WithdrawBySixPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBySixPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawByAiPayCallBack(context.Context, *WithdrawByAiPayCallBackReq) (*WithdrawByAiPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawByAiPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawByAPayCallBack(context.Context, *WithdrawByAPayCallBackReq) (*WithdrawByAPayCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawByAPayCallBack not implemented")
}
func (UnimplementedPayrpcServer) WithdrawSearch(context.Context, *WithdrawSearchReq) (*WithdrawSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawSearch not implemented")
}
func (UnimplementedPayrpcServer) FindMerchantBlance(context.Context, *FindMerchantBlanceReq) (*FindMerchantBlanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMerchantBlance not implemented")
}
func (UnimplementedPayrpcServer) RefundOrder(context.Context, *RefundOrderReq) (*RefundOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundOrder not implemented")
}
func (UnimplementedPayrpcServer) RefundOrderCallBack(context.Context, *RefundOrderCallBackReq) (*RefundOrderCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundOrderCallBack not implemented")
}
func (UnimplementedPayrpcServer) CheckDeposit(context.Context, *CheckDepositReq) (*CheckDepositResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeposit not implemented")
}
func (UnimplementedPayrpcServer) GetCoinLogList(context.Context, *GetCoinLogListReq) (*GetCoinLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinLogList not implemented")
}
func (UnimplementedPayrpcServer) GetAuditWithdrawalRecord(context.Context, *GetAuditWithdrawalRecordReq) (*GetAuditWithdrawalRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditWithdrawalRecord not implemented")
}
func (UnimplementedPayrpcServer) GetWithdrawalRecord(context.Context, *GetAuditWithdrawalRecordReq) (*GetAuditWithdrawalRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalRecord not implemented")
}
func (UnimplementedPayrpcServer) GetDepositWithdrawalStatistics(context.Context, *GetDepositWithdrawalStatisticsReq) (*GetDepositWithdrawalStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositWithdrawalStatistics not implemented")
}
func (UnimplementedPayrpcServer) IsAudit(context.Context, *IsAuditReq) (*IsAuditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAudit not implemented")
}
func (UnimplementedPayrpcServer) FinanceWithDraw(context.Context, *FinanceWithDrawReq) (*FinanceWithDrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinanceWithDraw not implemented")
}
func (UnimplementedPayrpcServer) DailyReportStatisticsCount(context.Context, *DailyReportStatisticsCountReq) (*DailyReportStatisticsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyReportStatisticsCount not implemented")
}
func (UnimplementedPayrpcServer) GetUserCoin(context.Context, *GetUserCoinReq) (*GetUserCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoin not implemented")
}
func (UnimplementedPayrpcServer) CoinRateList(context.Context, *CoinRateReq) (*CoinRateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinRateList not implemented")
}
func (UnimplementedPayrpcServer) PagcorDailyTax(context.Context, *PagcorDailyTaxReq) (*PagcorDailyTaxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagcorDailyTax not implemented")
}
func (UnimplementedPayrpcServer) GetDepositRecord(context.Context, *GetDepositRecordReq) (*GetDepositRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositRecord not implemented")
}
func (UnimplementedPayrpcServer) GetFrontWithdrawalRecord(context.Context, *GetFrontWithdrawalRecordReq) (*GetFrontWithdrawalRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontWithdrawalRecord not implemented")
}
func (UnimplementedPayrpcServer) TotalSummary(context.Context, *TotalSummaryReq) (*TotalSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSummary not implemented")
}
func (UnimplementedPayrpcServer) DepositAndWithdrawalChart(context.Context, *DepositAndWithdrawalChartReq) (*DepositAndWithdrawalChartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAndWithdrawalChart not implemented")
}
func (UnimplementedPayrpcServer) DailyConversionReportList(context.Context, *DailyConversionReportListReq) (*DailyConversionReportListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyConversionReportList not implemented")
}
func (UnimplementedPayrpcServer) DailyConversionReportStatistics(context.Context, *DailyConversionReportStatisticsReq) (*DailyConversionReportStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyConversionReportStatistics not implemented")
}
func (UnimplementedPayrpcServer) PlatBetCoinChart(context.Context, *PlatBetCoinChartReq) (*PlatBetCoinChartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatBetCoinChart not implemented")
}
func (UnimplementedPayrpcServer) WalletOutTransfer(context.Context, *WalletOutTransferReq) (*WalletOutTransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletOutTransfer not implemented")
}
func (UnimplementedPayrpcServer) ReplenishmentOrder(context.Context, *ReplenishmentOrderReq) (*ReplenishmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplenishmentOrder not implemented")
}
func (UnimplementedPayrpcServer) WithdrawalList(context.Context, *WithdrawalListReq) (*WithdrawalListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalList not implemented")
}
func (UnimplementedPayrpcServer) WithdrawalStatistics(context.Context, *WithdrawalStatisticsReq) (*WithdrawalStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalStatistics not implemented")
}
func (UnimplementedPayrpcServer) DepositRecordList(context.Context, *DepositRecordListReq) (*DepositRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositRecordList not implemented")
}
func (UnimplementedPayrpcServer) DepositSum(context.Context, *DepositSumReq) (*DepositSumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositSum not implemented")
}
func (UnimplementedPayrpcServer) PayAllChannelList(context.Context, *PayAllChannelListReq) (*PayAllChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAllChannelList not implemented")
}
func (UnimplementedPayrpcServer) UpdateWithdrawalStatus(context.Context, *UpdateWithdrawalStatusReq) (*UpdateWithdrawalStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawalStatus not implemented")
}
func (UnimplementedPayrpcServer) AuditWithdrawalSum(context.Context, *AuditWithdrawalSumReq) (*AuditWithdrawalSumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditWithdrawalSum not implemented")
}
func (UnimplementedPayrpcServer) CancelWithDraw(context.Context, *CancelWithDrawReq) (*CancelWithDrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWithDraw not implemented")
}
func (UnimplementedPayrpcServer) DepositChannelList(context.Context, *DepositChannelListReq) (*DepositChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositChannelList not implemented")
}
func (UnimplementedPayrpcServer) EditChannel(context.Context, *EditChannelReq) (*EditChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannel not implemented")
}
func (UnimplementedPayrpcServer) DepositList(context.Context, *AdminDepositListReq) (*AdminDepositListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositList not implemented")
}
func (UnimplementedPayrpcServer) DepositStatistics(context.Context, *AdminDepositStatisticsReq) (*AdminDepositStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositStatistics not implemented")
}
func (UnimplementedPayrpcServer) GetWithdrawalAddressType(context.Context, *GetWithdrawalAddressTypeReq) (*GetWithdrawalAddressTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalAddressType not implemented")
}
func (UnimplementedPayrpcServer) PayChannelList(context.Context, *PayChannelListReq) (*PayChannelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayChannelList not implemented")
}
func (UnimplementedPayrpcServer) PayPlatList(context.Context, *PayPlatListReq) (*PayPlatListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayPlatList not implemented")
}
func (UnimplementedPayrpcServer) mustEmbedUnimplementedPayrpcServer() {}
func (UnimplementedPayrpcServer) testEmbeddedByValue()                {}

// UnsafePayrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayrpcServer will
// result in compilation errors.
type UnsafePayrpcServer interface {
	mustEmbedUnimplementedPayrpcServer()
}

func RegisterPayrpcServer(s grpc.ServiceRegistrar, srv PayrpcServer) {
	// If the following call pancis, it indicates UnimplementedPayrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Payrpc_ServiceDesc, srv)
}

func _Payrpc_BindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).BindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_BindAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).BindAccount(ctx, req.(*BindAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_PayAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).PayAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_PayAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).PayAccount(ctx, req.(*PayAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawConfig(ctx, req.(*WithdrawConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_ChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).ChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_ChannelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).ChannelList(ctx, req.(*ChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).Deposit(ctx, req.(*DepositReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositCallBack(ctx, req.(*DepositCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositByWowIdrCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositByWowIdrCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositByWowIdrCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositByWowIdrCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositByWowIdrCallBack(ctx, req.(*DepositByWowIdrCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositByBasePayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositByBasePayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositByBasePayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositByBasePayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositByBasePayCallBack(ctx, req.(*DepositByBasePayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositByMoonPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositByMoonPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositByMoonPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositByMoonPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositByMoonPayCallBack(ctx, req.(*DepositByMoonPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositByBfPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositByBfPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositByBfPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositByBfPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositByBfPayCallBack(ctx, req.(*DepositByBfPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositBySixPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositBySixPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositBySixPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositBySixPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositBySixPayCallBack(ctx, req.(*DepositBySixPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositByAiPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositByAiPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositByAiPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositByAiPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositByAiPayCallBack(ctx, req.(*DepositByAiPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositByAPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositByAPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositByAPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositByAPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositByAPayCallBack(ctx, req.(*DepositByAPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositSearch(ctx, req.(*DepositSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_Withdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).Withdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_Withdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).Withdraws(ctx, req.(*WithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawCallBack(ctx, req.(*WithdrawCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawByWowIdrCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawByWowIdrCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawByWowIdrCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawByWowIdrCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawByWowIdrCallBack(ctx, req.(*WithdrawByWowIdrCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawByBasePayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawByBasePayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawByBasePayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawByBasePayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawByBasePayCallBack(ctx, req.(*WithdrawByBasePayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawByMoonPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawByMoonPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawByMoonPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawByMoonPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawByMoonPayCallBack(ctx, req.(*WithdrawByMoonPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawByBfPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawByBfPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawByBfPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawByBfPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawByBfPayCallBack(ctx, req.(*WithdrawByBfPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawBySixPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawBySixPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawBySixPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawBySixPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawBySixPayCallBack(ctx, req.(*WithdrawBySixPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawByAiPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawByAiPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawByAiPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawByAiPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawByAiPayCallBack(ctx, req.(*WithdrawByAiPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawByAPayCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawByAPayCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawByAPayCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawByAPayCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawByAPayCallBack(ctx, req.(*WithdrawByAPayCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawSearch(ctx, req.(*WithdrawSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_FindMerchantBlance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantBlanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).FindMerchantBlance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_FindMerchantBlance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).FindMerchantBlance(ctx, req.(*FindMerchantBlanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_RefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).RefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_RefundOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).RefundOrder(ctx, req.(*RefundOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_RefundOrderCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundOrderCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).RefundOrderCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_RefundOrderCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).RefundOrderCallBack(ctx, req.(*RefundOrderCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_CheckDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDepositReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).CheckDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_CheckDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).CheckDeposit(ctx, req.(*CheckDepositReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetCoinLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetCoinLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetCoinLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetCoinLogList(ctx, req.(*GetCoinLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetAuditWithdrawalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditWithdrawalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetAuditWithdrawalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetAuditWithdrawalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetAuditWithdrawalRecord(ctx, req.(*GetAuditWithdrawalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetWithdrawalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditWithdrawalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetWithdrawalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetWithdrawalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetWithdrawalRecord(ctx, req.(*GetAuditWithdrawalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetDepositWithdrawalStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositWithdrawalStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetDepositWithdrawalStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetDepositWithdrawalStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetDepositWithdrawalStatistics(ctx, req.(*GetDepositWithdrawalStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_IsAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).IsAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_IsAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).IsAudit(ctx, req.(*IsAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_FinanceWithDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinanceWithDrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).FinanceWithDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_FinanceWithDraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).FinanceWithDraw(ctx, req.(*FinanceWithDrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DailyReportStatisticsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyReportStatisticsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DailyReportStatisticsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DailyReportStatisticsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DailyReportStatisticsCount(ctx, req.(*DailyReportStatisticsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetUserCoin(ctx, req.(*GetUserCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_CoinRateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinRateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).CoinRateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_CoinRateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).CoinRateList(ctx, req.(*CoinRateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_PagcorDailyTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagcorDailyTaxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).PagcorDailyTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_PagcorDailyTax_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).PagcorDailyTax(ctx, req.(*PagcorDailyTaxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetDepositRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetDepositRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetDepositRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetDepositRecord(ctx, req.(*GetDepositRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetFrontWithdrawalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontWithdrawalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetFrontWithdrawalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetFrontWithdrawalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetFrontWithdrawalRecord(ctx, req.(*GetFrontWithdrawalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_TotalSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).TotalSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_TotalSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).TotalSummary(ctx, req.(*TotalSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositAndWithdrawalChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAndWithdrawalChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositAndWithdrawalChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositAndWithdrawalChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositAndWithdrawalChart(ctx, req.(*DepositAndWithdrawalChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DailyConversionReportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyConversionReportListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DailyConversionReportList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DailyConversionReportList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DailyConversionReportList(ctx, req.(*DailyConversionReportListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DailyConversionReportStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyConversionReportStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DailyConversionReportStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DailyConversionReportStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DailyConversionReportStatistics(ctx, req.(*DailyConversionReportStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_PlatBetCoinChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatBetCoinChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).PlatBetCoinChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_PlatBetCoinChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).PlatBetCoinChart(ctx, req.(*PlatBetCoinChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WalletOutTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletOutTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WalletOutTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WalletOutTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WalletOutTransfer(ctx, req.(*WalletOutTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_ReplenishmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplenishmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).ReplenishmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_ReplenishmentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).ReplenishmentOrder(ctx, req.(*ReplenishmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawalList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawalList(ctx, req.(*WithdrawalListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_WithdrawalStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).WithdrawalStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_WithdrawalStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).WithdrawalStatistics(ctx, req.(*WithdrawalStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositRecordList(ctx, req.(*DepositRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositSumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositSum(ctx, req.(*DepositSumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_PayAllChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAllChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).PayAllChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_PayAllChannelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).PayAllChannelList(ctx, req.(*PayAllChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_UpdateWithdrawalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawalStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).UpdateWithdrawalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_UpdateWithdrawalStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).UpdateWithdrawalStatus(ctx, req.(*UpdateWithdrawalStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_AuditWithdrawalSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditWithdrawalSumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).AuditWithdrawalSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_AuditWithdrawalSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).AuditWithdrawalSum(ctx, req.(*AuditWithdrawalSumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_CancelWithDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWithDrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).CancelWithDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_CancelWithDraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).CancelWithDraw(ctx, req.(*CancelWithDrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositChannelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositChannelList(ctx, req.(*DepositChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_EditChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).EditChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_EditChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).EditChannel(ctx, req.(*EditChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDepositListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositList(ctx, req.(*AdminDepositListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_DepositStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDepositStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).DepositStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_DepositStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).DepositStatistics(ctx, req.(*AdminDepositStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_GetWithdrawalAddressType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalAddressTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).GetWithdrawalAddressType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_GetWithdrawalAddressType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).GetWithdrawalAddressType(ctx, req.(*GetWithdrawalAddressTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_PayChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayChannelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).PayChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_PayChannelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).PayChannelList(ctx, req.(*PayChannelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payrpc_PayPlatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPlatListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrpcServer).PayPlatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payrpc_PayPlatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrpcServer).PayPlatList(ctx, req.(*PayPlatListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Payrpc_ServiceDesc is the grpc.ServiceDesc for Payrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payrpc.payrpc",
	HandlerType: (*PayrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bindAccount",
			Handler:    _Payrpc_BindAccount_Handler,
		},
		{
			MethodName: "payAccount",
			Handler:    _Payrpc_PayAccount_Handler,
		},
		{
			MethodName: "withdrawConfig",
			Handler:    _Payrpc_WithdrawConfig_Handler,
		},
		{
			MethodName: "channelList",
			Handler:    _Payrpc_ChannelList_Handler,
		},
		{
			MethodName: "deposit",
			Handler:    _Payrpc_Deposit_Handler,
		},
		{
			MethodName: "depositCallBack",
			Handler:    _Payrpc_DepositCallBack_Handler,
		},
		{
			MethodName: "depositByWowIdrCallBack",
			Handler:    _Payrpc_DepositByWowIdrCallBack_Handler,
		},
		{
			MethodName: "depositByBasePayCallBack",
			Handler:    _Payrpc_DepositByBasePayCallBack_Handler,
		},
		{
			MethodName: "depositByMoonPayCallBack",
			Handler:    _Payrpc_DepositByMoonPayCallBack_Handler,
		},
		{
			MethodName: "depositByBfPayCallBack",
			Handler:    _Payrpc_DepositByBfPayCallBack_Handler,
		},
		{
			MethodName: "depositBySixPayCallBack",
			Handler:    _Payrpc_DepositBySixPayCallBack_Handler,
		},
		{
			MethodName: "depositByAiPayCallBack",
			Handler:    _Payrpc_DepositByAiPayCallBack_Handler,
		},
		{
			MethodName: "depositByAPayCallBack",
			Handler:    _Payrpc_DepositByAPayCallBack_Handler,
		},
		{
			MethodName: "depositSearch",
			Handler:    _Payrpc_DepositSearch_Handler,
		},
		{
			MethodName: "withdraws",
			Handler:    _Payrpc_Withdraws_Handler,
		},
		{
			MethodName: "withdrawCallBack",
			Handler:    _Payrpc_WithdrawCallBack_Handler,
		},
		{
			MethodName: "withdrawByWowIdrCallBack",
			Handler:    _Payrpc_WithdrawByWowIdrCallBack_Handler,
		},
		{
			MethodName: "withdrawByBasePayCallBack",
			Handler:    _Payrpc_WithdrawByBasePayCallBack_Handler,
		},
		{
			MethodName: "withdrawByMoonPayCallBack",
			Handler:    _Payrpc_WithdrawByMoonPayCallBack_Handler,
		},
		{
			MethodName: "withdrawByBfPayCallBack",
			Handler:    _Payrpc_WithdrawByBfPayCallBack_Handler,
		},
		{
			MethodName: "withdrawBySixPayCallBack",
			Handler:    _Payrpc_WithdrawBySixPayCallBack_Handler,
		},
		{
			MethodName: "withdrawByAiPayCallBack",
			Handler:    _Payrpc_WithdrawByAiPayCallBack_Handler,
		},
		{
			MethodName: "withdrawByAPayCallBack",
			Handler:    _Payrpc_WithdrawByAPayCallBack_Handler,
		},
		{
			MethodName: "withdrawSearch",
			Handler:    _Payrpc_WithdrawSearch_Handler,
		},
		{
			MethodName: "findMerchantBlance",
			Handler:    _Payrpc_FindMerchantBlance_Handler,
		},
		{
			MethodName: "refundOrder",
			Handler:    _Payrpc_RefundOrder_Handler,
		},
		{
			MethodName: "refundOrderCallBack",
			Handler:    _Payrpc_RefundOrderCallBack_Handler,
		},
		{
			MethodName: "checkDeposit",
			Handler:    _Payrpc_CheckDeposit_Handler,
		},
		{
			MethodName: "getCoinLogList",
			Handler:    _Payrpc_GetCoinLogList_Handler,
		},
		{
			MethodName: "getAuditWithdrawalRecord",
			Handler:    _Payrpc_GetAuditWithdrawalRecord_Handler,
		},
		{
			MethodName: "getWithdrawalRecord",
			Handler:    _Payrpc_GetWithdrawalRecord_Handler,
		},
		{
			MethodName: "getDepositWithdrawalStatistics",
			Handler:    _Payrpc_GetDepositWithdrawalStatistics_Handler,
		},
		{
			MethodName: "isAudit",
			Handler:    _Payrpc_IsAudit_Handler,
		},
		{
			MethodName: "financeWithDraw",
			Handler:    _Payrpc_FinanceWithDraw_Handler,
		},
		{
			MethodName: "dailyReportStatisticsCount",
			Handler:    _Payrpc_DailyReportStatisticsCount_Handler,
		},
		{
			MethodName: "getUserCoin",
			Handler:    _Payrpc_GetUserCoin_Handler,
		},
		{
			MethodName: "coinRateList",
			Handler:    _Payrpc_CoinRateList_Handler,
		},
		{
			MethodName: "pagcorDailyTax",
			Handler:    _Payrpc_PagcorDailyTax_Handler,
		},
		{
			MethodName: "getDepositRecord",
			Handler:    _Payrpc_GetDepositRecord_Handler,
		},
		{
			MethodName: "getFrontWithdrawalRecord",
			Handler:    _Payrpc_GetFrontWithdrawalRecord_Handler,
		},
		{
			MethodName: "totalSummary",
			Handler:    _Payrpc_TotalSummary_Handler,
		},
		{
			MethodName: "depositAndWithdrawalChart",
			Handler:    _Payrpc_DepositAndWithdrawalChart_Handler,
		},
		{
			MethodName: "dailyConversionReportList",
			Handler:    _Payrpc_DailyConversionReportList_Handler,
		},
		{
			MethodName: "dailyConversionReportStatistics",
			Handler:    _Payrpc_DailyConversionReportStatistics_Handler,
		},
		{
			MethodName: "platBetCoinChart",
			Handler:    _Payrpc_PlatBetCoinChart_Handler,
		},
		{
			MethodName: "walletOutTransfer",
			Handler:    _Payrpc_WalletOutTransfer_Handler,
		},
		{
			MethodName: "replenishmentOrder",
			Handler:    _Payrpc_ReplenishmentOrder_Handler,
		},
		{
			MethodName: "withdrawalList",
			Handler:    _Payrpc_WithdrawalList_Handler,
		},
		{
			MethodName: "withdrawalStatistics",
			Handler:    _Payrpc_WithdrawalStatistics_Handler,
		},
		{
			MethodName: "depositRecordList",
			Handler:    _Payrpc_DepositRecordList_Handler,
		},
		{
			MethodName: "depositSum",
			Handler:    _Payrpc_DepositSum_Handler,
		},
		{
			MethodName: "payAllChannelList",
			Handler:    _Payrpc_PayAllChannelList_Handler,
		},
		{
			MethodName: "updateWithdrawalStatus",
			Handler:    _Payrpc_UpdateWithdrawalStatus_Handler,
		},
		{
			MethodName: "auditWithdrawalSum",
			Handler:    _Payrpc_AuditWithdrawalSum_Handler,
		},
		{
			MethodName: "cancelWithDraw",
			Handler:    _Payrpc_CancelWithDraw_Handler,
		},
		{
			MethodName: "depositChannelList",
			Handler:    _Payrpc_DepositChannelList_Handler,
		},
		{
			MethodName: "editChannel",
			Handler:    _Payrpc_EditChannel_Handler,
		},
		{
			MethodName: "depositList",
			Handler:    _Payrpc_DepositList_Handler,
		},
		{
			MethodName: "depositStatistics",
			Handler:    _Payrpc_DepositStatistics_Handler,
		},
		{
			MethodName: "getWithdrawalAddressType",
			Handler:    _Payrpc_GetWithdrawalAddressType_Handler,
		},
		{
			MethodName: "payChannelList",
			Handler:    _Payrpc_PayChannelList_Handler,
		},
		{
			MethodName: "payPlatList",
			Handler:    _Payrpc_PayPlatList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payrpc.proto",
}
