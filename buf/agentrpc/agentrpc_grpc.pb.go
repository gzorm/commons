// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc2
// source: agentrpc.proto

package agentrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agentrpc_PasswordUpdate_FullMethodName                 = "/agentrpc.agentrpc/passwordUpdate"
	Agentrpc_AgentConfig_FullMethodName                    = "/agentrpc.agentrpc/agentConfig"
	Agentrpc_AddAgent_FullMethodName                       = "/agentrpc.agentrpc/addAgent"
	Agentrpc_AgentCommission_FullMethodName                = "/agentrpc.agentrpc/agentCommission"
	Agentrpc_AgentLineList_FullMethodName                  = "/agentrpc.agentrpc/agentLineList"
	Agentrpc_AgentReportMember_FullMethodName              = "/agentrpc.agentrpc/agentReportMember"
	Agentrpc_AgentReport_FullMethodName                    = "/agentrpc.agentrpc/agentReport"
	Agentrpc_AgentReportDaily_FullMethodName               = "/agentrpc.agentrpc/agentReportDaily"
	Agentrpc_AgentReportProfit_FullMethodName              = "/agentrpc.agentrpc/agentReportProfit"
	Agentrpc_CoinTransfer_FullMethodName                   = "/agentrpc.agentrpc/CoinTransfer"
	Agentrpc_DepositStatistics_FullMethodName              = "/agentrpc.agentrpc/DepositStatistics"
	Agentrpc_WithdrawalStatistics_FullMethodName           = "/agentrpc.agentrpc/WithdrawalStatistics"
	Agentrpc_CommissionRateList_FullMethodName             = "/agentrpc.agentrpc/commissionRateList"
	Agentrpc_TeamBenefits_FullMethodName                   = "/agentrpc.agentrpc/teamBenefits"
	Agentrpc_CommissionRecords_FullMethodName              = "/agentrpc.agentrpc/commissionRecords"
	Agentrpc_SubordinateDetails_FullMethodName             = "/agentrpc.agentrpc/subordinateDetails"
	Agentrpc_AgentCommissionRecord_FullMethodName          = "/agentrpc.agentrpc/agentCommissionRecord"
	Agentrpc_AgentCommissionUpdate_FullMethodName          = "/agentrpc.agentrpc/agentCommissionUpdate"
	Agentrpc_AgentCommissionWithdrawRecored_FullMethodName = "/agentrpc.agentrpc/agentCommissionWithdrawRecored"
	Agentrpc_AgentCommissionLog_FullMethodName             = "/agentrpc.agentrpc/agentCommissionLog"
	Agentrpc_AgentResetPassword_FullMethodName             = "/agentrpc.agentrpc/AgentResetPassword"
	Agentrpc_AgentGenerateGoogleSecret_FullMethodName      = "/agentrpc.agentrpc/AgentGenerateGoogleSecret"
	Agentrpc_Login_FullMethodName                          = "/agentrpc.agentrpc/login"
	Agentrpc_AgentInfo_FullMethodName                      = "/agentrpc.agentrpc/agentInfo"
	Agentrpc_GetStatistics_FullMethodName                  = "/agentrpc.agentrpc/getStatistics"
	Agentrpc_Logout_FullMethodName                         = "/agentrpc.agentrpc/logout"
	Agentrpc_OnlineUserCountList_FullMethodName            = "/agentrpc.agentrpc/onlineUserCountList"
	Agentrpc_WithdrawRecordList_FullMethodName             = "/agentrpc.agentrpc/withdrawRecordList"
	Agentrpc_DepositList_FullMethodName                    = "/agentrpc.agentrpc/depositList"
	Agentrpc_TaskAgentDepositCommssion_FullMethodName      = "/agentrpc.agentrpc/taskAgentDepositCommssion"
	Agentrpc_TaskAgentBetCommssion_FullMethodName          = "/agentrpc.agentrpc/taskAgentBetCommssion"
	Agentrpc_AgentCommissionProfit_FullMethodName          = "/agentrpc.agentrpc/agentCommissionProfit"
	Agentrpc_TaskAgentDayCommssions_FullMethodName         = "/agentrpc.agentrpc/taskAgentDayCommssions"
	Agentrpc_TaskAgentMonthCommssions_FullMethodName       = "/agentrpc.agentrpc/taskAgentMonthCommssions"
	Agentrpc_TaskAgentYearCommssions_FullMethodName        = "/agentrpc.agentrpc/taskAgentYearCommssions"
	Agentrpc_AgentWithDrawalCommssion_FullMethodName       = "/agentrpc.agentrpc/agentWithDrawalCommssion"
	Agentrpc_AgentBindAccount_FullMethodName               = "/agentrpc.agentrpc/agentBindAccount"
	Agentrpc_AgentPayAccount_FullMethodName                = "/agentrpc.agentrpc/agentPayAccount"
	Agentrpc_AgentWithDrawalAudit_FullMethodName           = "/agentrpc.agentrpc/agentWithDrawalAudit"
	Agentrpc_AgentWithDrawalReject_FullMethodName          = "/agentrpc.agentrpc/agentWithDrawalReject"
	Agentrpc_AgentUserList_FullMethodName                  = "/agentrpc.agentrpc/agentUserList"
	Agentrpc_TaskAgentUserDailyReport_FullMethodName       = "/agentrpc.agentrpc/taskAgentUserDailyReport"
	Agentrpc_TaskPromoterDayCommssions_FullMethodName      = "/agentrpc.agentrpc/taskPromoterDayCommssions"
	Agentrpc_AdminAgentUserList_FullMethodName             = "/agentrpc.agentrpc/adminAgentUserList"
	Agentrpc_TaskAgentUserReport_FullMethodName            = "/agentrpc.agentrpc/taskAgentUserReport"
	Agentrpc_AgentTeam_FullMethodName                      = "/agentrpc.agentrpc/agentTeam"
	Agentrpc_TaskAgentReliveUser_FullMethodName            = "/agentrpc.agentrpc/taskAgentReliveUser"
	Agentrpc_AgentBoardStatic_FullMethodName               = "/agentrpc.agentrpc/agentBoardStatic"
	Agentrpc_SuperAgentList_FullMethodName                 = "/agentrpc.agentrpc/superAgentList"
	Agentrpc_AgentnextuserList_FullMethodName              = "/agentrpc.agentrpc/agentnextuserList"
	Agentrpc_FreezeList_FullMethodName                     = "/agentrpc.agentrpc/freezeList"
)

// AgentrpcClient is the client API for Agentrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentrpcClient interface {
	// group: agent
	PasswordUpdate(ctx context.Context, in *PasswordUpdateReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// group: agentConfig
	AgentConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRes, error)
	// group: agentConfig
	AddAgent(ctx context.Context, in *AddConfigReq, opts ...grpc.CallOption) (*AddConfigRes, error)
	// group: agentConfig
	AgentCommission(ctx context.Context, in *AgentCommissionReq, opts ...grpc.CallOption) (*AgentCommissionRes, error)
	// group: agentConfig
	AgentLineList(ctx context.Context, in *AgentLineListReq, opts ...grpc.CallOption) (*AgentLineListRes, error)
	// group: agentReport
	AgentReportMember(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportMemberRes, error)
	// group: agentReport
	AgentReport(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportRes, error)
	// group: agentReport
	AgentReportDaily(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportDailyRes, error)
	// group: agentReport
	AgentReportProfit(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportProfitRes, error)
	// group: coinTransfer
	CoinTransfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error)
	// group: agent
	DepositStatistics(ctx context.Context, in *DepositStatisticsReq, opts ...grpc.CallOption) (*DepositStatisticsResp, error)
	// group: agent
	WithdrawalStatistics(ctx context.Context, in *WithdrawalStatisticsReq, opts ...grpc.CallOption) (*WithdrawalStatisticsResp, error)
	// group: agent
	CommissionRateList(ctx context.Context, in *CommissionRateListReq, opts ...grpc.CallOption) (*CommissionRateListResp, error)
	// group: agent
	TeamBenefits(ctx context.Context, in *TeamBenefitsReq, opts ...grpc.CallOption) (*TeamBenefitsResp, error)
	// group: agent
	CommissionRecords(ctx context.Context, in *CommissionRecordsReq, opts ...grpc.CallOption) (*CommissionRecordsResp, error)
	// group: agent
	SubordinateDetails(ctx context.Context, in *SubordinateDetailsReq, opts ...grpc.CallOption) (*SubordinateDetailsResp, error)
	// group:agent
	AgentCommissionRecord(ctx context.Context, in *AgentCommissionRecordReq, opts ...grpc.CallOption) (*AgentCommissionRecordResp, error)
	// group:agent
	AgentCommissionUpdate(ctx context.Context, in *AgentCommissionUpdateReq, opts ...grpc.CallOption) (*AgentCommissionUpdateResp, error)
	// group:agent
	AgentCommissionWithdrawRecored(ctx context.Context, in *AgentCommissionWithdrawRecoredReq, opts ...grpc.CallOption) (*AgentCommissionWithdrawRecoredResp, error)
	// group:agent
	AgentCommissionLog(ctx context.Context, in *AgentCommissionLogReq, opts ...grpc.CallOption) (*AgentCommissionLogResp, error)
	// group:agent
	AgentResetPassword(ctx context.Context, in *AgentResetPasswordReq, opts ...grpc.CallOption) (*AgentResetPasswordResp, error)
	// group:agent
	AgentGenerateGoogleSecret(ctx context.Context, in *AgentGenerateGoogleSecretReq, opts ...grpc.CallOption) (*AgentGenerateGoogleSecretResp, error)
	// group:agent
	Login(ctx context.Context, in *AgentLoginReq, opts ...grpc.CallOption) (*AgentLoginResp, error)
	// group:agent
	AgentInfo(ctx context.Context, in *AgentInfoReq, opts ...grpc.CallOption) (*AgentInfoResp, error)
	// group:agent
	GetStatistics(ctx context.Context, in *AgentStatisticsReq, opts ...grpc.CallOption) (*AgentStatisticsResp, error)
	// group:agent
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	//group:agent
	OnlineUserCountList(ctx context.Context, in *OnlineUserCountListReq, opts ...grpc.CallOption) (*OnlineUserCountListResp, error)
	// group:agent
	WithdrawRecordList(ctx context.Context, in *WithdrawRecordListReq, opts ...grpc.CallOption) (*WithdrawRecordListResp, error)
	//group:agent
	DepositList(ctx context.Context, in *DepositListReq, opts ...grpc.CallOption) (*DepositListResp, error)
	//group:agent
	TaskAgentDepositCommssion(ctx context.Context, in *TaskAgentDepositCommssionReq, opts ...grpc.CallOption) (*TaskAgentDepositCommssionResp, error)
	//group:agent
	TaskAgentBetCommssion(ctx context.Context, in *TaskAgentBetCommssionReq, opts ...grpc.CallOption) (*TaskAgentBetCommssionResp, error)
	//gorup:agent
	AgentCommissionProfit(ctx context.Context, in *AgentCommissionProfitReq, opts ...grpc.CallOption) (*AgentCommissionProfitResp, error)
	//group:agent
	TaskAgentDayCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	TaskAgentMonthCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	TaskAgentYearCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AgentWithDrawalCommssion(ctx context.Context, in *AgentWithDrawalCommssionReq, opts ...grpc.CallOption) (*AgentWithDrawalCommssionResp, error)
	// group: agent
	AgentBindAccount(ctx context.Context, in *AgentBindAccountReq, opts ...grpc.CallOption) (*AgentBindAccountResp, error)
	// group: agent
	AgentPayAccount(ctx context.Context, in *AgentPayAccountReq, opts ...grpc.CallOption) (*AgentPayAccountResp, error)
	//group:agent
	AgentWithDrawalAudit(ctx context.Context, in *AgentWithDrawalAuditReq, opts ...grpc.CallOption) (*AgentWithDrawalAuditResp, error)
	//group:agent
	AgentWithDrawalReject(ctx context.Context, in *AgentWithDrawalRejectReq, opts ...grpc.CallOption) (*AgentWithDrawalRejectResp, error)
	//group:agent
	AgentUserList(ctx context.Context, in *AgentUserListReq, opts ...grpc.CallOption) (*AgentUserListResp, error)
	//group:agent
	TaskAgentUserDailyReport(ctx context.Context, in *TaskAgentUserDailyReportReq, opts ...grpc.CallOption) (*TaskAgentUserDailyReportResp, error)
	//group:agent
	TaskPromoterDayCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AdminAgentUserList(ctx context.Context, in *AdminAgentUserListReq, opts ...grpc.CallOption) (*AdminAgentUserListResp, error)
	//group:agent
	TaskAgentUserReport(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AgentTeam(ctx context.Context, in *AgentTeamReq, opts ...grpc.CallOption) (*AgentTeamResp, error)
	//group:agent
	TaskAgentReliveUser(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AgentBoardStatic(ctx context.Context, in *AgentBoardStaticReq, opts ...grpc.CallOption) (*AgentBoardStaticResp, error)
	//group:agent
	SuperAgentList(ctx context.Context, in *SuperAgentListReq, opts ...grpc.CallOption) (*SuperAgentListResp, error)
	// group:agent
	AgentnextuserList(ctx context.Context, in *AgentNextUserListReq, opts ...grpc.CallOption) (*AgentNextUserListResp, error)
	//group:agent
	FreezeList(ctx context.Context, in *FreezeListRequest, opts ...grpc.CallOption) (*FreezeListResponse, error)
}

type agentrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentrpcClient(cc grpc.ClientConnInterface) AgentrpcClient {
	return &agentrpcClient{cc}
}

func (c *agentrpcClient) PasswordUpdate(ctx context.Context, in *PasswordUpdateReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, Agentrpc_PasswordUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AddAgent(ctx context.Context, in *AddConfigReq, opts ...grpc.CallOption) (*AddConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddConfigRes)
	err := c.cc.Invoke(ctx, Agentrpc_AddAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentCommission(ctx context.Context, in *AgentCommissionReq, opts ...grpc.CallOption) (*AgentCommissionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCommissionRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentLineList(ctx context.Context, in *AgentLineListReq, opts ...grpc.CallOption) (*AgentLineListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentLineListRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentLineList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentReportMember(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportMemberRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentReportMemberRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentReportMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentReport(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentReportRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentReportDaily(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportDailyRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentReportDailyRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentReportDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentReportProfit(ctx context.Context, in *AgentReportReq, opts ...grpc.CallOption) (*AgentReportProfitRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentReportProfitRes)
	err := c.cc.Invoke(ctx, Agentrpc_AgentReportProfit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) CoinTransfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResp)
	err := c.cc.Invoke(ctx, Agentrpc_CoinTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) DepositStatistics(ctx context.Context, in *DepositStatisticsReq, opts ...grpc.CallOption) (*DepositStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositStatisticsResp)
	err := c.cc.Invoke(ctx, Agentrpc_DepositStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) WithdrawalStatistics(ctx context.Context, in *WithdrawalStatisticsReq, opts ...grpc.CallOption) (*WithdrawalStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalStatisticsResp)
	err := c.cc.Invoke(ctx, Agentrpc_WithdrawalStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) CommissionRateList(ctx context.Context, in *CommissionRateListReq, opts ...grpc.CallOption) (*CommissionRateListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommissionRateListResp)
	err := c.cc.Invoke(ctx, Agentrpc_CommissionRateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TeamBenefits(ctx context.Context, in *TeamBenefitsReq, opts ...grpc.CallOption) (*TeamBenefitsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamBenefitsResp)
	err := c.cc.Invoke(ctx, Agentrpc_TeamBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) CommissionRecords(ctx context.Context, in *CommissionRecordsReq, opts ...grpc.CallOption) (*CommissionRecordsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommissionRecordsResp)
	err := c.cc.Invoke(ctx, Agentrpc_CommissionRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) SubordinateDetails(ctx context.Context, in *SubordinateDetailsReq, opts ...grpc.CallOption) (*SubordinateDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubordinateDetailsResp)
	err := c.cc.Invoke(ctx, Agentrpc_SubordinateDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentCommissionRecord(ctx context.Context, in *AgentCommissionRecordReq, opts ...grpc.CallOption) (*AgentCommissionRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCommissionRecordResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentCommissionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentCommissionUpdate(ctx context.Context, in *AgentCommissionUpdateReq, opts ...grpc.CallOption) (*AgentCommissionUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCommissionUpdateResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentCommissionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentCommissionWithdrawRecored(ctx context.Context, in *AgentCommissionWithdrawRecoredReq, opts ...grpc.CallOption) (*AgentCommissionWithdrawRecoredResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCommissionWithdrawRecoredResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentCommissionWithdrawRecored_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentCommissionLog(ctx context.Context, in *AgentCommissionLogReq, opts ...grpc.CallOption) (*AgentCommissionLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCommissionLogResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentCommissionLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentResetPassword(ctx context.Context, in *AgentResetPasswordReq, opts ...grpc.CallOption) (*AgentResetPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResetPasswordResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentGenerateGoogleSecret(ctx context.Context, in *AgentGenerateGoogleSecretReq, opts ...grpc.CallOption) (*AgentGenerateGoogleSecretResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentGenerateGoogleSecretResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentGenerateGoogleSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) Login(ctx context.Context, in *AgentLoginReq, opts ...grpc.CallOption) (*AgentLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentLoginResp)
	err := c.cc.Invoke(ctx, Agentrpc_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentInfo(ctx context.Context, in *AgentInfoReq, opts ...grpc.CallOption) (*AgentInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentInfoResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) GetStatistics(ctx context.Context, in *AgentStatisticsReq, opts ...grpc.CallOption) (*AgentStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentStatisticsResp)
	err := c.cc.Invoke(ctx, Agentrpc_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, Agentrpc_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) OnlineUserCountList(ctx context.Context, in *OnlineUserCountListReq, opts ...grpc.CallOption) (*OnlineUserCountListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnlineUserCountListResp)
	err := c.cc.Invoke(ctx, Agentrpc_OnlineUserCountList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) WithdrawRecordList(ctx context.Context, in *WithdrawRecordListReq, opts ...grpc.CallOption) (*WithdrawRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawRecordListResp)
	err := c.cc.Invoke(ctx, Agentrpc_WithdrawRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) DepositList(ctx context.Context, in *DepositListReq, opts ...grpc.CallOption) (*DepositListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositListResp)
	err := c.cc.Invoke(ctx, Agentrpc_DepositList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentDepositCommssion(ctx context.Context, in *TaskAgentDepositCommssionReq, opts ...grpc.CallOption) (*TaskAgentDepositCommssionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentDepositCommssionResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentDepositCommssion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentBetCommssion(ctx context.Context, in *TaskAgentBetCommssionReq, opts ...grpc.CallOption) (*TaskAgentBetCommssionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentBetCommssionResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentBetCommssion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentCommissionProfit(ctx context.Context, in *AgentCommissionProfitReq, opts ...grpc.CallOption) (*AgentCommissionProfitResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCommissionProfitResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentCommissionProfit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentDayCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentCommssionScheduleResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentDayCommssions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentMonthCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentCommssionScheduleResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentMonthCommssions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentYearCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentCommssionScheduleResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentYearCommssions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentWithDrawalCommssion(ctx context.Context, in *AgentWithDrawalCommssionReq, opts ...grpc.CallOption) (*AgentWithDrawalCommssionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentWithDrawalCommssionResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentWithDrawalCommssion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentBindAccount(ctx context.Context, in *AgentBindAccountReq, opts ...grpc.CallOption) (*AgentBindAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentBindAccountResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentBindAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentPayAccount(ctx context.Context, in *AgentPayAccountReq, opts ...grpc.CallOption) (*AgentPayAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentPayAccountResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentPayAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentWithDrawalAudit(ctx context.Context, in *AgentWithDrawalAuditReq, opts ...grpc.CallOption) (*AgentWithDrawalAuditResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentWithDrawalAuditResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentWithDrawalAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentWithDrawalReject(ctx context.Context, in *AgentWithDrawalRejectReq, opts ...grpc.CallOption) (*AgentWithDrawalRejectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentWithDrawalRejectResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentWithDrawalReject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentUserList(ctx context.Context, in *AgentUserListReq, opts ...grpc.CallOption) (*AgentUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentUserListResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentUserDailyReport(ctx context.Context, in *TaskAgentUserDailyReportReq, opts ...grpc.CallOption) (*TaskAgentUserDailyReportResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentUserDailyReportResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentUserDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskPromoterDayCommssions(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentCommssionScheduleResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskPromoterDayCommssions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AdminAgentUserList(ctx context.Context, in *AdminAgentUserListReq, opts ...grpc.CallOption) (*AdminAgentUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAgentUserListResp)
	err := c.cc.Invoke(ctx, Agentrpc_AdminAgentUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentUserReport(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentCommssionScheduleResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentUserReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentTeam(ctx context.Context, in *AgentTeamReq, opts ...grpc.CallOption) (*AgentTeamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentTeamResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) TaskAgentReliveUser(ctx context.Context, in *TaskAgentCommssionScheduleReq, opts ...grpc.CallOption) (*TaskAgentCommssionScheduleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAgentCommssionScheduleResp)
	err := c.cc.Invoke(ctx, Agentrpc_TaskAgentReliveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentBoardStatic(ctx context.Context, in *AgentBoardStaticReq, opts ...grpc.CallOption) (*AgentBoardStaticResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentBoardStaticResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentBoardStatic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) SuperAgentList(ctx context.Context, in *SuperAgentListReq, opts ...grpc.CallOption) (*SuperAgentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuperAgentListResp)
	err := c.cc.Invoke(ctx, Agentrpc_SuperAgentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) AgentnextuserList(ctx context.Context, in *AgentNextUserListReq, opts ...grpc.CallOption) (*AgentNextUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentNextUserListResp)
	err := c.cc.Invoke(ctx, Agentrpc_AgentnextuserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentrpcClient) FreezeList(ctx context.Context, in *FreezeListRequest, opts ...grpc.CallOption) (*FreezeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreezeListResponse)
	err := c.cc.Invoke(ctx, Agentrpc_FreezeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentrpcServer is the server API for Agentrpc service.
// All implementations must embed UnimplementedAgentrpcServer
// for forward compatibility.
type AgentrpcServer interface {
	// group: agent
	PasswordUpdate(context.Context, *PasswordUpdateReq) (*EmptyResp, error)
	// group: agentConfig
	AgentConfig(context.Context, *ConfigReq) (*ConfigRes, error)
	// group: agentConfig
	AddAgent(context.Context, *AddConfigReq) (*AddConfigRes, error)
	// group: agentConfig
	AgentCommission(context.Context, *AgentCommissionReq) (*AgentCommissionRes, error)
	// group: agentConfig
	AgentLineList(context.Context, *AgentLineListReq) (*AgentLineListRes, error)
	// group: agentReport
	AgentReportMember(context.Context, *AgentReportReq) (*AgentReportMemberRes, error)
	// group: agentReport
	AgentReport(context.Context, *AgentReportReq) (*AgentReportRes, error)
	// group: agentReport
	AgentReportDaily(context.Context, *AgentReportReq) (*AgentReportDailyRes, error)
	// group: agentReport
	AgentReportProfit(context.Context, *AgentReportReq) (*AgentReportProfitRes, error)
	// group: coinTransfer
	CoinTransfer(context.Context, *TransferReq) (*TransferResp, error)
	// group: agent
	DepositStatistics(context.Context, *DepositStatisticsReq) (*DepositStatisticsResp, error)
	// group: agent
	WithdrawalStatistics(context.Context, *WithdrawalStatisticsReq) (*WithdrawalStatisticsResp, error)
	// group: agent
	CommissionRateList(context.Context, *CommissionRateListReq) (*CommissionRateListResp, error)
	// group: agent
	TeamBenefits(context.Context, *TeamBenefitsReq) (*TeamBenefitsResp, error)
	// group: agent
	CommissionRecords(context.Context, *CommissionRecordsReq) (*CommissionRecordsResp, error)
	// group: agent
	SubordinateDetails(context.Context, *SubordinateDetailsReq) (*SubordinateDetailsResp, error)
	// group:agent
	AgentCommissionRecord(context.Context, *AgentCommissionRecordReq) (*AgentCommissionRecordResp, error)
	// group:agent
	AgentCommissionUpdate(context.Context, *AgentCommissionUpdateReq) (*AgentCommissionUpdateResp, error)
	// group:agent
	AgentCommissionWithdrawRecored(context.Context, *AgentCommissionWithdrawRecoredReq) (*AgentCommissionWithdrawRecoredResp, error)
	// group:agent
	AgentCommissionLog(context.Context, *AgentCommissionLogReq) (*AgentCommissionLogResp, error)
	// group:agent
	AgentResetPassword(context.Context, *AgentResetPasswordReq) (*AgentResetPasswordResp, error)
	// group:agent
	AgentGenerateGoogleSecret(context.Context, *AgentGenerateGoogleSecretReq) (*AgentGenerateGoogleSecretResp, error)
	// group:agent
	Login(context.Context, *AgentLoginReq) (*AgentLoginResp, error)
	// group:agent
	AgentInfo(context.Context, *AgentInfoReq) (*AgentInfoResp, error)
	// group:agent
	GetStatistics(context.Context, *AgentStatisticsReq) (*AgentStatisticsResp, error)
	// group:agent
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	//group:agent
	OnlineUserCountList(context.Context, *OnlineUserCountListReq) (*OnlineUserCountListResp, error)
	// group:agent
	WithdrawRecordList(context.Context, *WithdrawRecordListReq) (*WithdrawRecordListResp, error)
	//group:agent
	DepositList(context.Context, *DepositListReq) (*DepositListResp, error)
	//group:agent
	TaskAgentDepositCommssion(context.Context, *TaskAgentDepositCommssionReq) (*TaskAgentDepositCommssionResp, error)
	//group:agent
	TaskAgentBetCommssion(context.Context, *TaskAgentBetCommssionReq) (*TaskAgentBetCommssionResp, error)
	//gorup:agent
	AgentCommissionProfit(context.Context, *AgentCommissionProfitReq) (*AgentCommissionProfitResp, error)
	//group:agent
	TaskAgentDayCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	TaskAgentMonthCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	TaskAgentYearCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AgentWithDrawalCommssion(context.Context, *AgentWithDrawalCommssionReq) (*AgentWithDrawalCommssionResp, error)
	// group: agent
	AgentBindAccount(context.Context, *AgentBindAccountReq) (*AgentBindAccountResp, error)
	// group: agent
	AgentPayAccount(context.Context, *AgentPayAccountReq) (*AgentPayAccountResp, error)
	//group:agent
	AgentWithDrawalAudit(context.Context, *AgentWithDrawalAuditReq) (*AgentWithDrawalAuditResp, error)
	//group:agent
	AgentWithDrawalReject(context.Context, *AgentWithDrawalRejectReq) (*AgentWithDrawalRejectResp, error)
	//group:agent
	AgentUserList(context.Context, *AgentUserListReq) (*AgentUserListResp, error)
	//group:agent
	TaskAgentUserDailyReport(context.Context, *TaskAgentUserDailyReportReq) (*TaskAgentUserDailyReportResp, error)
	//group:agent
	TaskPromoterDayCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AdminAgentUserList(context.Context, *AdminAgentUserListReq) (*AdminAgentUserListResp, error)
	//group:agent
	TaskAgentUserReport(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AgentTeam(context.Context, *AgentTeamReq) (*AgentTeamResp, error)
	//group:agent
	TaskAgentReliveUser(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error)
	//group:agent
	AgentBoardStatic(context.Context, *AgentBoardStaticReq) (*AgentBoardStaticResp, error)
	//group:agent
	SuperAgentList(context.Context, *SuperAgentListReq) (*SuperAgentListResp, error)
	// group:agent
	AgentnextuserList(context.Context, *AgentNextUserListReq) (*AgentNextUserListResp, error)
	//group:agent
	FreezeList(context.Context, *FreezeListRequest) (*FreezeListResponse, error)
	mustEmbedUnimplementedAgentrpcServer()
}

// UnimplementedAgentrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentrpcServer struct{}

func (UnimplementedAgentrpcServer) PasswordUpdate(context.Context, *PasswordUpdateReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordUpdate not implemented")
}
func (UnimplementedAgentrpcServer) AgentConfig(context.Context, *ConfigReq) (*ConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentConfig not implemented")
}
func (UnimplementedAgentrpcServer) AddAgent(context.Context, *AddConfigReq) (*AddConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgent not implemented")
}
func (UnimplementedAgentrpcServer) AgentCommission(context.Context, *AgentCommissionReq) (*AgentCommissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCommission not implemented")
}
func (UnimplementedAgentrpcServer) AgentLineList(context.Context, *AgentLineListReq) (*AgentLineListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentLineList not implemented")
}
func (UnimplementedAgentrpcServer) AgentReportMember(context.Context, *AgentReportReq) (*AgentReportMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentReportMember not implemented")
}
func (UnimplementedAgentrpcServer) AgentReport(context.Context, *AgentReportReq) (*AgentReportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentReport not implemented")
}
func (UnimplementedAgentrpcServer) AgentReportDaily(context.Context, *AgentReportReq) (*AgentReportDailyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentReportDaily not implemented")
}
func (UnimplementedAgentrpcServer) AgentReportProfit(context.Context, *AgentReportReq) (*AgentReportProfitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentReportProfit not implemented")
}
func (UnimplementedAgentrpcServer) CoinTransfer(context.Context, *TransferReq) (*TransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinTransfer not implemented")
}
func (UnimplementedAgentrpcServer) DepositStatistics(context.Context, *DepositStatisticsReq) (*DepositStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositStatistics not implemented")
}
func (UnimplementedAgentrpcServer) WithdrawalStatistics(context.Context, *WithdrawalStatisticsReq) (*WithdrawalStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalStatistics not implemented")
}
func (UnimplementedAgentrpcServer) CommissionRateList(context.Context, *CommissionRateListReq) (*CommissionRateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionRateList not implemented")
}
func (UnimplementedAgentrpcServer) TeamBenefits(context.Context, *TeamBenefitsReq) (*TeamBenefitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamBenefits not implemented")
}
func (UnimplementedAgentrpcServer) CommissionRecords(context.Context, *CommissionRecordsReq) (*CommissionRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionRecords not implemented")
}
func (UnimplementedAgentrpcServer) SubordinateDetails(context.Context, *SubordinateDetailsReq) (*SubordinateDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubordinateDetails not implemented")
}
func (UnimplementedAgentrpcServer) AgentCommissionRecord(context.Context, *AgentCommissionRecordReq) (*AgentCommissionRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCommissionRecord not implemented")
}
func (UnimplementedAgentrpcServer) AgentCommissionUpdate(context.Context, *AgentCommissionUpdateReq) (*AgentCommissionUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCommissionUpdate not implemented")
}
func (UnimplementedAgentrpcServer) AgentCommissionWithdrawRecored(context.Context, *AgentCommissionWithdrawRecoredReq) (*AgentCommissionWithdrawRecoredResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCommissionWithdrawRecored not implemented")
}
func (UnimplementedAgentrpcServer) AgentCommissionLog(context.Context, *AgentCommissionLogReq) (*AgentCommissionLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCommissionLog not implemented")
}
func (UnimplementedAgentrpcServer) AgentResetPassword(context.Context, *AgentResetPasswordReq) (*AgentResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentResetPassword not implemented")
}
func (UnimplementedAgentrpcServer) AgentGenerateGoogleSecret(context.Context, *AgentGenerateGoogleSecretReq) (*AgentGenerateGoogleSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGenerateGoogleSecret not implemented")
}
func (UnimplementedAgentrpcServer) Login(context.Context, *AgentLoginReq) (*AgentLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAgentrpcServer) AgentInfo(context.Context, *AgentInfoReq) (*AgentInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentInfo not implemented")
}
func (UnimplementedAgentrpcServer) GetStatistics(context.Context, *AgentStatisticsReq) (*AgentStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedAgentrpcServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAgentrpcServer) OnlineUserCountList(context.Context, *OnlineUserCountListReq) (*OnlineUserCountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineUserCountList not implemented")
}
func (UnimplementedAgentrpcServer) WithdrawRecordList(context.Context, *WithdrawRecordListReq) (*WithdrawRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawRecordList not implemented")
}
func (UnimplementedAgentrpcServer) DepositList(context.Context, *DepositListReq) (*DepositListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositList not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentDepositCommssion(context.Context, *TaskAgentDepositCommssionReq) (*TaskAgentDepositCommssionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentDepositCommssion not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentBetCommssion(context.Context, *TaskAgentBetCommssionReq) (*TaskAgentBetCommssionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentBetCommssion not implemented")
}
func (UnimplementedAgentrpcServer) AgentCommissionProfit(context.Context, *AgentCommissionProfitReq) (*AgentCommissionProfitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentCommissionProfit not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentDayCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentDayCommssions not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentMonthCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentMonthCommssions not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentYearCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentYearCommssions not implemented")
}
func (UnimplementedAgentrpcServer) AgentWithDrawalCommssion(context.Context, *AgentWithDrawalCommssionReq) (*AgentWithDrawalCommssionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentWithDrawalCommssion not implemented")
}
func (UnimplementedAgentrpcServer) AgentBindAccount(context.Context, *AgentBindAccountReq) (*AgentBindAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentBindAccount not implemented")
}
func (UnimplementedAgentrpcServer) AgentPayAccount(context.Context, *AgentPayAccountReq) (*AgentPayAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentPayAccount not implemented")
}
func (UnimplementedAgentrpcServer) AgentWithDrawalAudit(context.Context, *AgentWithDrawalAuditReq) (*AgentWithDrawalAuditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentWithDrawalAudit not implemented")
}
func (UnimplementedAgentrpcServer) AgentWithDrawalReject(context.Context, *AgentWithDrawalRejectReq) (*AgentWithDrawalRejectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentWithDrawalReject not implemented")
}
func (UnimplementedAgentrpcServer) AgentUserList(context.Context, *AgentUserListReq) (*AgentUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUserList not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentUserDailyReport(context.Context, *TaskAgentUserDailyReportReq) (*TaskAgentUserDailyReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentUserDailyReport not implemented")
}
func (UnimplementedAgentrpcServer) TaskPromoterDayCommssions(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskPromoterDayCommssions not implemented")
}
func (UnimplementedAgentrpcServer) AdminAgentUserList(context.Context, *AdminAgentUserListReq) (*AdminAgentUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAgentUserList not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentUserReport(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentUserReport not implemented")
}
func (UnimplementedAgentrpcServer) AgentTeam(context.Context, *AgentTeamReq) (*AgentTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentTeam not implemented")
}
func (UnimplementedAgentrpcServer) TaskAgentReliveUser(context.Context, *TaskAgentCommssionScheduleReq) (*TaskAgentCommssionScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAgentReliveUser not implemented")
}
func (UnimplementedAgentrpcServer) AgentBoardStatic(context.Context, *AgentBoardStaticReq) (*AgentBoardStaticResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentBoardStatic not implemented")
}
func (UnimplementedAgentrpcServer) SuperAgentList(context.Context, *SuperAgentListReq) (*SuperAgentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAgentList not implemented")
}
func (UnimplementedAgentrpcServer) AgentnextuserList(context.Context, *AgentNextUserListReq) (*AgentNextUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentnextuserList not implemented")
}
func (UnimplementedAgentrpcServer) FreezeList(context.Context, *FreezeListRequest) (*FreezeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeList not implemented")
}
func (UnimplementedAgentrpcServer) mustEmbedUnimplementedAgentrpcServer() {}
func (UnimplementedAgentrpcServer) testEmbeddedByValue()                  {}

// UnsafeAgentrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentrpcServer will
// result in compilation errors.
type UnsafeAgentrpcServer interface {
	mustEmbedUnimplementedAgentrpcServer()
}

func RegisterAgentrpcServer(s grpc.ServiceRegistrar, srv AgentrpcServer) {
	// If the following call pancis, it indicates UnimplementedAgentrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agentrpc_ServiceDesc, srv)
}

func _Agentrpc_PasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).PasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_PasswordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).PasswordUpdate(ctx, req.(*PasswordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentConfig(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AddAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AddAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AddAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AddAgent(ctx, req.(*AddConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentCommissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentCommission(ctx, req.(*AgentCommissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentLineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentLineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentLineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentLineList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentLineList(ctx, req.(*AgentLineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentReportMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentReportMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentReportMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentReportMember(ctx, req.(*AgentReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentReport(ctx, req.(*AgentReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentReportDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentReportDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentReportDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentReportDaily(ctx, req.(*AgentReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentReportProfit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentReportProfit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentReportProfit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentReportProfit(ctx, req.(*AgentReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_CoinTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).CoinTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_CoinTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).CoinTransfer(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_DepositStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).DepositStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_DepositStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).DepositStatistics(ctx, req.(*DepositStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_WithdrawalStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).WithdrawalStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_WithdrawalStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).WithdrawalStatistics(ctx, req.(*WithdrawalStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_CommissionRateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommissionRateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).CommissionRateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_CommissionRateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).CommissionRateList(ctx, req.(*CommissionRateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TeamBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamBenefitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TeamBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TeamBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TeamBenefits(ctx, req.(*TeamBenefitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_CommissionRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommissionRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).CommissionRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_CommissionRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).CommissionRecords(ctx, req.(*CommissionRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_SubordinateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubordinateDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).SubordinateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_SubordinateDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).SubordinateDetails(ctx, req.(*SubordinateDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentCommissionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentCommissionRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentCommissionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentCommissionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentCommissionRecord(ctx, req.(*AgentCommissionRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentCommissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentCommissionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentCommissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentCommissionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentCommissionUpdate(ctx, req.(*AgentCommissionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentCommissionWithdrawRecored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentCommissionWithdrawRecoredReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentCommissionWithdrawRecored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentCommissionWithdrawRecored_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentCommissionWithdrawRecored(ctx, req.(*AgentCommissionWithdrawRecoredReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentCommissionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentCommissionLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentCommissionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentCommissionLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentCommissionLog(ctx, req.(*AgentCommissionLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentResetPassword(ctx, req.(*AgentResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentGenerateGoogleSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGenerateGoogleSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentGenerateGoogleSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentGenerateGoogleSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentGenerateGoogleSecret(ctx, req.(*AgentGenerateGoogleSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).Login(ctx, req.(*AgentLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentInfo(ctx, req.(*AgentInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).GetStatistics(ctx, req.(*AgentStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_OnlineUserCountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineUserCountListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).OnlineUserCountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_OnlineUserCountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).OnlineUserCountList(ctx, req.(*OnlineUserCountListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_WithdrawRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).WithdrawRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_WithdrawRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).WithdrawRecordList(ctx, req.(*WithdrawRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_DepositList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).DepositList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_DepositList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).DepositList(ctx, req.(*DepositListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentDepositCommssion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentDepositCommssionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentDepositCommssion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentDepositCommssion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentDepositCommssion(ctx, req.(*TaskAgentDepositCommssionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentBetCommssion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentBetCommssionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentBetCommssion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentBetCommssion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentBetCommssion(ctx, req.(*TaskAgentBetCommssionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentCommissionProfit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentCommissionProfitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentCommissionProfit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentCommissionProfit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentCommissionProfit(ctx, req.(*AgentCommissionProfitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentDayCommssions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentCommssionScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentDayCommssions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentDayCommssions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentDayCommssions(ctx, req.(*TaskAgentCommssionScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentMonthCommssions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentCommssionScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentMonthCommssions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentMonthCommssions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentMonthCommssions(ctx, req.(*TaskAgentCommssionScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentYearCommssions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentCommssionScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentYearCommssions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentYearCommssions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentYearCommssions(ctx, req.(*TaskAgentCommssionScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentWithDrawalCommssion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentWithDrawalCommssionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentWithDrawalCommssion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentWithDrawalCommssion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentWithDrawalCommssion(ctx, req.(*AgentWithDrawalCommssionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentBindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBindAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentBindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentBindAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentBindAccount(ctx, req.(*AgentBindAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentPayAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPayAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentPayAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentPayAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentPayAccount(ctx, req.(*AgentPayAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentWithDrawalAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentWithDrawalAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentWithDrawalAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentWithDrawalAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentWithDrawalAudit(ctx, req.(*AgentWithDrawalAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentWithDrawalReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentWithDrawalRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentWithDrawalReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentWithDrawalReject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentWithDrawalReject(ctx, req.(*AgentWithDrawalRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentUserList(ctx, req.(*AgentUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentUserDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentUserDailyReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentUserDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentUserDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentUserDailyReport(ctx, req.(*TaskAgentUserDailyReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskPromoterDayCommssions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentCommssionScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskPromoterDayCommssions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskPromoterDayCommssions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskPromoterDayCommssions(ctx, req.(*TaskAgentCommssionScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AdminAgentUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAgentUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AdminAgentUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AdminAgentUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AdminAgentUserList(ctx, req.(*AdminAgentUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentCommssionScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentUserReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentUserReport(ctx, req.(*TaskAgentCommssionScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentTeam(ctx, req.(*AgentTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_TaskAgentReliveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAgentCommssionScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).TaskAgentReliveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_TaskAgentReliveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).TaskAgentReliveUser(ctx, req.(*TaskAgentCommssionScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentBoardStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBoardStaticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentBoardStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentBoardStatic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentBoardStatic(ctx, req.(*AgentBoardStaticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_SuperAgentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperAgentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).SuperAgentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_SuperAgentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).SuperAgentList(ctx, req.(*SuperAgentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_AgentnextuserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentNextUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).AgentnextuserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_AgentnextuserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).AgentnextuserList(ctx, req.(*AgentNextUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agentrpc_FreezeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentrpcServer).FreezeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agentrpc_FreezeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentrpcServer).FreezeList(ctx, req.(*FreezeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agentrpc_ServiceDesc is the grpc.ServiceDesc for Agentrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agentrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentrpc.agentrpc",
	HandlerType: (*AgentrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "passwordUpdate",
			Handler:    _Agentrpc_PasswordUpdate_Handler,
		},
		{
			MethodName: "agentConfig",
			Handler:    _Agentrpc_AgentConfig_Handler,
		},
		{
			MethodName: "addAgent",
			Handler:    _Agentrpc_AddAgent_Handler,
		},
		{
			MethodName: "agentCommission",
			Handler:    _Agentrpc_AgentCommission_Handler,
		},
		{
			MethodName: "agentLineList",
			Handler:    _Agentrpc_AgentLineList_Handler,
		},
		{
			MethodName: "agentReportMember",
			Handler:    _Agentrpc_AgentReportMember_Handler,
		},
		{
			MethodName: "agentReport",
			Handler:    _Agentrpc_AgentReport_Handler,
		},
		{
			MethodName: "agentReportDaily",
			Handler:    _Agentrpc_AgentReportDaily_Handler,
		},
		{
			MethodName: "agentReportProfit",
			Handler:    _Agentrpc_AgentReportProfit_Handler,
		},
		{
			MethodName: "CoinTransfer",
			Handler:    _Agentrpc_CoinTransfer_Handler,
		},
		{
			MethodName: "DepositStatistics",
			Handler:    _Agentrpc_DepositStatistics_Handler,
		},
		{
			MethodName: "WithdrawalStatistics",
			Handler:    _Agentrpc_WithdrawalStatistics_Handler,
		},
		{
			MethodName: "commissionRateList",
			Handler:    _Agentrpc_CommissionRateList_Handler,
		},
		{
			MethodName: "teamBenefits",
			Handler:    _Agentrpc_TeamBenefits_Handler,
		},
		{
			MethodName: "commissionRecords",
			Handler:    _Agentrpc_CommissionRecords_Handler,
		},
		{
			MethodName: "subordinateDetails",
			Handler:    _Agentrpc_SubordinateDetails_Handler,
		},
		{
			MethodName: "agentCommissionRecord",
			Handler:    _Agentrpc_AgentCommissionRecord_Handler,
		},
		{
			MethodName: "agentCommissionUpdate",
			Handler:    _Agentrpc_AgentCommissionUpdate_Handler,
		},
		{
			MethodName: "agentCommissionWithdrawRecored",
			Handler:    _Agentrpc_AgentCommissionWithdrawRecored_Handler,
		},
		{
			MethodName: "agentCommissionLog",
			Handler:    _Agentrpc_AgentCommissionLog_Handler,
		},
		{
			MethodName: "AgentResetPassword",
			Handler:    _Agentrpc_AgentResetPassword_Handler,
		},
		{
			MethodName: "AgentGenerateGoogleSecret",
			Handler:    _Agentrpc_AgentGenerateGoogleSecret_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Agentrpc_Login_Handler,
		},
		{
			MethodName: "agentInfo",
			Handler:    _Agentrpc_AgentInfo_Handler,
		},
		{
			MethodName: "getStatistics",
			Handler:    _Agentrpc_GetStatistics_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _Agentrpc_Logout_Handler,
		},
		{
			MethodName: "onlineUserCountList",
			Handler:    _Agentrpc_OnlineUserCountList_Handler,
		},
		{
			MethodName: "withdrawRecordList",
			Handler:    _Agentrpc_WithdrawRecordList_Handler,
		},
		{
			MethodName: "depositList",
			Handler:    _Agentrpc_DepositList_Handler,
		},
		{
			MethodName: "taskAgentDepositCommssion",
			Handler:    _Agentrpc_TaskAgentDepositCommssion_Handler,
		},
		{
			MethodName: "taskAgentBetCommssion",
			Handler:    _Agentrpc_TaskAgentBetCommssion_Handler,
		},
		{
			MethodName: "agentCommissionProfit",
			Handler:    _Agentrpc_AgentCommissionProfit_Handler,
		},
		{
			MethodName: "taskAgentDayCommssions",
			Handler:    _Agentrpc_TaskAgentDayCommssions_Handler,
		},
		{
			MethodName: "taskAgentMonthCommssions",
			Handler:    _Agentrpc_TaskAgentMonthCommssions_Handler,
		},
		{
			MethodName: "taskAgentYearCommssions",
			Handler:    _Agentrpc_TaskAgentYearCommssions_Handler,
		},
		{
			MethodName: "agentWithDrawalCommssion",
			Handler:    _Agentrpc_AgentWithDrawalCommssion_Handler,
		},
		{
			MethodName: "agentBindAccount",
			Handler:    _Agentrpc_AgentBindAccount_Handler,
		},
		{
			MethodName: "agentPayAccount",
			Handler:    _Agentrpc_AgentPayAccount_Handler,
		},
		{
			MethodName: "agentWithDrawalAudit",
			Handler:    _Agentrpc_AgentWithDrawalAudit_Handler,
		},
		{
			MethodName: "agentWithDrawalReject",
			Handler:    _Agentrpc_AgentWithDrawalReject_Handler,
		},
		{
			MethodName: "agentUserList",
			Handler:    _Agentrpc_AgentUserList_Handler,
		},
		{
			MethodName: "taskAgentUserDailyReport",
			Handler:    _Agentrpc_TaskAgentUserDailyReport_Handler,
		},
		{
			MethodName: "taskPromoterDayCommssions",
			Handler:    _Agentrpc_TaskPromoterDayCommssions_Handler,
		},
		{
			MethodName: "adminAgentUserList",
			Handler:    _Agentrpc_AdminAgentUserList_Handler,
		},
		{
			MethodName: "taskAgentUserReport",
			Handler:    _Agentrpc_TaskAgentUserReport_Handler,
		},
		{
			MethodName: "agentTeam",
			Handler:    _Agentrpc_AgentTeam_Handler,
		},
		{
			MethodName: "taskAgentReliveUser",
			Handler:    _Agentrpc_TaskAgentReliveUser_Handler,
		},
		{
			MethodName: "agentBoardStatic",
			Handler:    _Agentrpc_AgentBoardStatic_Handler,
		},
		{
			MethodName: "superAgentList",
			Handler:    _Agentrpc_SuperAgentList_Handler,
		},
		{
			MethodName: "agentnextuserList",
			Handler:    _Agentrpc_AgentnextuserList_Handler,
		},
		{
			MethodName: "freezeList",
			Handler:    _Agentrpc_FreezeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agentrpc.proto",
}
