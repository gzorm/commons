// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cmsrpc.proto

package cmsrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cmsrpc_Activity_FullMethodName                        = "/cmsrpc.cmsrpc/activity"
	Cmsrpc_AddActivity_FullMethodName                     = "/cmsrpc.cmsrpc/addActivity"
	Cmsrpc_ActivityDetail_FullMethodName                  = "/cmsrpc.cmsrpc/activityDetail"
	Cmsrpc_DeleteActivity_FullMethodName                  = "/cmsrpc.cmsrpc/deleteActivity"
	Cmsrpc_BannerList_FullMethodName                      = "/cmsrpc.cmsrpc/bannerList"
	Cmsrpc_AddBannerList_FullMethodName                   = "/cmsrpc.cmsrpc/addBannerList"
	Cmsrpc_UpdateBannerList_FullMethodName                = "/cmsrpc.cmsrpc/updateBannerList"
	Cmsrpc_DelBannerList_FullMethodName                   = "/cmsrpc.cmsrpc/delBannerList"
	Cmsrpc_BlogList_FullMethodName                        = "/cmsrpc.cmsrpc/blogList"
	Cmsrpc_FrontClassifyCmsPage_FullMethodName            = "/cmsrpc.cmsrpc/frontClassifyCmsPage"
	Cmsrpc_AddFrontClassifyCms_FullMethodName             = "/cmsrpc.cmsrpc/addFrontClassifyCms"
	Cmsrpc_EditFrontClassifyCms_FullMethodName            = "/cmsrpc.cmsrpc/editFrontClassifyCms"
	Cmsrpc_DelFrontClassifyCms_FullMethodName             = "/cmsrpc.cmsrpc/delFrontClassifyCms"
	Cmsrpc_SportBet_FullMethodName                        = "/cmsrpc.cmsrpc/sportBet"
	Cmsrpc_Help_FullMethodName                            = "/cmsrpc.cmsrpc/help"
	Cmsrpc_HelpInfo_FullMethodName                        = "/cmsrpc.cmsrpc/helpInfo"
	Cmsrpc_Banner_FullMethodName                          = "/cmsrpc.cmsrpc/banner"
	Cmsrpc_GameClassify_FullMethodName                    = "/cmsrpc.cmsrpc/gameClassify"
	Cmsrpc_Lamp_FullMethodName                            = "/cmsrpc.cmsrpc/lamp"
	Cmsrpc_NoticeCount_FullMethodName                     = "/cmsrpc.cmsrpc/noticeCount"
	Cmsrpc_Msg_FullMethodName                             = "/cmsrpc.cmsrpc/msg"
	Cmsrpc_DelMsg_FullMethodName                          = "/cmsrpc.cmsrpc/delMsg"
	Cmsrpc_UpdateMsg_FullMethodName                       = "/cmsrpc.cmsrpc/updateMsg"
	Cmsrpc_Notice_FullMethodName                          = "/cmsrpc.cmsrpc/notice"
	Cmsrpc_AddNotice_FullMethodName                       = "/cmsrpc.cmsrpc/addNotice"
	Cmsrpc_UpdateNotice_FullMethodName                    = "/cmsrpc.cmsrpc/updateNotice"
	Cmsrpc_DeleteNotice_FullMethodName                    = "/cmsrpc.cmsrpc/deleteNotice"
	Cmsrpc_Demo_FullMethodName                            = "/cmsrpc.cmsrpc/demo"
	Cmsrpc_PromotionsList_FullMethodName                  = "/cmsrpc.cmsrpc/promotionsList"
	Cmsrpc_BigGameCategoryBanner_FullMethodName           = "/cmsrpc.cmsrpc/bigGameCategoryBanner"
	Cmsrpc_GetDictionary_FullMethodName                   = "/cmsrpc.cmsrpc/getDictionary"
	Cmsrpc_CurrentActivity_FullMethodName                 = "/cmsrpc.cmsrpc/currentActivity"
	Cmsrpc_CurrentActivitys_FullMethodName                = "/cmsrpc.cmsrpc/currentActivitys"
	Cmsrpc_CheckIn_FullMethodName                         = "/cmsrpc.cmsrpc/checkIn"
	Cmsrpc_GetCommissionRule_FullMethodName               = "/cmsrpc.cmsrpc/getCommissionRule"
	Cmsrpc_UpdateCommissionRule_FullMethodName            = "/cmsrpc.cmsrpc/updateCommissionRule"
	Cmsrpc_GetHelpLanguage_FullMethodName                 = "/cmsrpc.cmsrpc/getHelpLanguage"
	Cmsrpc_PageHelpType_FullMethodName                    = "/cmsrpc.cmsrpc/pageHelpType"
	Cmsrpc_PageHelpInfo_FullMethodName                    = "/cmsrpc.cmsrpc/pageHelpInfo"
	Cmsrpc_PageHelpDetail_FullMethodName                  = "/cmsrpc.cmsrpc/pageHelpDetail"
	Cmsrpc_TaskExport_FullMethodName                      = "/cmsrpc.cmsrpc/taskExport"
	Cmsrpc_GetVerifyCodeList_FullMethodName               = "/cmsrpc.cmsrpc/getVerifyCodeList"
	Cmsrpc_AddCustomer_FullMethodName                     = "/cmsrpc.cmsrpc/addCustomer"
	Cmsrpc_UpdateCustomer_FullMethodName                  = "/cmsrpc.cmsrpc/updateCustomer"
	Cmsrpc_GetCustomer_FullMethodName                     = "/cmsrpc.cmsrpc/getCustomer"
	Cmsrpc_DeleteCustomer_FullMethodName                  = "/cmsrpc.cmsrpc/deleteCustomer"
	Cmsrpc_GetCustomerList_FullMethodName                 = "/cmsrpc.cmsrpc/getCustomerList"
	Cmsrpc_CustomerList_FullMethodName                    = "/cmsrpc.cmsrpc/customerList"
	Cmsrpc_UpdateConfigAddress_FullMethodName             = "/cmsrpc.cmsrpc/updateConfigAddress"
	Cmsrpc_GetCompanyAddress_FullMethodName               = "/cmsrpc.cmsrpc/getCompanyAddress"
	Cmsrpc_GetAllGameSlot_FullMethodName                  = "/cmsrpc.cmsrpc/getAllGameSlot"
	Cmsrpc_ArticleInfoPageList_FullMethodName             = "/cmsrpc.cmsrpc/articleInfoPageList"
	Cmsrpc_ArticleDetail_FullMethodName                   = "/cmsrpc.cmsrpc/articleDetail"
	Cmsrpc_AddArticle_FullMethodName                      = "/cmsrpc.cmsrpc/addArticle"
	Cmsrpc_UpdateArticle_FullMethodName                   = "/cmsrpc.cmsrpc/updateArticle"
	Cmsrpc_DeleteArticle_FullMethodName                   = "/cmsrpc.cmsrpc/deleteArticle"
	Cmsrpc_GetArticleList_FullMethodName                  = "/cmsrpc.cmsrpc/getArticleList"
	Cmsrpc_GetVipAbStationControl_FullMethodName          = "/cmsrpc.cmsrpc/GetVipAbStationControl"
	Cmsrpc_UpdateVipAbStation_FullMethodName              = "/cmsrpc.cmsrpc/updateVipAbStation"
	Cmsrpc_GetPromotionLevelkpi_FullMethodName            = "/cmsrpc.cmsrpc/getPromotionLevelkpi"
	Cmsrpc_PointsRewardsList_FullMethodName               = "/cmsrpc.cmsrpc/PointsRewardsList"
	Cmsrpc_GetPointsRewards_FullMethodName                = "/cmsrpc.cmsrpc/GetPointsRewards"
	Cmsrpc_AddPointsRewards_FullMethodName                = "/cmsrpc.cmsrpc/AddPointsRewards"
	Cmsrpc_UpdatePointsRewards_FullMethodName             = "/cmsrpc.cmsrpc/UpdatePointsRewards"
	Cmsrpc_DeletePointsRewards_FullMethodName             = "/cmsrpc.cmsrpc/DeletePointsRewards"
	Cmsrpc_CompetitionRankingRewardList_FullMethodName    = "/cmsrpc.cmsrpc/CompetitionRankingRewardList"
	Cmsrpc_GetCompetitionRankingRewards_FullMethodName    = "/cmsrpc.cmsrpc/GetCompetitionRankingRewards"
	Cmsrpc_AddCompetitionRankingRewards_FullMethodName    = "/cmsrpc.cmsrpc/AddCompetitionRankingRewards"
	Cmsrpc_UpdateCompetitionRankingRewards_FullMethodName = "/cmsrpc.cmsrpc/UpdateCompetitionRankingRewards"
	Cmsrpc_DeleteCompetitionRankingRewards_FullMethodName = "/cmsrpc.cmsrpc/DeleteCompetitionRankingRewards"
	Cmsrpc_GetUserScore_FullMethodName                    = "/cmsrpc.cmsrpc/GetUserScore"
	Cmsrpc_UserScoreExchange_FullMethodName               = "/cmsrpc.cmsrpc/UserScoreExchange"
	Cmsrpc_PointsCollectionRecordList_FullMethodName      = "/cmsrpc.cmsrpc/PointsCollectionRecordList"
	Cmsrpc_PointsUserChangeList_FullMethodName            = "/cmsrpc.cmsrpc/PointsUserChangeList"
	Cmsrpc_GetPromotionalVideo_FullMethodName             = "/cmsrpc.cmsrpc/GetPromotionalVideo"
)

// CmsrpcClient is the client API for Cmsrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsrpcClient interface {
	// group: activity
	Activity(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*ActivityResponse, error)
	// group: addActivity
	AddActivity(ctx context.Context, in *AddActivityRequest, opts ...grpc.CallOption) (*AddActivityResponse, error)
	// group: activity
	ActivityDetail(ctx context.Context, in *ActivityDetailReq, opts ...grpc.CallOption) (*ActivityDetailResp, error)
	// group: deleteActivity
	DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*DeleteActivityResponse, error)
	// group: BannerList
	BannerList(ctx context.Context, in *BannerListRequest, opts ...grpc.CallOption) (*BannerListResponse, error)
	// group: addBannerList
	AddBannerList(ctx context.Context, in *AddBannerListRequest, opts ...grpc.CallOption) (*AddBannerListResponse, error)
	// group: updateBannerList
	UpdateBannerList(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResponse, error)
	// group: delBannerList
	DelBannerList(ctx context.Context, in *DelBannerListRequest, opts ...grpc.CallOption) (*DelBannerListResponse, error)
	// group: blogList
	BlogList(ctx context.Context, in *BlogListRequest, opts ...grpc.CallOption) (*BlogListResponse, error)
	// group: frontClassifyCms
	FrontClassifyCmsPage(ctx context.Context, in *FrontClassifyCmsPageRequest, opts ...grpc.CallOption) (*FrontClassifyCmsPageResponse, error)
	// group: addFrontClassifyCms
	AddFrontClassifyCms(ctx context.Context, in *AddFrontClassifyCmsRequest, opts ...grpc.CallOption) (*AddFrontClassifyCmsResponse, error)
	// group: EditFrontClassifyCms
	EditFrontClassifyCms(ctx context.Context, in *EditFrontClassifyCmsRequest, opts ...grpc.CallOption) (*EditFrontClassifyCmsResponse, error)
	// group: delFrontClassifyCms
	DelFrontClassifyCms(ctx context.Context, in *DelFrontClassifyCmsRequest, opts ...grpc.CallOption) (*DelFrontClassifyCmsResponse, error)
	// group: sportBet
	SportBet(ctx context.Context, in *SportBetRequest, opts ...grpc.CallOption) (*SportBetResponse, error)
	// group: help
	Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error)
	// group: helpInfo
	HelpInfo(ctx context.Context, in *HelpInfoRequest, opts ...grpc.CallOption) (*HelpInfoResponse, error)
	// group: banner
	Banner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
	// group: gameClassify
	GameClassify(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	// group: lamp
	Lamp(ctx context.Context, in *LampRequest, opts ...grpc.CallOption) (*LampResponse, error)
	// group: noticeCount
	NoticeCount(ctx context.Context, in *NoticeCountRequest, opts ...grpc.CallOption) (*NoticeCountResponse, error)
	// group: msg
	Msg(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgResponse, error)
	// group: delMsg
	DelMsg(ctx context.Context, in *DelMsgRequest, opts ...grpc.CallOption) (*NoticeCountResponse, error)
	// group: updateMsg
	UpdateMsg(ctx context.Context, in *UpdateMsgRequest, opts ...grpc.CallOption) (*NoticeCountResponse, error)
	// group: notice
	Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error)
	// group: addNotice
	AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*AddNoticeResponse, error)
	// group: updateNotice
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*UpdateNoticeResponse, error)
	// group: deleteNotice
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*DeleteNoticeResponse, error)
	// group: demo
	Demo(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoResp, error)
	// group: promotions
	PromotionsList(ctx context.Context, in *PromotionsRequest, opts ...grpc.CallOption) (*PromotionsResponse, error)
	// group: home
	BigGameCategoryBanner(ctx context.Context, in *BigGameCategoryBannerRequest, opts ...grpc.CallOption) (*BigGameCategoryBannerResponse, error)
	// group: home
	GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error)
	// group: activity
	CurrentActivity(ctx context.Context, in *CurrentActivityRequest, opts ...grpc.CallOption) (*CurrentActivityResponse, error)
	// group: activity
	CurrentActivitys(ctx context.Context, in *CurrentActivityRequest, opts ...grpc.CallOption) (*CurrentActivityResponse, error)
	// group activity
	CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error)
	// group:system
	GetCommissionRule(ctx context.Context, in *GetCommissionRuleReq, opts ...grpc.CallOption) (*GetCommissionRuleResp, error)
	// group:system
	UpdateCommissionRule(ctx context.Context, in *UpdateCommissionRuleReq, opts ...grpc.CallOption) (*UpdateCommissionRuleResp, error)
	// group:system
	GetHelpLanguage(ctx context.Context, in *GetHelpLanguageReq, opts ...grpc.CallOption) (*GetHelpLanguageResp, error)
	// group:system
	PageHelpType(ctx context.Context, in *PageHelpTypeReq, opts ...grpc.CallOption) (*PageHelpTypeResp, error)
	// group:system
	PageHelpInfo(ctx context.Context, in *PageHelpInfoReq, opts ...grpc.CallOption) (*PageHelpInfoResp, error)
	//group:system
	PageHelpDetail(ctx context.Context, in *PageHelpDetailReq, opts ...grpc.CallOption) (*PageHelpDetailResp, error)
	// group:system
	TaskExport(ctx context.Context, in *TaskExportReq, opts ...grpc.CallOption) (*TaskExportResp, error)
	//group:system
	GetVerifyCodeList(ctx context.Context, in *GetVerifyCodeListReq, opts ...grpc.CallOption) (*GetVerifyCodeListResp, error)
	//group:system
	AddCustomer(ctx context.Context, in *AddCustomerReq, opts ...grpc.CallOption) (*AddCustomerResp, error)
	//group:system
	UpdateCustomer(ctx context.Context, in *UpdateCustomerReq, opts ...grpc.CallOption) (*UpdateCustomerResp, error)
	//group:system
	GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerResp, error)
	//group:system
	DeleteCustomer(ctx context.Context, in *DeleteCustomerReq, opts ...grpc.CallOption) (*DeleteCustomerResp, error)
	//group:system
	GetCustomerList(ctx context.Context, in *GetCustomerListReq, opts ...grpc.CallOption) (*GetCustomerListResp, error)
	//group:system
	CustomerList(ctx context.Context, in *CustomerListReq, opts ...grpc.CallOption) (*CustomerListResp, error)
	//group:system
	UpdateConfigAddress(ctx context.Context, in *UpdateConfigAddressReq, opts ...grpc.CallOption) (*UpdateConfigAddressResp, error)
	//group:system
	GetCompanyAddress(ctx context.Context, in *GetCompanyAddressReq, opts ...grpc.CallOption) (*GetCompanyAddressResp, error)
	//group:system
	GetAllGameSlot(ctx context.Context, in *GetAllGameSlotReq, opts ...grpc.CallOption) (*GetAllGameSlotResq, error)
	// group:system
	ArticleInfoPageList(ctx context.Context, in *ArticleInfoPageListReq, opts ...grpc.CallOption) (*ArticleInfoPageListResp, error)
	//group:system
	ArticleDetail(ctx context.Context, in *ArticleDetailReq, opts ...grpc.CallOption) (*ArticleDetailResp, error)
	//group:system
	AddArticle(ctx context.Context, in *AddArticleReq, opts ...grpc.CallOption) (*AddArticleResp, error)
	//group:system
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleResp, error)
	//group:system
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error)
	//group:system
	GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListResp, error)
	//group:system
	GetVipAbStationControl(ctx context.Context, in *GetVipAbStationControlReq, opts ...grpc.CallOption) (*GetVipAbStationControlResp, error)
	//group:system
	UpdateVipAbStation(ctx context.Context, in *UpdateVipAbStationReq, opts ...grpc.CallOption) (*UpdateVipAbStationResp, error)
	//group:promotion
	GetPromotionLevelkpi(ctx context.Context, in *GetPromotionLevelkpiReq, opts ...grpc.CallOption) (*GetPromotionLevelkpiResp, error)
	//group:integral
	PointsRewardsList(ctx context.Context, in *PointsRewardsListReq, opts ...grpc.CallOption) (*PointsRewardsListResp, error)
	//group:integral
	GetPointsRewards(ctx context.Context, in *GetPointsRewardsReq, opts ...grpc.CallOption) (*GetPointsRewardsResp, error)
	//group:integral
	AddPointsRewards(ctx context.Context, in *AddPointsRewardsReq, opts ...grpc.CallOption) (*AddPointsRewardsResp, error)
	//group:integral
	UpdatePointsRewards(ctx context.Context, in *UpdatePointsRewardsReq, opts ...grpc.CallOption) (*UpdatePointsRewardsResp, error)
	//group:integral
	DeletePointsRewards(ctx context.Context, in *DeletePointsRewardsReq, opts ...grpc.CallOption) (*DeletePointsRewardsResp, error)
	//group:integral
	CompetitionRankingRewardList(ctx context.Context, in *CompetitionRankingRewardsListReq, opts ...grpc.CallOption) (*CompetitionRankingRewardsListResp, error)
	//group:integral
	GetCompetitionRankingRewards(ctx context.Context, in *GetCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*GetCompetitionRankingRewardsResp, error)
	//group:integral
	AddCompetitionRankingRewards(ctx context.Context, in *AddCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*AddCompetitionRankingRewardsResp, error)
	//group:integral
	UpdateCompetitionRankingRewards(ctx context.Context, in *UpdateCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*UpdateCompetitionRankingRewardsResp, error)
	//group:integral
	DeleteCompetitionRankingRewards(ctx context.Context, in *DeleteCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*DeleteCompetitionRankingRewardsResp, error)
	//group:integral
	GetUserScore(ctx context.Context, in *GetUserScoreReq, opts ...grpc.CallOption) (*GetUserScoreResp, error)
	//group:integral
	UserScoreExchange(ctx context.Context, in *UserScoreExchangeReq, opts ...grpc.CallOption) (*UserScoreExchangeResp, error)
	//group:integral
	PointsCollectionRecordList(ctx context.Context, in *PointsCollectionRecordListReq, opts ...grpc.CallOption) (*PointsCollectionRecordListResp, error)
	//group:integral
	PointsUserChangeList(ctx context.Context, in *PointsUserChangeListReq, opts ...grpc.CallOption) (*PointsUserChangeListResp, error)
	//group:system
	GetPromotionalVideo(ctx context.Context, in *GetPromotionalVideoReq, opts ...grpc.CallOption) (*GetPromotionalVideoResp, error)
}

type cmsrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCmsrpcClient(cc grpc.ClientConnInterface) CmsrpcClient {
	return &cmsrpcClient{cc}
}

func (c *cmsrpcClient) Activity(ctx context.Context, in *ActivityRequest, opts ...grpc.CallOption) (*ActivityResponse, error) {
	out := new(ActivityResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_Activity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddActivity(ctx context.Context, in *AddActivityRequest, opts ...grpc.CallOption) (*AddActivityResponse, error) {
	out := new(AddActivityResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_AddActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) ActivityDetail(ctx context.Context, in *ActivityDetailReq, opts ...grpc.CallOption) (*ActivityDetailResp, error) {
	out := new(ActivityDetailResp)
	err := c.cc.Invoke(ctx, Cmsrpc_ActivityDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*DeleteActivityResponse, error) {
	out := new(DeleteActivityResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_DeleteActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) BannerList(ctx context.Context, in *BannerListRequest, opts ...grpc.CallOption) (*BannerListResponse, error) {
	out := new(BannerListResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_BannerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddBannerList(ctx context.Context, in *AddBannerListRequest, opts ...grpc.CallOption) (*AddBannerListResponse, error) {
	out := new(AddBannerListResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_AddBannerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateBannerList(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResponse, error) {
	out := new(UpdateBannerResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateBannerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DelBannerList(ctx context.Context, in *DelBannerListRequest, opts ...grpc.CallOption) (*DelBannerListResponse, error) {
	out := new(DelBannerListResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_DelBannerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) BlogList(ctx context.Context, in *BlogListRequest, opts ...grpc.CallOption) (*BlogListResponse, error) {
	out := new(BlogListResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_BlogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) FrontClassifyCmsPage(ctx context.Context, in *FrontClassifyCmsPageRequest, opts ...grpc.CallOption) (*FrontClassifyCmsPageResponse, error) {
	out := new(FrontClassifyCmsPageResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_FrontClassifyCmsPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddFrontClassifyCms(ctx context.Context, in *AddFrontClassifyCmsRequest, opts ...grpc.CallOption) (*AddFrontClassifyCmsResponse, error) {
	out := new(AddFrontClassifyCmsResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_AddFrontClassifyCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) EditFrontClassifyCms(ctx context.Context, in *EditFrontClassifyCmsRequest, opts ...grpc.CallOption) (*EditFrontClassifyCmsResponse, error) {
	out := new(EditFrontClassifyCmsResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_EditFrontClassifyCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DelFrontClassifyCms(ctx context.Context, in *DelFrontClassifyCmsRequest, opts ...grpc.CallOption) (*DelFrontClassifyCmsResponse, error) {
	out := new(DelFrontClassifyCmsResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_DelFrontClassifyCms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) SportBet(ctx context.Context, in *SportBetRequest, opts ...grpc.CallOption) (*SportBetResponse, error) {
	out := new(SportBetResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_SportBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error) {
	out := new(HelpResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_Help_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) HelpInfo(ctx context.Context, in *HelpInfoRequest, opts ...grpc.CallOption) (*HelpInfoResponse, error) {
	out := new(HelpInfoResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_HelpInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) Banner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	out := new(BannerResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_Banner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GameClassify(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_GameClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) Lamp(ctx context.Context, in *LampRequest, opts ...grpc.CallOption) (*LampResponse, error) {
	out := new(LampResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_Lamp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) NoticeCount(ctx context.Context, in *NoticeCountRequest, opts ...grpc.CallOption) (*NoticeCountResponse, error) {
	out := new(NoticeCountResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_NoticeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) Msg(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_Msg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DelMsg(ctx context.Context, in *DelMsgRequest, opts ...grpc.CallOption) (*NoticeCountResponse, error) {
	out := new(NoticeCountResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_DelMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateMsg(ctx context.Context, in *UpdateMsgRequest, opts ...grpc.CallOption) (*NoticeCountResponse, error) {
	out := new(NoticeCountResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error) {
	out := new(NoticeResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_Notice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*AddNoticeResponse, error) {
	out := new(AddNoticeResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_AddNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*UpdateNoticeResponse, error) {
	out := new(UpdateNoticeResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*DeleteNoticeResponse, error) {
	out := new(DeleteNoticeResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_DeleteNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) Demo(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoResp, error) {
	out := new(DemoResp)
	err := c.cc.Invoke(ctx, Cmsrpc_Demo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PromotionsList(ctx context.Context, in *PromotionsRequest, opts ...grpc.CallOption) (*PromotionsResponse, error) {
	out := new(PromotionsResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_PromotionsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) BigGameCategoryBanner(ctx context.Context, in *BigGameCategoryBannerRequest, opts ...grpc.CallOption) (*BigGameCategoryBannerResponse, error) {
	out := new(BigGameCategoryBannerResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_BigGameCategoryBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error) {
	out := new(GetDictionaryResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_GetDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) CurrentActivity(ctx context.Context, in *CurrentActivityRequest, opts ...grpc.CallOption) (*CurrentActivityResponse, error) {
	out := new(CurrentActivityResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_CurrentActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) CurrentActivitys(ctx context.Context, in *CurrentActivityRequest, opts ...grpc.CallOption) (*CurrentActivityResponse, error) {
	out := new(CurrentActivityResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_CurrentActivitys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error) {
	out := new(CheckInResponse)
	err := c.cc.Invoke(ctx, Cmsrpc_CheckIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetCommissionRule(ctx context.Context, in *GetCommissionRuleReq, opts ...grpc.CallOption) (*GetCommissionRuleResp, error) {
	out := new(GetCommissionRuleResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetCommissionRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateCommissionRule(ctx context.Context, in *UpdateCommissionRuleReq, opts ...grpc.CallOption) (*UpdateCommissionRuleResp, error) {
	out := new(UpdateCommissionRuleResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateCommissionRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetHelpLanguage(ctx context.Context, in *GetHelpLanguageReq, opts ...grpc.CallOption) (*GetHelpLanguageResp, error) {
	out := new(GetHelpLanguageResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetHelpLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PageHelpType(ctx context.Context, in *PageHelpTypeReq, opts ...grpc.CallOption) (*PageHelpTypeResp, error) {
	out := new(PageHelpTypeResp)
	err := c.cc.Invoke(ctx, Cmsrpc_PageHelpType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PageHelpInfo(ctx context.Context, in *PageHelpInfoReq, opts ...grpc.CallOption) (*PageHelpInfoResp, error) {
	out := new(PageHelpInfoResp)
	err := c.cc.Invoke(ctx, Cmsrpc_PageHelpInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PageHelpDetail(ctx context.Context, in *PageHelpDetailReq, opts ...grpc.CallOption) (*PageHelpDetailResp, error) {
	out := new(PageHelpDetailResp)
	err := c.cc.Invoke(ctx, Cmsrpc_PageHelpDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) TaskExport(ctx context.Context, in *TaskExportReq, opts ...grpc.CallOption) (*TaskExportResp, error) {
	out := new(TaskExportResp)
	err := c.cc.Invoke(ctx, Cmsrpc_TaskExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetVerifyCodeList(ctx context.Context, in *GetVerifyCodeListReq, opts ...grpc.CallOption) (*GetVerifyCodeListResp, error) {
	out := new(GetVerifyCodeListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetVerifyCodeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddCustomer(ctx context.Context, in *AddCustomerReq, opts ...grpc.CallOption) (*AddCustomerResp, error) {
	out := new(AddCustomerResp)
	err := c.cc.Invoke(ctx, Cmsrpc_AddCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerReq, opts ...grpc.CallOption) (*UpdateCustomerResp, error) {
	out := new(UpdateCustomerResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerResp, error) {
	out := new(GetCustomerResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerReq, opts ...grpc.CallOption) (*DeleteCustomerResp, error) {
	out := new(DeleteCustomerResp)
	err := c.cc.Invoke(ctx, Cmsrpc_DeleteCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetCustomerList(ctx context.Context, in *GetCustomerListReq, opts ...grpc.CallOption) (*GetCustomerListResp, error) {
	out := new(GetCustomerListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetCustomerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) CustomerList(ctx context.Context, in *CustomerListReq, opts ...grpc.CallOption) (*CustomerListResp, error) {
	out := new(CustomerListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_CustomerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateConfigAddress(ctx context.Context, in *UpdateConfigAddressReq, opts ...grpc.CallOption) (*UpdateConfigAddressResp, error) {
	out := new(UpdateConfigAddressResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateConfigAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetCompanyAddress(ctx context.Context, in *GetCompanyAddressReq, opts ...grpc.CallOption) (*GetCompanyAddressResp, error) {
	out := new(GetCompanyAddressResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetAllGameSlot(ctx context.Context, in *GetAllGameSlotReq, opts ...grpc.CallOption) (*GetAllGameSlotResq, error) {
	out := new(GetAllGameSlotResq)
	err := c.cc.Invoke(ctx, Cmsrpc_GetAllGameSlot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) ArticleInfoPageList(ctx context.Context, in *ArticleInfoPageListReq, opts ...grpc.CallOption) (*ArticleInfoPageListResp, error) {
	out := new(ArticleInfoPageListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_ArticleInfoPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) ArticleDetail(ctx context.Context, in *ArticleDetailReq, opts ...grpc.CallOption) (*ArticleDetailResp, error) {
	out := new(ArticleDetailResp)
	err := c.cc.Invoke(ctx, Cmsrpc_ArticleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddArticle(ctx context.Context, in *AddArticleReq, opts ...grpc.CallOption) (*AddArticleResp, error) {
	out := new(AddArticleResp)
	err := c.cc.Invoke(ctx, Cmsrpc_AddArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleResp, error) {
	out := new(UpdateArticleResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error) {
	out := new(DeleteArticleResp)
	err := c.cc.Invoke(ctx, Cmsrpc_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListResp, error) {
	out := new(GetArticleListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetVipAbStationControl(ctx context.Context, in *GetVipAbStationControlReq, opts ...grpc.CallOption) (*GetVipAbStationControlResp, error) {
	out := new(GetVipAbStationControlResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetVipAbStationControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateVipAbStation(ctx context.Context, in *UpdateVipAbStationReq, opts ...grpc.CallOption) (*UpdateVipAbStationResp, error) {
	out := new(UpdateVipAbStationResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateVipAbStation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetPromotionLevelkpi(ctx context.Context, in *GetPromotionLevelkpiReq, opts ...grpc.CallOption) (*GetPromotionLevelkpiResp, error) {
	out := new(GetPromotionLevelkpiResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetPromotionLevelkpi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PointsRewardsList(ctx context.Context, in *PointsRewardsListReq, opts ...grpc.CallOption) (*PointsRewardsListResp, error) {
	out := new(PointsRewardsListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_PointsRewardsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetPointsRewards(ctx context.Context, in *GetPointsRewardsReq, opts ...grpc.CallOption) (*GetPointsRewardsResp, error) {
	out := new(GetPointsRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetPointsRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddPointsRewards(ctx context.Context, in *AddPointsRewardsReq, opts ...grpc.CallOption) (*AddPointsRewardsResp, error) {
	out := new(AddPointsRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_AddPointsRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdatePointsRewards(ctx context.Context, in *UpdatePointsRewardsReq, opts ...grpc.CallOption) (*UpdatePointsRewardsResp, error) {
	out := new(UpdatePointsRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdatePointsRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DeletePointsRewards(ctx context.Context, in *DeletePointsRewardsReq, opts ...grpc.CallOption) (*DeletePointsRewardsResp, error) {
	out := new(DeletePointsRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_DeletePointsRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) CompetitionRankingRewardList(ctx context.Context, in *CompetitionRankingRewardsListReq, opts ...grpc.CallOption) (*CompetitionRankingRewardsListResp, error) {
	out := new(CompetitionRankingRewardsListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_CompetitionRankingRewardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetCompetitionRankingRewards(ctx context.Context, in *GetCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*GetCompetitionRankingRewardsResp, error) {
	out := new(GetCompetitionRankingRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetCompetitionRankingRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) AddCompetitionRankingRewards(ctx context.Context, in *AddCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*AddCompetitionRankingRewardsResp, error) {
	out := new(AddCompetitionRankingRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_AddCompetitionRankingRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UpdateCompetitionRankingRewards(ctx context.Context, in *UpdateCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*UpdateCompetitionRankingRewardsResp, error) {
	out := new(UpdateCompetitionRankingRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UpdateCompetitionRankingRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) DeleteCompetitionRankingRewards(ctx context.Context, in *DeleteCompetitionRankingRewardsReq, opts ...grpc.CallOption) (*DeleteCompetitionRankingRewardsResp, error) {
	out := new(DeleteCompetitionRankingRewardsResp)
	err := c.cc.Invoke(ctx, Cmsrpc_DeleteCompetitionRankingRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetUserScore(ctx context.Context, in *GetUserScoreReq, opts ...grpc.CallOption) (*GetUserScoreResp, error) {
	out := new(GetUserScoreResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetUserScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) UserScoreExchange(ctx context.Context, in *UserScoreExchangeReq, opts ...grpc.CallOption) (*UserScoreExchangeResp, error) {
	out := new(UserScoreExchangeResp)
	err := c.cc.Invoke(ctx, Cmsrpc_UserScoreExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PointsCollectionRecordList(ctx context.Context, in *PointsCollectionRecordListReq, opts ...grpc.CallOption) (*PointsCollectionRecordListResp, error) {
	out := new(PointsCollectionRecordListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_PointsCollectionRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) PointsUserChangeList(ctx context.Context, in *PointsUserChangeListReq, opts ...grpc.CallOption) (*PointsUserChangeListResp, error) {
	out := new(PointsUserChangeListResp)
	err := c.cc.Invoke(ctx, Cmsrpc_PointsUserChangeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsrpcClient) GetPromotionalVideo(ctx context.Context, in *GetPromotionalVideoReq, opts ...grpc.CallOption) (*GetPromotionalVideoResp, error) {
	out := new(GetPromotionalVideoResp)
	err := c.cc.Invoke(ctx, Cmsrpc_GetPromotionalVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsrpcServer is the server API for Cmsrpc service.
// All implementations must embed UnimplementedCmsrpcServer
// for forward compatibility
type CmsrpcServer interface {
	// group: activity
	Activity(context.Context, *ActivityRequest) (*ActivityResponse, error)
	// group: addActivity
	AddActivity(context.Context, *AddActivityRequest) (*AddActivityResponse, error)
	// group: activity
	ActivityDetail(context.Context, *ActivityDetailReq) (*ActivityDetailResp, error)
	// group: deleteActivity
	DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityResponse, error)
	// group: BannerList
	BannerList(context.Context, *BannerListRequest) (*BannerListResponse, error)
	// group: addBannerList
	AddBannerList(context.Context, *AddBannerListRequest) (*AddBannerListResponse, error)
	// group: updateBannerList
	UpdateBannerList(context.Context, *UpdateBannerRequest) (*UpdateBannerResponse, error)
	// group: delBannerList
	DelBannerList(context.Context, *DelBannerListRequest) (*DelBannerListResponse, error)
	// group: blogList
	BlogList(context.Context, *BlogListRequest) (*BlogListResponse, error)
	// group: frontClassifyCms
	FrontClassifyCmsPage(context.Context, *FrontClassifyCmsPageRequest) (*FrontClassifyCmsPageResponse, error)
	// group: addFrontClassifyCms
	AddFrontClassifyCms(context.Context, *AddFrontClassifyCmsRequest) (*AddFrontClassifyCmsResponse, error)
	// group: EditFrontClassifyCms
	EditFrontClassifyCms(context.Context, *EditFrontClassifyCmsRequest) (*EditFrontClassifyCmsResponse, error)
	// group: delFrontClassifyCms
	DelFrontClassifyCms(context.Context, *DelFrontClassifyCmsRequest) (*DelFrontClassifyCmsResponse, error)
	// group: sportBet
	SportBet(context.Context, *SportBetRequest) (*SportBetResponse, error)
	// group: help
	Help(context.Context, *HelpRequest) (*HelpResponse, error)
	// group: helpInfo
	HelpInfo(context.Context, *HelpInfoRequest) (*HelpInfoResponse, error)
	// group: banner
	Banner(context.Context, *BannerRequest) (*BannerResponse, error)
	// group: gameClassify
	GameClassify(context.Context, *GameRequest) (*GameResponse, error)
	// group: lamp
	Lamp(context.Context, *LampRequest) (*LampResponse, error)
	// group: noticeCount
	NoticeCount(context.Context, *NoticeCountRequest) (*NoticeCountResponse, error)
	// group: msg
	Msg(context.Context, *MsgRequest) (*MsgResponse, error)
	// group: delMsg
	DelMsg(context.Context, *DelMsgRequest) (*NoticeCountResponse, error)
	// group: updateMsg
	UpdateMsg(context.Context, *UpdateMsgRequest) (*NoticeCountResponse, error)
	// group: notice
	Notice(context.Context, *NoticeRequest) (*NoticeResponse, error)
	// group: addNotice
	AddNotice(context.Context, *AddNoticeRequest) (*AddNoticeResponse, error)
	// group: updateNotice
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeResponse, error)
	// group: deleteNotice
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeResponse, error)
	// group: demo
	Demo(context.Context, *DemoReq) (*DemoResp, error)
	// group: promotions
	PromotionsList(context.Context, *PromotionsRequest) (*PromotionsResponse, error)
	// group: home
	BigGameCategoryBanner(context.Context, *BigGameCategoryBannerRequest) (*BigGameCategoryBannerResponse, error)
	// group: home
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error)
	// group: activity
	CurrentActivity(context.Context, *CurrentActivityRequest) (*CurrentActivityResponse, error)
	// group: activity
	CurrentActivitys(context.Context, *CurrentActivityRequest) (*CurrentActivityResponse, error)
	// group activity
	CheckIn(context.Context, *CheckInRequest) (*CheckInResponse, error)
	// group:system
	GetCommissionRule(context.Context, *GetCommissionRuleReq) (*GetCommissionRuleResp, error)
	// group:system
	UpdateCommissionRule(context.Context, *UpdateCommissionRuleReq) (*UpdateCommissionRuleResp, error)
	// group:system
	GetHelpLanguage(context.Context, *GetHelpLanguageReq) (*GetHelpLanguageResp, error)
	// group:system
	PageHelpType(context.Context, *PageHelpTypeReq) (*PageHelpTypeResp, error)
	// group:system
	PageHelpInfo(context.Context, *PageHelpInfoReq) (*PageHelpInfoResp, error)
	//group:system
	PageHelpDetail(context.Context, *PageHelpDetailReq) (*PageHelpDetailResp, error)
	// group:system
	TaskExport(context.Context, *TaskExportReq) (*TaskExportResp, error)
	//group:system
	GetVerifyCodeList(context.Context, *GetVerifyCodeListReq) (*GetVerifyCodeListResp, error)
	//group:system
	AddCustomer(context.Context, *AddCustomerReq) (*AddCustomerResp, error)
	//group:system
	UpdateCustomer(context.Context, *UpdateCustomerReq) (*UpdateCustomerResp, error)
	//group:system
	GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerResp, error)
	//group:system
	DeleteCustomer(context.Context, *DeleteCustomerReq) (*DeleteCustomerResp, error)
	//group:system
	GetCustomerList(context.Context, *GetCustomerListReq) (*GetCustomerListResp, error)
	//group:system
	CustomerList(context.Context, *CustomerListReq) (*CustomerListResp, error)
	//group:system
	UpdateConfigAddress(context.Context, *UpdateConfigAddressReq) (*UpdateConfigAddressResp, error)
	//group:system
	GetCompanyAddress(context.Context, *GetCompanyAddressReq) (*GetCompanyAddressResp, error)
	//group:system
	GetAllGameSlot(context.Context, *GetAllGameSlotReq) (*GetAllGameSlotResq, error)
	// group:system
	ArticleInfoPageList(context.Context, *ArticleInfoPageListReq) (*ArticleInfoPageListResp, error)
	//group:system
	ArticleDetail(context.Context, *ArticleDetailReq) (*ArticleDetailResp, error)
	//group:system
	AddArticle(context.Context, *AddArticleReq) (*AddArticleResp, error)
	//group:system
	UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleResp, error)
	//group:system
	DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleResp, error)
	//group:system
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListResp, error)
	//group:system
	GetVipAbStationControl(context.Context, *GetVipAbStationControlReq) (*GetVipAbStationControlResp, error)
	//group:system
	UpdateVipAbStation(context.Context, *UpdateVipAbStationReq) (*UpdateVipAbStationResp, error)
	//group:promotion
	GetPromotionLevelkpi(context.Context, *GetPromotionLevelkpiReq) (*GetPromotionLevelkpiResp, error)
	//group:integral
	PointsRewardsList(context.Context, *PointsRewardsListReq) (*PointsRewardsListResp, error)
	//group:integral
	GetPointsRewards(context.Context, *GetPointsRewardsReq) (*GetPointsRewardsResp, error)
	//group:integral
	AddPointsRewards(context.Context, *AddPointsRewardsReq) (*AddPointsRewardsResp, error)
	//group:integral
	UpdatePointsRewards(context.Context, *UpdatePointsRewardsReq) (*UpdatePointsRewardsResp, error)
	//group:integral
	DeletePointsRewards(context.Context, *DeletePointsRewardsReq) (*DeletePointsRewardsResp, error)
	//group:integral
	CompetitionRankingRewardList(context.Context, *CompetitionRankingRewardsListReq) (*CompetitionRankingRewardsListResp, error)
	//group:integral
	GetCompetitionRankingRewards(context.Context, *GetCompetitionRankingRewardsReq) (*GetCompetitionRankingRewardsResp, error)
	//group:integral
	AddCompetitionRankingRewards(context.Context, *AddCompetitionRankingRewardsReq) (*AddCompetitionRankingRewardsResp, error)
	//group:integral
	UpdateCompetitionRankingRewards(context.Context, *UpdateCompetitionRankingRewardsReq) (*UpdateCompetitionRankingRewardsResp, error)
	//group:integral
	DeleteCompetitionRankingRewards(context.Context, *DeleteCompetitionRankingRewardsReq) (*DeleteCompetitionRankingRewardsResp, error)
	//group:integral
	GetUserScore(context.Context, *GetUserScoreReq) (*GetUserScoreResp, error)
	//group:integral
	UserScoreExchange(context.Context, *UserScoreExchangeReq) (*UserScoreExchangeResp, error)
	//group:integral
	PointsCollectionRecordList(context.Context, *PointsCollectionRecordListReq) (*PointsCollectionRecordListResp, error)
	//group:integral
	PointsUserChangeList(context.Context, *PointsUserChangeListReq) (*PointsUserChangeListResp, error)
	//group:system
	GetPromotionalVideo(context.Context, *GetPromotionalVideoReq) (*GetPromotionalVideoResp, error)
	mustEmbedUnimplementedCmsrpcServer()
}

// UnimplementedCmsrpcServer must be embedded to have forward compatible implementations.
type UnimplementedCmsrpcServer struct {
}

func (UnimplementedCmsrpcServer) Activity(context.Context, *ActivityRequest) (*ActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activity not implemented")
}
func (UnimplementedCmsrpcServer) AddActivity(context.Context, *AddActivityRequest) (*AddActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActivity not implemented")
}
func (UnimplementedCmsrpcServer) ActivityDetail(context.Context, *ActivityDetailReq) (*ActivityDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityDetail not implemented")
}
func (UnimplementedCmsrpcServer) DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivity not implemented")
}
func (UnimplementedCmsrpcServer) BannerList(context.Context, *BannerListRequest) (*BannerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerList not implemented")
}
func (UnimplementedCmsrpcServer) AddBannerList(context.Context, *AddBannerListRequest) (*AddBannerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerList not implemented")
}
func (UnimplementedCmsrpcServer) UpdateBannerList(context.Context, *UpdateBannerRequest) (*UpdateBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBannerList not implemented")
}
func (UnimplementedCmsrpcServer) DelBannerList(context.Context, *DelBannerListRequest) (*DelBannerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBannerList not implemented")
}
func (UnimplementedCmsrpcServer) BlogList(context.Context, *BlogListRequest) (*BlogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogList not implemented")
}
func (UnimplementedCmsrpcServer) FrontClassifyCmsPage(context.Context, *FrontClassifyCmsPageRequest) (*FrontClassifyCmsPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontClassifyCmsPage not implemented")
}
func (UnimplementedCmsrpcServer) AddFrontClassifyCms(context.Context, *AddFrontClassifyCmsRequest) (*AddFrontClassifyCmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFrontClassifyCms not implemented")
}
func (UnimplementedCmsrpcServer) EditFrontClassifyCms(context.Context, *EditFrontClassifyCmsRequest) (*EditFrontClassifyCmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFrontClassifyCms not implemented")
}
func (UnimplementedCmsrpcServer) DelFrontClassifyCms(context.Context, *DelFrontClassifyCmsRequest) (*DelFrontClassifyCmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFrontClassifyCms not implemented")
}
func (UnimplementedCmsrpcServer) SportBet(context.Context, *SportBetRequest) (*SportBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SportBet not implemented")
}
func (UnimplementedCmsrpcServer) Help(context.Context, *HelpRequest) (*HelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (UnimplementedCmsrpcServer) HelpInfo(context.Context, *HelpInfoRequest) (*HelpInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpInfo not implemented")
}
func (UnimplementedCmsrpcServer) Banner(context.Context, *BannerRequest) (*BannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Banner not implemented")
}
func (UnimplementedCmsrpcServer) GameClassify(context.Context, *GameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameClassify not implemented")
}
func (UnimplementedCmsrpcServer) Lamp(context.Context, *LampRequest) (*LampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lamp not implemented")
}
func (UnimplementedCmsrpcServer) NoticeCount(context.Context, *NoticeCountRequest) (*NoticeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeCount not implemented")
}
func (UnimplementedCmsrpcServer) Msg(context.Context, *MsgRequest) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msg not implemented")
}
func (UnimplementedCmsrpcServer) DelMsg(context.Context, *DelMsgRequest) (*NoticeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMsg not implemented")
}
func (UnimplementedCmsrpcServer) UpdateMsg(context.Context, *UpdateMsgRequest) (*NoticeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsg not implemented")
}
func (UnimplementedCmsrpcServer) Notice(context.Context, *NoticeRequest) (*NoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notice not implemented")
}
func (UnimplementedCmsrpcServer) AddNotice(context.Context, *AddNoticeRequest) (*AddNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedCmsrpcServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedCmsrpcServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedCmsrpcServer) Demo(context.Context, *DemoReq) (*DemoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}
func (UnimplementedCmsrpcServer) PromotionsList(context.Context, *PromotionsRequest) (*PromotionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionsList not implemented")
}
func (UnimplementedCmsrpcServer) BigGameCategoryBanner(context.Context, *BigGameCategoryBannerRequest) (*BigGameCategoryBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BigGameCategoryBanner not implemented")
}
func (UnimplementedCmsrpcServer) GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionary not implemented")
}
func (UnimplementedCmsrpcServer) CurrentActivity(context.Context, *CurrentActivityRequest) (*CurrentActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentActivity not implemented")
}
func (UnimplementedCmsrpcServer) CurrentActivitys(context.Context, *CurrentActivityRequest) (*CurrentActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentActivitys not implemented")
}
func (UnimplementedCmsrpcServer) CheckIn(context.Context, *CheckInRequest) (*CheckInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedCmsrpcServer) GetCommissionRule(context.Context, *GetCommissionRuleReq) (*GetCommissionRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionRule not implemented")
}
func (UnimplementedCmsrpcServer) UpdateCommissionRule(context.Context, *UpdateCommissionRuleReq) (*UpdateCommissionRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommissionRule not implemented")
}
func (UnimplementedCmsrpcServer) GetHelpLanguage(context.Context, *GetHelpLanguageReq) (*GetHelpLanguageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpLanguage not implemented")
}
func (UnimplementedCmsrpcServer) PageHelpType(context.Context, *PageHelpTypeReq) (*PageHelpTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageHelpType not implemented")
}
func (UnimplementedCmsrpcServer) PageHelpInfo(context.Context, *PageHelpInfoReq) (*PageHelpInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageHelpInfo not implemented")
}
func (UnimplementedCmsrpcServer) PageHelpDetail(context.Context, *PageHelpDetailReq) (*PageHelpDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageHelpDetail not implemented")
}
func (UnimplementedCmsrpcServer) TaskExport(context.Context, *TaskExportReq) (*TaskExportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExport not implemented")
}
func (UnimplementedCmsrpcServer) GetVerifyCodeList(context.Context, *GetVerifyCodeListReq) (*GetVerifyCodeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifyCodeList not implemented")
}
func (UnimplementedCmsrpcServer) AddCustomer(context.Context, *AddCustomerReq) (*AddCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomer not implemented")
}
func (UnimplementedCmsrpcServer) UpdateCustomer(context.Context, *UpdateCustomerReq) (*UpdateCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCmsrpcServer) GetCustomer(context.Context, *GetCustomerReq) (*GetCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCmsrpcServer) DeleteCustomer(context.Context, *DeleteCustomerReq) (*DeleteCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCmsrpcServer) GetCustomerList(context.Context, *GetCustomerListReq) (*GetCustomerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerList not implemented")
}
func (UnimplementedCmsrpcServer) CustomerList(context.Context, *CustomerListReq) (*CustomerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerList not implemented")
}
func (UnimplementedCmsrpcServer) UpdateConfigAddress(context.Context, *UpdateConfigAddressReq) (*UpdateConfigAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigAddress not implemented")
}
func (UnimplementedCmsrpcServer) GetCompanyAddress(context.Context, *GetCompanyAddressReq) (*GetCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyAddress not implemented")
}
func (UnimplementedCmsrpcServer) GetAllGameSlot(context.Context, *GetAllGameSlotReq) (*GetAllGameSlotResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGameSlot not implemented")
}
func (UnimplementedCmsrpcServer) ArticleInfoPageList(context.Context, *ArticleInfoPageListReq) (*ArticleInfoPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleInfoPageList not implemented")
}
func (UnimplementedCmsrpcServer) ArticleDetail(context.Context, *ArticleDetailReq) (*ArticleDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDetail not implemented")
}
func (UnimplementedCmsrpcServer) AddArticle(context.Context, *AddArticleReq) (*AddArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (UnimplementedCmsrpcServer) UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedCmsrpcServer) DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedCmsrpcServer) GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (UnimplementedCmsrpcServer) GetVipAbStationControl(context.Context, *GetVipAbStationControlReq) (*GetVipAbStationControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipAbStationControl not implemented")
}
func (UnimplementedCmsrpcServer) UpdateVipAbStation(context.Context, *UpdateVipAbStationReq) (*UpdateVipAbStationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipAbStation not implemented")
}
func (UnimplementedCmsrpcServer) GetPromotionLevelkpi(context.Context, *GetPromotionLevelkpiReq) (*GetPromotionLevelkpiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotionLevelkpi not implemented")
}
func (UnimplementedCmsrpcServer) PointsRewardsList(context.Context, *PointsRewardsListReq) (*PointsRewardsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointsRewardsList not implemented")
}
func (UnimplementedCmsrpcServer) GetPointsRewards(context.Context, *GetPointsRewardsReq) (*GetPointsRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointsRewards not implemented")
}
func (UnimplementedCmsrpcServer) AddPointsRewards(context.Context, *AddPointsRewardsReq) (*AddPointsRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPointsRewards not implemented")
}
func (UnimplementedCmsrpcServer) UpdatePointsRewards(context.Context, *UpdatePointsRewardsReq) (*UpdatePointsRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePointsRewards not implemented")
}
func (UnimplementedCmsrpcServer) DeletePointsRewards(context.Context, *DeletePointsRewardsReq) (*DeletePointsRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePointsRewards not implemented")
}
func (UnimplementedCmsrpcServer) CompetitionRankingRewardList(context.Context, *CompetitionRankingRewardsListReq) (*CompetitionRankingRewardsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompetitionRankingRewardList not implemented")
}
func (UnimplementedCmsrpcServer) GetCompetitionRankingRewards(context.Context, *GetCompetitionRankingRewardsReq) (*GetCompetitionRankingRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitionRankingRewards not implemented")
}
func (UnimplementedCmsrpcServer) AddCompetitionRankingRewards(context.Context, *AddCompetitionRankingRewardsReq) (*AddCompetitionRankingRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompetitionRankingRewards not implemented")
}
func (UnimplementedCmsrpcServer) UpdateCompetitionRankingRewards(context.Context, *UpdateCompetitionRankingRewardsReq) (*UpdateCompetitionRankingRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompetitionRankingRewards not implemented")
}
func (UnimplementedCmsrpcServer) DeleteCompetitionRankingRewards(context.Context, *DeleteCompetitionRankingRewardsReq) (*DeleteCompetitionRankingRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompetitionRankingRewards not implemented")
}
func (UnimplementedCmsrpcServer) GetUserScore(context.Context, *GetUserScoreReq) (*GetUserScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserScore not implemented")
}
func (UnimplementedCmsrpcServer) UserScoreExchange(context.Context, *UserScoreExchangeReq) (*UserScoreExchangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserScoreExchange not implemented")
}
func (UnimplementedCmsrpcServer) PointsCollectionRecordList(context.Context, *PointsCollectionRecordListReq) (*PointsCollectionRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointsCollectionRecordList not implemented")
}
func (UnimplementedCmsrpcServer) PointsUserChangeList(context.Context, *PointsUserChangeListReq) (*PointsUserChangeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointsUserChangeList not implemented")
}
func (UnimplementedCmsrpcServer) GetPromotionalVideo(context.Context, *GetPromotionalVideoReq) (*GetPromotionalVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotionalVideo not implemented")
}
func (UnimplementedCmsrpcServer) mustEmbedUnimplementedCmsrpcServer() {}

// UnsafeCmsrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmsrpcServer will
// result in compilation errors.
type UnsafeCmsrpcServer interface {
	mustEmbedUnimplementedCmsrpcServer()
}

func RegisterCmsrpcServer(s grpc.ServiceRegistrar, srv CmsrpcServer) {
	s.RegisterService(&Cmsrpc_ServiceDesc, srv)
}

func _Cmsrpc_Activity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Activity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Activity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Activity(ctx, req.(*ActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddActivity(ctx, req.(*AddActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_ActivityDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).ActivityDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_ActivityDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).ActivityDetail(ctx, req.(*ActivityDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DeleteActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DeleteActivity(ctx, req.(*DeleteActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_BannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).BannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_BannerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).BannerList(ctx, req.(*BannerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddBannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddBannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddBannerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddBannerList(ctx, req.(*AddBannerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateBannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateBannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateBannerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateBannerList(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DelBannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBannerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DelBannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DelBannerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DelBannerList(ctx, req.(*DelBannerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_BlogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).BlogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_BlogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).BlogList(ctx, req.(*BlogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_FrontClassifyCmsPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontClassifyCmsPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).FrontClassifyCmsPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_FrontClassifyCmsPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).FrontClassifyCmsPage(ctx, req.(*FrontClassifyCmsPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddFrontClassifyCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFrontClassifyCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddFrontClassifyCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddFrontClassifyCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddFrontClassifyCms(ctx, req.(*AddFrontClassifyCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_EditFrontClassifyCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditFrontClassifyCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).EditFrontClassifyCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_EditFrontClassifyCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).EditFrontClassifyCms(ctx, req.(*EditFrontClassifyCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DelFrontClassifyCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFrontClassifyCmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DelFrontClassifyCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DelFrontClassifyCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DelFrontClassifyCms(ctx, req.(*DelFrontClassifyCmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_SportBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SportBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).SportBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_SportBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).SportBet(ctx, req.(*SportBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Help_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Help(ctx, req.(*HelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_HelpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).HelpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_HelpInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).HelpInfo(ctx, req.(*HelpInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_Banner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Banner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Banner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Banner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GameClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GameClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GameClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GameClassify(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_Lamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Lamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Lamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Lamp(ctx, req.(*LampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_NoticeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).NoticeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_NoticeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).NoticeCount(ctx, req.(*NoticeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_Msg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Msg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Msg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Msg(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DelMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DelMsg(ctx, req.(*DelMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateMsg(ctx, req.(*UpdateMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Notice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Notice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddNotice(ctx, req.(*AddNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_Demo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).Demo(ctx, req.(*DemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PromotionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PromotionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PromotionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PromotionsList(ctx, req.(*PromotionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_BigGameCategoryBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigGameCategoryBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).BigGameCategoryBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_BigGameCategoryBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).BigGameCategoryBanner(ctx, req.(*BigGameCategoryBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetDictionary(ctx, req.(*GetDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_CurrentActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).CurrentActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_CurrentActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).CurrentActivity(ctx, req.(*CurrentActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_CurrentActivitys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).CurrentActivitys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_CurrentActivitys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).CurrentActivitys(ctx, req.(*CurrentActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_CheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).CheckIn(ctx, req.(*CheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetCommissionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetCommissionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetCommissionRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetCommissionRule(ctx, req.(*GetCommissionRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateCommissionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommissionRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateCommissionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateCommissionRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateCommissionRule(ctx, req.(*UpdateCommissionRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetHelpLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpLanguageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetHelpLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetHelpLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetHelpLanguage(ctx, req.(*GetHelpLanguageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PageHelpType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageHelpTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PageHelpType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PageHelpType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PageHelpType(ctx, req.(*PageHelpTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PageHelpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageHelpInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PageHelpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PageHelpInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PageHelpInfo(ctx, req.(*PageHelpInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PageHelpDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageHelpDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PageHelpDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PageHelpDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PageHelpDetail(ctx, req.(*PageHelpDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_TaskExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).TaskExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_TaskExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).TaskExport(ctx, req.(*TaskExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetVerifyCodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerifyCodeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetVerifyCodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetVerifyCodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetVerifyCodeList(ctx, req.(*GetVerifyCodeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddCustomer(ctx, req.(*AddCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateCustomer(ctx, req.(*UpdateCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetCustomer(ctx, req.(*GetCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DeleteCustomer(ctx, req.(*DeleteCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetCustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetCustomerList(ctx, req.(*GetCustomerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_CustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).CustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_CustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).CustomerList(ctx, req.(*CustomerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateConfigAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateConfigAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateConfigAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateConfigAddress(ctx, req.(*UpdateConfigAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetCompanyAddress(ctx, req.(*GetCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetAllGameSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGameSlotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetAllGameSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetAllGameSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetAllGameSlot(ctx, req.(*GetAllGameSlotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_ArticleInfoPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleInfoPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).ArticleInfoPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_ArticleInfoPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).ArticleInfoPageList(ctx, req.(*ArticleInfoPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_ArticleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).ArticleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_ArticleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).ArticleDetail(ctx, req.(*ArticleDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddArticle(ctx, req.(*AddArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetArticleList(ctx, req.(*GetArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetVipAbStationControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipAbStationControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetVipAbStationControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetVipAbStationControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetVipAbStationControl(ctx, req.(*GetVipAbStationControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateVipAbStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipAbStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateVipAbStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateVipAbStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateVipAbStation(ctx, req.(*UpdateVipAbStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetPromotionLevelkpi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromotionLevelkpiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetPromotionLevelkpi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetPromotionLevelkpi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetPromotionLevelkpi(ctx, req.(*GetPromotionLevelkpiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PointsRewardsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsRewardsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PointsRewardsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PointsRewardsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PointsRewardsList(ctx, req.(*PointsRewardsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetPointsRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetPointsRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetPointsRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetPointsRewards(ctx, req.(*GetPointsRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddPointsRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPointsRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddPointsRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddPointsRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddPointsRewards(ctx, req.(*AddPointsRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdatePointsRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointsRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdatePointsRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdatePointsRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdatePointsRewards(ctx, req.(*UpdatePointsRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DeletePointsRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePointsRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DeletePointsRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DeletePointsRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DeletePointsRewards(ctx, req.(*DeletePointsRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_CompetitionRankingRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionRankingRewardsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).CompetitionRankingRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_CompetitionRankingRewardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).CompetitionRankingRewardList(ctx, req.(*CompetitionRankingRewardsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetCompetitionRankingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetitionRankingRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetCompetitionRankingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetCompetitionRankingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetCompetitionRankingRewards(ctx, req.(*GetCompetitionRankingRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_AddCompetitionRankingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompetitionRankingRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).AddCompetitionRankingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_AddCompetitionRankingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).AddCompetitionRankingRewards(ctx, req.(*AddCompetitionRankingRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UpdateCompetitionRankingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompetitionRankingRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UpdateCompetitionRankingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UpdateCompetitionRankingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UpdateCompetitionRankingRewards(ctx, req.(*UpdateCompetitionRankingRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_DeleteCompetitionRankingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompetitionRankingRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).DeleteCompetitionRankingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_DeleteCompetitionRankingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).DeleteCompetitionRankingRewards(ctx, req.(*DeleteCompetitionRankingRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetUserScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetUserScore(ctx, req.(*GetUserScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_UserScoreExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserScoreExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).UserScoreExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_UserScoreExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).UserScoreExchange(ctx, req.(*UserScoreExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PointsCollectionRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsCollectionRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PointsCollectionRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PointsCollectionRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PointsCollectionRecordList(ctx, req.(*PointsCollectionRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_PointsUserChangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsUserChangeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).PointsUserChangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_PointsUserChangeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).PointsUserChangeList(ctx, req.(*PointsUserChangeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmsrpc_GetPromotionalVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromotionalVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsrpcServer).GetPromotionalVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cmsrpc_GetPromotionalVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsrpcServer).GetPromotionalVideo(ctx, req.(*GetPromotionalVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cmsrpc_ServiceDesc is the grpc.ServiceDesc for Cmsrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cmsrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmsrpc.cmsrpc",
	HandlerType: (*CmsrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "activity",
			Handler:    _Cmsrpc_Activity_Handler,
		},
		{
			MethodName: "addActivity",
			Handler:    _Cmsrpc_AddActivity_Handler,
		},
		{
			MethodName: "activityDetail",
			Handler:    _Cmsrpc_ActivityDetail_Handler,
		},
		{
			MethodName: "deleteActivity",
			Handler:    _Cmsrpc_DeleteActivity_Handler,
		},
		{
			MethodName: "bannerList",
			Handler:    _Cmsrpc_BannerList_Handler,
		},
		{
			MethodName: "addBannerList",
			Handler:    _Cmsrpc_AddBannerList_Handler,
		},
		{
			MethodName: "updateBannerList",
			Handler:    _Cmsrpc_UpdateBannerList_Handler,
		},
		{
			MethodName: "delBannerList",
			Handler:    _Cmsrpc_DelBannerList_Handler,
		},
		{
			MethodName: "blogList",
			Handler:    _Cmsrpc_BlogList_Handler,
		},
		{
			MethodName: "frontClassifyCmsPage",
			Handler:    _Cmsrpc_FrontClassifyCmsPage_Handler,
		},
		{
			MethodName: "addFrontClassifyCms",
			Handler:    _Cmsrpc_AddFrontClassifyCms_Handler,
		},
		{
			MethodName: "editFrontClassifyCms",
			Handler:    _Cmsrpc_EditFrontClassifyCms_Handler,
		},
		{
			MethodName: "delFrontClassifyCms",
			Handler:    _Cmsrpc_DelFrontClassifyCms_Handler,
		},
		{
			MethodName: "sportBet",
			Handler:    _Cmsrpc_SportBet_Handler,
		},
		{
			MethodName: "help",
			Handler:    _Cmsrpc_Help_Handler,
		},
		{
			MethodName: "helpInfo",
			Handler:    _Cmsrpc_HelpInfo_Handler,
		},
		{
			MethodName: "banner",
			Handler:    _Cmsrpc_Banner_Handler,
		},
		{
			MethodName: "gameClassify",
			Handler:    _Cmsrpc_GameClassify_Handler,
		},
		{
			MethodName: "lamp",
			Handler:    _Cmsrpc_Lamp_Handler,
		},
		{
			MethodName: "noticeCount",
			Handler:    _Cmsrpc_NoticeCount_Handler,
		},
		{
			MethodName: "msg",
			Handler:    _Cmsrpc_Msg_Handler,
		},
		{
			MethodName: "delMsg",
			Handler:    _Cmsrpc_DelMsg_Handler,
		},
		{
			MethodName: "updateMsg",
			Handler:    _Cmsrpc_UpdateMsg_Handler,
		},
		{
			MethodName: "notice",
			Handler:    _Cmsrpc_Notice_Handler,
		},
		{
			MethodName: "addNotice",
			Handler:    _Cmsrpc_AddNotice_Handler,
		},
		{
			MethodName: "updateNotice",
			Handler:    _Cmsrpc_UpdateNotice_Handler,
		},
		{
			MethodName: "deleteNotice",
			Handler:    _Cmsrpc_DeleteNotice_Handler,
		},
		{
			MethodName: "demo",
			Handler:    _Cmsrpc_Demo_Handler,
		},
		{
			MethodName: "promotionsList",
			Handler:    _Cmsrpc_PromotionsList_Handler,
		},
		{
			MethodName: "bigGameCategoryBanner",
			Handler:    _Cmsrpc_BigGameCategoryBanner_Handler,
		},
		{
			MethodName: "getDictionary",
			Handler:    _Cmsrpc_GetDictionary_Handler,
		},
		{
			MethodName: "currentActivity",
			Handler:    _Cmsrpc_CurrentActivity_Handler,
		},
		{
			MethodName: "currentActivitys",
			Handler:    _Cmsrpc_CurrentActivitys_Handler,
		},
		{
			MethodName: "checkIn",
			Handler:    _Cmsrpc_CheckIn_Handler,
		},
		{
			MethodName: "getCommissionRule",
			Handler:    _Cmsrpc_GetCommissionRule_Handler,
		},
		{
			MethodName: "updateCommissionRule",
			Handler:    _Cmsrpc_UpdateCommissionRule_Handler,
		},
		{
			MethodName: "getHelpLanguage",
			Handler:    _Cmsrpc_GetHelpLanguage_Handler,
		},
		{
			MethodName: "pageHelpType",
			Handler:    _Cmsrpc_PageHelpType_Handler,
		},
		{
			MethodName: "pageHelpInfo",
			Handler:    _Cmsrpc_PageHelpInfo_Handler,
		},
		{
			MethodName: "pageHelpDetail",
			Handler:    _Cmsrpc_PageHelpDetail_Handler,
		},
		{
			MethodName: "taskExport",
			Handler:    _Cmsrpc_TaskExport_Handler,
		},
		{
			MethodName: "getVerifyCodeList",
			Handler:    _Cmsrpc_GetVerifyCodeList_Handler,
		},
		{
			MethodName: "addCustomer",
			Handler:    _Cmsrpc_AddCustomer_Handler,
		},
		{
			MethodName: "updateCustomer",
			Handler:    _Cmsrpc_UpdateCustomer_Handler,
		},
		{
			MethodName: "getCustomer",
			Handler:    _Cmsrpc_GetCustomer_Handler,
		},
		{
			MethodName: "deleteCustomer",
			Handler:    _Cmsrpc_DeleteCustomer_Handler,
		},
		{
			MethodName: "getCustomerList",
			Handler:    _Cmsrpc_GetCustomerList_Handler,
		},
		{
			MethodName: "customerList",
			Handler:    _Cmsrpc_CustomerList_Handler,
		},
		{
			MethodName: "updateConfigAddress",
			Handler:    _Cmsrpc_UpdateConfigAddress_Handler,
		},
		{
			MethodName: "getCompanyAddress",
			Handler:    _Cmsrpc_GetCompanyAddress_Handler,
		},
		{
			MethodName: "getAllGameSlot",
			Handler:    _Cmsrpc_GetAllGameSlot_Handler,
		},
		{
			MethodName: "articleInfoPageList",
			Handler:    _Cmsrpc_ArticleInfoPageList_Handler,
		},
		{
			MethodName: "articleDetail",
			Handler:    _Cmsrpc_ArticleDetail_Handler,
		},
		{
			MethodName: "addArticle",
			Handler:    _Cmsrpc_AddArticle_Handler,
		},
		{
			MethodName: "updateArticle",
			Handler:    _Cmsrpc_UpdateArticle_Handler,
		},
		{
			MethodName: "deleteArticle",
			Handler:    _Cmsrpc_DeleteArticle_Handler,
		},
		{
			MethodName: "getArticleList",
			Handler:    _Cmsrpc_GetArticleList_Handler,
		},
		{
			MethodName: "GetVipAbStationControl",
			Handler:    _Cmsrpc_GetVipAbStationControl_Handler,
		},
		{
			MethodName: "updateVipAbStation",
			Handler:    _Cmsrpc_UpdateVipAbStation_Handler,
		},
		{
			MethodName: "getPromotionLevelkpi",
			Handler:    _Cmsrpc_GetPromotionLevelkpi_Handler,
		},
		{
			MethodName: "PointsRewardsList",
			Handler:    _Cmsrpc_PointsRewardsList_Handler,
		},
		{
			MethodName: "GetPointsRewards",
			Handler:    _Cmsrpc_GetPointsRewards_Handler,
		},
		{
			MethodName: "AddPointsRewards",
			Handler:    _Cmsrpc_AddPointsRewards_Handler,
		},
		{
			MethodName: "UpdatePointsRewards",
			Handler:    _Cmsrpc_UpdatePointsRewards_Handler,
		},
		{
			MethodName: "DeletePointsRewards",
			Handler:    _Cmsrpc_DeletePointsRewards_Handler,
		},
		{
			MethodName: "CompetitionRankingRewardList",
			Handler:    _Cmsrpc_CompetitionRankingRewardList_Handler,
		},
		{
			MethodName: "GetCompetitionRankingRewards",
			Handler:    _Cmsrpc_GetCompetitionRankingRewards_Handler,
		},
		{
			MethodName: "AddCompetitionRankingRewards",
			Handler:    _Cmsrpc_AddCompetitionRankingRewards_Handler,
		},
		{
			MethodName: "UpdateCompetitionRankingRewards",
			Handler:    _Cmsrpc_UpdateCompetitionRankingRewards_Handler,
		},
		{
			MethodName: "DeleteCompetitionRankingRewards",
			Handler:    _Cmsrpc_DeleteCompetitionRankingRewards_Handler,
		},
		{
			MethodName: "GetUserScore",
			Handler:    _Cmsrpc_GetUserScore_Handler,
		},
		{
			MethodName: "UserScoreExchange",
			Handler:    _Cmsrpc_UserScoreExchange_Handler,
		},
		{
			MethodName: "PointsCollectionRecordList",
			Handler:    _Cmsrpc_PointsCollectionRecordList_Handler,
		},
		{
			MethodName: "PointsUserChangeList",
			Handler:    _Cmsrpc_PointsUserChangeList_Handler,
		},
		{
			MethodName: "GetPromotionalVideo",
			Handler:    _Cmsrpc_GetPromotionalVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmsrpc.proto",
}
