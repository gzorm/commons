// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2-devel
// 	protoc        v3.19.4
// source: userrpc.proto

package userrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdminTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category     string  `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Coin         float32 `protobuf:"fixed32,2,opt,name=coin,proto3" json:"coin,omitempty"`
	FlowClaim    int32   `protobuf:"varint,3,opt,name=flowClaim,proto3" json:"flowClaim,omitempty"`
	Mark         string  `protobuf:"bytes,4,opt,name=mark,proto3" json:"mark,omitempty"`
	Message      string  `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	OperatorType string  `protobuf:"bytes,6,opt,name=operatorType,proto3" json:"operatorType,omitempty"`
	Uid          int32   `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *AdminTransferRequest) Reset() {
	*x = AdminTransferRequest{}
	mi := &file_userrpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferRequest) ProtoMessage() {}

func (x *AdminTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferRequest.ProtoReflect.Descriptor instead.
func (*AdminTransferRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{0}
}

func (x *AdminTransferRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AdminTransferRequest) GetCoin() float32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *AdminTransferRequest) GetFlowClaim() int32 {
	if x != nil {
		return x.FlowClaim
	}
	return 0
}

func (x *AdminTransferRequest) GetMark() string {
	if x != nil {
		return x.Mark
	}
	return ""
}

func (x *AdminTransferRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AdminTransferRequest) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *AdminTransferRequest) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ResetMobileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetMobileResp) Reset() {
	*x = ResetMobileResp{}
	mi := &file_userrpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetMobileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetMobileResp) ProtoMessage() {}

func (x *ResetMobileResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetMobileResp.ProtoReflect.Descriptor instead.
func (*ResetMobileResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{1}
}

type SendSnsCodeReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *SendSnsCodeReqDto) Reset() {
	*x = SendSnsCodeReqDto{}
	mi := &file_userrpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSnsCodeReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSnsCodeReqDto) ProtoMessage() {}

func (x *SendSnsCodeReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSnsCodeReqDto.ProtoReflect.Descriptor instead.
func (*SendSnsCodeReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{2}
}

func (x *SendSnsCodeReqDto) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type WalletRecordItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username          string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Uid               string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Level             string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	AccountBalance    string `protobuf:"bytes,4,opt,name=accountBalance,proto3" json:"accountBalance,omitempty"`
	AccountCodeAmount string `protobuf:"bytes,5,opt,name=accountCodeAmount,proto3" json:"accountCodeAmount,omitempty"`
	BonusBalance      string `protobuf:"bytes,6,opt,name=bonusBalance,proto3" json:"bonusBalance,omitempty"`
	BonusCodeAmount   string `protobuf:"bytes,7,opt,name=bonusCodeAmount,proto3" json:"bonusCodeAmount,omitempty"`
	CommissionBalance string `protobuf:"bytes,8,opt,name=commissionBalance,proto3" json:"commissionBalance,omitempty"`
	Status            string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *WalletRecordItem) Reset() {
	*x = WalletRecordItem{}
	mi := &file_userrpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRecordItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRecordItem) ProtoMessage() {}

func (x *WalletRecordItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRecordItem.ProtoReflect.Descriptor instead.
func (*WalletRecordItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{3}
}

func (x *WalletRecordItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WalletRecordItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WalletRecordItem) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *WalletRecordItem) GetAccountBalance() string {
	if x != nil {
		return x.AccountBalance
	}
	return ""
}

func (x *WalletRecordItem) GetAccountCodeAmount() string {
	if x != nil {
		return x.AccountCodeAmount
	}
	return ""
}

func (x *WalletRecordItem) GetBonusBalance() string {
	if x != nil {
		return x.BonusBalance
	}
	return ""
}

func (x *WalletRecordItem) GetBonusCodeAmount() string {
	if x != nil {
		return x.BonusCodeAmount
	}
	return ""
}

func (x *WalletRecordItem) GetCommissionBalance() string {
	if x != nil {
		return x.CommissionBalance
	}
	return ""
}

func (x *WalletRecordItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WalletStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WalletStatisticsRequest) Reset() {
	*x = WalletStatisticsRequest{}
	mi := &file_userrpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletStatisticsRequest) ProtoMessage() {}

func (x *WalletStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletStatisticsRequest.ProtoReflect.Descriptor instead.
func (*WalletStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{4}
}

type AgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgResp) Reset() {
	*x = AgResp{}
	mi := &file_userrpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgResp) ProtoMessage() {}

func (x *AgResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgResp.ProtoReflect.Descriptor instead.
func (*AgResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{5}
}

// 定义一个空的请求消息类型
type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_userrpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{6}
}

func (x *LogoutRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SendResp) Reset() {
	*x = SendResp{}
	mi := &file_userrpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResp) ProtoMessage() {}

func (x *SendResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResp.ProtoReflect.Descriptor instead.
func (*SendResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{7}
}

func (x *SendResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BonusRecordExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BonusRecordExportResponse) Reset() {
	*x = BonusRecordExportResponse{}
	mi := &file_userrpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusRecordExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordExportResponse) ProtoMessage() {}

func (x *BonusRecordExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordExportResponse.ProtoReflect.Descriptor instead.
func (*BonusRecordExportResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{8}
}

func (x *BonusRecordExportResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BonusRecordExportResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *BonusRecordExportResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MemberShipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MemberShipResDto `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MemberShipResp) Reset() {
	*x = MemberShipResp{}
	mi := &file_userrpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberShipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberShipResp) ProtoMessage() {}

func (x *MemberShipResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberShipResp.ProtoReflect.Descriptor instead.
func (*MemberShipResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{9}
}

func (x *MemberShipResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MemberShipResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MemberShipResp) GetData() *MemberShipResDto {
	if x != nil {
		return x.Data
	}
	return nil
}

type MemberShipResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NextCode           string  `protobuf:"bytes,3,opt,name=nextCode,proto3" json:"nextCode,omitempty"`
	NextName           string  `protobuf:"bytes,4,opt,name=nextName,proto3" json:"nextName,omitempty"`
	ScoreUpgradeMin    int32   `protobuf:"varint,5,opt,name=scoreUpgradeMin,proto3" json:"scoreUpgradeMin,omitempty"`
	ScoreUpgradeMax    int32   `protobuf:"varint,6,opt,name=scoreUpgradeMax,proto3" json:"scoreUpgradeMax,omitempty"`
	Score              int32   `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	AccumulatedDeposit float64 `protobuf:"fixed64,8,opt,name=accumulatedDeposit,proto3" json:"accumulatedDeposit,omitempty"`
}

func (x *MemberShipResDto) Reset() {
	*x = MemberShipResDto{}
	mi := &file_userrpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberShipResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberShipResDto) ProtoMessage() {}

func (x *MemberShipResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberShipResDto.ProtoReflect.Descriptor instead.
func (*MemberShipResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{10}
}

func (x *MemberShipResDto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MemberShipResDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberShipResDto) GetNextCode() string {
	if x != nil {
		return x.NextCode
	}
	return ""
}

func (x *MemberShipResDto) GetNextName() string {
	if x != nil {
		return x.NextName
	}
	return ""
}

func (x *MemberShipResDto) GetScoreUpgradeMin() int32 {
	if x != nil {
		return x.ScoreUpgradeMin
	}
	return 0
}

func (x *MemberShipResDto) GetScoreUpgradeMax() int32 {
	if x != nil {
		return x.ScoreUpgradeMax
	}
	return 0
}

func (x *MemberShipResDto) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MemberShipResDto) GetAccumulatedDeposit() float64 {
	if x != nil {
		return x.AccumulatedDeposit
	}
	return 0
}

// UserLevelBenefitsResDto 消息类型
type UserLevelBenefitsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*UserLevelBenefitsResDto `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserLevelBenefitsResp) Reset() {
	*x = UserLevelBenefitsResp{}
	mi := &file_userrpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelBenefitsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelBenefitsResp) ProtoMessage() {}

func (x *UserLevelBenefitsResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelBenefitsResp.ProtoReflect.Descriptor instead.
func (*UserLevelBenefitsResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{11}
}

func (x *UserLevelBenefitsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserLevelBenefitsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserLevelBenefitsResp) GetData() []*UserLevelBenefitsResDto {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserLevelBenefitsResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DepositUpgrade  int32  `protobuf:"varint,3,opt,name=deposit_upgrade,json=depositUpgrade,proto3" json:"deposit_upgrade,omitempty"`
	ScoreRelegation int32  `protobuf:"varint,4,opt,name=score_relegation,json=scoreRelegation,proto3" json:"score_relegation,omitempty"`
	ScoreUpgrade    int32  `protobuf:"varint,5,opt,name=score_upgrade,json=scoreUpgrade,proto3" json:"score_upgrade,omitempty"`
	WithdrawalCount int32  `protobuf:"varint,6,opt,name=withdrawal_count,json=withdrawalCount,proto3" json:"withdrawal_count,omitempty"`
	WithdrawalCoin  int32  `protobuf:"varint,7,opt,name=withdrawal_coin,json=withdrawalCoin,proto3" json:"withdrawal_coin,omitempty"`
	BirthdayReward  int32  `protobuf:"varint,8,opt,name=birthday_reward,json=birthdayReward,proto3" json:"birthday_reward,omitempty"`
	WeekReward      int32  `protobuf:"varint,9,opt,name=week_reward,json=weekReward,proto3" json:"week_reward,omitempty"`
	MonthReward     int32  `protobuf:"varint,10,opt,name=month_reward,json=monthReward,proto3" json:"month_reward,omitempty"`
	UpgradeReward   int32  `protobuf:"varint,11,opt,name=upgrade_reward,json=upgradeReward,proto3" json:"upgrade_reward,omitempty"`
}

func (x *UserLevelBenefitsResDto) Reset() {
	*x = UserLevelBenefitsResDto{}
	mi := &file_userrpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelBenefitsResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelBenefitsResDto) ProtoMessage() {}

func (x *UserLevelBenefitsResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelBenefitsResDto.ProtoReflect.Descriptor instead.
func (*UserLevelBenefitsResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{12}
}

func (x *UserLevelBenefitsResDto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLevelBenefitsResDto) GetDepositUpgrade() int32 {
	if x != nil {
		return x.DepositUpgrade
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetScoreRelegation() int32 {
	if x != nil {
		return x.ScoreRelegation
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetScoreUpgrade() int32 {
	if x != nil {
		return x.ScoreUpgrade
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetWithdrawalCount() int32 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetWithdrawalCoin() int32 {
	if x != nil {
		return x.WithdrawalCoin
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetBirthdayReward() int32 {
	if x != nil {
		return x.BirthdayReward
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetWeekReward() int32 {
	if x != nil {
		return x.WeekReward
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetMonthReward() int32 {
	if x != nil {
		return x.MonthReward
	}
	return 0
}

func (x *UserLevelBenefitsResDto) GetUpgradeReward() int32 {
	if x != nil {
		return x.UpgradeReward
	}
	return 0
}

type ReceiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ReceiveResp) Reset() {
	*x = ReceiveResp{}
	mi := &file_userrpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveResp) ProtoMessage() {}

func (x *ReceiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveResp.ProtoReflect.Descriptor instead.
func (*ReceiveResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{13}
}

func (x *ReceiveResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReceiveResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type WalletRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *WalletRecordList `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WalletRecordResponse) Reset() {
	*x = WalletRecordResponse{}
	mi := &file_userrpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRecordResponse) ProtoMessage() {}

func (x *WalletRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRecordResponse.ProtoReflect.Descriptor instead.
func (*WalletRecordResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{14}
}

func (x *WalletRecordResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WalletRecordResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WalletRecordResponse) GetData() *WalletRecordList {
	if x != nil {
		return x.Data
	}
	return nil
}

type BonusRecordItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Uid          string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Level        string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	LadderName   string `protobuf:"bytes,4,opt,name=ladderName,proto3" json:"ladderName,omitempty"`
	Coin         string `protobuf:"bytes,5,opt,name=coin,proto3" json:"coin,omitempty"`
	FlowClaim    string `protobuf:"bytes,6,opt,name=flowClaim,proto3" json:"flowClaim,omitempty"`
	BetRequire   string `protobuf:"bytes,7,opt,name=betRequire,proto3" json:"betRequire,omitempty"`
	CreatedAt    int32  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	TransferTime int32  `protobuf:"varint,9,opt,name=transferTime,proto3" json:"transferTime,omitempty"`
	Status       string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BonusRecordItem) Reset() {
	*x = BonusRecordItem{}
	mi := &file_userrpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusRecordItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordItem) ProtoMessage() {}

func (x *BonusRecordItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordItem.ProtoReflect.Descriptor instead.
func (*BonusRecordItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{15}
}

func (x *BonusRecordItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BonusRecordItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BonusRecordItem) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *BonusRecordItem) GetLadderName() string {
	if x != nil {
		return x.LadderName
	}
	return ""
}

func (x *BonusRecordItem) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *BonusRecordItem) GetFlowClaim() string {
	if x != nil {
		return x.FlowClaim
	}
	return ""
}

func (x *BonusRecordItem) GetBetRequire() string {
	if x != nil {
		return x.BetRequire
	}
	return ""
}

func (x *BonusRecordItem) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BonusRecordItem) GetTransferTime() int32 {
	if x != nil {
		return x.TransferTime
	}
	return 0
}

func (x *BonusRecordItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// UserLevelBasicInfo 消息类型
type UserLevelBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UserLevelBasicInfo) Reset() {
	*x = UserLevelBasicInfo{}
	mi := &file_userrpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelBasicInfo) ProtoMessage() {}

func (x *UserLevelBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelBasicInfo.ProtoReflect.Descriptor instead.
func (*UserLevelBasicInfo) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{16}
}

func (x *UserLevelBasicInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// UserLevelRebateConfigDto 消息类型
type UserLevelRebateConfigDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RebateRate float64 `protobuf:"fixed64,3,opt,name=rebate_rate,json=rebateRate,proto3" json:"rebate_rate,omitempty"`
}

func (x *UserLevelRebateConfigDto) Reset() {
	*x = UserLevelRebateConfigDto{}
	mi := &file_userrpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelRebateConfigDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelRebateConfigDto) ProtoMessage() {}

func (x *UserLevelRebateConfigDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelRebateConfigDto.ProtoReflect.Descriptor instead.
func (*UserLevelRebateConfigDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{17}
}

func (x *UserLevelRebateConfigDto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelRebateConfigDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLevelRebateConfigDto) GetRebateRate() float64 {
	if x != nil {
		return x.RebateRate
	}
	return 0
}

type WalletRecordExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *WalletRecordExportResponse) Reset() {
	*x = WalletRecordExportResponse{}
	mi := &file_userrpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRecordExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRecordExportResponse) ProtoMessage() {}

func (x *WalletRecordExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRecordExportResponse.ProtoReflect.Descriptor instead.
func (*WalletRecordExportResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{18}
}

func (x *WalletRecordExportResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WalletRecordExportResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *WalletRecordExportResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ConfigResDto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfigResp) Reset() {
	*x = ConfigResp{}
	mi := &file_userrpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResp) ProtoMessage() {}

func (x *ConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResp.ProtoReflect.Descriptor instead.
func (*ConfigResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{19}
}

func (x *ConfigResp) GetData() []*ConfigResDto {
	if x != nil {
		return x.Data
	}
	return nil
}

type SendSesCodeReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email   string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	SmsType string `protobuf:"bytes,2,opt,name=smsType,proto3" json:"smsType,omitempty"`
}

func (x *SendSesCodeReqDto) Reset() {
	*x = SendSesCodeReqDto{}
	mi := &file_userrpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSesCodeReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSesCodeReqDto) ProtoMessage() {}

func (x *SendSesCodeReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSesCodeReqDto.ProtoReflect.Descriptor instead.
func (*SendSesCodeReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{20}
}

func (x *SendSesCodeReqDto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SendSesCodeReqDto) GetSmsType() string {
	if x != nil {
		return x.SmsType
	}
	return ""
}

type WalletRecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   string              `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      string              `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	List      []*WalletRecordItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total     string              `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	Pages     string              `protobuf:"bytes,5,opt,name=pages,proto3" json:"pages,omitempty"`
	ScrollId  string              `protobuf:"bytes,6,opt,name=scrollId,proto3" json:"scrollId,omitempty"`
	SortValue string              `protobuf:"bytes,7,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	SortId    string              `protobuf:"bytes,8,opt,name=sortId,proto3" json:"sortId,omitempty"`
}

func (x *WalletRecordList) Reset() {
	*x = WalletRecordList{}
	mi := &file_userrpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRecordList) ProtoMessage() {}

func (x *WalletRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRecordList.ProtoReflect.Descriptor instead.
func (*WalletRecordList) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{21}
}

func (x *WalletRecordList) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *WalletRecordList) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *WalletRecordList) GetList() []*WalletRecordItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WalletRecordList) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *WalletRecordList) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *WalletRecordList) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

func (x *WalletRecordList) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *WalletRecordList) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

type SendSmsCodeReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode   string `protobuf:"bytes,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Mobile     string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verifyCode,proto3" json:"verifyCode,omitempty"`
	Ip         string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	PointJson  string `protobuf:"bytes,5,opt,name=pointJson,proto3" json:"pointJson,omitempty"`
	Token      string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	SmsType    string `protobuf:"bytes,7,opt,name=smsType,proto3" json:"smsType,omitempty"`
	PromoCode  string `protobuf:"bytes,8,opt,name=promoCode,proto3" json:"promoCode,omitempty"`
	DeviceId   string `protobuf:"bytes,9,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Emobile    string `protobuf:"bytes,10,opt,name=emobile,proto3" json:"emobile,omitempty"`
	FbPid      string `protobuf:"bytes,11,opt,name=fb_pid,json=fbPid,proto3" json:"fb_pid,omitempty"`
	FbCid      string `protobuf:"bytes,12,opt,name=fb_cid,json=fbCid,proto3" json:"fb_cid,omitempty"`
	Grecaptcha string `protobuf:"bytes,13,opt,name=grecaptcha,proto3" json:"grecaptcha,omitempty"`
	ClientIP   string `protobuf:"bytes,14,opt,name=clientIP,proto3" json:"clientIP,omitempty"`
	UserType   int64  `protobuf:"varint,15,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
}

func (x *SendSmsCodeReqDto) Reset() {
	*x = SendSmsCodeReqDto{}
	mi := &file_userrpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSmsCodeReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSmsCodeReqDto) ProtoMessage() {}

func (x *SendSmsCodeReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSmsCodeReqDto.ProtoReflect.Descriptor instead.
func (*SendSmsCodeReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{22}
}

func (x *SendSmsCodeReqDto) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetPointJson() string {
	if x != nil {
		return x.PointJson
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetSmsType() string {
	if x != nil {
		return x.SmsType
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetEmobile() string {
	if x != nil {
		return x.Emobile
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetFbPid() string {
	if x != nil {
		return x.FbPid
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetFbCid() string {
	if x != nil {
		return x.FbCid
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetGrecaptcha() string {
	if x != nil {
		return x.Grecaptcha
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetClientIP() string {
	if x != nil {
		return x.ClientIP
	}
	return ""
}

func (x *SendSmsCodeReqDto) GetUserType() int64 {
	if x != nil {
		return x.UserType
	}
	return 0
}

type WalletStatisticsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAccount    string `protobuf:"bytes,1,opt,name=totalAccount,proto3" json:"totalAccount,omitempty"`
	TotalBonus      string `protobuf:"bytes,2,opt,name=totalBonus,proto3" json:"totalBonus,omitempty"`
	TotalCommission string `protobuf:"bytes,3,opt,name=totalCommission,proto3" json:"totalCommission,omitempty"`
}

func (x *WalletStatisticsData) Reset() {
	*x = WalletStatisticsData{}
	mi := &file_userrpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletStatisticsData) ProtoMessage() {}

func (x *WalletStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletStatisticsData.ProtoReflect.Descriptor instead.
func (*WalletStatisticsData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{23}
}

func (x *WalletStatisticsData) GetTotalAccount() string {
	if x != nil {
		return x.TotalAccount
	}
	return ""
}

func (x *WalletStatisticsData) GetTotalBonus() string {
	if x != nil {
		return x.TotalBonus
	}
	return ""
}

func (x *WalletStatisticsData) GetTotalCommission() string {
	if x != nil {
		return x.TotalCommission
	}
	return ""
}

// 定义一个空的请求消息类型
type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCommission string `protobuf:"bytes,3,opt,name=totalCommission,proto3" json:"totalCommission,omitempty"`
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_userrpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{24}
}

func (x *EmptyRequest) GetTotalCommission() string {
	if x != nil {
		return x.TotalCommission
	}
	return ""
}

// UserLevelResDto 消息类型
type UserLevelResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                   string                `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name                   string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon                   string                `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ScoreUpgradeMax        int32                 `protobuf:"varint,5,opt,name=score_upgrade_max,json=scoreUpgradeMax,proto3" json:"score_upgrade_max,omitempty"`
	DepositUpgradeMax      int32                 `protobuf:"varint,6,opt,name=deposit_upgrade_max,json=depositUpgradeMax,proto3" json:"deposit_upgrade_max,omitempty"`
	ScoreUpgradeMin        int32                 `protobuf:"varint,7,opt,name=score_upgrade_min,json=scoreUpgradeMin,proto3" json:"score_upgrade_min,omitempty"`
	DepositUpgradeMin      int32                 `protobuf:"varint,8,opt,name=deposit_upgrade_min,json=depositUpgradeMin,proto3" json:"deposit_upgrade_min,omitempty"`
	BetSum                 float64               `protobuf:"fixed64,9,opt,name=bet_sum,json=betSum,proto3" json:"bet_sum,omitempty"`
	DepositSum             float64               `protobuf:"fixed64,10,opt,name=deposit_sum,json=depositSum,proto3" json:"deposit_sum,omitempty"`
	NeedBet                float64               `protobuf:"fixed64,11,opt,name=need_bet,json=needBet,proto3" json:"need_bet,omitempty"`
	NeedDeposit            float64               `protobuf:"fixed64,12,opt,name=need_deposit,json=needDeposit,proto3" json:"need_deposit,omitempty"`
	WithdrawalCount        int32                 `protobuf:"varint,13,opt,name=withdrawal_count,json=withdrawalCount,proto3" json:"withdrawal_count,omitempty"`
	WithdrawalCoin         int32                 `protobuf:"varint,14,opt,name=withdrawal_coin,json=withdrawalCoin,proto3" json:"withdrawal_coin,omitempty"`
	BirthdayReward         int32                 `protobuf:"varint,15,opt,name=birthday_reward,json=birthdayReward,proto3" json:"birthday_reward,omitempty"`
	WeekReward             int32                 `protobuf:"varint,16,opt,name=week_reward,json=weekReward,proto3" json:"week_reward,omitempty"`
	MonthReward            int32                 `protobuf:"varint,17,opt,name=month_reward,json=monthReward,proto3" json:"month_reward,omitempty"`
	UpgradeReward          int32                 `protobuf:"varint,18,opt,name=upgrade_reward,json=upgradeReward,proto3" json:"upgrade_reward,omitempty"`
	BetPercentage          float64               `protobuf:"fixed64,19,opt,name=bet_percentage,json=betPercentage,proto3" json:"bet_percentage,omitempty"`
	DepositPercentage      float64               `protobuf:"fixed64,20,opt,name=deposit_percentage,json=depositPercentage,proto3" json:"deposit_percentage,omitempty"`
	UserLevelBasicInfoList []*UserLevelBasicInfo `protobuf:"bytes,21,rep,name=user_level_basic_info_list,json=userLevelBasicInfoList,proto3" json:"user_level_basic_info_list,omitempty"`
}

func (x *UserLevelResDto) Reset() {
	*x = UserLevelResDto{}
	mi := &file_userrpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelResDto) ProtoMessage() {}

func (x *UserLevelResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelResDto.ProtoReflect.Descriptor instead.
func (*UserLevelResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{25}
}

func (x *UserLevelResDto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelResDto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UserLevelResDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLevelResDto) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserLevelResDto) GetScoreUpgradeMax() int32 {
	if x != nil {
		return x.ScoreUpgradeMax
	}
	return 0
}

func (x *UserLevelResDto) GetDepositUpgradeMax() int32 {
	if x != nil {
		return x.DepositUpgradeMax
	}
	return 0
}

func (x *UserLevelResDto) GetScoreUpgradeMin() int32 {
	if x != nil {
		return x.ScoreUpgradeMin
	}
	return 0
}

func (x *UserLevelResDto) GetDepositUpgradeMin() int32 {
	if x != nil {
		return x.DepositUpgradeMin
	}
	return 0
}

func (x *UserLevelResDto) GetBetSum() float64 {
	if x != nil {
		return x.BetSum
	}
	return 0
}

func (x *UserLevelResDto) GetDepositSum() float64 {
	if x != nil {
		return x.DepositSum
	}
	return 0
}

func (x *UserLevelResDto) GetNeedBet() float64 {
	if x != nil {
		return x.NeedBet
	}
	return 0
}

func (x *UserLevelResDto) GetNeedDeposit() float64 {
	if x != nil {
		return x.NeedDeposit
	}
	return 0
}

func (x *UserLevelResDto) GetWithdrawalCount() int32 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *UserLevelResDto) GetWithdrawalCoin() int32 {
	if x != nil {
		return x.WithdrawalCoin
	}
	return 0
}

func (x *UserLevelResDto) GetBirthdayReward() int32 {
	if x != nil {
		return x.BirthdayReward
	}
	return 0
}

func (x *UserLevelResDto) GetWeekReward() int32 {
	if x != nil {
		return x.WeekReward
	}
	return 0
}

func (x *UserLevelResDto) GetMonthReward() int32 {
	if x != nil {
		return x.MonthReward
	}
	return 0
}

func (x *UserLevelResDto) GetUpgradeReward() int32 {
	if x != nil {
		return x.UpgradeReward
	}
	return 0
}

func (x *UserLevelResDto) GetBetPercentage() float64 {
	if x != nil {
		return x.BetPercentage
	}
	return 0
}

func (x *UserLevelResDto) GetDepositPercentage() float64 {
	if x != nil {
		return x.DepositPercentage
	}
	return 0
}

func (x *UserLevelResDto) GetUserLevelBasicInfoList() []*UserLevelBasicInfo {
	if x != nil {
		return x.UserLevelBasicInfoList
	}
	return nil
}

type ResetEmailReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verifyCode,proto3" json:"verifyCode,omitempty"`
}

func (x *ResetEmailReqDto) Reset() {
	*x = ResetEmailReqDto{}
	mi := &file_userrpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetEmailReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetEmailReqDto) ProtoMessage() {}

func (x *ResetEmailReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetEmailReqDto.ProtoReflect.Descriptor instead.
func (*ResetEmailReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{26}
}

func (x *ResetEmailReqDto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ResetEmailReqDto) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ResetEmailReqDto) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

type WalletRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Level    string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *WalletRecordData) Reset() {
	*x = WalletRecordData{}
	mi := &file_userrpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRecordData) ProtoMessage() {}

func (x *WalletRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRecordData.ProtoReflect.Descriptor instead.
func (*WalletRecordData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{27}
}

func (x *WalletRecordData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WalletRecordData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WalletRecordData) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *WalletRecordData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateProfileReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar    string `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	RealName  string `protobuf:"bytes,2,opt,name=realName,proto3" json:"realName,omitempty"`
	Birthday  string `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Sex       int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	Address   string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateProfileReqDto) Reset() {
	*x = UpdateProfileReqDto{}
	mi := &file_userrpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProfileReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileReqDto) ProtoMessage() {}

func (x *UpdateProfileReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileReqDto.ProtoReflect.Descriptor instead.
func (*UpdateProfileReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateProfileReqDto) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UpdateProfileReqDto) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UpdateProfileReqDto) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UpdateProfileReqDto) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UpdateProfileReqDto) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UpdateProfileReqDto) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 定义一个空的响应消息类型
type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_userrpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{29}
}

func (x *LogoutResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserProfileRes) Reset() {
	*x = UserProfileRes{}
	mi := &file_userrpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRes) ProtoMessage() {}

func (x *UserProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRes.ProtoReflect.Descriptor instead.
func (*UserProfileRes) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{30}
}

type AdminTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data bool   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminTransferResponse) Reset() {
	*x = AdminTransferResponse{}
	mi := &file_userrpc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTransferResponse) ProtoMessage() {}

func (x *AdminTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTransferResponse.ProtoReflect.Descriptor instead.
func (*AdminTransferResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{31}
}

func (x *AdminTransferResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminTransferResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AdminTransferResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type UserStatusInfoDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password         string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	AreaCode         string `protobuf:"bytes,2,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Mobile           string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	GoogleCodeStatus int32  `protobuf:"varint,4,opt,name=googleCodeStatus,proto3" json:"googleCodeStatus,omitempty"`
	KycStatus        int32  `protobuf:"varint,5,opt,name=kycStatus,proto3" json:"kycStatus,omitempty"`
	GoogleLoginEmail string `protobuf:"bytes,6,opt,name=googleLoginEmail,proto3" json:"googleLoginEmail,omitempty"`
	FacebookUserId   string `protobuf:"bytes,7,opt,name=facebookUserId,proto3" json:"facebookUserId,omitempty"`
}

func (x *UserStatusInfoDto) Reset() {
	*x = UserStatusInfoDto{}
	mi := &file_userrpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserStatusInfoDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusInfoDto) ProtoMessage() {}

func (x *UserStatusInfoDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusInfoDto.ProtoReflect.Descriptor instead.
func (*UserStatusInfoDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{32}
}

func (x *UserStatusInfoDto) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserStatusInfoDto) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *UserStatusInfoDto) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserStatusInfoDto) GetGoogleCodeStatus() int32 {
	if x != nil {
		return x.GoogleCodeStatus
	}
	return 0
}

func (x *UserStatusInfoDto) GetKycStatus() int32 {
	if x != nil {
		return x.KycStatus
	}
	return 0
}

func (x *UserStatusInfoDto) GetGoogleLoginEmail() string {
	if x != nil {
		return x.GoogleLoginEmail
	}
	return ""
}

func (x *UserStatusInfoDto) GetFacebookUserId() string {
	if x != nil {
		return x.FacebookUserId
	}
	return ""
}

type AgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgRes) Reset() {
	*x = AgRes{}
	mi := &file_userrpc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgRes) ProtoMessage() {}

func (x *AgRes) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgRes.ProtoReflect.Descriptor instead.
func (*AgRes) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{33}
}

type BonusRecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   string             `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      string             `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	List      []*BonusRecordItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total     string             `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	Pages     string             `protobuf:"bytes,5,opt,name=pages,proto3" json:"pages,omitempty"`
	ScrollId  string             `protobuf:"bytes,6,opt,name=scrollId,proto3" json:"scrollId,omitempty"`
	SortValue string             `protobuf:"bytes,7,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	SortId    string             `protobuf:"bytes,8,opt,name=sortId,proto3" json:"sortId,omitempty"`
}

func (x *BonusRecordList) Reset() {
	*x = BonusRecordList{}
	mi := &file_userrpc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordList) ProtoMessage() {}

func (x *BonusRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordList.ProtoReflect.Descriptor instead.
func (*BonusRecordList) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{34}
}

func (x *BonusRecordList) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *BonusRecordList) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *BonusRecordList) GetList() []*BonusRecordItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *BonusRecordList) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *BonusRecordList) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *BonusRecordList) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

func (x *BonusRecordList) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *BonusRecordList) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

type BonusRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *BonusRecordList `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BonusRecordResponse) Reset() {
	*x = BonusRecordResponse{}
	mi := &file_userrpc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordResponse) ProtoMessage() {}

func (x *BonusRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordResponse.ProtoReflect.Descriptor instead.
func (*BonusRecordResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{35}
}

func (x *BonusRecordResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BonusRecordResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BonusRecordResponse) GetData() *BonusRecordList {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserCoinList `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCoinResponse) Reset() {
	*x = UserCoinResponse{}
	mi := &file_userrpc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinResponse) ProtoMessage() {}

func (x *UserCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinResponse.ProtoReflect.Descriptor instead.
func (*UserCoinResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{36}
}

func (x *UserCoinResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserCoinResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserCoinResponse) GetData() *UserCoinList {
	if x != nil {
		return x.Data
	}
	return nil
}

// UserLevelRebateConfigTableDto 消息类型
type UserLevelRebateConfigTableDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId             int32                       `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserLevelRebateList []*UserLevelRebateConfigDto `protobuf:"bytes,2,rep,name=user_level_rebate_list,json=userLevelRebateList,proto3" json:"user_level_rebate_list,omitempty"`
}

func (x *UserLevelRebateConfigTableDto) Reset() {
	*x = UserLevelRebateConfigTableDto{}
	mi := &file_userrpc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelRebateConfigTableDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelRebateConfigTableDto) ProtoMessage() {}

func (x *UserLevelRebateConfigTableDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelRebateConfigTableDto.ProtoReflect.Descriptor instead.
func (*UserLevelRebateConfigTableDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{37}
}

func (x *UserLevelRebateConfigTableDto) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserLevelRebateConfigTableDto) GetUserLevelRebateList() []*UserLevelRebateConfigDto {
	if x != nil {
		return x.UserLevelRebateList
	}
	return nil
}

type WalletStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *WalletStatisticsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WalletStatisticsResponse) Reset() {
	*x = WalletStatisticsResponse{}
	mi := &file_userrpc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletStatisticsResponse) ProtoMessage() {}

func (x *WalletStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletStatisticsResponse.ProtoReflect.Descriptor instead.
func (*WalletStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{38}
}

func (x *WalletStatisticsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WalletStatisticsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WalletStatisticsResponse) GetData() *WalletStatisticsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListLevelDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon             string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ScoreUpgradeRate int32  `protobuf:"varint,5,opt,name=scoreUpgradeRate,proto3" json:"scoreUpgradeRate,omitempty"`
	ScoreUpgradeMin  int32  `protobuf:"varint,6,opt,name=scoreUpgradeMin,proto3" json:"scoreUpgradeMin,omitempty"`
	ScoreUpgradeMax  int32  `protobuf:"varint,7,opt,name=scoreUpgradeMax,proto3" json:"scoreUpgradeMax,omitempty"`
	ScoreRelegation  int32  `protobuf:"varint,8,opt,name=scoreRelegation,proto3" json:"scoreRelegation,omitempty"`
}

func (x *ListLevelDto) Reset() {
	*x = ListLevelDto{}
	mi := &file_userrpc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLevelDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLevelDto) ProtoMessage() {}

func (x *ListLevelDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLevelDto.ProtoReflect.Descriptor instead.
func (*ListLevelDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{39}
}

func (x *ListLevelDto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListLevelDto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ListLevelDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListLevelDto) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListLevelDto) GetScoreUpgradeRate() int32 {
	if x != nil {
		return x.ScoreUpgradeRate
	}
	return 0
}

func (x *ListLevelDto) GetScoreUpgradeMin() int32 {
	if x != nil {
		return x.ScoreUpgradeMin
	}
	return 0
}

func (x *ListLevelDto) GetScoreUpgradeMax() int32 {
	if x != nil {
		return x.ScoreUpgradeMax
	}
	return 0
}

func (x *ListLevelDto) GetScoreRelegation() int32 {
	if x != nil {
		return x.ScoreRelegation
	}
	return 0
}

type SetPasswordReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetPasswordReqDto) Reset() {
	*x = SetPasswordReqDto{}
	mi := &file_userrpc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPasswordReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordReqDto) ProtoMessage() {}

func (x *SetPasswordReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordReqDto.ProtoReflect.Descriptor instead.
func (*SetPasswordReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{40}
}

func (x *SetPasswordReqDto) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 会员等级信息
type MemberShipLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MemberShipLevelData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MemberShipLevelResp) Reset() {
	*x = MemberShipLevelResp{}
	mi := &file_userrpc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberShipLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberShipLevelResp) ProtoMessage() {}

func (x *MemberShipLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberShipLevelResp.ProtoReflect.Descriptor instead.
func (*MemberShipLevelResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{41}
}

func (x *MemberShipLevelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MemberShipLevelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MemberShipLevelResp) GetData() *MemberShipLevelData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MemberShipLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MemberShipLevelResDto `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemberShipLevelData) Reset() {
	*x = MemberShipLevelData{}
	mi := &file_userrpc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberShipLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberShipLevelData) ProtoMessage() {}

func (x *MemberShipLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberShipLevelData.ProtoReflect.Descriptor instead.
func (*MemberShipLevelData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{42}
}

func (x *MemberShipLevelData) GetList() []*MemberShipLevelResDto {
	if x != nil {
		return x.List
	}
	return nil
}

type MemberShipLevelResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name             string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon             string  `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Points           int32   `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	PointsMultiplier float64 `protobuf:"fixed64,6,opt,name=pointsMultiplier,proto3" json:"pointsMultiplier,omitempty"`
	TierReward       int32   `protobuf:"varint,7,opt,name=tierReward,proto3" json:"tierReward,omitempty"`
}

func (x *MemberShipLevelResDto) Reset() {
	*x = MemberShipLevelResDto{}
	mi := &file_userrpc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberShipLevelResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberShipLevelResDto) ProtoMessage() {}

func (x *MemberShipLevelResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberShipLevelResDto.ProtoReflect.Descriptor instead.
func (*MemberShipLevelResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{43}
}

func (x *MemberShipLevelResDto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberShipLevelResDto) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MemberShipLevelResDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberShipLevelResDto) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MemberShipLevelResDto) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *MemberShipLevelResDto) GetPointsMultiplier() float64 {
	if x != nil {
		return x.PointsMultiplier
	}
	return 0
}

func (x *MemberShipLevelResDto) GetTierReward() int32 {
	if x != nil {
		return x.TierReward
	}
	return 0
}

// UserLevelInfo 消息类型
type UserLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon            string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	ScoreUpgrade    int32  `protobuf:"varint,4,opt,name=score_upgrade,json=scoreUpgrade,proto3" json:"score_upgrade,omitempty"`
	ScoreRelegation int32  `protobuf:"varint,5,opt,name=score_relegation,json=scoreRelegation,proto3" json:"score_relegation,omitempty"`
	RelegationDay   int32  `protobuf:"varint,6,opt,name=relegation_day,json=relegationDay,proto3" json:"relegation_day,omitempty"`
}

func (x *UserLevelInfo) Reset() {
	*x = UserLevelInfo{}
	mi := &file_userrpc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelInfo) ProtoMessage() {}

func (x *UserLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelInfo.ProtoReflect.Descriptor instead.
func (*UserLevelInfo) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{44}
}

func (x *UserLevelInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLevelInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserLevelInfo) GetScoreUpgrade() int32 {
	if x != nil {
		return x.ScoreUpgrade
	}
	return 0
}

func (x *UserLevelInfo) GetScoreRelegation() int32 {
	if x != nil {
		return x.ScoreRelegation
	}
	return 0
}

func (x *UserLevelInfo) GetRelegationDay() int32 {
	if x != nil {
		return x.RelegationDay
	}
	return 0
}

type ForgotPasswordReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode   string `protobuf:"bytes,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Mobile     string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	VerifyCode string `protobuf:"bytes,4,opt,name=verifyCode,proto3" json:"verifyCode,omitempty"`
	Email      string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ForgotPasswordReqDto) Reset() {
	*x = ForgotPasswordReqDto{}
	mi := &file_userrpc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForgotPasswordReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotPasswordReqDto) ProtoMessage() {}

func (x *ForgotPasswordReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotPasswordReqDto.ProtoReflect.Descriptor instead.
func (*ForgotPasswordReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{45}
}

func (x *ForgotPasswordReqDto) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *ForgotPasswordReqDto) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ForgotPasswordReqDto) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ForgotPasswordReqDto) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *ForgotPasswordReqDto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type BetByTokenResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetByToken string `protobuf:"bytes,1,opt,name=BetByToken,proto3" json:"BetByToken,omitempty"`
}

func (x *BetByTokenResDto) Reset() {
	*x = BetByTokenResDto{}
	mi := &file_userrpc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetByTokenResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByTokenResDto) ProtoMessage() {}

func (x *BetByTokenResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByTokenResDto.ProtoReflect.Descriptor instead.
func (*BetByTokenResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{46}
}

func (x *BetByTokenResDto) GetBetByToken() string {
	if x != nil {
		return x.BetByToken
	}
	return ""
}

// UserLevelWithdrawalInfo 消息类型
type UserLevelWithdrawalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WithdrawalCount int32  `protobuf:"varint,3,opt,name=withdrawal_count,json=withdrawalCount,proto3" json:"withdrawal_count,omitempty"`
	WithdrawalCoin  int32  `protobuf:"varint,4,opt,name=withdrawal_coin,json=withdrawalCoin,proto3" json:"withdrawal_coin,omitempty"`
}

func (x *UserLevelWithdrawalInfo) Reset() {
	*x = UserLevelWithdrawalInfo{}
	mi := &file_userrpc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelWithdrawalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelWithdrawalInfo) ProtoMessage() {}

func (x *UserLevelWithdrawalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelWithdrawalInfo.ProtoReflect.Descriptor instead.
func (*UserLevelWithdrawalInfo) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{47}
}

func (x *UserLevelWithdrawalInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelWithdrawalInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLevelWithdrawalInfo) GetWithdrawalCount() int32 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *UserLevelWithdrawalInfo) GetWithdrawalCoin() int32 {
	if x != nil {
		return x.WithdrawalCoin
	}
	return 0
}

type ResetPasswordReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password    string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	OldPassword string `protobuf:"bytes,2,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
}

func (x *ResetPasswordReqDto) Reset() {
	*x = ResetPasswordReqDto{}
	mi := &file_userrpc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetPasswordReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordReqDto) ProtoMessage() {}

func (x *ResetPasswordReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordReqDto.ProtoReflect.Descriptor instead.
func (*ResetPasswordReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{48}
}

func (x *ResetPasswordReqDto) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ResetPasswordReqDto) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

type ResetPasswordReqDtoNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Uid      int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ResetPasswordReqDtoNew) Reset() {
	*x = ResetPasswordReqDtoNew{}
	mi := &file_userrpc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetPasswordReqDtoNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordReqDtoNew) ProtoMessage() {}

func (x *ResetPasswordReqDtoNew) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordReqDtoNew.ProtoReflect.Descriptor instead.
func (*ResetPasswordReqDtoNew) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{49}
}

func (x *ResetPasswordReqDtoNew) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ResetPasswordReqDtoNew) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// Currency 消息类型
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	AccumulatedDeposit int32  `protobuf:"varint,2,opt,name=accumulated_deposit,json=accumulatedDeposit,proto3" json:"accumulated_deposit,omitempty"`
	ScoreUpgradeMin    int32  `protobuf:"varint,3,opt,name=score_upgrade_min,json=scoreUpgradeMin,proto3" json:"score_upgrade_min,omitempty"`
	ScoreUpgradeMax    int32  `protobuf:"varint,4,opt,name=score_upgrade_max,json=scoreUpgradeMax,proto3" json:"score_upgrade_max,omitempty"`
	Score              int32  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_userrpc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{50}
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetAccumulatedDeposit() int32 {
	if x != nil {
		return x.AccumulatedDeposit
	}
	return 0
}

func (x *Currency) GetScoreUpgradeMin() int32 {
	if x != nil {
		return x.ScoreUpgradeMin
	}
	return 0
}

func (x *Currency) GetScoreUpgradeMax() int32 {
	if x != nil {
		return x.ScoreUpgradeMax
	}
	return 0
}

func (x *Currency) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// UserDetailsResDto 消息类型
type UserDetailsResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLevelInfoList         []*UserLevelInfo            `protobuf:"bytes,1,rep,name=user_level_info_list,json=userLevelInfoList,proto3" json:"user_level_info_list,omitempty"`
	UserLevelRebateConfigList []*UserLevelRebateConfigDto `protobuf:"bytes,2,rep,name=user_level_rebate_config_list,json=userLevelRebateConfigList,proto3" json:"user_level_rebate_config_list,omitempty"`
	UserLevelWithdrawalInfo   []*UserLevelWithdrawalInfo  `protobuf:"bytes,3,rep,name=user_level_withdrawal_info,json=userLevelWithdrawalInfo,proto3" json:"user_level_withdrawal_info,omitempty"`
}

func (x *UserDetailsResDto) Reset() {
	*x = UserDetailsResDto{}
	mi := &file_userrpc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDetailsResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailsResDto) ProtoMessage() {}

func (x *UserDetailsResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailsResDto.ProtoReflect.Descriptor instead.
func (*UserDetailsResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{51}
}

func (x *UserDetailsResDto) GetUserLevelInfoList() []*UserLevelInfo {
	if x != nil {
		return x.UserLevelInfoList
	}
	return nil
}

func (x *UserDetailsResDto) GetUserLevelRebateConfigList() []*UserLevelRebateConfigDto {
	if x != nil {
		return x.UserLevelRebateConfigList
	}
	return nil
}

func (x *UserDetailsResDto) GetUserLevelWithdrawalInfo() []*UserLevelWithdrawalInfo {
	if x != nil {
		return x.UserLevelWithdrawalInfo
	}
	return nil
}

type UserLevelRewardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*UserLevelRewardResDto `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserLevelRewardResp) Reset() {
	*x = UserLevelRewardResp{}
	mi := &file_userrpc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelRewardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelRewardResp) ProtoMessage() {}

func (x *UserLevelRewardResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelRewardResp.ProtoReflect.Descriptor instead.
func (*UserLevelRewardResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{52}
}

func (x *UserLevelRewardResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserLevelRewardResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserLevelRewardResp) GetData() []*UserLevelRewardResDto {
	if x != nil {
		return x.Data
	}
	return nil
}

// UserLevelRewardResDto 消息类型
type UserLevelRewardResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReceiveAt int32  `protobuf:"varint,2,opt,name=receive_at,json=receiveAt,proto3" json:"receive_at,omitempty"`
	Category  int32  `protobuf:"varint,3,opt,name=category,proto3" json:"category,omitempty"`
	Coin      string `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin,omitempty"`
	Status    int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserLevelRewardResDto) Reset() {
	*x = UserLevelRewardResDto{}
	mi := &file_userrpc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelRewardResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelRewardResDto) ProtoMessage() {}

func (x *UserLevelRewardResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelRewardResDto.ProtoReflect.Descriptor instead.
func (*UserLevelRewardResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{53}
}

func (x *UserLevelRewardResDto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLevelRewardResDto) GetReceiveAt() int32 {
	if x != nil {
		return x.ReceiveAt
	}
	return 0
}

func (x *UserLevelRewardResDto) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *UserLevelRewardResDto) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *UserLevelRewardResDto) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type LoginData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username          string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	MerchantId        int64   `protobuf:"varint,3,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	Avatar            string  `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Coin              string  `protobuf:"bytes,5,opt,name=coin,proto3" json:"coin,omitempty"`
	CodeAmount        string  `protobuf:"bytes,6,opt,name=codeAmount,proto3" json:"codeAmount,omitempty"`
	Fcoin             string  `protobuf:"bytes,7,opt,name=fcoin,proto3" json:"fcoin,omitempty"`
	CoinCommission    string  `protobuf:"bytes,8,opt,name=coinCommission,proto3" json:"coinCommission,omitempty"`
	LevelId           int64   `protobuf:"varint,9,opt,name=levelId,proto3" json:"levelId,omitempty"`
	RealName          string  `protobuf:"bytes,10,opt,name=realName,proto3" json:"realName,omitempty"`
	Signature         string  `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	Birthday          string  `protobuf:"bytes,12,opt,name=birthday,proto3" json:"birthday,omitempty"`
	AreaCode          string  `protobuf:"bytes,13,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Mobile            string  `protobuf:"bytes,14,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email             string  `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`
	Sex               int32   `protobuf:"varint,16,opt,name=sex,proto3" json:"sex,omitempty"`
	Role              int32   `protobuf:"varint,17,opt,name=role,proto3" json:"role,omitempty"`
	IsPromoter        int32   `protobuf:"varint,18,opt,name=isPromoter,proto3" json:"isPromoter,omitempty"`
	BindBank          int32   `protobuf:"varint,19,opt,name=bindBank,proto3" json:"bindBank,omitempty"`
	Score             int32   `protobuf:"varint,20,opt,name=score,proto3" json:"score,omitempty"`
	PromoCode         string  `protobuf:"bytes,21,opt,name=promoCode,proto3" json:"promoCode,omitempty"`
	ApiToken          string  `protobuf:"bytes,22,opt,name=apiToken,proto3" json:"apiToken,omitempty"`
	Address           string  `protobuf:"bytes,23,opt,name=address,proto3" json:"address,omitempty"`
	PasswordHash      string  `protobuf:"bytes,24,opt,name=passwordHash,proto3" json:"passwordHash,omitempty"`
	PasswordCoin      string  `protobuf:"bytes,25,opt,name=passwordCoin,proto3" json:"passwordCoin,omitempty"`
	CreatedAt         int64   `protobuf:"varint,26,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Status            int32   `protobuf:"varint,27,opt,name=status,proto3" json:"status,omitempty"`
	UpgradeBalance    string  `protobuf:"bytes,28,opt,name=upgradeBalance,proto3" json:"upgradeBalance,omitempty"`
	GoogleCodeStatus  int32   `protobuf:"varint,29,opt,name=googleCodeStatus,proto3" json:"googleCodeStatus,omitempty"`
	KycStatus         int32   `protobuf:"varint,30,opt,name=kycStatus,proto3" json:"kycStatus,omitempty"`
	VipLevelCode      string  `protobuf:"bytes,31,opt,name=vipLevelCode,proto3" json:"vipLevelCode,omitempty"`
	VipLevelCodeIcon  string  `protobuf:"bytes,32,opt,name=vipLevelCodeIcon,proto3" json:"vipLevelCodeIcon,omitempty"`
	IsHashB           int32   `protobuf:"varint,33,opt,name=isHashB,proto3" json:"isHashB,omitempty"`
	LastLoginDeviceId string  `protobuf:"bytes,34,opt,name=lastLoginDeviceId,proto3" json:"lastLoginDeviceId,omitempty"`
	BonusCoin         string  `protobuf:"bytes,35,opt,name=bonusCoin,proto3" json:"bonusCoin,omitempty"`
	BonusCodeAmount   string  `protobuf:"bytes,36,opt,name=bonusCodeAmount,proto3" json:"bonusCodeAmount,omitempty"`
	RefreshToken      string  `protobuf:"bytes,37,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	ExpireTime        int32   `protobuf:"varint,38,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	BankName          string  `protobuf:"bytes,39,opt,name=bankName,proto3" json:"bankName,omitempty"`
	BankAddress       string  `protobuf:"bytes,40,opt,name=bankAddress,proto3" json:"bankAddress,omitempty"`
	BankId            int64   `protobuf:"varint,41,opt,name=bankId,proto3" json:"bankId,omitempty"`
	MinCoin           float32 `protobuf:"fixed32,42,opt,name=minCoin,proto3" json:"minCoin,omitempty"` //最小领取金额
	BankCode          string  `protobuf:"bytes,43,opt,name=bankCode,proto3" json:"bankCode,omitempty"`
}

func (x *LoginData) Reset() {
	*x = LoginData{}
	mi := &file_userrpc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginData) ProtoMessage() {}

func (x *LoginData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginData.ProtoReflect.Descriptor instead.
func (*LoginData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{54}
}

func (x *LoginData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginData) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *LoginData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LoginData) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *LoginData) GetCodeAmount() string {
	if x != nil {
		return x.CodeAmount
	}
	return ""
}

func (x *LoginData) GetFcoin() string {
	if x != nil {
		return x.Fcoin
	}
	return ""
}

func (x *LoginData) GetCoinCommission() string {
	if x != nil {
		return x.CoinCommission
	}
	return ""
}

func (x *LoginData) GetLevelId() int64 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *LoginData) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *LoginData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *LoginData) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *LoginData) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *LoginData) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *LoginData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *LoginData) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *LoginData) GetIsPromoter() int32 {
	if x != nil {
		return x.IsPromoter
	}
	return 0
}

func (x *LoginData) GetBindBank() int32 {
	if x != nil {
		return x.BindBank
	}
	return 0
}

func (x *LoginData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LoginData) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *LoginData) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *LoginData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LoginData) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *LoginData) GetPasswordCoin() string {
	if x != nil {
		return x.PasswordCoin
	}
	return ""
}

func (x *LoginData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LoginData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LoginData) GetUpgradeBalance() string {
	if x != nil {
		return x.UpgradeBalance
	}
	return ""
}

func (x *LoginData) GetGoogleCodeStatus() int32 {
	if x != nil {
		return x.GoogleCodeStatus
	}
	return 0
}

func (x *LoginData) GetKycStatus() int32 {
	if x != nil {
		return x.KycStatus
	}
	return 0
}

func (x *LoginData) GetVipLevelCode() string {
	if x != nil {
		return x.VipLevelCode
	}
	return ""
}

func (x *LoginData) GetVipLevelCodeIcon() string {
	if x != nil {
		return x.VipLevelCodeIcon
	}
	return ""
}

func (x *LoginData) GetIsHashB() int32 {
	if x != nil {
		return x.IsHashB
	}
	return 0
}

func (x *LoginData) GetLastLoginDeviceId() string {
	if x != nil {
		return x.LastLoginDeviceId
	}
	return ""
}

func (x *LoginData) GetBonusCoin() string {
	if x != nil {
		return x.BonusCoin
	}
	return ""
}

func (x *LoginData) GetBonusCodeAmount() string {
	if x != nil {
		return x.BonusCodeAmount
	}
	return ""
}

func (x *LoginData) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginData) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *LoginData) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *LoginData) GetBankAddress() string {
	if x != nil {
		return x.BankAddress
	}
	return ""
}

func (x *LoginData) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *LoginData) GetMinCoin() float32 {
	if x != nil {
		return x.MinCoin
	}
	return 0
}

func (x *LoginData) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type RegisterReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username         string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email            string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AreaCode         string `protobuf:"bytes,4,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Mobile           string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Link             string `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	PromoCode        string `protobuf:"bytes,7,opt,name=promoCode,proto3" json:"promoCode,omitempty"`
	VerifyCode       string `protobuf:"bytes,8,opt,name=verifyCode,proto3" json:"verifyCode,omitempty"`
	Ip               string `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
	Host             string `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	PointJson        string `protobuf:"bytes,11,opt,name=pointJson,proto3" json:"pointJson,omitempty"`
	Token            string `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	GoogleLoginEmail string `protobuf:"bytes,13,opt,name=googleLoginEmail,proto3" json:"googleLoginEmail,omitempty"`
	FacebookUserId   string `protobuf:"bytes,14,opt,name=facebookUserId,proto3" json:"facebookUserId,omitempty"`
	DeviceId         string `protobuf:"bytes,15,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	FbPid            string `protobuf:"bytes,16,opt,name=fb_pid,json=fbPid,proto3" json:"fb_pid,omitempty"`
	FbCid            string `protobuf:"bytes,17,opt,name=fb_cid,json=fbCid,proto3" json:"fb_cid,omitempty"`
	GoogleSubID      string `protobuf:"bytes,18,opt,name=googleSubID,proto3" json:"googleSubID,omitempty"`
	FacebookSubID    string `protobuf:"bytes,19,opt,name=facebookSubID,proto3" json:"facebookSubID,omitempty"`
	UserType         int64  `protobuf:"varint,20,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
}

func (x *RegisterReqDto) Reset() {
	*x = RegisterReqDto{}
	mi := &file_userrpc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReqDto) ProtoMessage() {}

func (x *RegisterReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReqDto.ProtoReflect.Descriptor instead.
func (*RegisterReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{55}
}

func (x *RegisterReqDto) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterReqDto) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterReqDto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterReqDto) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *RegisterReqDto) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *RegisterReqDto) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *RegisterReqDto) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *RegisterReqDto) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *RegisterReqDto) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegisterReqDto) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RegisterReqDto) GetPointJson() string {
	if x != nil {
		return x.PointJson
	}
	return ""
}

func (x *RegisterReqDto) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterReqDto) GetGoogleLoginEmail() string {
	if x != nil {
		return x.GoogleLoginEmail
	}
	return ""
}

func (x *RegisterReqDto) GetFacebookUserId() string {
	if x != nil {
		return x.FacebookUserId
	}
	return ""
}

func (x *RegisterReqDto) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RegisterReqDto) GetFbPid() string {
	if x != nil {
		return x.FbPid
	}
	return ""
}

func (x *RegisterReqDto) GetFbCid() string {
	if x != nil {
		return x.FbCid
	}
	return ""
}

func (x *RegisterReqDto) GetGoogleSubID() string {
	if x != nil {
		return x.GoogleSubID
	}
	return ""
}

func (x *RegisterReqDto) GetFacebookSubID() string {
	if x != nil {
		return x.FacebookSubID
	}
	return ""
}

func (x *RegisterReqDto) GetUserType() int64 {
	if x != nil {
		return x.UserType
	}
	return 0
}

type UserCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserCoinRequest) Reset() {
	*x = UserCoinRequest{}
	mi := &file_userrpc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinRequest) ProtoMessage() {}

func (x *UserCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinRequest.ProtoReflect.Descriptor instead.
func (*UserCoinRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{56}
}

func (x *UserCoinRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserCoinRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type ReceiveReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReceiveReqDto) Reset() {
	*x = ReceiveReqDto{}
	mi := &file_userrpc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveReqDto) ProtoMessage() {}

func (x *ReceiveReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveReqDto.ProtoReflect.Descriptor instead.
func (*ReceiveReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{57}
}

func (x *ReceiveReqDto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WalletRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int32             `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data      *WalletRecordData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	SortField []string          `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey   string            `protobuf:"bytes,5,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
}

func (x *WalletRecordRequest) Reset() {
	*x = WalletRecordRequest{}
	mi := &file_userrpc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRecordRequest) ProtoMessage() {}

func (x *WalletRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRecordRequest.ProtoReflect.Descriptor instead.
func (*WalletRecordRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{58}
}

func (x *WalletRecordRequest) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *WalletRecordRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WalletRecordRequest) GetData() *WalletRecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WalletRecordRequest) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *WalletRecordRequest) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LoginData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code int32      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_userrpc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{59}
}

func (x *LoginResponse) GetData() *LoginData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LoginResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserCoinList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bonus             float64 `protobuf:"fixed64,1,opt,name=bonus,proto3" json:"bonus,omitempty"`                         // 奖金金额
	BonusCode         float32 `protobuf:"fixed32,2,opt,name=bonusCode,proto3" json:"bonusCode,omitempty"`                 // 奖金所需打码量
	ReelCoin          float64 `protobuf:"fixed64,3,opt,name=reelCoin,proto3" json:"reelCoin,omitempty"`                   // 币种真实金额
	AllWithdrawalCoin float64 `protobuf:"fixed64,4,opt,name=allWithdrawalCoin,proto3" json:"allWithdrawalCoin,omitempty"` // 可提款金额
	NeedCodeCoin      float32 `protobuf:"fixed32,5,opt,name=needCodeCoin,proto3" json:"needCodeCoin,omitempty"`           // 还需打码量
	MainCurrency      string  `protobuf:"bytes,6,opt,name=mainCurrency,proto3" json:"mainCurrency,omitempty"`             // 主币种
	Score             int64   `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`                          // 积分
}

func (x *UserCoinList) Reset() {
	*x = UserCoinList{}
	mi := &file_userrpc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCoinList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCoinList) ProtoMessage() {}

func (x *UserCoinList) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCoinList.ProtoReflect.Descriptor instead.
func (*UserCoinList) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{60}
}

func (x *UserCoinList) GetBonus() float64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *UserCoinList) GetBonusCode() float32 {
	if x != nil {
		return x.BonusCode
	}
	return 0
}

func (x *UserCoinList) GetReelCoin() float64 {
	if x != nil {
		return x.ReelCoin
	}
	return 0
}

func (x *UserCoinList) GetAllWithdrawalCoin() float64 {
	if x != nil {
		return x.AllWithdrawalCoin
	}
	return 0
}

func (x *UserCoinList) GetNeedCodeCoin() float32 {
	if x != nil {
		return x.NeedCodeCoin
	}
	return 0
}

func (x *UserCoinList) GetMainCurrency() string {
	if x != nil {
		return x.MainCurrency
	}
	return ""
}

func (x *UserCoinList) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type UserLevelRewardReqDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category int64 `protobuf:"varint,1,opt,name=Category,proto3" json:"Category,omitempty"`
	Receive  bool  `protobuf:"varint,2,opt,name=receive,proto3" json:"receive,omitempty"`
}

func (x *UserLevelRewardReqDto) Reset() {
	*x = UserLevelRewardReqDto{}
	mi := &file_userrpc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLevelRewardReqDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLevelRewardReqDto) ProtoMessage() {}

func (x *UserLevelRewardReqDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLevelRewardReqDto.ProtoReflect.Descriptor instead.
func (*UserLevelRewardReqDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{61}
}

func (x *UserLevelRewardReqDto) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *UserLevelRewardReqDto) GetReceive() bool {
	if x != nil {
		return x.Receive
	}
	return false
}

type ConfigResDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TitleZh string `protobuf:"bytes,3,opt,name=titleZh,proto3" json:"titleZh,omitempty"`
	Value   string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Status  int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConfigResDto) Reset() {
	*x = ConfigResDto{}
	mi := &file_userrpc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResDto) ProtoMessage() {}

func (x *ConfigResDto) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResDto.ProtoReflect.Descriptor instead.
func (*ConfigResDto) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{62}
}

func (x *ConfigResDto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigResDto) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ConfigResDto) GetTitleZh() string {
	if x != nil {
		return x.TitleZh
	}
	return ""
}

func (x *ConfigResDto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConfigResDto) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type BaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BaseInfo) Reset() {
	*x = BaseInfo{}
	mi := &file_userrpc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfo) ProtoMessage() {}

func (x *BaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfo.ProtoReflect.Descriptor instead.
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{63}
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username          string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Phone             string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	VerifyPhoneNumber bool   `protobuf:"varint,3,opt,name=verifyPhoneNumber,proto3" json:"verifyPhoneNumber,omitempty"`
	Password          string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	DeviceId          string `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Sign              bool   `protobuf:"varint,6,opt,name=sign,proto3" json:"sign,omitempty"`
	FbPid             string `protobuf:"bytes,7,opt,name=fb_pid,json=fbPid,proto3" json:"fb_pid,omitempty"`
	FbCid             string `protobuf:"bytes,8,opt,name=fb_cid,json=fbCid,proto3" json:"fb_cid,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_userrpc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{64}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *LoginRequest) GetVerifyPhoneNumber() bool {
	if x != nil {
		return x.VerifyPhoneNumber
	}
	return false
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *LoginRequest) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *LoginRequest) GetFbPid() string {
	if x != nil {
		return x.FbPid
	}
	return ""
}

func (x *LoginRequest) GetFbCid() string {
	if x != nil {
		return x.FbCid
	}
	return ""
}

type GoogleAuthLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoogleToken string `protobuf:"bytes,1,opt,name=googleToken,proto3" json:"googleToken,omitempty"`
	FbPid       string `protobuf:"bytes,2,opt,name=fb_pid,json=fbPid,proto3" json:"fb_pid,omitempty"`
	FbCid       string `protobuf:"bytes,3,opt,name=fb_cid,json=fbCid,proto3" json:"fb_cid,omitempty"`
	DeviceId    string `protobuf:"bytes,4,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	PromoCode   string `protobuf:"bytes,5,opt,name=promoCode,proto3" json:"promoCode,omitempty"`
}

func (x *GoogleAuthLoginRequest) Reset() {
	*x = GoogleAuthLoginRequest{}
	mi := &file_userrpc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleAuthLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleAuthLoginRequest) ProtoMessage() {}

func (x *GoogleAuthLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleAuthLoginRequest.ProtoReflect.Descriptor instead.
func (*GoogleAuthLoginRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{65}
}

func (x *GoogleAuthLoginRequest) GetGoogleToken() string {
	if x != nil {
		return x.GoogleToken
	}
	return ""
}

func (x *GoogleAuthLoginRequest) GetFbPid() string {
	if x != nil {
		return x.FbPid
	}
	return ""
}

func (x *GoogleAuthLoginRequest) GetFbCid() string {
	if x != nil {
		return x.FbCid
	}
	return ""
}

func (x *GoogleAuthLoginRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *GoogleAuthLoginRequest) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

type BonusRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int32            `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      int32            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data      *BonusRecordData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	SortField []string         `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey   string           `protobuf:"bytes,5,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
}

func (x *BonusRecordRequest) Reset() {
	*x = BonusRecordRequest{}
	mi := &file_userrpc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordRequest) ProtoMessage() {}

func (x *BonusRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordRequest.ProtoReflect.Descriptor instead.
func (*BonusRecordRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{66}
}

func (x *BonusRecordRequest) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BonusRecordRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BonusRecordRequest) GetData() *BonusRecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BonusRecordRequest) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *BonusRecordRequest) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type BonusRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusName  string `protobuf:"bytes,1,opt,name=bonusName,proto3" json:"bonusName,omitempty"`
	InputBegin int32  `protobuf:"varint,2,opt,name=inputBegin,proto3" json:"inputBegin,omitempty"`
	InputEnd   int32  `protobuf:"varint,3,opt,name=inputEnd,proto3" json:"inputEnd,omitempty"`
	Level      string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	Status     string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Uid        string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	Username   string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	StartTime  int32  `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    int32  `protobuf:"varint,9,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *BonusRecordData) Reset() {
	*x = BonusRecordData{}
	mi := &file_userrpc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRecordData) ProtoMessage() {}

func (x *BonusRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRecordData.ProtoReflect.Descriptor instead.
func (*BonusRecordData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{67}
}

func (x *BonusRecordData) GetBonusName() string {
	if x != nil {
		return x.BonusName
	}
	return ""
}

func (x *BonusRecordData) GetInputBegin() int32 {
	if x != nil {
		return x.InputBegin
	}
	return 0
}

func (x *BonusRecordData) GetInputEnd() int32 {
	if x != nil {
		return x.InputEnd
	}
	return 0
}

func (x *BonusRecordData) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *BonusRecordData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BonusRecordData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BonusRecordData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BonusRecordData) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BonusRecordData) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetTokenByRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=RefreshToken,proto3" json:"RefreshToken,omitempty"`
}

func (x *GetTokenByRefreshTokenRequest) Reset() {
	*x = GetTokenByRefreshTokenRequest{}
	mi := &file_userrpc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenByRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenByRefreshTokenRequest) ProtoMessage() {}

func (x *GetTokenByRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenByRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenByRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{68}
}

func (x *GetTokenByRefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type GetTokenByRefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *LoginTokenInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTokenByRefreshTokenResponse) Reset() {
	*x = GetTokenByRefreshTokenResponse{}
	mi := &file_userrpc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenByRefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenByRefreshTokenResponse) ProtoMessage() {}

func (x *GetTokenByRefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenByRefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*GetTokenByRefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{69}
}

func (x *GetTokenByRefreshTokenResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTokenByRefreshTokenResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetTokenByRefreshTokenResponse) GetData() *LoginTokenInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,1,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	ExpireTime   int32  `protobuf:"varint,2,opt,name=ExpireTime,proto3" json:"ExpireTime,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=RefreshToken,proto3" json:"RefreshToken,omitempty"`
}

func (x *LoginTokenInfo) Reset() {
	*x = LoginTokenInfo{}
	mi := &file_userrpc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginTokenInfo) ProtoMessage() {}

func (x *LoginTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginTokenInfo.ProtoReflect.Descriptor instead.
func (*LoginTokenInfo) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{70}
}

func (x *LoginTokenInfo) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginTokenInfo) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *LoginTokenInfo) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type InitCityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign bool `protobuf:"varint,1,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *InitCityRequest) Reset() {
	*x = InitCityRequest{}
	mi := &file_userrpc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitCityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitCityRequest) ProtoMessage() {}

func (x *InitCityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitCityRequest.ProtoReflect.Descriptor instead.
func (*InitCityRequest) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{71}
}

func (x *InitCityRequest) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type InitCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*InitCityData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InitCityResponse) Reset() {
	*x = InitCityResponse{}
	mi := &file_userrpc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitCityResponse) ProtoMessage() {}

func (x *InitCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitCityResponse.ProtoReflect.Descriptor instead.
func (*InitCityResponse) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{72}
}

func (x *InitCityResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InitCityResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InitCityResponse) GetData() []*InitCityData {
	if x != nil {
		return x.Data
	}
	return nil
}

type InitCityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Province     string   `protobuf:"bytes,1,opt,name=province,proto3" json:"province,omitempty"`
	ProvinceCode string   `protobuf:"bytes,2,opt,name=provinceCode,proto3" json:"provinceCode,omitempty"`
	Cities       []string `protobuf:"bytes,3,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (x *InitCityData) Reset() {
	*x = InitCityData{}
	mi := &file_userrpc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitCityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitCityData) ProtoMessage() {}

func (x *InitCityData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitCityData.ProtoReflect.Descriptor instead.
func (*InitCityData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{73}
}

func (x *InitCityData) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *InitCityData) GetProvinceCode() string {
	if x != nil {
		return x.ProvinceCode
	}
	return ""
}

func (x *InitCityData) GetCities() []string {
	if x != nil {
		return x.Cities
	}
	return nil
}

type UserListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int64            `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      int64            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	SortKey   string           `protobuf:"bytes,3,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	SortField []string         `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	Data      *UserListDataReq `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListReq) Reset() {
	*x = UserListReq{}
	mi := &file_userrpc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListReq) ProtoMessage() {}

func (x *UserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListReq.ProtoReflect.Descriptor instead.
func (*UserListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{74}
}

func (x *UserListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *UserListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UserListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *UserListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *UserListReq) GetData() *UserListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username           string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	SupUsername1       string `protobuf:"bytes,3,opt,name=supUsername1,proto3" json:"supUsername1,omitempty"`
	SupAgentName       string `protobuf:"bytes,4,opt,name=supAgentName,proto3" json:"supAgentName,omitempty"`
	Mobile             string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email              string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	RegisterIp         string `protobuf:"bytes,7,opt,name=registerIp,proto3" json:"registerIp,omitempty"`
	LastLoginIp        string `protobuf:"bytes,8,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`
	LevelId            int64  `protobuf:"varint,9,opt,name=levelId,proto3" json:"levelId,omitempty"`
	FlagId             int64  `protobuf:"varint,10,opt,name=flagId,proto3" json:"flagId,omitempty"`
	AgentNameTop       string `protobuf:"bytes,11,opt,name=agentNameTop,proto3" json:"agentNameTop,omitempty"` //一级代理名称
	MemberType         int64  `protobuf:"varint,12,opt,name=memberType,proto3" json:"memberType,omitempty"`
	MemberDeposit      int64  `protobuf:"varint,13,opt,name=memberDeposit,proto3" json:"memberDeposit,omitempty"` //会员区分
	Status             int64  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	StartTime          int64  `protobuf:"varint,15,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            int64  `protobuf:"varint,16,opt,name=endTime,proto3" json:"endTime,omitempty"`
	LastLoginStartTime int64  `protobuf:"varint,17,opt,name=lastLoginStartTime,proto3" json:"lastLoginStartTime,omitempty"`
	LastLoginEndTime   int64  `protobuf:"varint,18,opt,name=lastLoginEndTime,proto3" json:"lastLoginEndTime,omitempty"`
}

func (x *UserListDataReq) Reset() {
	*x = UserListDataReq{}
	mi := &file_userrpc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListDataReq) ProtoMessage() {}

func (x *UserListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListDataReq.ProtoReflect.Descriptor instead.
func (*UserListDataReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{75}
}

func (x *UserListDataReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserListDataReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserListDataReq) GetSupUsername1() string {
	if x != nil {
		return x.SupUsername1
	}
	return ""
}

func (x *UserListDataReq) GetSupAgentName() string {
	if x != nil {
		return x.SupAgentName
	}
	return ""
}

func (x *UserListDataReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserListDataReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserListDataReq) GetRegisterIp() string {
	if x != nil {
		return x.RegisterIp
	}
	return ""
}

func (x *UserListDataReq) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *UserListDataReq) GetLevelId() int64 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *UserListDataReq) GetFlagId() int64 {
	if x != nil {
		return x.FlagId
	}
	return 0
}

func (x *UserListDataReq) GetAgentNameTop() string {
	if x != nil {
		return x.AgentNameTop
	}
	return ""
}

func (x *UserListDataReq) GetMemberType() int64 {
	if x != nil {
		return x.MemberType
	}
	return 0
}

func (x *UserListDataReq) GetMemberDeposit() int64 {
	if x != nil {
		return x.MemberDeposit
	}
	return 0
}

func (x *UserListDataReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserListDataReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserListDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserListDataReq) GetLastLoginStartTime() int64 {
	if x != nil {
		return x.LastLoginStartTime
	}
	return 0
}

func (x *UserListDataReq) GetLastLoginEndTime() int64 {
	if x != nil {
		return x.LastLoginEndTime
	}
	return 0
}

type UserListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserListDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListResp) Reset() {
	*x = UserListResp{}
	mi := &file_userrpc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResp) ProtoMessage() {}

func (x *UserListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResp.ProtoReflect.Descriptor instead.
func (*UserListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{76}
}

func (x *UserListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserListResp) GetData() *UserListDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current               int64               `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size                  int64               `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total                 int64               `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Pages                 int64               `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`
	MembersCount          int64               `protobuf:"varint,5,opt,name=membersCount,proto3" json:"membersCount,omitempty"`
	DepositMembersCount   int64               `protobuf:"varint,6,opt,name=depositMembersCount,proto3" json:"depositMembersCount,omitempty"`
	DepositAmountTotal    float64             `protobuf:"fixed64,7,opt,name=depositAmountTotal,proto3" json:"depositAmountTotal,omitempty"`
	WithdrawalAmountTotal float64             `protobuf:"fixed64,8,opt,name=withdrawalAmountTotal,proto3" json:"withdrawalAmountTotal,omitempty"`
	SubAmountTotal        float64             `protobuf:"fixed64,9,opt,name=subAmountTotal,proto3" json:"subAmountTotal,omitempty"`
	BetAmountTotal        float64             `protobuf:"fixed64,10,opt,name=betAmountTotal,proto3" json:"betAmountTotal,omitempty"`
	PlAmountTotal         float64             `protobuf:"fixed64,11,opt,name=plAmountTotal,proto3" json:"plAmountTotal,omitempty"`
	List                  []*UserListDataItem `protobuf:"bytes,12,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UserListDataResp) Reset() {
	*x = UserListDataResp{}
	mi := &file_userrpc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListDataResp) ProtoMessage() {}

func (x *UserListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListDataResp.ProtoReflect.Descriptor instead.
func (*UserListDataResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{77}
}

func (x *UserListDataResp) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *UserListDataResp) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UserListDataResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserListDataResp) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *UserListDataResp) GetMembersCount() int64 {
	if x != nil {
		return x.MembersCount
	}
	return 0
}

func (x *UserListDataResp) GetDepositMembersCount() int64 {
	if x != nil {
		return x.DepositMembersCount
	}
	return 0
}

func (x *UserListDataResp) GetDepositAmountTotal() float64 {
	if x != nil {
		return x.DepositAmountTotal
	}
	return 0
}

func (x *UserListDataResp) GetWithdrawalAmountTotal() float64 {
	if x != nil {
		return x.WithdrawalAmountTotal
	}
	return 0
}

func (x *UserListDataResp) GetSubAmountTotal() float64 {
	if x != nil {
		return x.SubAmountTotal
	}
	return 0
}

func (x *UserListDataResp) GetBetAmountTotal() float64 {
	if x != nil {
		return x.BetAmountTotal
	}
	return 0
}

func (x *UserListDataResp) GetPlAmountTotal() float64 {
	if x != nil {
		return x.PlAmountTotal
	}
	return 0
}

func (x *UserListDataResp) GetList() []*UserListDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type UserListDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username         string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	CreatedAt        int64   `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastLoginTime    int64   `protobuf:"varint,4,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`
	AgentName        string  `protobuf:"bytes,5,opt,name=agentName,proto3" json:"agentName,omitempty"`                  //一级代理
	AgentNameTop     string  `protobuf:"bytes,6,opt,name=agentNameTop,proto3" json:"agentNameTop,omitempty"`            // 顶级代理
	LevelText        string  `protobuf:"bytes,7,opt,name=levelText,proto3" json:"levelText,omitempty"`                  //VIP等级
	DepositCount     int64   `protobuf:"varint,8,opt,name=depositCount,proto3" json:"depositCount,omitempty"`           //累计存款次数
	DepositAmount    float64 `protobuf:"fixed64,9,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`        //累计存款金额
	BetAmountTotal   float64 `protobuf:"fixed64,10,opt,name=betAmountTotal,proto3" json:"betAmountTotal,omitempty"`     //累计投注金额
	PlAmountTotal    float64 `protobuf:"fixed64,11,opt,name=plAmountTotal,proto3" json:"plAmountTotal,omitempty"`       //累计输赢
	WithdrawalCount  int64   `protobuf:"varint,12,opt,name=withdrawalCount,proto3" json:"withdrawalCount,omitempty"`    //累计取款次数
	WithdrawalAmount float64 `protobuf:"fixed64,13,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"` //累计取款金额
	SubAmount        float64 `protobuf:"fixed64,14,opt,name=subAmount,proto3" json:"subAmount,omitempty"`               //累计存提差
	MemberTypeName   string  `protobuf:"bytes,15,opt,name=memberTypeName,proto3" json:"memberTypeName,omitempty"`       //会员类型
	Mobile           string  `protobuf:"bytes,16,opt,name=mobile,proto3" json:"mobile,omitempty"`                       //手机号
	Email            string  `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`                         //
	Status           int64   `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	CoinCommission   string  `protobuf:"bytes,19,opt,name=coinCommission,proto3" json:"coinCommission,omitempty"` //佣金可提现金额
	UpdatedAt        int64   `protobuf:"varint,20,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Coin             float64 `protobuf:"fixed64,21,opt,name=coin,proto3" json:"coin,omitempty"` //可用余额
	UserTypeName     string  `protobuf:"bytes,22,opt,name=userTypeName,proto3" json:"userTypeName,omitempty"`
}

func (x *UserListDataItem) Reset() {
	*x = UserListDataItem{}
	mi := &file_userrpc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListDataItem) ProtoMessage() {}

func (x *UserListDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListDataItem.ProtoReflect.Descriptor instead.
func (*UserListDataItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{78}
}

func (x *UserListDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserListDataItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserListDataItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserListDataItem) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *UserListDataItem) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *UserListDataItem) GetAgentNameTop() string {
	if x != nil {
		return x.AgentNameTop
	}
	return ""
}

func (x *UserListDataItem) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *UserListDataItem) GetDepositCount() int64 {
	if x != nil {
		return x.DepositCount
	}
	return 0
}

func (x *UserListDataItem) GetDepositAmount() float64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

func (x *UserListDataItem) GetBetAmountTotal() float64 {
	if x != nil {
		return x.BetAmountTotal
	}
	return 0
}

func (x *UserListDataItem) GetPlAmountTotal() float64 {
	if x != nil {
		return x.PlAmountTotal
	}
	return 0
}

func (x *UserListDataItem) GetWithdrawalCount() int64 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *UserListDataItem) GetWithdrawalAmount() float64 {
	if x != nil {
		return x.WithdrawalAmount
	}
	return 0
}

func (x *UserListDataItem) GetSubAmount() float64 {
	if x != nil {
		return x.SubAmount
	}
	return 0
}

func (x *UserListDataItem) GetMemberTypeName() string {
	if x != nil {
		return x.MemberTypeName
	}
	return ""
}

func (x *UserListDataItem) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserListDataItem) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserListDataItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserListDataItem) GetCoinCommission() string {
	if x != nil {
		return x.CoinCommission
	}
	return ""
}

func (x *UserListDataItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserListDataItem) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UserListDataItem) GetUserTypeName() string {
	if x != nil {
		return x.UserTypeName
	}
	return ""
}

type UserFlagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BitCode   int64  `protobuf:"varint,3,opt,name=bitCode,proto3" json:"bitCode,omitempty"`
	Icon      string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	IconColor string `protobuf:"bytes,5,opt,name=iconColor,proto3" json:"iconColor,omitempty"`
}

func (x *UserFlagList) Reset() {
	*x = UserFlagList{}
	mi := &file_userrpc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFlagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFlagList) ProtoMessage() {}

func (x *UserFlagList) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFlagList.ProtoReflect.Descriptor instead.
func (*UserFlagList) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{79}
}

func (x *UserFlagList) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserFlagList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserFlagList) GetBitCode() int64 {
	if x != nil {
		return x.BitCode
	}
	return 0
}

func (x *UserFlagList) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserFlagList) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

type UserDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserDetailReq) Reset() {
	*x = UserDetailReq{}
	mi := &file_userrpc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailReq) ProtoMessage() {}

func (x *UserDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailReq.ProtoReflect.Descriptor instead.
func (*UserDetailReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{80}
}

func (x *UserDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserDetailData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserDetailResp) Reset() {
	*x = UserDetailResp{}
	mi := &file_userrpc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailResp) ProtoMessage() {}

func (x *UserDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailResp.ProtoReflect.Descriptor instead.
func (*UserDetailResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{81}
}

func (x *UserDetailResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserDetailResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserDetailResp) GetData() *UserDetailData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserDetailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username           string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Id                 int64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	LevelText          string  `protobuf:"bytes,3,opt,name=levelText,proto3" json:"levelText,omitempty"`
	MemberTypeName     string  `protobuf:"bytes,4,opt,name=memberTypeName,proto3" json:"memberTypeName,omitempty"`
	AgentName          string  `protobuf:"bytes,5,opt,name=agentName,proto3" json:"agentName,omitempty"`           //一级代理
	AgentFirstName     string  `protobuf:"bytes,6,opt,name=agentFirstName,proto3" json:"agentFirstName,omitempty"` //上级代理
	AgentNameTop       string  `protobuf:"bytes,7,opt,name=agentNameTop,proto3" json:"agentNameTop,omitempty"`     //代理线上级
	Mobile             string  `protobuf:"bytes,8,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email              string  `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	BankAccount        string  `protobuf:"bytes,10,opt,name=bankAccount,proto3" json:"bankAccount,omitempty"` //CPF
	Status             int32   `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	StatusName         string  `protobuf:"bytes,12,opt,name=statusName,proto3" json:"statusName,omitempty"`
	CreatedAt          string  `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Ip                 string  `protobuf:"bytes,14,opt,name=ip,proto3" json:"ip,omitempty"`                                   // 注册IP
	IpRegion           string  `protobuf:"bytes,15,opt,name=ipRegion,proto3" json:"ipRegion,omitempty"`                       //注册IP归属地
	LastLoginTime      string  `protobuf:"bytes,16,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`             //最后登录时间
	LastLoginIp        string  `protobuf:"bytes,17,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`                 //最后登录IP
	LastLoginIpRegion  string  `protobuf:"bytes,18,opt,name=lastLoginIpRegion,proto3" json:"lastLoginIpRegion,omitempty"`     //最后登录IP归属地
	OffLineTime        string  `protobuf:"bytes,19,opt,name=offLineTime,proto3" json:"offLineTime,omitempty"`                 //离线时间
	OperatorName       string  `protobuf:"bytes,20,opt,name=operatorName,proto3" json:"operatorName,omitempty"`               //操作人
	UpdatedAt          string  `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`                     //操作时间
	Coin               float64 `protobuf:"fixed64,22,opt,name=coin,proto3" json:"coin,omitempty"`                             //账号余额
	DepositCount       int64   `protobuf:"varint,23,opt,name=depositCount,proto3" json:"depositCount,omitempty"`              //累计存款次数
	DepositAmount      float64 `protobuf:"fixed64,24,opt,name=depositAmount,proto3" json:"depositAmount,omitempty"`           //累计存款金额
	WithdrawalAmount   float64 `protobuf:"fixed64,25,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"`     //累计取款次数
	WithdrawalCount    int64   `protobuf:"varint,26,opt,name=withdrawalCount,proto3" json:"withdrawalCount,omitempty"`        //累计取款金额
	SubAmount          float64 `protobuf:"fixed64,27,opt,name=subAmount,proto3" json:"subAmount,omitempty"`                   //累计存提差
	DepositFirst       string  `protobuf:"bytes,28,opt,name=depositFirst,proto3" json:"depositFirst,omitempty"`               //首存时间
	DepositAmountFirst float64 `protobuf:"fixed64,29,opt,name=depositAmountFirst,proto3" json:"depositAmountFirst,omitempty"` //首存金额
	BetAmountTotal     float64 `protobuf:"fixed64,30,opt,name=betAmountTotal,proto3" json:"betAmountTotal,omitempty"`         //最新总投注
	BetAmountReal      float64 `protobuf:"fixed64,31,opt,name=betAmountReal,proto3" json:"betAmountReal,omitempty"`           //真人投注
	BetAmountSlot      float64 `protobuf:"fixed64,32,opt,name=betAmountSlot,proto3" json:"betAmountSlot,omitempty"`           //电子投注
	BetAmountIslot     float64 `protobuf:"fixed64,33,opt,name=betAmountIslot,proto3" json:"betAmountIslot,omitempty"`         //IsLOT投注
	BetAmountSport     float64 `protobuf:"fixed64,34,opt,name=betAmountSport,proto3" json:"betAmountSport,omitempty"`         //体育投注
	PlAmountTotal      float64 `protobuf:"fixed64,35,opt,name=plAmountTotal,proto3" json:"plAmountTotal,omitempty"`           //最新总输赢
	PlAmountReal       float64 `protobuf:"fixed64,36,opt,name=plAmountReal,proto3" json:"plAmountReal,omitempty"`             //真人输赢
	PlAmountSlot       float64 `protobuf:"fixed64,37,opt,name=plAmountSlot,proto3" json:"plAmountSlot,omitempty"`             //电子输赢
	PlAmountIslot      float64 `protobuf:"fixed64,38,opt,name=plAmountIslot,proto3" json:"plAmountIslot,omitempty"`           //Islot输赢
	PlAmountSport      float64 `protobuf:"fixed64,39,opt,name=plAmountSport,proto3" json:"plAmountSport,omitempty"`           //体育输赢
	UserTypeName       string  `protobuf:"bytes,40,opt,name=userTypeName,proto3" json:"userTypeName,omitempty"`
}

func (x *UserDetailData) Reset() {
	*x = UserDetailData{}
	mi := &file_userrpc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDetailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailData) ProtoMessage() {}

func (x *UserDetailData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailData.ProtoReflect.Descriptor instead.
func (*UserDetailData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{82}
}

func (x *UserDetailData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserDetailData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDetailData) GetLevelText() string {
	if x != nil {
		return x.LevelText
	}
	return ""
}

func (x *UserDetailData) GetMemberTypeName() string {
	if x != nil {
		return x.MemberTypeName
	}
	return ""
}

func (x *UserDetailData) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *UserDetailData) GetAgentFirstName() string {
	if x != nil {
		return x.AgentFirstName
	}
	return ""
}

func (x *UserDetailData) GetAgentNameTop() string {
	if x != nil {
		return x.AgentNameTop
	}
	return ""
}

func (x *UserDetailData) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserDetailData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserDetailData) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *UserDetailData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserDetailData) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *UserDetailData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserDetailData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserDetailData) GetIpRegion() string {
	if x != nil {
		return x.IpRegion
	}
	return ""
}

func (x *UserDetailData) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *UserDetailData) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *UserDetailData) GetLastLoginIpRegion() string {
	if x != nil {
		return x.LastLoginIpRegion
	}
	return ""
}

func (x *UserDetailData) GetOffLineTime() string {
	if x != nil {
		return x.OffLineTime
	}
	return ""
}

func (x *UserDetailData) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *UserDetailData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *UserDetailData) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UserDetailData) GetDepositCount() int64 {
	if x != nil {
		return x.DepositCount
	}
	return 0
}

func (x *UserDetailData) GetDepositAmount() float64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

func (x *UserDetailData) GetWithdrawalAmount() float64 {
	if x != nil {
		return x.WithdrawalAmount
	}
	return 0
}

func (x *UserDetailData) GetWithdrawalCount() int64 {
	if x != nil {
		return x.WithdrawalCount
	}
	return 0
}

func (x *UserDetailData) GetSubAmount() float64 {
	if x != nil {
		return x.SubAmount
	}
	return 0
}

func (x *UserDetailData) GetDepositFirst() string {
	if x != nil {
		return x.DepositFirst
	}
	return ""
}

func (x *UserDetailData) GetDepositAmountFirst() float64 {
	if x != nil {
		return x.DepositAmountFirst
	}
	return 0
}

func (x *UserDetailData) GetBetAmountTotal() float64 {
	if x != nil {
		return x.BetAmountTotal
	}
	return 0
}

func (x *UserDetailData) GetBetAmountReal() float64 {
	if x != nil {
		return x.BetAmountReal
	}
	return 0
}

func (x *UserDetailData) GetBetAmountSlot() float64 {
	if x != nil {
		return x.BetAmountSlot
	}
	return 0
}

func (x *UserDetailData) GetBetAmountIslot() float64 {
	if x != nil {
		return x.BetAmountIslot
	}
	return 0
}

func (x *UserDetailData) GetBetAmountSport() float64 {
	if x != nil {
		return x.BetAmountSport
	}
	return 0
}

func (x *UserDetailData) GetPlAmountTotal() float64 {
	if x != nil {
		return x.PlAmountTotal
	}
	return 0
}

func (x *UserDetailData) GetPlAmountReal() float64 {
	if x != nil {
		return x.PlAmountReal
	}
	return 0
}

func (x *UserDetailData) GetPlAmountSlot() float64 {
	if x != nil {
		return x.PlAmountSlot
	}
	return 0
}

func (x *UserDetailData) GetPlAmountIslot() float64 {
	if x != nil {
		return x.PlAmountIslot
	}
	return 0
}

func (x *UserDetailData) GetPlAmountSport() float64 {
	if x != nil {
		return x.PlAmountSport
	}
	return 0
}

func (x *UserDetailData) GetUserTypeName() string {
	if x != nil {
		return x.UserTypeName
	}
	return ""
}

type UserExportListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserExportListResp) Reset() {
	*x = UserExportListResp{}
	mi := &file_userrpc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserExportListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExportListResp) ProtoMessage() {}

func (x *UserExportListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExportListResp.ProtoReflect.Descriptor instead.
func (*UserExportListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{83}
}

func (x *UserExportListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserExportListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserExportListResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type UserMemberTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserMemberTypeReq) Reset() {
	*x = UserMemberTypeReq{}
	mi := &file_userrpc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemberTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemberTypeReq) ProtoMessage() {}

func (x *UserMemberTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemberTypeReq.ProtoReflect.Descriptor instead.
func (*UserMemberTypeReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{84}
}

type UserMemberTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserMemberTypeData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserMemberTypeResp) Reset() {
	*x = UserMemberTypeResp{}
	mi := &file_userrpc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemberTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemberTypeResp) ProtoMessage() {}

func (x *UserMemberTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemberTypeResp.ProtoReflect.Descriptor instead.
func (*UserMemberTypeResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{85}
}

func (x *UserMemberTypeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserMemberTypeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserMemberTypeResp) GetData() *UserMemberTypeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserMemberTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DicLang []*DicLang `protobuf:"bytes,1,rep,name=dic_lang,json=dicLang,proto3" json:"dic_lang,omitempty"`
}

func (x *UserMemberTypeData) Reset() {
	*x = UserMemberTypeData{}
	mi := &file_userrpc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemberTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemberTypeData) ProtoMessage() {}

func (x *UserMemberTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemberTypeData.ProtoReflect.Descriptor instead.
func (*UserMemberTypeData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{86}
}

func (x *UserMemberTypeData) GetDicLang() []*DicLang {
	if x != nil {
		return x.DicLang
	}
	return nil
}

type DicLang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *DicLang) Reset() {
	*x = DicLang{}
	mi := &file_userrpc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DicLang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DicLang) ProtoMessage() {}

func (x *DicLang) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DicLang.ProtoReflect.Descriptor instead.
func (*DicLang) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{87}
}

func (x *DicLang) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DicLang) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UserMemberStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserMemberStatusReq) Reset() {
	*x = UserMemberStatusReq{}
	mi := &file_userrpc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemberStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemberStatusReq) ProtoMessage() {}

func (x *UserMemberStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemberStatusReq.ProtoReflect.Descriptor instead.
func (*UserMemberStatusReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{88}
}

type UserMemberStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserMemberStatusData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserMemberStatusResp) Reset() {
	*x = UserMemberStatusResp{}
	mi := &file_userrpc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemberStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemberStatusResp) ProtoMessage() {}

func (x *UserMemberStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemberStatusResp.ProtoReflect.Descriptor instead.
func (*UserMemberStatusResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{89}
}

func (x *UserMemberStatusResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserMemberStatusResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserMemberStatusResp) GetData() *UserMemberStatusData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserMemberStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DicLang []*DicLang `protobuf:"bytes,1,rep,name=dic_lang,json=dicLang,proto3" json:"dic_lang,omitempty"`
}

func (x *UserMemberStatusData) Reset() {
	*x = UserMemberStatusData{}
	mi := &file_userrpc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMemberStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMemberStatusData) ProtoMessage() {}

func (x *UserMemberStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMemberStatusData.ProtoReflect.Descriptor instead.
func (*UserMemberStatusData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{90}
}

func (x *UserMemberStatusData) GetDicLang() []*DicLang {
	if x != nil {
		return x.DicLang
	}
	return nil
}

type UserListFlagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserListFlagReq) Reset() {
	*x = UserListFlagReq{}
	mi := &file_userrpc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListFlagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListFlagReq) ProtoMessage() {}

func (x *UserListFlagReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListFlagReq.ProtoReflect.Descriptor instead.
func (*UserListFlagReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{91}
}

type UserListFlagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*UserListFlagData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListFlagResp) Reset() {
	*x = UserListFlagResp{}
	mi := &file_userrpc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListFlagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListFlagResp) ProtoMessage() {}

func (x *UserListFlagResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListFlagResp.ProtoReflect.Descriptor instead.
func (*UserListFlagResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{92}
}

func (x *UserListFlagResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserListFlagResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserListFlagResp) GetData() []*UserListFlagData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListFlagData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BitCode      int64  `protobuf:"varint,2,opt,name=bitCode,proto3" json:"bitCode,omitempty"`
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	IconColor    string `protobuf:"bytes,4,opt,name=iconColor,proto3" json:"iconColor,omitempty"`
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	OperatorName string `protobuf:"bytes,6,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	Status       int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UserCount    int64  `protobuf:"varint,9,opt,name=userCount,proto3" json:"userCount,omitempty"`
}

func (x *UserListFlagData) Reset() {
	*x = UserListFlagData{}
	mi := &file_userrpc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListFlagData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListFlagData) ProtoMessage() {}

func (x *UserListFlagData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListFlagData.ProtoReflect.Descriptor instead.
func (*UserListFlagData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{93}
}

func (x *UserListFlagData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserListFlagData) GetBitCode() int64 {
	if x != nil {
		return x.BitCode
	}
	return 0
}

func (x *UserListFlagData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserListFlagData) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

func (x *UserListFlagData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserListFlagData) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *UserListFlagData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserListFlagData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserListFlagData) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

type UserListLevelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserListLevelReq) Reset() {
	*x = UserListLevelReq{}
	mi := &file_userrpc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListLevelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListLevelReq) ProtoMessage() {}

func (x *UserListLevelReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListLevelReq.ProtoReflect.Descriptor instead.
func (*UserListLevelReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{94}
}

type UserListLevelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*UserListLevelData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserListLevelResp) Reset() {
	*x = UserListLevelResp{}
	mi := &file_userrpc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListLevelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListLevelResp) ProtoMessage() {}

func (x *UserListLevelResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListLevelResp.ProtoReflect.Descriptor instead.
func (*UserListLevelResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{95}
}

func (x *UserListLevelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserListLevelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserListLevelResp) GetData() []*UserListLevelData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserListLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Icon             string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Name             string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ScoreRelegation  int64  `protobuf:"varint,5,opt,name=scoreRelegation,proto3" json:"scoreRelegation,omitempty"`
	ScoreUpgradeMax  int64  `protobuf:"varint,6,opt,name=scoreUpgradeMax,proto3" json:"scoreUpgradeMax,omitempty"`
	ScoreUpgradeMin  int64  `protobuf:"varint,7,opt,name=scoreUpgradeMin,proto3" json:"scoreUpgradeMin,omitempty"`
	ScoreUpgradeRate int64  `protobuf:"varint,8,opt,name=scoreUpgradeRate,proto3" json:"scoreUpgradeRate,omitempty"`
}

func (x *UserListLevelData) Reset() {
	*x = UserListLevelData{}
	mi := &file_userrpc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListLevelData) ProtoMessage() {}

func (x *UserListLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListLevelData.ProtoReflect.Descriptor instead.
func (*UserListLevelData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{96}
}

func (x *UserListLevelData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserListLevelData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UserListLevelData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserListLevelData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserListLevelData) GetScoreRelegation() int64 {
	if x != nil {
		return x.ScoreRelegation
	}
	return 0
}

func (x *UserListLevelData) GetScoreUpgradeMax() int64 {
	if x != nil {
		return x.ScoreUpgradeMax
	}
	return 0
}

func (x *UserListLevelData) GetScoreUpgradeMin() int64 {
	if x != nil {
		return x.ScoreUpgradeMin
	}
	return 0
}

func (x *UserListLevelData) GetScoreUpgradeRate() int64 {
	if x != nil {
		return x.ScoreUpgradeRate
	}
	return 0
}

type ListFlagUsedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListFlagUsedDataReq `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListFlagUsedReq) Reset() {
	*x = ListFlagUsedReq{}
	mi := &file_userrpc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagUsedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagUsedReq) ProtoMessage() {}

func (x *ListFlagUsedReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagUsedReq.ProtoReflect.Descriptor instead.
func (*ListFlagUsedReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{97}
}

func (x *ListFlagUsedReq) GetData() *ListFlagUsedDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListFlagUsedDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ListFlagUsedDataReq) Reset() {
	*x = ListFlagUsedDataReq{}
	mi := &file_userrpc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagUsedDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagUsedDataReq) ProtoMessage() {}

func (x *ListFlagUsedDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagUsedDataReq.ProtoReflect.Descriptor instead.
func (*ListFlagUsedDataReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{98}
}

func (x *ListFlagUsedDataReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type ListFlagUsedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ListFlagUsedDataResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListFlagUsedResp) Reset() {
	*x = ListFlagUsedResp{}
	mi := &file_userrpc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagUsedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagUsedResp) ProtoMessage() {}

func (x *ListFlagUsedResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagUsedResp.ProtoReflect.Descriptor instead.
func (*ListFlagUsedResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{99}
}

func (x *ListFlagUsedResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListFlagUsedResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListFlagUsedResp) GetData() *ListFlagUsedDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListFlagUsedDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current string                  `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Size    string                  `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Total   string                  `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	Pages   string                  `protobuf:"bytes,4,opt,name=pages,proto3" json:"pages,omitempty"`
	List    []*ListFlagUsedDataItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListFlagUsedDataResp) Reset() {
	*x = ListFlagUsedDataResp{}
	mi := &file_userrpc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagUsedDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagUsedDataResp) ProtoMessage() {}

func (x *ListFlagUsedDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagUsedDataResp.ProtoReflect.Descriptor instead.
func (*ListFlagUsedDataResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{100}
}

func (x *ListFlagUsedDataResp) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *ListFlagUsedDataResp) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ListFlagUsedDataResp) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *ListFlagUsedDataResp) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *ListFlagUsedDataResp) GetList() []*ListFlagUsedDataItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ListFlagUsedDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int64                       `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username     string                      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	UserFlagList []*ListFlagUsedDataItemList `protobuf:"bytes,3,rep,name=userFlagList,proto3" json:"userFlagList,omitempty"`
}

func (x *ListFlagUsedDataItem) Reset() {
	*x = ListFlagUsedDataItem{}
	mi := &file_userrpc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagUsedDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagUsedDataItem) ProtoMessage() {}

func (x *ListFlagUsedDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagUsedDataItem.ProtoReflect.Descriptor instead.
func (*ListFlagUsedDataItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{101}
}

func (x *ListFlagUsedDataItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ListFlagUsedDataItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListFlagUsedDataItem) GetUserFlagList() []*ListFlagUsedDataItemList {
	if x != nil {
		return x.UserFlagList
	}
	return nil
}

type ListFlagUsedDataItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BitCode   int64  `protobuf:"varint,2,opt,name=bitCode,proto3" json:"bitCode,omitempty"`
	Icon      string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	IconColor string `protobuf:"bytes,4,opt,name=iconColor,proto3" json:"iconColor,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListFlagUsedDataItemList) Reset() {
	*x = ListFlagUsedDataItemList{}
	mi := &file_userrpc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlagUsedDataItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlagUsedDataItemList) ProtoMessage() {}

func (x *ListFlagUsedDataItemList) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlagUsedDataItemList.ProtoReflect.Descriptor instead.
func (*ListFlagUsedDataItemList) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{102}
}

func (x *ListFlagUsedDataItemList) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ListFlagUsedDataItemList) GetBitCode() int64 {
	if x != nil {
		return x.BitCode
	}
	return 0
}

func (x *ListFlagUsedDataItemList) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ListFlagUsedDataItemList) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

func (x *ListFlagUsedDataItemList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddUserFlagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BitCode []int64 `protobuf:"varint,2,rep,packed,name=bitCode,proto3" json:"bitCode,omitempty"`
}

func (x *AddUserFlagReq) Reset() {
	*x = AddUserFlagReq{}
	mi := &file_userrpc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserFlagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserFlagReq) ProtoMessage() {}

func (x *AddUserFlagReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserFlagReq.ProtoReflect.Descriptor instead.
func (*AddUserFlagReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{103}
}

func (x *AddUserFlagReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddUserFlagReq) GetBitCode() []int64 {
	if x != nil {
		return x.BitCode
	}
	return nil
}

type AddUserFlagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data bool   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddUserFlagResp) Reset() {
	*x = AddUserFlagResp{}
	mi := &file_userrpc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserFlagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserFlagResp) ProtoMessage() {}

func (x *AddUserFlagResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserFlagResp.ProtoReflect.Descriptor instead.
func (*AddUserFlagResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{104}
}

func (x *AddUserFlagResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddUserFlagResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddUserFlagResp) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type ListMerchantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMerchantReq) Reset() {
	*x = ListMerchantReq{}
	mi := &file_userrpc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMerchantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantReq) ProtoMessage() {}

func (x *ListMerchantReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantReq.ProtoReflect.Descriptor instead.
func (*ListMerchantReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{105}
}

type ListMerchantResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*ListMerchantData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListMerchantResp) Reset() {
	*x = ListMerchantResp{}
	mi := &file_userrpc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMerchantResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantResp) ProtoMessage() {}

func (x *ListMerchantResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantResp.ProtoReflect.Descriptor instead.
func (*ListMerchantResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{106}
}

func (x *ListMerchantResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListMerchantResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListMerchantResp) GetData() []*ListMerchantData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListMerchantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category    int64  `protobuf:"varint,3,opt,name=category,proto3" json:"category,omitempty"`
	PromoteCode string `protobuf:"bytes,4,opt,name=promoteCode,proto3" json:"promoteCode,omitempty"`
	Address     string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ListMerchantData) Reset() {
	*x = ListMerchantData{}
	mi := &file_userrpc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMerchantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMerchantData) ProtoMessage() {}

func (x *ListMerchantData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMerchantData.ProtoReflect.Descriptor instead.
func (*ListMerchantData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{107}
}

func (x *ListMerchantData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListMerchantData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListMerchantData) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ListMerchantData) GetPromoteCode() string {
	if x != nil {
		return x.PromoteCode
	}
	return ""
}

func (x *ListMerchantData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RefreshGetRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshGetRuleReq) Reset() {
	*x = RefreshGetRuleReq{}
	mi := &file_userrpc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshGetRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGetRuleReq) ProtoMessage() {}

func (x *RefreshGetRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGetRuleReq.ProtoReflect.Descriptor instead.
func (*RefreshGetRuleReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{108}
}

type RefreshGetRuleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *RefreshGetRuleData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RefreshGetRuleResp) Reset() {
	*x = RefreshGetRuleResp{}
	mi := &file_userrpc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshGetRuleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGetRuleResp) ProtoMessage() {}

func (x *RefreshGetRuleResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGetRuleResp.ProtoReflect.Descriptor instead.
func (*RefreshGetRuleResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{109}
}

func (x *RefreshGetRuleResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RefreshGetRuleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RefreshGetRuleResp) GetData() *RefreshGetRuleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RefreshGetRuleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*RefreshGetRuleDataItem `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *RefreshGetRuleData) Reset() {
	*x = RefreshGetRuleData{}
	mi := &file_userrpc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshGetRuleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGetRuleData) ProtoMessage() {}

func (x *RefreshGetRuleData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGetRuleData.ProtoReflect.Descriptor instead.
func (*RefreshGetRuleData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{110}
}

func (x *RefreshGetRuleData) GetChildren() []*RefreshGetRuleDataItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type RefreshGetRuleDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text       string                    `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Type       string                    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name       string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IsRaceMenu int64                     `protobuf:"varint,5,opt,name=isRaceMenu,proto3" json:"isRaceMenu,omitempty"`
	Pid        int64                     `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	Children   []*RefreshGetRuleDataItem `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *RefreshGetRuleDataItem) Reset() {
	*x = RefreshGetRuleDataItem{}
	mi := &file_userrpc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshGetRuleDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGetRuleDataItem) ProtoMessage() {}

func (x *RefreshGetRuleDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGetRuleDataItem.ProtoReflect.Descriptor instead.
func (*RefreshGetRuleDataItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{111}
}

func (x *RefreshGetRuleDataItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefreshGetRuleDataItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RefreshGetRuleDataItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RefreshGetRuleDataItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefreshGetRuleDataItem) GetIsRaceMenu() int64 {
	if x != nil {
		return x.IsRaceMenu
	}
	return 0
}

func (x *RefreshGetRuleDataItem) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *RefreshGetRuleDataItem) GetChildren() []*RefreshGetRuleDataItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealName    string `protobuf:"bytes,1,opt,name=realName,proto3" json:"realName,omitempty"`       // 姓名
	BankName    string `protobuf:"bytes,2,opt,name=bankName,proto3" json:"bankName,omitempty"`       // 银行名称
	BankAddress string `protobuf:"bytes,3,opt,name=bankAddress,proto3" json:"bankAddress,omitempty"` // 银行卡号
	Avatar      string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`           //头像
	BankCode    string `protobuf:"bytes,5,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	mi := &file_userrpc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{112}
}

func (x *UpdateUserInfoReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UpdateUserInfoReq) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *UpdateUserInfoReq) GetBankAddress() string {
	if x != nil {
		return x.BankAddress
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UpdateUserInfoReq) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type UpdateUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateUserInfoResp) Reset() {
	*x = UpdateUserInfoResp{}
	mi := &file_userrpc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResp) ProtoMessage() {}

func (x *UpdateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{113}
}

func (x *UpdateUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateUserInfoResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type OnLineNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnLineNumReq) Reset() {
	*x = OnLineNumReq{}
	mi := &file_userrpc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnLineNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnLineNumReq) ProtoMessage() {}

func (x *OnLineNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnLineNumReq.ProtoReflect.Descriptor instead.
func (*OnLineNumReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{114}
}

type OnLineNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *OnLineNumData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OnLineNumResp) Reset() {
	*x = OnLineNumResp{}
	mi := &file_userrpc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnLineNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnLineNumResp) ProtoMessage() {}

func (x *OnLineNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnLineNumResp.ProtoReflect.Descriptor instead.
func (*OnLineNumResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{115}
}

func (x *OnLineNumResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OnLineNumResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *OnLineNumResp) GetData() *OnLineNumData {
	if x != nil {
		return x.Data
	}
	return nil
}

type OnLineNumData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *OnLineNumData) Reset() {
	*x = OnLineNumData{}
	mi := &file_userrpc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnLineNumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnLineNumData) ProtoMessage() {}

func (x *OnLineNumData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnLineNumData.ProtoReflect.Descriptor instead.
func (*OnLineNumData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{116}
}

func (x *OnLineNumData) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type GetPushDnDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPushDnDataReq) Reset() {
	*x = GetPushDnDataReq{}
	mi := &file_userrpc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPushDnDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushDnDataReq) ProtoMessage() {}

func (x *GetPushDnDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushDnDataReq.ProtoReflect.Descriptor instead.
func (*GetPushDnDataReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{117}
}

type GetPushDnDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetPushDnDataItem `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPushDnDataResp) Reset() {
	*x = GetPushDnDataResp{}
	mi := &file_userrpc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPushDnDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushDnDataResp) ProtoMessage() {}

func (x *GetPushDnDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushDnDataResp.ProtoReflect.Descriptor instead.
func (*GetPushDnDataResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{118}
}

func (x *GetPushDnDataResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPushDnDataResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetPushDnDataResp) GetData() *GetPushDnDataItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPushDnDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	E      string `protobuf:"bytes,2,opt,name=e,proto3" json:"e,omitempty"`
	N      int64  `protobuf:"varint,3,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *GetPushDnDataItem) Reset() {
	*x = GetPushDnDataItem{}
	mi := &file_userrpc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPushDnDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushDnDataItem) ProtoMessage() {}

func (x *GetPushDnDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushDnDataItem.ProtoReflect.Descriptor instead.
func (*GetPushDnDataItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{119}
}

func (x *GetPushDnDataItem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GetPushDnDataItem) GetE() string {
	if x != nil {
		return x.E
	}
	return ""
}

func (x *GetPushDnDataItem) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

type AddUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode     string `protobuf:"bytes,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Mobile       int64  `protobuf:"varint,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	LevelId      int64  `protobuf:"varint,3,opt,name=levelId,proto3" json:"levelId,omitempty"`
	Username     string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	PasswordHash string `protobuf:"bytes,5,opt,name=passwordHash,proto3" json:"passwordHash,omitempty"`
	SupUsername  string `protobuf:"bytes,6,opt,name=supUsername,proto3" json:"supUsername,omitempty"`
	Role         string `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AddUserReq) Reset() {
	*x = AddUserReq{}
	mi := &file_userrpc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserReq) ProtoMessage() {}

func (x *AddUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserReq.ProtoReflect.Descriptor instead.
func (*AddUserReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{120}
}

func (x *AddUserReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *AddUserReq) GetMobile() int64 {
	if x != nil {
		return x.Mobile
	}
	return 0
}

func (x *AddUserReq) GetLevelId() int64 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *AddUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddUserReq) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *AddUserReq) GetSupUsername() string {
	if x != nil {
		return x.SupUsername
	}
	return ""
}

func (x *AddUserReq) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AddUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddUserResp) Reset() {
	*x = AddUserResp{}
	mi := &file_userrpc_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResp) ProtoMessage() {}

func (x *AddUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResp.ProtoReflect.Descriptor instead.
func (*AddUserResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{121}
}

func (x *AddUserResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddUserResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddUserResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 用户权限列表
type GetAdminRuleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int32  `protobuf:"varint,1,opt,name=PageNum,proto3" json:"PageNum,omitempty"`   //页数
	PageSize int32  `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"` //一页的item数
	Title    string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`        //标题
}

func (x *GetAdminRuleListReq) Reset() {
	*x = GetAdminRuleListReq{}
	mi := &file_userrpc_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminRuleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminRuleListReq) ProtoMessage() {}

func (x *GetAdminRuleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminRuleListReq.ProtoReflect.Descriptor instead.
func (*GetAdminRuleListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{122}
}

func (x *GetAdminRuleListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetAdminRuleListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAdminRuleListReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type AdminRuleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuName  string `protobuf:"bytes,1,opt,name=MenuName,proto3" json:"MenuName,omitempty"` //规则唯一标识Controller/action
	Icon      string `protobuf:"bytes,2,opt,name=Icon,proto3" json:"Icon,omitempty"`         //图标
	PId       int32  `protobuf:"varint,3,opt,name=PId,proto3" json:"PId,omitempty"`          //父级Id
	Id        int32  `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`            //Id
	Title     string `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`       //标题
	IsMenu    int32  `protobuf:"varint,6,opt,name=IsMenu,proto3" json:"IsMenu,omitempty"`    //是否主菜单:1-是 0-否
	UpdatedAt int64  `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *AdminRuleData) Reset() {
	*x = AdminRuleData{}
	mi := &file_userrpc_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRuleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRuleData) ProtoMessage() {}

func (x *AdminRuleData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRuleData.ProtoReflect.Descriptor instead.
func (*AdminRuleData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{123}
}

func (x *AdminRuleData) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *AdminRuleData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AdminRuleData) GetPId() int32 {
	if x != nil {
		return x.PId
	}
	return 0
}

func (x *AdminRuleData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminRuleData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AdminRuleData) GetIsMenu() int32 {
	if x != nil {
		return x.IsMenu
	}
	return 0
}

func (x *AdminRuleData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminRuleListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*AdminRuleData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AdminRuleListData) Reset() {
	*x = AdminRuleListData{}
	mi := &file_userrpc_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRuleListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRuleListData) ProtoMessage() {}

func (x *AdminRuleListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRuleListData.ProtoReflect.Descriptor instead.
func (*AdminRuleListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{124}
}

func (x *AdminRuleListData) GetData() []*AdminRuleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AdminRuleListData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAdminRuleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AdminRuleListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAdminRuleListResp) Reset() {
	*x = GetAdminRuleListResp{}
	mi := &file_userrpc_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminRuleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminRuleListResp) ProtoMessage() {}

func (x *GetAdminRuleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminRuleListResp.ProtoReflect.Descriptor instead.
func (*GetAdminRuleListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{125}
}

func (x *GetAdminRuleListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAdminRuleListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAdminRuleListResp) GetData() *AdminRuleListData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 操作日志数据结构
type AdminOperationLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip  string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AdminOperationLogData) Reset() {
	*x = AdminOperationLogData{}
	mi := &file_userrpc_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminOperationLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOperationLogData) ProtoMessage() {}

func (x *AdminOperationLogData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOperationLogData.ProtoReflect.Descriptor instead.
func (*AdminOperationLogData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{126}
}

func (x *AdminOperationLogData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AdminOperationLogData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 用户权限标题管理器数据结构
type AdminRuleTitleManagerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children   []*AdminRuleTitleManagerData `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	IsRaceMenu int32                        `protobuf:"varint,2,opt,name=IsRaceMenu,proto3" json:"IsRaceMenu,omitempty"`
	PId        int32                        `protobuf:"varint,3,opt,name=PId,proto3" json:"PId,omitempty"`
	Id         int32                        `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	Label      string                       `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *AdminRuleTitleManagerData) Reset() {
	*x = AdminRuleTitleManagerData{}
	mi := &file_userrpc_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRuleTitleManagerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRuleTitleManagerData) ProtoMessage() {}

func (x *AdminRuleTitleManagerData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRuleTitleManagerData.ProtoReflect.Descriptor instead.
func (*AdminRuleTitleManagerData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{127}
}

func (x *AdminRuleTitleManagerData) GetChildren() []*AdminRuleTitleManagerData {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *AdminRuleTitleManagerData) GetIsRaceMenu() int32 {
	if x != nil {
		return x.IsRaceMenu
	}
	return 0
}

func (x *AdminRuleTitleManagerData) GetPId() int32 {
	if x != nil {
		return x.PId
	}
	return 0
}

func (x *AdminRuleTitleManagerData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminRuleTitleManagerData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// 用户权限标题管理器数据列表结构
type AdminRuleTitleManagerListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*AdminRuleTitleManagerData `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Id       int32                        `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *AdminRuleTitleManagerListData) Reset() {
	*x = AdminRuleTitleManagerListData{}
	mi := &file_userrpc_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRuleTitleManagerListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRuleTitleManagerListData) ProtoMessage() {}

func (x *AdminRuleTitleManagerListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRuleTitleManagerListData.ProtoReflect.Descriptor instead.
func (*AdminRuleTitleManagerListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{128}
}

func (x *AdminRuleTitleManagerListData) GetChildren() []*AdminRuleTitleManagerData {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *AdminRuleTitleManagerListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 查询用户权限标题管理器数据
type QueryAdminAllRuleTitleManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryAdminAllRuleTitleManagerReq) Reset() {
	*x = QueryAdminAllRuleTitleManagerReq{}
	mi := &file_userrpc_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAdminAllRuleTitleManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAdminAllRuleTitleManagerReq) ProtoMessage() {}

func (x *QueryAdminAllRuleTitleManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAdminAllRuleTitleManagerReq.ProtoReflect.Descriptor instead.
func (*QueryAdminAllRuleTitleManagerReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{129}
}

type QueryAdminAllRuleTitleManagerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AdminRuleTitleManagerListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAdminAllRuleTitleManagerResp) Reset() {
	*x = QueryAdminAllRuleTitleManagerResp{}
	mi := &file_userrpc_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAdminAllRuleTitleManagerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAdminAllRuleTitleManagerResp) ProtoMessage() {}

func (x *QueryAdminAllRuleTitleManagerResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAdminAllRuleTitleManagerResp.ProtoReflect.Descriptor instead.
func (*QueryAdminAllRuleTitleManagerResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{130}
}

func (x *QueryAdminAllRuleTitleManagerResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryAdminAllRuleTitleManagerResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryAdminAllRuleTitleManagerResp) GetData() *AdminRuleTitleManagerListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAdminRuleTitleManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminGroupId int32 `protobuf:"varint,1,opt,name=adminGroupId,proto3" json:"adminGroupId,omitempty"` //角色Id
}

func (x *QueryAdminRuleTitleManagerReq) Reset() {
	*x = QueryAdminRuleTitleManagerReq{}
	mi := &file_userrpc_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAdminRuleTitleManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAdminRuleTitleManagerReq) ProtoMessage() {}

func (x *QueryAdminRuleTitleManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAdminRuleTitleManagerReq.ProtoReflect.Descriptor instead.
func (*QueryAdminRuleTitleManagerReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{131}
}

func (x *QueryAdminRuleTitleManagerReq) GetAdminGroupId() int32 {
	if x != nil {
		return x.AdminGroupId
	}
	return 0
}

type QueryAdminRuleTitleManagerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AdminRuleTitleManagerListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAdminRuleTitleManagerResp) Reset() {
	*x = QueryAdminRuleTitleManagerResp{}
	mi := &file_userrpc_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAdminRuleTitleManagerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAdminRuleTitleManagerResp) ProtoMessage() {}

func (x *QueryAdminRuleTitleManagerResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAdminRuleTitleManagerResp.ProtoReflect.Descriptor instead.
func (*QueryAdminRuleTitleManagerResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{132}
}

func (x *QueryAdminRuleTitleManagerResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryAdminRuleTitleManagerResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryAdminRuleTitleManagerResp) GetData() *AdminRuleTitleManagerListData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除 角色配置
type DelRoleAuthManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //角色配置id
}

func (x *DelRoleAuthManagerReq) Reset() {
	*x = DelRoleAuthManagerReq{}
	mi := &file_userrpc_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelRoleAuthManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRoleAuthManagerReq) ProtoMessage() {}

func (x *DelRoleAuthManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRoleAuthManagerReq.ProtoReflect.Descriptor instead.
func (*DelRoleAuthManagerReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{133}
}

func (x *DelRoleAuthManagerReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelRoleAuthManagerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data bool   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DelRoleAuthManagerResp) Reset() {
	*x = DelRoleAuthManagerResp{}
	mi := &file_userrpc_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelRoleAuthManagerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelRoleAuthManagerResp) ProtoMessage() {}

func (x *DelRoleAuthManagerResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelRoleAuthManagerResp.ProtoReflect.Descriptor instead.
func (*DelRoleAuthManagerResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{134}
}

func (x *DelRoleAuthManagerResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DelRoleAuthManagerResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DelRoleAuthManagerResp) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

// 查询 角色配置
type GetRoleAuthManagerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int32  `protobuf:"varint,1,opt,name=PageNum,proto3" json:"PageNum,omitempty"`   //页数
	PageSize int32  `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"` //一页的item数
	Title    string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`        //标题
}

func (x *GetRoleAuthManagerListReq) Reset() {
	*x = GetRoleAuthManagerListReq{}
	mi := &file_userrpc_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleAuthManagerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleAuthManagerListReq) ProtoMessage() {}

func (x *GetRoleAuthManagerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleAuthManagerListReq.ProtoReflect.Descriptor instead.
func (*GetRoleAuthManagerListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{135}
}

func (x *GetRoleAuthManagerListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetRoleAuthManagerListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRoleAuthManagerListReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetRoleAuthManagerListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetRoleAuthManagerListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRoleAuthManagerListResp) Reset() {
	*x = GetRoleAuthManagerListResp{}
	mi := &file_userrpc_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleAuthManagerListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleAuthManagerListResp) ProtoMessage() {}

func (x *GetRoleAuthManagerListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleAuthManagerListResp.ProtoReflect.Descriptor instead.
func (*GetRoleAuthManagerListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{136}
}

func (x *GetRoleAuthManagerListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRoleAuthManagerListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRoleAuthManagerListResp) GetData() *GetRoleAuthManagerListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetRoleAuthManagerListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*GetRoleAuthManagerData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetRoleAuthManagerListData) Reset() {
	*x = GetRoleAuthManagerListData{}
	mi := &file_userrpc_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleAuthManagerListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleAuthManagerListData) ProtoMessage() {}

func (x *GetRoleAuthManagerListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleAuthManagerListData.ProtoReflect.Descriptor instead.
func (*GetRoleAuthManagerListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{137}
}

func (x *GetRoleAuthManagerListData) GetData() []*GetRoleAuthManagerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetRoleAuthManagerListData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetRoleAuthManagerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent         int32  `protobuf:"varint,1,opt,name=parent,proto3" json:"parent,omitempty"`                //创建人
	OperateId      int32  `protobuf:"varint,2,opt,name=operateId,proto3" json:"operateId,omitempty"`          //操作人Id
	AdminGroupId   int32  `protobuf:"varint,3,opt,name=adminGroupId,proto3" json:"adminGroupId,omitempty"`    //角色组Id
	Rules          string `protobuf:"bytes,4,opt,name=rules,proto3" json:"rules,omitempty"`                   //权限
	Id             int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`                        //Id
	Title          string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`                   //标题
	OperateName    string `protobuf:"bytes,7,opt,name=operateName,proto3" json:"operateName,omitempty"`       //操作人名称
	DataPermission string `protobuf:"bytes,8,opt,name=dataPermission,proto3" json:"dataPermission,omitempty"` //数据权限
	UpdatedAt      int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *GetRoleAuthManagerData) Reset() {
	*x = GetRoleAuthManagerData{}
	mi := &file_userrpc_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleAuthManagerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleAuthManagerData) ProtoMessage() {}

func (x *GetRoleAuthManagerData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleAuthManagerData.ProtoReflect.Descriptor instead.
func (*GetRoleAuthManagerData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{138}
}

func (x *GetRoleAuthManagerData) GetParent() int32 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *GetRoleAuthManagerData) GetOperateId() int32 {
	if x != nil {
		return x.OperateId
	}
	return 0
}

func (x *GetRoleAuthManagerData) GetAdminGroupId() int32 {
	if x != nil {
		return x.AdminGroupId
	}
	return 0
}

func (x *GetRoleAuthManagerData) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *GetRoleAuthManagerData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetRoleAuthManagerData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetRoleAuthManagerData) GetOperateName() string {
	if x != nil {
		return x.OperateName
	}
	return ""
}

func (x *GetRoleAuthManagerData) GetDataPermission() string {
	if x != nil {
		return x.DataPermission
	}
	return ""
}

func (x *GetRoleAuthManagerData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 更新角色配置
type UpdateRoleAuthManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminGroupId   int32                  `protobuf:"varint,1,opt,name=adminGroupId,proto3" json:"adminGroupId,omitempty"`    //用户组Id
	Id             int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                        //id
	Title          string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                   //标题
	DataPermission string                 `protobuf:"bytes,4,opt,name=dataPermission,proto3" json:"dataPermission,omitempty"` //数据权限
	Rules          string                 `protobuf:"bytes,5,opt,name=rules,proto3" json:"rules,omitempty"`                   //权限Id集合
	LogData        *AdminOperationLogData `protobuf:"bytes,6,opt,name=logData,proto3" json:"logData,omitempty"`               //日志需要的数据
}

func (x *UpdateRoleAuthManagerReq) Reset() {
	*x = UpdateRoleAuthManagerReq{}
	mi := &file_userrpc_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoleAuthManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleAuthManagerReq) ProtoMessage() {}

func (x *UpdateRoleAuthManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleAuthManagerReq.ProtoReflect.Descriptor instead.
func (*UpdateRoleAuthManagerReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{139}
}

func (x *UpdateRoleAuthManagerReq) GetAdminGroupId() int32 {
	if x != nil {
		return x.AdminGroupId
	}
	return 0
}

func (x *UpdateRoleAuthManagerReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRoleAuthManagerReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateRoleAuthManagerReq) GetDataPermission() string {
	if x != nil {
		return x.DataPermission
	}
	return ""
}

func (x *UpdateRoleAuthManagerReq) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *UpdateRoleAuthManagerReq) GetLogData() *AdminOperationLogData {
	if x != nil {
		return x.LogData
	}
	return nil
}

type UpdateRoleAuthManagerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateRoleAuthManagerResp) Reset() {
	*x = UpdateRoleAuthManagerResp{}
	mi := &file_userrpc_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoleAuthManagerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleAuthManagerResp) ProtoMessage() {}

func (x *UpdateRoleAuthManagerResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleAuthManagerResp.ProtoReflect.Descriptor instead.
func (*UpdateRoleAuthManagerResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{140}
}

func (x *UpdateRoleAuthManagerResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateRoleAuthManagerResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateRoleAuthManagerResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RoleListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AdminGroupId int32  `protobuf:"varint,3,opt,name=adminGroupId,proto3" json:"adminGroupId,omitempty"`
}

func (x *RoleListData) Reset() {
	*x = RoleListData{}
	mi := &file_userrpc_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleListData) ProtoMessage() {}

func (x *RoleListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleListData.ProtoReflect.Descriptor instead.
func (*RoleListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{141}
}

func (x *RoleListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleListData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RoleListData) GetAdminGroupId() int32 {
	if x != nil {
		return x.AdminGroupId
	}
	return 0
}

// 获取管理员角色下拉列表
type GetAllRoleListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllRoleListReq) Reset() {
	*x = GetAllRoleListReq{}
	mi := &file_userrpc_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllRoleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRoleListReq) ProtoMessage() {}

func (x *GetAllRoleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRoleListReq.ProtoReflect.Descriptor instead.
func (*GetAllRoleListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{142}
}

type GetAllRoleListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*RoleListData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllRoleListResp) Reset() {
	*x = GetAllRoleListResp{}
	mi := &file_userrpc_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllRoleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRoleListResp) ProtoMessage() {}

func (x *GetAllRoleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRoleListResp.ProtoReflect.Descriptor instead.
func (*GetAllRoleListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{143}
}

func (x *GetAllRoleListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllRoleListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAllRoleListResp) GetData() []*RoleListData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新用户设置
type UpdateAdminUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int32                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                      //用户id
	Username     string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                             //用户名称
	PasswordHash string                 `protobuf:"bytes,3,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"` //密码
	GroupId      int32                  `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`               //旧角色id
	RoleId       int32                  `protobuf:"varint,5,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`                  //新角色id
	Secret       string                 `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`                                 //秘钥
	AdminId      int32                  `protobuf:"varint,7,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`               //操作人id
	LogData      *AdminOperationLogData `protobuf:"bytes,8,opt,name=logData,proto3" json:"logData,omitempty"`                               //日志需要的数据
}

func (x *UpdateAdminUserReq) Reset() {
	*x = UpdateAdminUserReq{}
	mi := &file_userrpc_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdminUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminUserReq) ProtoMessage() {}

func (x *UpdateAdminUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminUserReq.ProtoReflect.Descriptor instead.
func (*UpdateAdminUserReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{144}
}

func (x *UpdateAdminUserReq) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateAdminUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateAdminUserReq) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *UpdateAdminUserReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateAdminUserReq) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UpdateAdminUserReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdateAdminUserReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *UpdateAdminUserReq) GetLogData() *AdminOperationLogData {
	if x != nil {
		return x.LogData
	}
	return nil
}

type UpdateAdminUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateAdminUserResp) Reset() {
	*x = UpdateAdminUserResp{}
	mi := &file_userrpc_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdminUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminUserResp) ProtoMessage() {}

func (x *UpdateAdminUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminUserResp.ProtoReflect.Descriptor instead.
func (*UpdateAdminUserResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateAdminUserResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAdminUserResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateAdminUserResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AdminDataListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Parent         int32  `protobuf:"varint,2,opt,name=Parent,proto3" json:"Parent,omitempty"`       //父Id
	AgentId        int32  `protobuf:"varint,3,opt,name=AgentId,proto3" json:"AgentId,omitempty"`     //代理Id
	OperateId      int32  `protobuf:"varint,4,opt,name=OperateId,proto3" json:"OperateId,omitempty"` //操作用户Id
	Secret         string `protobuf:"bytes,5,opt,name=Secret,proto3" json:"Secret,omitempty"`        //秘钥
	Title          string `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`          //标题
	Uid            int32  `protobuf:"varint,7,opt,name=Uid,proto3" json:"Uid,omitempty"`
	MerchantId     int32  `protobuf:"varint,8,opt,name=MerchantId,proto3" json:"MerchantId,omitempty"`         //
	GroupId        int32  `protobuf:"varint,9,opt,name=GroupId,proto3" json:"GroupId,omitempty"`               //
	AdminGroupId   int32  `protobuf:"varint,10,opt,name=AdminGroupId,proto3" json:"AdminGroupId,omitempty"`    //用户组Id
	ParentUsername string `protobuf:"bytes,11,opt,name=ParentUsername,proto3" json:"ParentUsername,omitempty"` //父用户名
	AdminGroupName string `protobuf:"bytes,12,opt,name=AdminGroupName,proto3" json:"AdminGroupName,omitempty"` //用户组名
	OperateName    string `protobuf:"bytes,13,opt,name=OperateName,proto3" json:"OperateName,omitempty"`       //操作用户名
	Username       string `protobuf:"bytes,14,opt,name=Username,proto3" json:"Username,omitempty"`             //用户名
	UpdatedAt      int64  `protobuf:"varint,15,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`          //更新时间
}

func (x *AdminDataListData) Reset() {
	*x = AdminDataListData{}
	mi := &file_userrpc_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDataListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDataListData) ProtoMessage() {}

func (x *AdminDataListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDataListData.ProtoReflect.Descriptor instead.
func (*AdminDataListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{146}
}

func (x *AdminDataListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminDataListData) GetParent() int32 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *AdminDataListData) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *AdminDataListData) GetOperateId() int32 {
	if x != nil {
		return x.OperateId
	}
	return 0
}

func (x *AdminDataListData) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AdminDataListData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AdminDataListData) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AdminDataListData) GetMerchantId() int32 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *AdminDataListData) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AdminDataListData) GetAdminGroupId() int32 {
	if x != nil {
		return x.AdminGroupId
	}
	return 0
}

func (x *AdminDataListData) GetParentUsername() string {
	if x != nil {
		return x.ParentUsername
	}
	return ""
}

func (x *AdminDataListData) GetAdminGroupName() string {
	if x != nil {
		return x.AdminGroupName
	}
	return ""
}

func (x *AdminDataListData) GetOperateName() string {
	if x != nil {
		return x.OperateName
	}
	return ""
}

func (x *AdminDataListData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminDataListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 用户列表结构
type AdminData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*AdminDataListData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int32                `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminData) Reset() {
	*x = AdminData{}
	mi := &file_userrpc_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminData) ProtoMessage() {}

func (x *AdminData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminData.ProtoReflect.Descriptor instead.
func (*AdminData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{147}
}

func (x *AdminData) GetData() []*AdminDataListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AdminData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 查询用户列表
type GetAdminListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum   int32    `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`   //页数
	PageSize  int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` //一页的item数
	SortField []string `protobuf:"bytes,3,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey   string   `protobuf:"bytes,4,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
	Username  string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"` //用户名
}

func (x *GetAdminListReq) Reset() {
	*x = GetAdminListReq{}
	mi := &file_userrpc_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminListReq) ProtoMessage() {}

func (x *GetAdminListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminListReq.ProtoReflect.Descriptor instead.
func (*GetAdminListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{148}
}

func (x *GetAdminListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetAdminListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAdminListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *GetAdminListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *GetAdminListReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetAdminListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AdminData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAdminListResp) Reset() {
	*x = GetAdminListResp{}
	mi := &file_userrpc_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminListResp) ProtoMessage() {}

func (x *GetAdminListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminListResp.ProtoReflect.Descriptor instead.
func (*GetAdminListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{149}
}

func (x *GetAdminListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAdminListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAdminListResp) GetData() *AdminData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询用户列表
type AddAdminReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId      int32  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`          //操作用户Id
	AgentId      string `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`           //代理Id
	GroupId      int32  `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`          //用户角色Id
	PasswordHash string `protobuf:"bytes,4,opt,name=passwordHash,proto3" json:"passwordHash,omitempty"` //密码hash值
	Username     string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`         //用户名
}

func (x *AddAdminReq) Reset() {
	*x = AddAdminReq{}
	mi := &file_userrpc_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAdminReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminReq) ProtoMessage() {}

func (x *AddAdminReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminReq.ProtoReflect.Descriptor instead.
func (*AddAdminReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{150}
}

func (x *AddAdminReq) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *AddAdminReq) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AddAdminReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddAdminReq) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *AddAdminReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type AddAdminResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddAdminResp) Reset() {
	*x = AddAdminResp{}
	mi := &file_userrpc_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAdminResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminResp) ProtoMessage() {}

func (x *AddAdminResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminResp.ProtoReflect.Descriptor instead.
func (*AddAdminResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{151}
}

func (x *AddAdminResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddAdminResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddAdminResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 用户组列表查询条件
type UserGroupFilterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"` //标题
}

func (x *UserGroupFilterData) Reset() {
	*x = UserGroupFilterData{}
	mi := &file_userrpc_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGroupFilterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupFilterData) ProtoMessage() {}

func (x *UserGroupFilterData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupFilterData.ProtoReflect.Descriptor instead.
func (*UserGroupFilterData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{152}
}

func (x *UserGroupFilterData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UserGroupDataListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`             //标题
	OperateName string `protobuf:"bytes,3,opt,name=operateName,proto3" json:"operateName,omitempty"` //操作用户名
	Rules       string `protobuf:"bytes,4,opt,name=rules,proto3" json:"rules,omitempty"`             //权限
	UpdatedAt   int64  `protobuf:"varint,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`    //更新时间
}

func (x *UserGroupDataListData) Reset() {
	*x = UserGroupDataListData{}
	mi := &file_userrpc_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGroupDataListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupDataListData) ProtoMessage() {}

func (x *UserGroupDataListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupDataListData.ProtoReflect.Descriptor instead.
func (*UserGroupDataListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{153}
}

func (x *UserGroupDataListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserGroupDataListData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserGroupDataListData) GetOperateName() string {
	if x != nil {
		return x.OperateName
	}
	return ""
}

func (x *UserGroupDataListData) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *UserGroupDataListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UserGroupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int32                    `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      int32                    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	List      []*UserGroupDataListData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total     int32                    `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Pages     int32                    `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	ScrollId  int32                    `protobuf:"varint,6,opt,name=scrollId,proto3" json:"scrollId,omitempty"`
	SortValue int32                    `protobuf:"varint,7,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	SortId    int32                    `protobuf:"varint,8,opt,name=sortId,proto3" json:"sortId,omitempty"`
}

func (x *UserGroupData) Reset() {
	*x = UserGroupData{}
	mi := &file_userrpc_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupData) ProtoMessage() {}

func (x *UserGroupData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupData.ProtoReflect.Descriptor instead.
func (*UserGroupData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{154}
}

func (x *UserGroupData) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *UserGroupData) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UserGroupData) GetList() []*UserGroupDataListData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UserGroupData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserGroupData) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *UserGroupData) GetScrollId() int32 {
	if x != nil {
		return x.ScrollId
	}
	return 0
}

func (x *UserGroupData) GetSortValue() int32 {
	if x != nil {
		return x.SortValue
	}
	return 0
}

func (x *UserGroupData) GetSortId() int32 {
	if x != nil {
		return x.SortId
	}
	return 0
}

// 获取用户组列表
type GetUserGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current int32                `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"` //页数
	Size    int32                `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`       //一页的item数
	Data    *UserGroupFilterData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserGroupListReq) Reset() {
	*x = GetUserGroupListReq{}
	mi := &file_userrpc_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGroupListReq) ProtoMessage() {}

func (x *GetUserGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGroupListReq.ProtoReflect.Descriptor instead.
func (*GetUserGroupListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{155}
}

func (x *GetUserGroupListReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetUserGroupListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetUserGroupListReq) GetData() *UserGroupFilterData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserGroupData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserGroupListResp) Reset() {
	*x = GetUserGroupListResp{}
	mi := &file_userrpc_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGroupListResp) ProtoMessage() {}

func (x *GetUserGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGroupListResp.ProtoReflect.Descriptor instead.
func (*GetUserGroupListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{156}
}

func (x *GetUserGroupListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserGroupListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserGroupListResp) GetData() *UserGroupData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminGroupListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *AdminGroupListData) Reset() {
	*x = AdminGroupListData{}
	mi := &file_userrpc_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminGroupListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGroupListData) ProtoMessage() {}

func (x *AdminGroupListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGroupListData.ProtoReflect.Descriptor instead.
func (*AdminGroupListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{157}
}

func (x *AdminGroupListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminGroupListData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// 获取全部用户组
type GetAllAdminGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllAdminGroupListReq) Reset() {
	*x = GetAllAdminGroupListReq{}
	mi := &file_userrpc_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllAdminGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAdminGroupListReq) ProtoMessage() {}

func (x *GetAllAdminGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAdminGroupListReq.ProtoReflect.Descriptor instead.
func (*GetAllAdminGroupListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{158}
}

type GetAllAdminGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*AdminGroupListData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllAdminGroupListResp) Reset() {
	*x = GetAllAdminGroupListResp{}
	mi := &file_userrpc_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllAdminGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAdminGroupListResp) ProtoMessage() {}

func (x *GetAllAdminGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAdminGroupListResp.ProtoReflect.Descriptor instead.
func (*GetAllAdminGroupListResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{159}
}

func (x *GetAllAdminGroupListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllAdminGroupListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAllAdminGroupListResp) GetData() []*AdminGroupListData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新用户设置
type UpdateUserGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          //用户组id
	Title   string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`     //用户组名称
	Rules   string                 `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`     //权限
	LogData *AdminOperationLogData `protobuf:"bytes,4,opt,name=logData,proto3" json:"logData,omitempty"` //日志需要的数据
}

func (x *UpdateUserGroupReq) Reset() {
	*x = UpdateUserGroupReq{}
	mi := &file_userrpc_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGroupReq) ProtoMessage() {}

func (x *UpdateUserGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateUserGroupReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{160}
}

func (x *UpdateUserGroupReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserGroupReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateUserGroupReq) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *UpdateUserGroupReq) GetLogData() *AdminOperationLogData {
	if x != nil {
		return x.LogData
	}
	return nil
}

type UpdateUserGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data bool   `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateUserGroupResp) Reset() {
	*x = UpdateUserGroupResp{}
	mi := &file_userrpc_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGroupResp) ProtoMessage() {}

func (x *UpdateUserGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGroupResp.ProtoReflect.Descriptor instead.
func (*UpdateUserGroupResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{161}
}

func (x *UpdateUserGroupResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateUserGroupResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateUserGroupResp) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type AdminAgentLineListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int32             `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Data      map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SortField []string          `protobuf:"bytes,4,rep,name=sortField,proto3" json:"sortField,omitempty"`
	SortKey   string            `protobuf:"bytes,5,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
}

func (x *AdminAgentLineListReq) Reset() {
	*x = AdminAgentLineListReq{}
	mi := &file_userrpc_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminAgentLineListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminAgentLineListReq) ProtoMessage() {}

func (x *AdminAgentLineListReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminAgentLineListReq.ProtoReflect.Descriptor instead.
func (*AdminAgentLineListReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{162}
}

func (x *AdminAgentLineListReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *AdminAgentLineListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AdminAgentLineListReq) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AdminAgentLineListReq) GetSortField() []string {
	if x != nil {
		return x.SortField
	}
	return nil
}

func (x *AdminAgentLineListReq) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

type AdminAgentLineListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username         string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email            string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Mobile           string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Status           int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	PromoCode        string `protobuf:"bytes,6,opt,name=promoCode,proto3" json:"promoCode,omitempty"`
	CreatedAt        int64  `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        int64  `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OperatorName     string `protobuf:"bytes,9,opt,name=operatorName,proto3" json:"operatorName,omitempty"`
	FreezeAt         int64  `protobuf:"varint,10,opt,name=freezeAt,proto3" json:"freezeAt,omitempty"`
	FreezeCause      string `protobuf:"bytes,11,opt,name=freezeCause,proto3" json:"freezeCause,omitempty"`
	SupLevelTopCname string `protobuf:"bytes,12,opt,name=supLevelTopCname,proto3" json:"supLevelTopCname,omitempty"`
	Secret           string `protobuf:"bytes,13,opt,name=secret,proto3" json:"secret,omitempty"`
	CodeUrl          string `protobuf:"bytes,14,opt,name=codeUrl,proto3" json:"codeUrl,omitempty"`
	CodeStatus       int64  `protobuf:"varint,15,opt,name=codeStatus,proto3" json:"codeStatus,omitempty"`
}

func (x *AdminAgentLineListItem) Reset() {
	*x = AdminAgentLineListItem{}
	mi := &file_userrpc_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminAgentLineListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminAgentLineListItem) ProtoMessage() {}

func (x *AdminAgentLineListItem) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminAgentLineListItem.ProtoReflect.Descriptor instead.
func (*AdminAgentLineListItem) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{163}
}

func (x *AdminAgentLineListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminAgentLineListItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminAgentLineListItem) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AdminAgentLineListItem) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *AdminAgentLineListItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AdminAgentLineListItem) GetPromoCode() string {
	if x != nil {
		return x.PromoCode
	}
	return ""
}

func (x *AdminAgentLineListItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AdminAgentLineListItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AdminAgentLineListItem) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *AdminAgentLineListItem) GetFreezeAt() int64 {
	if x != nil {
		return x.FreezeAt
	}
	return 0
}

func (x *AdminAgentLineListItem) GetFreezeCause() string {
	if x != nil {
		return x.FreezeCause
	}
	return ""
}

func (x *AdminAgentLineListItem) GetSupLevelTopCname() string {
	if x != nil {
		return x.SupLevelTopCname
	}
	return ""
}

func (x *AdminAgentLineListItem) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AdminAgentLineListItem) GetCodeUrl() string {
	if x != nil {
		return x.CodeUrl
	}
	return ""
}

func (x *AdminAgentLineListItem) GetCodeStatus() int64 {
	if x != nil {
		return x.CodeStatus
	}
	return 0
}

type AdminAgentLineListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AdminAgentLineListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminAgentLineListRes) Reset() {
	*x = AdminAgentLineListRes{}
	mi := &file_userrpc_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminAgentLineListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminAgentLineListRes) ProtoMessage() {}

func (x *AdminAgentLineListRes) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminAgentLineListRes.ProtoReflect.Descriptor instead.
func (*AdminAgentLineListRes) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{164}
}

func (x *AdminAgentLineListRes) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AdminAgentLineListRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AdminAgentLineListRes) GetData() *AdminAgentLineListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminAgentLineListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   string                    `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      string                    `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	List      []*AdminAgentLineListItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Total     string                    `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	Pages     string                    `protobuf:"bytes,5,opt,name=pages,proto3" json:"pages,omitempty"`
	ScrollId  string                    `protobuf:"bytes,6,opt,name=scrollId,proto3" json:"scrollId,omitempty"`
	SortValue string                    `protobuf:"bytes,7,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
	SortId    string                    `protobuf:"bytes,8,opt,name=sortId,proto3" json:"sortId,omitempty"`
}

func (x *AdminAgentLineListData) Reset() {
	*x = AdminAgentLineListData{}
	mi := &file_userrpc_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminAgentLineListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminAgentLineListData) ProtoMessage() {}

func (x *AdminAgentLineListData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminAgentLineListData.ProtoReflect.Descriptor instead.
func (*AdminAgentLineListData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{165}
}

func (x *AdminAgentLineListData) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *AdminAgentLineListData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *AdminAgentLineListData) GetList() []*AdminAgentLineListItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AdminAgentLineListData) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *AdminAgentLineListData) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *AdminAgentLineListData) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

func (x *AdminAgentLineListData) GetSortValue() string {
	if x != nil {
		return x.SortValue
	}
	return ""
}

func (x *AdminAgentLineListData) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

type GetUserRetentionRateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetUserRetentionRateReq) Reset() {
	*x = GetUserRetentionRateReq{}
	mi := &file_userrpc_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRetentionRateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRetentionRateReq) ProtoMessage() {}

func (x *GetUserRetentionRateReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRetentionRateReq.ProtoReflect.Descriptor instead.
func (*GetUserRetentionRateReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{166}
}

func (x *GetUserRetentionRateReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetUserRetentionRateReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetUserRetentionRateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*GetUserRetentionRateDataResp `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserRetentionRateResp) Reset() {
	*x = GetUserRetentionRateResp{}
	mi := &file_userrpc_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRetentionRateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRetentionRateResp) ProtoMessage() {}

func (x *GetUserRetentionRateResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRetentionRateResp.ProtoReflect.Descriptor instead.
func (*GetUserRetentionRateResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{167}
}

func (x *GetUserRetentionRateResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserRetentionRateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserRetentionRateResp) GetData() []*GetUserRetentionRateDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserRetentionRateDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterDate    string `protobuf:"bytes,1,opt,name=register_date,json=registerDate,proto3" json:"register_date,omitempty"`
	D1RetentionRate string `protobuf:"bytes,2,opt,name=d1_retention_rate,json=d1RetentionRate,proto3" json:"d1_retention_rate,omitempty"`
	D3RetentionRate string `protobuf:"bytes,3,opt,name=d3_retention_rate,json=d3RetentionRate,proto3" json:"d3_retention_rate,omitempty"`
	D7RetentionRate string `protobuf:"bytes,4,opt,name=d7_retention_rate,json=d7RetentionRate,proto3" json:"d7_retention_rate,omitempty"`
}

func (x *GetUserRetentionRateDataResp) Reset() {
	*x = GetUserRetentionRateDataResp{}
	mi := &file_userrpc_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRetentionRateDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRetentionRateDataResp) ProtoMessage() {}

func (x *GetUserRetentionRateDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRetentionRateDataResp.ProtoReflect.Descriptor instead.
func (*GetUserRetentionRateDataResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{168}
}

func (x *GetUserRetentionRateDataResp) GetRegisterDate() string {
	if x != nil {
		return x.RegisterDate
	}
	return ""
}

func (x *GetUserRetentionRateDataResp) GetD1RetentionRate() string {
	if x != nil {
		return x.D1RetentionRate
	}
	return ""
}

func (x *GetUserRetentionRateDataResp) GetD3RetentionRate() string {
	if x != nil {
		return x.D3RetentionRate
	}
	return ""
}

func (x *GetUserRetentionRateDataResp) GetD7RetentionRate() string {
	if x != nil {
		return x.D7RetentionRate
	}
	return ""
}

// Request message for registering a username prompt
type RegisterUsernamePromptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *RegisterUsernamePromptReq) Reset() {
	*x = RegisterUsernamePromptReq{}
	mi := &file_userrpc_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterUsernamePromptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUsernamePromptReq) ProtoMessage() {}

func (x *RegisterUsernamePromptReq) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUsernamePromptReq.ProtoReflect.Descriptor instead.
func (*RegisterUsernamePromptReq) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{169}
}

func (x *RegisterUsernamePromptReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Response message for registering a username prompt
type RegisterUsernamePromptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // Optional in Protobuf 3 is implied by default
	Msg  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // Optional in Protobuf 3 is implied by default
	Data []*RegisterUsernamePromptData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RegisterUsernamePromptResp) Reset() {
	*x = RegisterUsernamePromptResp{}
	mi := &file_userrpc_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterUsernamePromptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUsernamePromptResp) ProtoMessage() {}

func (x *RegisterUsernamePromptResp) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUsernamePromptResp.ProtoReflect.Descriptor instead.
func (*RegisterUsernamePromptResp) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{170}
}

func (x *RegisterUsernamePromptResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RegisterUsernamePromptResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RegisterUsernamePromptResp) GetData() []*RegisterUsernamePromptData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Data structure for a specific sports game link configuration
type RegisterUsernamePromptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualified bool     `protobuf:"varint,1,opt,name=qualified,proto3" json:"qualified,omitempty"`
	Usernames []string `protobuf:"bytes,2,rep,name=usernames,proto3" json:"usernames,omitempty"` // List of usernames
}

func (x *RegisterUsernamePromptData) Reset() {
	*x = RegisterUsernamePromptData{}
	mi := &file_userrpc_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterUsernamePromptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUsernamePromptData) ProtoMessage() {}

func (x *RegisterUsernamePromptData) ProtoReflect() protoreflect.Message {
	mi := &file_userrpc_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUsernamePromptData.ProtoReflect.Descriptor instead.
func (*RegisterUsernamePromptData) Descriptor() ([]byte, []int) {
	return file_userrpc_proto_rawDescGZIP(), []int{171}
}

func (x *RegisterUsernamePromptData) GetQualified() bool {
	if x != nil {
		return x.Qualified
	}
	return false
}

func (x *RegisterUsernamePromptData) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

var File_userrpc_proto protoreflect.FileDescriptor

var file_userrpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6e,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0xc0, 0x02, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x08, 0x0a, 0x06, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x0a, 0x0d, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x55, 0x0a, 0x19, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x65, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x22, 0x73, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x44, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x03, 0x0a, 0x17, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x6b, 0x0a, 0x14, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x02,
	0x0a, 0x0f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x38, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x18, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x1a,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x37, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a,
	0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x44,
	0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6d, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x66, 0x62, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x62, 0x50, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x62, 0x5f, 0x63, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x62, 0x43, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x72, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x72, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0c,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x06, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x62, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x62, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64,
	0x42, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5e, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x44, 0x74,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a,
	0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x2a, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x51, 0x0a,
	0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x81, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x61, 0x67, 0x52, 0x65, 0x73, 0x22, 0xeb, 0x01,
	0x0a, 0x0f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x1d,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x74, 0x6f, 0x52, 0x13, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x73, 0x0a, 0x18, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6d, 0x0a,
	0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x13,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x44, 0x74,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x44, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x32, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x53, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x46,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x44, 0x74, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x47, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x74, 0x6f, 0x52,
	0x19, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6f, 0x0a, 0x13, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x44, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x0a, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x79, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x42, 0x12,
	0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x62, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x62, 0x50, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66,
	0x62, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x62, 0x43,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x49,
	0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x53, 0x75, 0x62, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5d, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x65, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x4d, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x22, 0x7c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x44, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5a, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5a,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x0a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x62, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x62, 0x50, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x66, 0x62, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x62, 0x43, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x62, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x62, 0x50, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x62,
	0x5f, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x62, 0x43, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x12,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x76, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0f, 0x49, 0x6e,
	0x69, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0x63, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa1,
	0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xbd, 0x04, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x03, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x05, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x0a,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x4c, 0x69,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x13, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x22, 0x6b, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x41, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69,
	0x63, 0x4c, 0x61, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x4c, 0x61, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x6f, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x43, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x69,
	0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x07,
	0x64, 0x69, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x22, 0x67, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x12, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x22, 0x69, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x89, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55,
	0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x27, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x67, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8e, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x22, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x52, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xa2, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x0e, 0x0a, 0x0c, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x22, 0x61, 0x0a, 0x0d, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x0d, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x12, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x22, 0x69, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x49, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x55, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x15, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x61, 0x63, 0x65, 0x4d, 0x65,
	0x6e, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x6f, 0x0a, 0x1d, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22,
	0x85, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x96, 0x02,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0c,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x65, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd,
	0x03, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x51,
	0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x13, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xef, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x75,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3a, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4,
	0x03, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x43, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x72, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x16, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x31, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x31, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x33, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x33, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x37, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x37, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x37, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32,
	0xd2, 0x26, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x70, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x67, 0x52, 0x65, 0x73, 0x1a, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0b,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x06, 0x6c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x15, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x44, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x44,
	0x74, 0x6f, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65,
	0x6e, 0x64, 0x53, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x53, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x44, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x4e, 0x65, 0x77, 0x1a, 0x11, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x44,
	0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f,
	0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x44, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x11,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3c, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x41, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x44, 0x74, 0x6f,
	0x12, 0x46, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x44, 0x74, 0x6f, 0x1a, 0x14, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4e, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x43, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x43, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x12, 0x18, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x09, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0d, 0x67,
	0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x12, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x76, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x61, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userrpc_proto_rawDescOnce sync.Once
	file_userrpc_proto_rawDescData = file_userrpc_proto_rawDesc
)

func file_userrpc_proto_rawDescGZIP() []byte {
	file_userrpc_proto_rawDescOnce.Do(func() {
		file_userrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_userrpc_proto_rawDescData)
	})
	return file_userrpc_proto_rawDescData
}

var file_userrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 173)
var file_userrpc_proto_goTypes = []any{
	(*AdminTransferRequest)(nil),              // 0: userrpc.AdminTransferRequest
	(*ResetMobileResp)(nil),                   // 1: userrpc.resetMobileResp
	(*SendSnsCodeReqDto)(nil),                 // 2: userrpc.SendSnsCodeReqDto
	(*WalletRecordItem)(nil),                  // 3: userrpc.WalletRecordItem
	(*WalletStatisticsRequest)(nil),           // 4: userrpc.WalletStatisticsRequest
	(*AgResp)(nil),                            // 5: userrpc.agResp
	(*LogoutRequest)(nil),                     // 6: userrpc.LogoutRequest
	(*SendResp)(nil),                          // 7: userrpc.SendResp
	(*BonusRecordExportResponse)(nil),         // 8: userrpc.BonusRecordExportResponse
	(*MemberShipResp)(nil),                    // 9: userrpc.MemberShipResp
	(*MemberShipResDto)(nil),                  // 10: userrpc.MemberShipResDto
	(*UserLevelBenefitsResp)(nil),             // 11: userrpc.UserLevelBenefitsResp
	(*UserLevelBenefitsResDto)(nil),           // 12: userrpc.UserLevelBenefitsResDto
	(*ReceiveResp)(nil),                       // 13: userrpc.receiveResp
	(*WalletRecordResponse)(nil),              // 14: userrpc.WalletRecordResponse
	(*BonusRecordItem)(nil),                   // 15: userrpc.BonusRecordItem
	(*UserLevelBasicInfo)(nil),                // 16: userrpc.UserLevelBasicInfo
	(*UserLevelRebateConfigDto)(nil),          // 17: userrpc.UserLevelRebateConfigDto
	(*WalletRecordExportResponse)(nil),        // 18: userrpc.WalletRecordExportResponse
	(*ConfigResp)(nil),                        // 19: userrpc.ConfigResp
	(*SendSesCodeReqDto)(nil),                 // 20: userrpc.SendSesCodeReqDto
	(*WalletRecordList)(nil),                  // 21: userrpc.WalletRecordList
	(*SendSmsCodeReqDto)(nil),                 // 22: userrpc.SendSmsCodeReqDto
	(*WalletStatisticsData)(nil),              // 23: userrpc.WalletStatisticsData
	(*EmptyRequest)(nil),                      // 24: userrpc.emptyRequest
	(*UserLevelResDto)(nil),                   // 25: userrpc.UserLevelResDto
	(*ResetEmailReqDto)(nil),                  // 26: userrpc.ResetEmailReqDto
	(*WalletRecordData)(nil),                  // 27: userrpc.WalletRecordData
	(*UpdateProfileReqDto)(nil),               // 28: userrpc.UpdateProfileReqDto
	(*LogoutResponse)(nil),                    // 29: userrpc.LogoutResponse
	(*UserProfileRes)(nil),                    // 30: userrpc.userProfileRes
	(*AdminTransferResponse)(nil),             // 31: userrpc.AdminTransferResponse
	(*UserStatusInfoDto)(nil),                 // 32: userrpc.UserStatusInfoDto
	(*AgRes)(nil),                             // 33: userrpc.agRes
	(*BonusRecordList)(nil),                   // 34: userrpc.BonusRecordList
	(*BonusRecordResponse)(nil),               // 35: userrpc.BonusRecordResponse
	(*UserCoinResponse)(nil),                  // 36: userrpc.UserCoinResponse
	(*UserLevelRebateConfigTableDto)(nil),     // 37: userrpc.UserLevelRebateConfigTableDto
	(*WalletStatisticsResponse)(nil),          // 38: userrpc.WalletStatisticsResponse
	(*ListLevelDto)(nil),                      // 39: userrpc.ListLevelDto
	(*SetPasswordReqDto)(nil),                 // 40: userrpc.SetPasswordReqDto
	(*MemberShipLevelResp)(nil),               // 41: userrpc.MemberShipLevelResp
	(*MemberShipLevelData)(nil),               // 42: userrpc.MemberShipLevelData
	(*MemberShipLevelResDto)(nil),             // 43: userrpc.MemberShipLevelResDto
	(*UserLevelInfo)(nil),                     // 44: userrpc.UserLevelInfo
	(*ForgotPasswordReqDto)(nil),              // 45: userrpc.ForgotPasswordReqDto
	(*BetByTokenResDto)(nil),                  // 46: userrpc.BetByTokenResDto
	(*UserLevelWithdrawalInfo)(nil),           // 47: userrpc.UserLevelWithdrawalInfo
	(*ResetPasswordReqDto)(nil),               // 48: userrpc.ResetPasswordReqDto
	(*ResetPasswordReqDtoNew)(nil),            // 49: userrpc.ResetPasswordReqDtoNew
	(*Currency)(nil),                          // 50: userrpc.Currency
	(*UserDetailsResDto)(nil),                 // 51: userrpc.UserDetailsResDto
	(*UserLevelRewardResp)(nil),               // 52: userrpc.UserLevelRewardResp
	(*UserLevelRewardResDto)(nil),             // 53: userrpc.UserLevelRewardResDto
	(*LoginData)(nil),                         // 54: userrpc.LoginData
	(*RegisterReqDto)(nil),                    // 55: userrpc.RegisterReqDto
	(*UserCoinRequest)(nil),                   // 56: userrpc.UserCoinRequest
	(*ReceiveReqDto)(nil),                     // 57: userrpc.ReceiveReqDto
	(*WalletRecordRequest)(nil),               // 58: userrpc.WalletRecordRequest
	(*LoginResponse)(nil),                     // 59: userrpc.LoginResponse
	(*UserCoinList)(nil),                      // 60: userrpc.UserCoinList
	(*UserLevelRewardReqDto)(nil),             // 61: userrpc.UserLevelRewardReqDto
	(*ConfigResDto)(nil),                      // 62: userrpc.ConfigResDto
	(*BaseInfo)(nil),                          // 63: userrpc.baseInfo
	(*LoginRequest)(nil),                      // 64: userrpc.LoginRequest
	(*GoogleAuthLoginRequest)(nil),            // 65: userrpc.GoogleAuthLoginRequest
	(*BonusRecordRequest)(nil),                // 66: userrpc.BonusRecordRequest
	(*BonusRecordData)(nil),                   // 67: userrpc.BonusRecordData
	(*GetTokenByRefreshTokenRequest)(nil),     // 68: userrpc.GetTokenByRefreshTokenRequest
	(*GetTokenByRefreshTokenResponse)(nil),    // 69: userrpc.GetTokenByRefreshTokenResponse
	(*LoginTokenInfo)(nil),                    // 70: userrpc.LoginTokenInfo
	(*InitCityRequest)(nil),                   // 71: userrpc.InitCityRequest
	(*InitCityResponse)(nil),                  // 72: userrpc.InitCityResponse
	(*InitCityData)(nil),                      // 73: userrpc.InitCityData
	(*UserListReq)(nil),                       // 74: userrpc.UserListReq
	(*UserListDataReq)(nil),                   // 75: userrpc.UserListDataReq
	(*UserListResp)(nil),                      // 76: userrpc.UserListResp
	(*UserListDataResp)(nil),                  // 77: userrpc.UserListDataResp
	(*UserListDataItem)(nil),                  // 78: userrpc.UserListDataItem
	(*UserFlagList)(nil),                      // 79: userrpc.UserFlagList
	(*UserDetailReq)(nil),                     // 80: userrpc.UserDetailReq
	(*UserDetailResp)(nil),                    // 81: userrpc.UserDetailResp
	(*UserDetailData)(nil),                    // 82: userrpc.UserDetailData
	(*UserExportListResp)(nil),                // 83: userrpc.UserExportListResp
	(*UserMemberTypeReq)(nil),                 // 84: userrpc.UserMemberTypeReq
	(*UserMemberTypeResp)(nil),                // 85: userrpc.UserMemberTypeResp
	(*UserMemberTypeData)(nil),                // 86: userrpc.UserMemberTypeData
	(*DicLang)(nil),                           // 87: userrpc.DicLang
	(*UserMemberStatusReq)(nil),               // 88: userrpc.UserMemberStatusReq
	(*UserMemberStatusResp)(nil),              // 89: userrpc.UserMemberStatusResp
	(*UserMemberStatusData)(nil),              // 90: userrpc.UserMemberStatusData
	(*UserListFlagReq)(nil),                   // 91: userrpc.UserListFlagReq
	(*UserListFlagResp)(nil),                  // 92: userrpc.UserListFlagResp
	(*UserListFlagData)(nil),                  // 93: userrpc.UserListFlagData
	(*UserListLevelReq)(nil),                  // 94: userrpc.UserListLevelReq
	(*UserListLevelResp)(nil),                 // 95: userrpc.UserListLevelResp
	(*UserListLevelData)(nil),                 // 96: userrpc.UserListLevelData
	(*ListFlagUsedReq)(nil),                   // 97: userrpc.ListFlagUsedReq
	(*ListFlagUsedDataReq)(nil),               // 98: userrpc.ListFlagUsedDataReq
	(*ListFlagUsedResp)(nil),                  // 99: userrpc.ListFlagUsedResp
	(*ListFlagUsedDataResp)(nil),              // 100: userrpc.ListFlagUsedDataResp
	(*ListFlagUsedDataItem)(nil),              // 101: userrpc.ListFlagUsedDataItem
	(*ListFlagUsedDataItemList)(nil),          // 102: userrpc.ListFlagUsedDataItemList
	(*AddUserFlagReq)(nil),                    // 103: userrpc.AddUserFlagReq
	(*AddUserFlagResp)(nil),                   // 104: userrpc.AddUserFlagResp
	(*ListMerchantReq)(nil),                   // 105: userrpc.ListMerchantReq
	(*ListMerchantResp)(nil),                  // 106: userrpc.ListMerchantResp
	(*ListMerchantData)(nil),                  // 107: userrpc.ListMerchantData
	(*RefreshGetRuleReq)(nil),                 // 108: userrpc.RefreshGetRuleReq
	(*RefreshGetRuleResp)(nil),                // 109: userrpc.RefreshGetRuleResp
	(*RefreshGetRuleData)(nil),                // 110: userrpc.RefreshGetRuleData
	(*RefreshGetRuleDataItem)(nil),            // 111: userrpc.RefreshGetRuleDataItem
	(*UpdateUserInfoReq)(nil),                 // 112: userrpc.UpdateUserInfoReq
	(*UpdateUserInfoResp)(nil),                // 113: userrpc.UpdateUserInfoResp
	(*OnLineNumReq)(nil),                      // 114: userrpc.OnLineNumReq
	(*OnLineNumResp)(nil),                     // 115: userrpc.OnLineNumResp
	(*OnLineNumData)(nil),                     // 116: userrpc.OnLineNumData
	(*GetPushDnDataReq)(nil),                  // 117: userrpc.GetPushDnDataReq
	(*GetPushDnDataResp)(nil),                 // 118: userrpc.GetPushDnDataResp
	(*GetPushDnDataItem)(nil),                 // 119: userrpc.GetPushDnDataItem
	(*AddUserReq)(nil),                        // 120: userrpc.AddUserReq
	(*AddUserResp)(nil),                       // 121: userrpc.AddUserResp
	(*GetAdminRuleListReq)(nil),               // 122: userrpc.GetAdminRuleListReq
	(*AdminRuleData)(nil),                     // 123: userrpc.AdminRuleData
	(*AdminRuleListData)(nil),                 // 124: userrpc.AdminRuleListData
	(*GetAdminRuleListResp)(nil),              // 125: userrpc.GetAdminRuleListResp
	(*AdminOperationLogData)(nil),             // 126: userrpc.AdminOperationLogData
	(*AdminRuleTitleManagerData)(nil),         // 127: userrpc.AdminRuleTitleManagerData
	(*AdminRuleTitleManagerListData)(nil),     // 128: userrpc.AdminRuleTitleManagerListData
	(*QueryAdminAllRuleTitleManagerReq)(nil),  // 129: userrpc.QueryAdminAllRuleTitleManagerReq
	(*QueryAdminAllRuleTitleManagerResp)(nil), // 130: userrpc.QueryAdminAllRuleTitleManagerResp
	(*QueryAdminRuleTitleManagerReq)(nil),     // 131: userrpc.QueryAdminRuleTitleManagerReq
	(*QueryAdminRuleTitleManagerResp)(nil),    // 132: userrpc.QueryAdminRuleTitleManagerResp
	(*DelRoleAuthManagerReq)(nil),             // 133: userrpc.DelRoleAuthManagerReq
	(*DelRoleAuthManagerResp)(nil),            // 134: userrpc.DelRoleAuthManagerResp
	(*GetRoleAuthManagerListReq)(nil),         // 135: userrpc.GetRoleAuthManagerListReq
	(*GetRoleAuthManagerListResp)(nil),        // 136: userrpc.GetRoleAuthManagerListResp
	(*GetRoleAuthManagerListData)(nil),        // 137: userrpc.GetRoleAuthManagerListData
	(*GetRoleAuthManagerData)(nil),            // 138: userrpc.GetRoleAuthManagerData
	(*UpdateRoleAuthManagerReq)(nil),          // 139: userrpc.UpdateRoleAuthManagerReq
	(*UpdateRoleAuthManagerResp)(nil),         // 140: userrpc.UpdateRoleAuthManagerResp
	(*RoleListData)(nil),                      // 141: userrpc.RoleListData
	(*GetAllRoleListReq)(nil),                 // 142: userrpc.GetAllRoleListReq
	(*GetAllRoleListResp)(nil),                // 143: userrpc.GetAllRoleListResp
	(*UpdateAdminUserReq)(nil),                // 144: userrpc.UpdateAdminUserReq
	(*UpdateAdminUserResp)(nil),               // 145: userrpc.UpdateAdminUserResp
	(*AdminDataListData)(nil),                 // 146: userrpc.AdminDataListData
	(*AdminData)(nil),                         // 147: userrpc.AdminData
	(*GetAdminListReq)(nil),                   // 148: userrpc.GetAdminListReq
	(*GetAdminListResp)(nil),                  // 149: userrpc.GetAdminListResp
	(*AddAdminReq)(nil),                       // 150: userrpc.AddAdminReq
	(*AddAdminResp)(nil),                      // 151: userrpc.AddAdminResp
	(*UserGroupFilterData)(nil),               // 152: userrpc.UserGroupFilterData
	(*UserGroupDataListData)(nil),             // 153: userrpc.UserGroupDataListData
	(*UserGroupData)(nil),                     // 154: userrpc.UserGroupData
	(*GetUserGroupListReq)(nil),               // 155: userrpc.GetUserGroupListReq
	(*GetUserGroupListResp)(nil),              // 156: userrpc.GetUserGroupListResp
	(*AdminGroupListData)(nil),                // 157: userrpc.AdminGroupListData
	(*GetAllAdminGroupListReq)(nil),           // 158: userrpc.GetAllAdminGroupListReq
	(*GetAllAdminGroupListResp)(nil),          // 159: userrpc.GetAllAdminGroupListResp
	(*UpdateUserGroupReq)(nil),                // 160: userrpc.UpdateUserGroupReq
	(*UpdateUserGroupResp)(nil),               // 161: userrpc.UpdateUserGroupResp
	(*AdminAgentLineListReq)(nil),             // 162: userrpc.AdminAgentLineListReq
	(*AdminAgentLineListItem)(nil),            // 163: userrpc.AdminAgentLineListItem
	(*AdminAgentLineListRes)(nil),             // 164: userrpc.AdminAgentLineListRes
	(*AdminAgentLineListData)(nil),            // 165: userrpc.AdminAgentLineListData
	(*GetUserRetentionRateReq)(nil),           // 166: userrpc.GetUserRetentionRateReq
	(*GetUserRetentionRateResp)(nil),          // 167: userrpc.GetUserRetentionRateResp
	(*GetUserRetentionRateDataResp)(nil),      // 168: userrpc.GetUserRetentionRateDataResp
	(*RegisterUsernamePromptReq)(nil),         // 169: userrpc.RegisterUsernamePromptReq
	(*RegisterUsernamePromptResp)(nil),        // 170: userrpc.RegisterUsernamePromptResp
	(*RegisterUsernamePromptData)(nil),        // 171: userrpc.RegisterUsernamePromptData
	nil,                                       // 172: userrpc.AdminAgentLineListReq.DataEntry
}
var file_userrpc_proto_depIdxs = []int32{
	10,  // 0: userrpc.MemberShipResp.data:type_name -> userrpc.MemberShipResDto
	12,  // 1: userrpc.UserLevelBenefitsResp.data:type_name -> userrpc.UserLevelBenefitsResDto
	21,  // 2: userrpc.WalletRecordResponse.data:type_name -> userrpc.WalletRecordList
	62,  // 3: userrpc.ConfigResp.data:type_name -> userrpc.ConfigResDto
	3,   // 4: userrpc.WalletRecordList.list:type_name -> userrpc.WalletRecordItem
	16,  // 5: userrpc.UserLevelResDto.user_level_basic_info_list:type_name -> userrpc.UserLevelBasicInfo
	15,  // 6: userrpc.BonusRecordList.list:type_name -> userrpc.BonusRecordItem
	34,  // 7: userrpc.BonusRecordResponse.data:type_name -> userrpc.BonusRecordList
	60,  // 8: userrpc.UserCoinResponse.data:type_name -> userrpc.UserCoinList
	17,  // 9: userrpc.UserLevelRebateConfigTableDto.user_level_rebate_list:type_name -> userrpc.UserLevelRebateConfigDto
	23,  // 10: userrpc.WalletStatisticsResponse.data:type_name -> userrpc.WalletStatisticsData
	42,  // 11: userrpc.MemberShipLevelResp.data:type_name -> userrpc.MemberShipLevelData
	43,  // 12: userrpc.MemberShipLevelData.list:type_name -> userrpc.MemberShipLevelResDto
	44,  // 13: userrpc.UserDetailsResDto.user_level_info_list:type_name -> userrpc.UserLevelInfo
	17,  // 14: userrpc.UserDetailsResDto.user_level_rebate_config_list:type_name -> userrpc.UserLevelRebateConfigDto
	47,  // 15: userrpc.UserDetailsResDto.user_level_withdrawal_info:type_name -> userrpc.UserLevelWithdrawalInfo
	53,  // 16: userrpc.UserLevelRewardResp.data:type_name -> userrpc.UserLevelRewardResDto
	27,  // 17: userrpc.WalletRecordRequest.data:type_name -> userrpc.WalletRecordData
	54,  // 18: userrpc.LoginResponse.data:type_name -> userrpc.LoginData
	67,  // 19: userrpc.BonusRecordRequest.data:type_name -> userrpc.BonusRecordData
	70,  // 20: userrpc.GetTokenByRefreshTokenResponse.data:type_name -> userrpc.LoginTokenInfo
	73,  // 21: userrpc.InitCityResponse.data:type_name -> userrpc.InitCityData
	75,  // 22: userrpc.UserListReq.data:type_name -> userrpc.UserListDataReq
	77,  // 23: userrpc.UserListResp.data:type_name -> userrpc.UserListDataResp
	78,  // 24: userrpc.UserListDataResp.list:type_name -> userrpc.UserListDataItem
	82,  // 25: userrpc.UserDetailResp.data:type_name -> userrpc.UserDetailData
	86,  // 26: userrpc.UserMemberTypeResp.data:type_name -> userrpc.UserMemberTypeData
	87,  // 27: userrpc.UserMemberTypeData.dic_lang:type_name -> userrpc.DicLang
	90,  // 28: userrpc.UserMemberStatusResp.data:type_name -> userrpc.UserMemberStatusData
	87,  // 29: userrpc.UserMemberStatusData.dic_lang:type_name -> userrpc.DicLang
	93,  // 30: userrpc.UserListFlagResp.data:type_name -> userrpc.UserListFlagData
	96,  // 31: userrpc.UserListLevelResp.data:type_name -> userrpc.UserListLevelData
	98,  // 32: userrpc.ListFlagUsedReq.data:type_name -> userrpc.ListFlagUsedDataReq
	100, // 33: userrpc.ListFlagUsedResp.data:type_name -> userrpc.ListFlagUsedDataResp
	101, // 34: userrpc.ListFlagUsedDataResp.list:type_name -> userrpc.ListFlagUsedDataItem
	102, // 35: userrpc.ListFlagUsedDataItem.userFlagList:type_name -> userrpc.ListFlagUsedDataItemList
	107, // 36: userrpc.ListMerchantResp.data:type_name -> userrpc.ListMerchantData
	110, // 37: userrpc.RefreshGetRuleResp.data:type_name -> userrpc.RefreshGetRuleData
	111, // 38: userrpc.RefreshGetRuleData.children:type_name -> userrpc.RefreshGetRuleDataItem
	111, // 39: userrpc.RefreshGetRuleDataItem.children:type_name -> userrpc.RefreshGetRuleDataItem
	116, // 40: userrpc.OnLineNumResp.data:type_name -> userrpc.OnLineNumData
	119, // 41: userrpc.GetPushDnDataResp.data:type_name -> userrpc.GetPushDnDataItem
	123, // 42: userrpc.AdminRuleListData.data:type_name -> userrpc.AdminRuleData
	124, // 43: userrpc.GetAdminRuleListResp.data:type_name -> userrpc.AdminRuleListData
	127, // 44: userrpc.AdminRuleTitleManagerData.children:type_name -> userrpc.AdminRuleTitleManagerData
	127, // 45: userrpc.AdminRuleTitleManagerListData.children:type_name -> userrpc.AdminRuleTitleManagerData
	128, // 46: userrpc.QueryAdminAllRuleTitleManagerResp.data:type_name -> userrpc.AdminRuleTitleManagerListData
	128, // 47: userrpc.QueryAdminRuleTitleManagerResp.data:type_name -> userrpc.AdminRuleTitleManagerListData
	137, // 48: userrpc.GetRoleAuthManagerListResp.data:type_name -> userrpc.GetRoleAuthManagerListData
	138, // 49: userrpc.GetRoleAuthManagerListData.data:type_name -> userrpc.GetRoleAuthManagerData
	126, // 50: userrpc.UpdateRoleAuthManagerReq.logData:type_name -> userrpc.AdminOperationLogData
	141, // 51: userrpc.GetAllRoleListResp.data:type_name -> userrpc.RoleListData
	126, // 52: userrpc.UpdateAdminUserReq.logData:type_name -> userrpc.AdminOperationLogData
	146, // 53: userrpc.AdminData.data:type_name -> userrpc.AdminDataListData
	147, // 54: userrpc.GetAdminListResp.data:type_name -> userrpc.AdminData
	153, // 55: userrpc.UserGroupData.list:type_name -> userrpc.UserGroupDataListData
	152, // 56: userrpc.GetUserGroupListReq.data:type_name -> userrpc.UserGroupFilterData
	154, // 57: userrpc.GetUserGroupListResp.data:type_name -> userrpc.UserGroupData
	157, // 58: userrpc.GetAllAdminGroupListResp.data:type_name -> userrpc.AdminGroupListData
	126, // 59: userrpc.UpdateUserGroupReq.logData:type_name -> userrpc.AdminOperationLogData
	172, // 60: userrpc.AdminAgentLineListReq.data:type_name -> userrpc.AdminAgentLineListReq.DataEntry
	165, // 61: userrpc.AdminAgentLineListRes.data:type_name -> userrpc.AdminAgentLineListData
	163, // 62: userrpc.AdminAgentLineListData.list:type_name -> userrpc.AdminAgentLineListItem
	168, // 63: userrpc.GetUserRetentionRateResp.data:type_name -> userrpc.GetUserRetentionRateDataResp
	171, // 64: userrpc.RegisterUsernamePromptResp.data:type_name -> userrpc.RegisterUsernamePromptData
	33,  // 65: userrpc.UserRpc.balance:input_type -> userrpc.agRes
	64,  // 66: userrpc.UserRpc.login:input_type -> userrpc.LoginRequest
	65,  // 67: userrpc.UserRpc.googleAuthLogin:input_type -> userrpc.GoogleAuthLoginRequest
	55,  // 68: userrpc.UserRpc.register:input_type -> userrpc.RegisterReqDto
	22,  // 69: userrpc.UserRpc.mobileLogin:input_type -> userrpc.SendSmsCodeReqDto
	6,   // 70: userrpc.UserRpc.logout:input_type -> userrpc.LogoutRequest
	68,  // 71: userrpc.UserRpc.getTokenByRefreshToken:input_type -> userrpc.GetTokenByRefreshTokenRequest
	66,  // 72: userrpc.UserRpc.getBonusRecord:input_type -> userrpc.BonusRecordRequest
	66,  // 73: userrpc.UserRpc.bonusRecordExport:input_type -> userrpc.BonusRecordRequest
	24,  // 74: userrpc.UserRpc.init:input_type -> userrpc.emptyRequest
	56,  // 75: userrpc.UserRpc.getUserCoin:input_type -> userrpc.UserCoinRequest
	0,   // 76: userrpc.UserRpc.adminTransfer:input_type -> userrpc.AdminTransferRequest
	63,  // 77: userrpc.UserRpc.listLevel:input_type -> userrpc.baseInfo
	63,  // 78: userrpc.UserRpc.userStatusInfo:input_type -> userrpc.baseInfo
	28,  // 79: userrpc.UserRpc.updateUserProfile:input_type -> userrpc.UpdateProfileReqDto
	30,  // 80: userrpc.UserRpc.userProfile:input_type -> userrpc.userProfileRes
	22,  // 81: userrpc.UserRpc.resetMobile:input_type -> userrpc.SendSmsCodeReqDto
	22,  // 82: userrpc.UserRpc.sendSmsCode:input_type -> userrpc.SendSmsCodeReqDto
	20,  // 83: userrpc.UserRpc.sendSesCode:input_type -> userrpc.SendSesCodeReqDto
	2,   // 84: userrpc.UserRpc.sendSnsCode:input_type -> userrpc.SendSnsCodeReqDto
	45,  // 85: userrpc.UserRpc.forgotPassword:input_type -> userrpc.ForgotPasswordReqDto
	49,  // 86: userrpc.UserRpc.resetPassword:input_type -> userrpc.ResetPasswordReqDtoNew
	26,  // 87: userrpc.UserRpc.resetEmail:input_type -> userrpc.ResetEmailReqDto
	22,  // 88: userrpc.UserRpc.sendSms:input_type -> userrpc.SendSmsCodeReqDto
	40,  // 89: userrpc.UserRpc.setPassword:input_type -> userrpc.SetPasswordReqDto
	24,  // 90: userrpc.UserRpc.betByToken:input_type -> userrpc.emptyRequest
	63,  // 91: userrpc.UserRpc.memberShipDetails:input_type -> userrpc.baseInfo
	63,  // 92: userrpc.UserRpc.memberShipLevelDetails:input_type -> userrpc.baseInfo
	63,  // 93: userrpc.UserRpc.userLevelInfo:input_type -> userrpc.baseInfo
	63,  // 94: userrpc.UserRpc.userLevelDetails:input_type -> userrpc.baseInfo
	63,  // 95: userrpc.UserRpc.userLevelBenefits:input_type -> userrpc.baseInfo
	61,  // 96: userrpc.UserRpc.userLeveReward:input_type -> userrpc.UserLevelRewardReqDto
	57,  // 97: userrpc.UserRpc.receive:input_type -> userrpc.ReceiveReqDto
	58,  // 98: userrpc.UserRpc.getWalletRecord:input_type -> userrpc.WalletRecordRequest
	4,   // 99: userrpc.UserRpc.getWalletStatistics:input_type -> userrpc.WalletStatisticsRequest
	58,  // 100: userrpc.UserRpc.walletRecordExport:input_type -> userrpc.WalletRecordRequest
	71,  // 101: userrpc.UserRpc.initCity:input_type -> userrpc.InitCityRequest
	74,  // 102: userrpc.UserRpc.userList:input_type -> userrpc.UserListReq
	80,  // 103: userrpc.UserRpc.userDetail:input_type -> userrpc.UserDetailReq
	74,  // 104: userrpc.UserRpc.userExportList:input_type -> userrpc.UserListReq
	84,  // 105: userrpc.UserRpc.userMemberType:input_type -> userrpc.UserMemberTypeReq
	88,  // 106: userrpc.UserRpc.userMemberStatus:input_type -> userrpc.UserMemberStatusReq
	91,  // 107: userrpc.UserRpc.userListFlag:input_type -> userrpc.UserListFlagReq
	94,  // 108: userrpc.UserRpc.userListLevel:input_type -> userrpc.UserListLevelReq
	97,  // 109: userrpc.UserRpc.listFlagUsed:input_type -> userrpc.ListFlagUsedReq
	103, // 110: userrpc.UserRpc.addUserFlag:input_type -> userrpc.AddUserFlagReq
	105, // 111: userrpc.UserRpc.listMerchant:input_type -> userrpc.ListMerchantReq
	108, // 112: userrpc.UserRpc.refreshGetRule:input_type -> userrpc.RefreshGetRuleReq
	112, // 113: userrpc.UserRpc.updateUserInfo:input_type -> userrpc.UpdateUserInfoReq
	114, // 114: userrpc.UserRpc.onLineNum:input_type -> userrpc.OnLineNumReq
	117, // 115: userrpc.UserRpc.getPushDnData:input_type -> userrpc.GetPushDnDataReq
	120, // 116: userrpc.UserRpc.addUser:input_type -> userrpc.AddUserReq
	162, // 117: userrpc.UserRpc.AdminAgentLineList:input_type -> userrpc.AdminAgentLineListReq
	122, // 118: userrpc.UserRpc.getAdminRuleList:input_type -> userrpc.GetAdminRuleListReq
	129, // 119: userrpc.UserRpc.QueryAdminAllRuleTitleManager:input_type -> userrpc.QueryAdminAllRuleTitleManagerReq
	131, // 120: userrpc.UserRpc.QueryAdminRuleTitleManager:input_type -> userrpc.QueryAdminRuleTitleManagerReq
	133, // 121: userrpc.UserRpc.DelRoleAuthManager:input_type -> userrpc.DelRoleAuthManagerReq
	135, // 122: userrpc.UserRpc.GetRoleAuthManagerList:input_type -> userrpc.GetRoleAuthManagerListReq
	139, // 123: userrpc.UserRpc.UpdateRoleAuthManager:input_type -> userrpc.UpdateRoleAuthManagerReq
	144, // 124: userrpc.UserRpc.UpdateAdminUser:input_type -> userrpc.UpdateAdminUserReq
	160, // 125: userrpc.UserRpc.UpdateUserGroup:input_type -> userrpc.UpdateUserGroupReq
	148, // 126: userrpc.UserRpc.GetAdminList:input_type -> userrpc.GetAdminListReq
	142, // 127: userrpc.UserRpc.GetAllRoleList:input_type -> userrpc.GetAllRoleListReq
	155, // 128: userrpc.UserRpc.GetUserGroupList:input_type -> userrpc.GetUserGroupListReq
	158, // 129: userrpc.UserRpc.GetAllAdminGroupList:input_type -> userrpc.GetAllAdminGroupListReq
	150, // 130: userrpc.UserRpc.AddAdmin:input_type -> userrpc.AddAdminReq
	166, // 131: userrpc.UserRpc.getUserRetentionRate:input_type -> userrpc.GetUserRetentionRateReq
	169, // 132: userrpc.UserRpc.RegisterUsernamePrompt:input_type -> userrpc.RegisterUsernamePromptReq
	5,   // 133: userrpc.UserRpc.balance:output_type -> userrpc.agResp
	54,  // 134: userrpc.UserRpc.login:output_type -> userrpc.LoginData
	54,  // 135: userrpc.UserRpc.googleAuthLogin:output_type -> userrpc.LoginData
	54,  // 136: userrpc.UserRpc.register:output_type -> userrpc.LoginData
	54,  // 137: userrpc.UserRpc.mobileLogin:output_type -> userrpc.LoginData
	29,  // 138: userrpc.UserRpc.logout:output_type -> userrpc.LogoutResponse
	69,  // 139: userrpc.UserRpc.getTokenByRefreshToken:output_type -> userrpc.GetTokenByRefreshTokenResponse
	35,  // 140: userrpc.UserRpc.getBonusRecord:output_type -> userrpc.BonusRecordResponse
	8,   // 141: userrpc.UserRpc.bonusRecordExport:output_type -> userrpc.BonusRecordExportResponse
	19,  // 142: userrpc.UserRpc.init:output_type -> userrpc.ConfigResp
	36,  // 143: userrpc.UserRpc.getUserCoin:output_type -> userrpc.UserCoinResponse
	31,  // 144: userrpc.UserRpc.adminTransfer:output_type -> userrpc.AdminTransferResponse
	39,  // 145: userrpc.UserRpc.listLevel:output_type -> userrpc.ListLevelDto
	32,  // 146: userrpc.UserRpc.userStatusInfo:output_type -> userrpc.UserStatusInfoDto
	54,  // 147: userrpc.UserRpc.updateUserProfile:output_type -> userrpc.LoginData
	54,  // 148: userrpc.UserRpc.userProfile:output_type -> userrpc.LoginData
	1,   // 149: userrpc.UserRpc.resetMobile:output_type -> userrpc.resetMobileResp
	7,   // 150: userrpc.UserRpc.sendSmsCode:output_type -> userrpc.SendResp
	7,   // 151: userrpc.UserRpc.sendSesCode:output_type -> userrpc.SendResp
	7,   // 152: userrpc.UserRpc.sendSnsCode:output_type -> userrpc.SendResp
	7,   // 153: userrpc.UserRpc.forgotPassword:output_type -> userrpc.SendResp
	7,   // 154: userrpc.UserRpc.resetPassword:output_type -> userrpc.SendResp
	7,   // 155: userrpc.UserRpc.resetEmail:output_type -> userrpc.SendResp
	7,   // 156: userrpc.UserRpc.sendSms:output_type -> userrpc.SendResp
	7,   // 157: userrpc.UserRpc.setPassword:output_type -> userrpc.SendResp
	46,  // 158: userrpc.UserRpc.betByToken:output_type -> userrpc.BetByTokenResDto
	9,   // 159: userrpc.UserRpc.memberShipDetails:output_type -> userrpc.MemberShipResp
	41,  // 160: userrpc.UserRpc.memberShipLevelDetails:output_type -> userrpc.MemberShipLevelResp
	25,  // 161: userrpc.UserRpc.userLevelInfo:output_type -> userrpc.UserLevelResDto
	51,  // 162: userrpc.UserRpc.userLevelDetails:output_type -> userrpc.UserDetailsResDto
	11,  // 163: userrpc.UserRpc.userLevelBenefits:output_type -> userrpc.UserLevelBenefitsResp
	52,  // 164: userrpc.UserRpc.userLeveReward:output_type -> userrpc.UserLevelRewardResp
	13,  // 165: userrpc.UserRpc.receive:output_type -> userrpc.receiveResp
	14,  // 166: userrpc.UserRpc.getWalletRecord:output_type -> userrpc.WalletRecordResponse
	38,  // 167: userrpc.UserRpc.getWalletStatistics:output_type -> userrpc.WalletStatisticsResponse
	18,  // 168: userrpc.UserRpc.walletRecordExport:output_type -> userrpc.WalletRecordExportResponse
	72,  // 169: userrpc.UserRpc.initCity:output_type -> userrpc.InitCityResponse
	76,  // 170: userrpc.UserRpc.userList:output_type -> userrpc.UserListResp
	81,  // 171: userrpc.UserRpc.userDetail:output_type -> userrpc.UserDetailResp
	83,  // 172: userrpc.UserRpc.userExportList:output_type -> userrpc.UserExportListResp
	85,  // 173: userrpc.UserRpc.userMemberType:output_type -> userrpc.UserMemberTypeResp
	89,  // 174: userrpc.UserRpc.userMemberStatus:output_type -> userrpc.UserMemberStatusResp
	92,  // 175: userrpc.UserRpc.userListFlag:output_type -> userrpc.UserListFlagResp
	95,  // 176: userrpc.UserRpc.userListLevel:output_type -> userrpc.UserListLevelResp
	99,  // 177: userrpc.UserRpc.listFlagUsed:output_type -> userrpc.ListFlagUsedResp
	104, // 178: userrpc.UserRpc.addUserFlag:output_type -> userrpc.AddUserFlagResp
	106, // 179: userrpc.UserRpc.listMerchant:output_type -> userrpc.ListMerchantResp
	109, // 180: userrpc.UserRpc.refreshGetRule:output_type -> userrpc.RefreshGetRuleResp
	113, // 181: userrpc.UserRpc.updateUserInfo:output_type -> userrpc.UpdateUserInfoResp
	115, // 182: userrpc.UserRpc.onLineNum:output_type -> userrpc.OnLineNumResp
	118, // 183: userrpc.UserRpc.getPushDnData:output_type -> userrpc.GetPushDnDataResp
	121, // 184: userrpc.UserRpc.addUser:output_type -> userrpc.AddUserResp
	164, // 185: userrpc.UserRpc.AdminAgentLineList:output_type -> userrpc.AdminAgentLineListRes
	125, // 186: userrpc.UserRpc.getAdminRuleList:output_type -> userrpc.GetAdminRuleListResp
	130, // 187: userrpc.UserRpc.QueryAdminAllRuleTitleManager:output_type -> userrpc.QueryAdminAllRuleTitleManagerResp
	132, // 188: userrpc.UserRpc.QueryAdminRuleTitleManager:output_type -> userrpc.QueryAdminRuleTitleManagerResp
	134, // 189: userrpc.UserRpc.DelRoleAuthManager:output_type -> userrpc.DelRoleAuthManagerResp
	136, // 190: userrpc.UserRpc.GetRoleAuthManagerList:output_type -> userrpc.GetRoleAuthManagerListResp
	140, // 191: userrpc.UserRpc.UpdateRoleAuthManager:output_type -> userrpc.UpdateRoleAuthManagerResp
	145, // 192: userrpc.UserRpc.UpdateAdminUser:output_type -> userrpc.UpdateAdminUserResp
	161, // 193: userrpc.UserRpc.UpdateUserGroup:output_type -> userrpc.UpdateUserGroupResp
	149, // 194: userrpc.UserRpc.GetAdminList:output_type -> userrpc.GetAdminListResp
	143, // 195: userrpc.UserRpc.GetAllRoleList:output_type -> userrpc.GetAllRoleListResp
	156, // 196: userrpc.UserRpc.GetUserGroupList:output_type -> userrpc.GetUserGroupListResp
	159, // 197: userrpc.UserRpc.GetAllAdminGroupList:output_type -> userrpc.GetAllAdminGroupListResp
	151, // 198: userrpc.UserRpc.AddAdmin:output_type -> userrpc.AddAdminResp
	167, // 199: userrpc.UserRpc.getUserRetentionRate:output_type -> userrpc.GetUserRetentionRateResp
	170, // 200: userrpc.UserRpc.RegisterUsernamePrompt:output_type -> userrpc.RegisterUsernamePromptResp
	133, // [133:201] is the sub-list for method output_type
	65,  // [65:133] is the sub-list for method input_type
	65,  // [65:65] is the sub-list for extension type_name
	65,  // [65:65] is the sub-list for extension extendee
	0,   // [0:65] is the sub-list for field type_name
}

func init() { file_userrpc_proto_init() }
func file_userrpc_proto_init() {
	if File_userrpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   173,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userrpc_proto_goTypes,
		DependencyIndexes: file_userrpc_proto_depIdxs,
		MessageInfos:      file_userrpc_proto_msgTypes,
	}.Build()
	File_userrpc_proto = out.File
	file_userrpc_proto_rawDesc = nil
	file_userrpc_proto_goTypes = nil
	file_userrpc_proto_depIdxs = nil
}
