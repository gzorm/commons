// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: userrpc.proto

package userrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserRpc_Balance_FullMethodName                       = "/userrpc.UserRpc/balance"
	UserRpc_Login_FullMethodName                         = "/userrpc.UserRpc/login"
	UserRpc_GoogleAuthLogin_FullMethodName               = "/userrpc.UserRpc/googleAuthLogin"
	UserRpc_Register_FullMethodName                      = "/userrpc.UserRpc/register"
	UserRpc_MobileLogin_FullMethodName                   = "/userrpc.UserRpc/mobileLogin"
	UserRpc_Logout_FullMethodName                        = "/userrpc.UserRpc/logout"
	UserRpc_GetTokenByRefreshToken_FullMethodName        = "/userrpc.UserRpc/getTokenByRefreshToken"
	UserRpc_GetBonusRecord_FullMethodName                = "/userrpc.UserRpc/getBonusRecord"
	UserRpc_BonusRecordExport_FullMethodName             = "/userrpc.UserRpc/bonusRecordExport"
	UserRpc_Init_FullMethodName                          = "/userrpc.UserRpc/init"
	UserRpc_GetUserCoin_FullMethodName                   = "/userrpc.UserRpc/getUserCoin"
	UserRpc_AdminTransfer_FullMethodName                 = "/userrpc.UserRpc/adminTransfer"
	UserRpc_ListLevel_FullMethodName                     = "/userrpc.UserRpc/listLevel"
	UserRpc_UserStatusInfo_FullMethodName                = "/userrpc.UserRpc/userStatusInfo"
	UserRpc_UpdateUserProfile_FullMethodName             = "/userrpc.UserRpc/updateUserProfile"
	UserRpc_UserProfile_FullMethodName                   = "/userrpc.UserRpc/userProfile"
	UserRpc_ResetMobile_FullMethodName                   = "/userrpc.UserRpc/resetMobile"
	UserRpc_SendSmsCode_FullMethodName                   = "/userrpc.UserRpc/sendSmsCode"
	UserRpc_SendSesCode_FullMethodName                   = "/userrpc.UserRpc/sendSesCode"
	UserRpc_SendSnsCode_FullMethodName                   = "/userrpc.UserRpc/sendSnsCode"
	UserRpc_ForgotPassword_FullMethodName                = "/userrpc.UserRpc/forgotPassword"
	UserRpc_ResetPassword_FullMethodName                 = "/userrpc.UserRpc/resetPassword"
	UserRpc_ResetEmail_FullMethodName                    = "/userrpc.UserRpc/resetEmail"
	UserRpc_SendSms_FullMethodName                       = "/userrpc.UserRpc/sendSms"
	UserRpc_SetPassword_FullMethodName                   = "/userrpc.UserRpc/setPassword"
	UserRpc_BetByToken_FullMethodName                    = "/userrpc.UserRpc/betByToken"
	UserRpc_MemberShipDetails_FullMethodName             = "/userrpc.UserRpc/memberShipDetails"
	UserRpc_MemberShipLevelDetails_FullMethodName        = "/userrpc.UserRpc/memberShipLevelDetails"
	UserRpc_UserLevelInfo_FullMethodName                 = "/userrpc.UserRpc/userLevelInfo"
	UserRpc_UserLevelDetails_FullMethodName              = "/userrpc.UserRpc/userLevelDetails"
	UserRpc_UserLevelBenefits_FullMethodName             = "/userrpc.UserRpc/userLevelBenefits"
	UserRpc_UserLeveReward_FullMethodName                = "/userrpc.UserRpc/userLeveReward"
	UserRpc_Receive_FullMethodName                       = "/userrpc.UserRpc/receive"
	UserRpc_GetWalletRecord_FullMethodName               = "/userrpc.UserRpc/getWalletRecord"
	UserRpc_GetWalletStatistics_FullMethodName           = "/userrpc.UserRpc/getWalletStatistics"
	UserRpc_WalletRecordExport_FullMethodName            = "/userrpc.UserRpc/walletRecordExport"
	UserRpc_InitCity_FullMethodName                      = "/userrpc.UserRpc/initCity"
	UserRpc_UserList_FullMethodName                      = "/userrpc.UserRpc/userList"
	UserRpc_UserDetail_FullMethodName                    = "/userrpc.UserRpc/userDetail"
	UserRpc_UserExportList_FullMethodName                = "/userrpc.UserRpc/userExportList"
	UserRpc_UserMemberType_FullMethodName                = "/userrpc.UserRpc/userMemberType"
	UserRpc_UserMemberStatus_FullMethodName              = "/userrpc.UserRpc/userMemberStatus"
	UserRpc_UserListFlag_FullMethodName                  = "/userrpc.UserRpc/userListFlag"
	UserRpc_UserListLevel_FullMethodName                 = "/userrpc.UserRpc/userListLevel"
	UserRpc_ListFlagUsed_FullMethodName                  = "/userrpc.UserRpc/listFlagUsed"
	UserRpc_AddUserFlag_FullMethodName                   = "/userrpc.UserRpc/addUserFlag"
	UserRpc_ListMerchant_FullMethodName                  = "/userrpc.UserRpc/listMerchant"
	UserRpc_RefreshGetRule_FullMethodName                = "/userrpc.UserRpc/refreshGetRule"
	UserRpc_UpdateUserInfo_FullMethodName                = "/userrpc.UserRpc/updateUserInfo"
	UserRpc_OnLineNum_FullMethodName                     = "/userrpc.UserRpc/onLineNum"
	UserRpc_GetPushDnData_FullMethodName                 = "/userrpc.UserRpc/getPushDnData"
	UserRpc_AddUser_FullMethodName                       = "/userrpc.UserRpc/addUser"
	UserRpc_AdminAgentLineList_FullMethodName            = "/userrpc.UserRpc/AdminAgentLineList"
	UserRpc_GetAdminRuleList_FullMethodName              = "/userrpc.UserRpc/getAdminRuleList"
	UserRpc_QueryAdminAllRuleTitleManager_FullMethodName = "/userrpc.UserRpc/QueryAdminAllRuleTitleManager"
	UserRpc_QueryAdminRuleTitleManager_FullMethodName    = "/userrpc.UserRpc/QueryAdminRuleTitleManager"
	UserRpc_DelRoleAuthManager_FullMethodName            = "/userrpc.UserRpc/DelRoleAuthManager"
	UserRpc_GetRoleAuthManagerList_FullMethodName        = "/userrpc.UserRpc/GetRoleAuthManagerList"
	UserRpc_UpdateRoleAuthManager_FullMethodName         = "/userrpc.UserRpc/UpdateRoleAuthManager"
	UserRpc_UpdateAdminUser_FullMethodName               = "/userrpc.UserRpc/UpdateAdminUser"
	UserRpc_UpdateUserGroup_FullMethodName               = "/userrpc.UserRpc/UpdateUserGroup"
	UserRpc_GetUserRetentionRate_FullMethodName          = "/userrpc.UserRpc/getUserRetentionRate"
	UserRpc_RegisterUsernamePrompt_FullMethodName        = "/userrpc.UserRpc/RegisterUsernamePrompt"
)

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcClient interface {
	// group: ag
	Balance(ctx context.Context, in *AgRes, opts ...grpc.CallOption) (*AgResp, error)
	// group: authentication
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginData, error)
	// group: authentication
	GoogleAuthLogin(ctx context.Context, in *GoogleAuthLoginRequest, opts ...grpc.CallOption) (*LoginData, error)
	// group: authentication
	// lock:Mobile:zero-user-rpc-dl:3
	Register(ctx context.Context, in *RegisterReqDto, opts ...grpc.CallOption) (*LoginData, error)
	// group: authentication
	MobileLogin(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*LoginData, error)
	// group: authentication
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// group:authentication
	GetTokenByRefreshToken(ctx context.Context, in *GetTokenByRefreshTokenRequest, opts ...grpc.CallOption) (*GetTokenByRefreshTokenResponse, error)
	// group: bonusRecord
	GetBonusRecord(ctx context.Context, in *BonusRecordRequest, opts ...grpc.CallOption) (*BonusRecordResponse, error)
	// group: bonusRecordExport
	BonusRecordExport(ctx context.Context, in *BonusRecordRequest, opts ...grpc.CallOption) (*BonusRecordExportResponse, error)
	// group: common
	Init(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConfigResp, error)
	// group: userCoin
	GetUserCoin(ctx context.Context, in *UserCoinRequest, opts ...grpc.CallOption) (*UserCoinResponse, error)
	// group: adminTransfer
	AdminTransfer(ctx context.Context, in *AdminTransferRequest, opts ...grpc.CallOption) (*AdminTransferResponse, error)
	// group: miscellaneous
	ListLevel(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*ListLevelDto, error)
	// group: miscellaneous
	UserStatusInfo(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserStatusInfoDto, error)
	// group: profile
	UpdateUserProfile(ctx context.Context, in *UpdateProfileReqDto, opts ...grpc.CallOption) (*LoginData, error)
	// group: profile
	UserProfile(ctx context.Context, in *UserProfileRes, opts ...grpc.CallOption) (*LoginData, error)
	// group: profile
	ResetMobile(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*ResetMobileResp, error)
	// group: security
	SendSmsCode(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	SendSesCode(ctx context.Context, in *SendSesCodeReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	SendSnsCode(ctx context.Context, in *SendSnsCodeReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	ForgotPassword(ctx context.Context, in *ForgotPasswordReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	ResetPassword(ctx context.Context, in *ResetPasswordReqDtoNew, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	ResetEmail(ctx context.Context, in *ResetEmailReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	SendSms(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	SetPassword(ctx context.Context, in *SetPasswordReqDto, opts ...grpc.CallOption) (*SendResp, error)
	// group: security
	BetByToken(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BetByTokenResDto, error)
	// group: vipInfo
	MemberShipDetails(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*MemberShipResp, error)
	// group: vipInfo
	MemberShipLevelDetails(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*MemberShipLevelResp, error)
	// group: vipLevel
	UserLevelInfo(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserLevelResDto, error)
	// group: vipLevel
	UserLevelDetails(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserDetailsResDto, error)
	// group: vipLevel
	UserLevelBenefits(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserLevelBenefitsResp, error)
	// group: vipOther
	UserLeveReward(ctx context.Context, in *UserLevelRewardReqDto, opts ...grpc.CallOption) (*UserLevelRewardResp, error)
	//	group: vipOther
	//
	// lock:Id:zero-user-rpc-vip-receive:2
	Receive(ctx context.Context, in *ReceiveReqDto, opts ...grpc.CallOption) (*ReceiveResp, error)
	// group: walletRecord
	GetWalletRecord(ctx context.Context, in *WalletRecordRequest, opts ...grpc.CallOption) (*WalletRecordResponse, error)
	// group: walletStatistics
	GetWalletStatistics(ctx context.Context, in *WalletStatisticsRequest, opts ...grpc.CallOption) (*WalletStatisticsResponse, error)
	// group: walletRecordExport
	WalletRecordExport(ctx context.Context, in *WalletRecordRequest, opts ...grpc.CallOption) (*WalletRecordExportResponse, error)
	// group: home
	InitCity(ctx context.Context, in *InitCityRequest, opts ...grpc.CallOption) (*InitCityResponse, error)
	// group:user
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// group:user
	UserDetail(ctx context.Context, in *UserDetailReq, opts ...grpc.CallOption) (*UserDetailResp, error)
	// group:user
	UserExportList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserExportListResp, error)
	//group:user
	UserMemberType(ctx context.Context, in *UserMemberTypeReq, opts ...grpc.CallOption) (*UserMemberTypeResp, error)
	//group:user
	UserMemberStatus(ctx context.Context, in *UserMemberStatusReq, opts ...grpc.CallOption) (*UserMemberStatusResp, error)
	//group:user
	UserListFlag(ctx context.Context, in *UserListFlagReq, opts ...grpc.CallOption) (*UserListFlagResp, error)
	//group:user
	UserListLevel(ctx context.Context, in *UserListLevelReq, opts ...grpc.CallOption) (*UserListLevelResp, error)
	//group:user
	ListFlagUsed(ctx context.Context, in *ListFlagUsedReq, opts ...grpc.CallOption) (*ListFlagUsedResp, error)
	//group:user
	AddUserFlag(ctx context.Context, in *AddUserFlagReq, opts ...grpc.CallOption) (*AddUserFlagResp, error)
	//group:user
	ListMerchant(ctx context.Context, in *ListMerchantReq, opts ...grpc.CallOption) (*ListMerchantResp, error)
	//group:user
	RefreshGetRule(ctx context.Context, in *RefreshGetRuleReq, opts ...grpc.CallOption) (*RefreshGetRuleResp, error)
	// group:user
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	//group:user
	OnLineNum(ctx context.Context, in *OnLineNumReq, opts ...grpc.CallOption) (*OnLineNumResp, error)
	//group:user
	GetPushDnData(ctx context.Context, in *GetPushDnDataReq, opts ...grpc.CallOption) (*GetPushDnDataResp, error)
	//group:user
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	// admin: agentList
	AdminAgentLineList(ctx context.Context, in *AdminAgentLineListReq, opts ...grpc.CallOption) (*AdminAgentLineListRes, error)
	//group:rule
	GetAdminRuleList(ctx context.Context, in *GetAdminRuleListReq, opts ...grpc.CallOption) (*GetAdminRuleListResp, error)
	//group:rule
	QueryAdminAllRuleTitleManager(ctx context.Context, in *QueryAdminAllRuleTitleManagerReq, opts ...grpc.CallOption) (*QueryAdminAllRuleTitleManagerResp, error)
	//group:rule
	QueryAdminRuleTitleManager(ctx context.Context, in *QueryAdminRuleTitleManagerReq, opts ...grpc.CallOption) (*QueryAdminRuleTitleManagerResp, error)
	//group:rule
	DelRoleAuthManager(ctx context.Context, in *DelRoleAuthManagerReq, opts ...grpc.CallOption) (*DelRoleAuthManagerResp, error)
	// group: rule
	GetRoleAuthManagerList(ctx context.Context, in *GetRoleAuthManagerListReq, opts ...grpc.CallOption) (*GetRoleAuthManagerListResp, error)
	// group: rule
	UpdateRoleAuthManager(ctx context.Context, in *UpdateRoleAuthManagerReq, opts ...grpc.CallOption) (*UpdateRoleAuthManagerResp, error)
	// group: rule
	UpdateAdminUser(ctx context.Context, in *UpdateAdminUserReq, opts ...grpc.CallOption) (*UpdateAdminUserResp, error)
	// group: rule
	UpdateUserGroup(ctx context.Context, in *UpdateUserGroupReq, opts ...grpc.CallOption) (*UpdateUserGroupResp, error)
	//group:user
	GetUserRetentionRate(ctx context.Context, in *GetUserRetentionRateReq, opts ...grpc.CallOption) (*GetUserRetentionRateResp, error)
	//group:user
	RegisterUsernamePrompt(ctx context.Context, in *RegisterUsernamePromptReq, opts ...grpc.CallOption) (*RegisterUsernamePromptResp, error)
}

type userRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcClient(cc grpc.ClientConnInterface) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) Balance(ctx context.Context, in *AgRes, opts ...grpc.CallOption) (*AgResp, error) {
	out := new(AgResp)
	err := c.cc.Invoke(ctx, UserRpc_Balance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, UserRpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GoogleAuthLogin(ctx context.Context, in *GoogleAuthLoginRequest, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, UserRpc_GoogleAuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Register(ctx context.Context, in *RegisterReqDto, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, UserRpc_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) MobileLogin(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, UserRpc_MobileLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, UserRpc_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetTokenByRefreshToken(ctx context.Context, in *GetTokenByRefreshTokenRequest, opts ...grpc.CallOption) (*GetTokenByRefreshTokenResponse, error) {
	out := new(GetTokenByRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserRpc_GetTokenByRefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetBonusRecord(ctx context.Context, in *BonusRecordRequest, opts ...grpc.CallOption) (*BonusRecordResponse, error) {
	out := new(BonusRecordResponse)
	err := c.cc.Invoke(ctx, UserRpc_GetBonusRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) BonusRecordExport(ctx context.Context, in *BonusRecordRequest, opts ...grpc.CallOption) (*BonusRecordExportResponse, error) {
	out := new(BonusRecordExportResponse)
	err := c.cc.Invoke(ctx, UserRpc_BonusRecordExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Init(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, UserRpc_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserCoin(ctx context.Context, in *UserCoinRequest, opts ...grpc.CallOption) (*UserCoinResponse, error) {
	out := new(UserCoinResponse)
	err := c.cc.Invoke(ctx, UserRpc_GetUserCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AdminTransfer(ctx context.Context, in *AdminTransferRequest, opts ...grpc.CallOption) (*AdminTransferResponse, error) {
	out := new(AdminTransferResponse)
	err := c.cc.Invoke(ctx, UserRpc_AdminTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ListLevel(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*ListLevelDto, error) {
	out := new(ListLevelDto)
	err := c.cc.Invoke(ctx, UserRpc_ListLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserStatusInfo(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserStatusInfoDto, error) {
	out := new(UserStatusInfoDto)
	err := c.cc.Invoke(ctx, UserRpc_UserStatusInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserProfile(ctx context.Context, in *UpdateProfileReqDto, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserProfile(ctx context.Context, in *UserProfileRes, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, UserRpc_UserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ResetMobile(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*ResetMobileResp, error) {
	out := new(ResetMobileResp)
	err := c.cc.Invoke(ctx, UserRpc_ResetMobile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SendSmsCode(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_SendSmsCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SendSesCode(ctx context.Context, in *SendSesCodeReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_SendSesCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SendSnsCode(ctx context.Context, in *SendSnsCodeReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_SendSnsCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ForgotPassword(ctx context.Context, in *ForgotPasswordReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_ForgotPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ResetPassword(ctx context.Context, in *ResetPasswordReqDtoNew, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ResetEmail(ctx context.Context, in *ResetEmailReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_ResetEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SendSms(ctx context.Context, in *SendSmsCodeReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_SendSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SetPassword(ctx context.Context, in *SetPasswordReqDto, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, UserRpc_SetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) BetByToken(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BetByTokenResDto, error) {
	out := new(BetByTokenResDto)
	err := c.cc.Invoke(ctx, UserRpc_BetByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) MemberShipDetails(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*MemberShipResp, error) {
	out := new(MemberShipResp)
	err := c.cc.Invoke(ctx, UserRpc_MemberShipDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) MemberShipLevelDetails(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*MemberShipLevelResp, error) {
	out := new(MemberShipLevelResp)
	err := c.cc.Invoke(ctx, UserRpc_MemberShipLevelDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserLevelInfo(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserLevelResDto, error) {
	out := new(UserLevelResDto)
	err := c.cc.Invoke(ctx, UserRpc_UserLevelInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserLevelDetails(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserDetailsResDto, error) {
	out := new(UserDetailsResDto)
	err := c.cc.Invoke(ctx, UserRpc_UserLevelDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserLevelBenefits(ctx context.Context, in *BaseInfo, opts ...grpc.CallOption) (*UserLevelBenefitsResp, error) {
	out := new(UserLevelBenefitsResp)
	err := c.cc.Invoke(ctx, UserRpc_UserLevelBenefits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserLeveReward(ctx context.Context, in *UserLevelRewardReqDto, opts ...grpc.CallOption) (*UserLevelRewardResp, error) {
	out := new(UserLevelRewardResp)
	err := c.cc.Invoke(ctx, UserRpc_UserLeveReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Receive(ctx context.Context, in *ReceiveReqDto, opts ...grpc.CallOption) (*ReceiveResp, error) {
	out := new(ReceiveResp)
	err := c.cc.Invoke(ctx, UserRpc_Receive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetWalletRecord(ctx context.Context, in *WalletRecordRequest, opts ...grpc.CallOption) (*WalletRecordResponse, error) {
	out := new(WalletRecordResponse)
	err := c.cc.Invoke(ctx, UserRpc_GetWalletRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetWalletStatistics(ctx context.Context, in *WalletStatisticsRequest, opts ...grpc.CallOption) (*WalletStatisticsResponse, error) {
	out := new(WalletStatisticsResponse)
	err := c.cc.Invoke(ctx, UserRpc_GetWalletStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) WalletRecordExport(ctx context.Context, in *WalletRecordRequest, opts ...grpc.CallOption) (*WalletRecordExportResponse, error) {
	out := new(WalletRecordExportResponse)
	err := c.cc.Invoke(ctx, UserRpc_WalletRecordExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) InitCity(ctx context.Context, in *InitCityRequest, opts ...grpc.CallOption) (*InitCityResponse, error) {
	out := new(InitCityResponse)
	err := c.cc.Invoke(ctx, UserRpc_InitCity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, UserRpc_UserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserDetail(ctx context.Context, in *UserDetailReq, opts ...grpc.CallOption) (*UserDetailResp, error) {
	out := new(UserDetailResp)
	err := c.cc.Invoke(ctx, UserRpc_UserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserExportList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserExportListResp, error) {
	out := new(UserExportListResp)
	err := c.cc.Invoke(ctx, UserRpc_UserExportList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserMemberType(ctx context.Context, in *UserMemberTypeReq, opts ...grpc.CallOption) (*UserMemberTypeResp, error) {
	out := new(UserMemberTypeResp)
	err := c.cc.Invoke(ctx, UserRpc_UserMemberType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserMemberStatus(ctx context.Context, in *UserMemberStatusReq, opts ...grpc.CallOption) (*UserMemberStatusResp, error) {
	out := new(UserMemberStatusResp)
	err := c.cc.Invoke(ctx, UserRpc_UserMemberStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserListFlag(ctx context.Context, in *UserListFlagReq, opts ...grpc.CallOption) (*UserListFlagResp, error) {
	out := new(UserListFlagResp)
	err := c.cc.Invoke(ctx, UserRpc_UserListFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserListLevel(ctx context.Context, in *UserListLevelReq, opts ...grpc.CallOption) (*UserListLevelResp, error) {
	out := new(UserListLevelResp)
	err := c.cc.Invoke(ctx, UserRpc_UserListLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ListFlagUsed(ctx context.Context, in *ListFlagUsedReq, opts ...grpc.CallOption) (*ListFlagUsedResp, error) {
	out := new(ListFlagUsedResp)
	err := c.cc.Invoke(ctx, UserRpc_ListFlagUsed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AddUserFlag(ctx context.Context, in *AddUserFlagReq, opts ...grpc.CallOption) (*AddUserFlagResp, error) {
	out := new(AddUserFlagResp)
	err := c.cc.Invoke(ctx, UserRpc_AddUserFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ListMerchant(ctx context.Context, in *ListMerchantReq, opts ...grpc.CallOption) (*ListMerchantResp, error) {
	out := new(ListMerchantResp)
	err := c.cc.Invoke(ctx, UserRpc_ListMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RefreshGetRule(ctx context.Context, in *RefreshGetRuleReq, opts ...grpc.CallOption) (*RefreshGetRuleResp, error) {
	out := new(RefreshGetRuleResp)
	err := c.cc.Invoke(ctx, UserRpc_RefreshGetRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) OnLineNum(ctx context.Context, in *OnLineNumReq, opts ...grpc.CallOption) (*OnLineNumResp, error) {
	out := new(OnLineNumResp)
	err := c.cc.Invoke(ctx, UserRpc_OnLineNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetPushDnData(ctx context.Context, in *GetPushDnDataReq, opts ...grpc.CallOption) (*GetPushDnDataResp, error) {
	out := new(GetPushDnDataResp)
	err := c.cc.Invoke(ctx, UserRpc_GetPushDnData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, UserRpc_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AdminAgentLineList(ctx context.Context, in *AdminAgentLineListReq, opts ...grpc.CallOption) (*AdminAgentLineListRes, error) {
	out := new(AdminAgentLineListRes)
	err := c.cc.Invoke(ctx, UserRpc_AdminAgentLineList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetAdminRuleList(ctx context.Context, in *GetAdminRuleListReq, opts ...grpc.CallOption) (*GetAdminRuleListResp, error) {
	out := new(GetAdminRuleListResp)
	err := c.cc.Invoke(ctx, UserRpc_GetAdminRuleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) QueryAdminAllRuleTitleManager(ctx context.Context, in *QueryAdminAllRuleTitleManagerReq, opts ...grpc.CallOption) (*QueryAdminAllRuleTitleManagerResp, error) {
	out := new(QueryAdminAllRuleTitleManagerResp)
	err := c.cc.Invoke(ctx, UserRpc_QueryAdminAllRuleTitleManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) QueryAdminRuleTitleManager(ctx context.Context, in *QueryAdminRuleTitleManagerReq, opts ...grpc.CallOption) (*QueryAdminRuleTitleManagerResp, error) {
	out := new(QueryAdminRuleTitleManagerResp)
	err := c.cc.Invoke(ctx, UserRpc_QueryAdminRuleTitleManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) DelRoleAuthManager(ctx context.Context, in *DelRoleAuthManagerReq, opts ...grpc.CallOption) (*DelRoleAuthManagerResp, error) {
	out := new(DelRoleAuthManagerResp)
	err := c.cc.Invoke(ctx, UserRpc_DelRoleAuthManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetRoleAuthManagerList(ctx context.Context, in *GetRoleAuthManagerListReq, opts ...grpc.CallOption) (*GetRoleAuthManagerListResp, error) {
	out := new(GetRoleAuthManagerListResp)
	err := c.cc.Invoke(ctx, UserRpc_GetRoleAuthManagerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateRoleAuthManager(ctx context.Context, in *UpdateRoleAuthManagerReq, opts ...grpc.CallOption) (*UpdateRoleAuthManagerResp, error) {
	out := new(UpdateRoleAuthManagerResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateRoleAuthManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateAdminUser(ctx context.Context, in *UpdateAdminUserReq, opts ...grpc.CallOption) (*UpdateAdminUserResp, error) {
	out := new(UpdateAdminUserResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUserGroup(ctx context.Context, in *UpdateUserGroupReq, opts ...grpc.CallOption) (*UpdateUserGroupResp, error) {
	out := new(UpdateUserGroupResp)
	err := c.cc.Invoke(ctx, UserRpc_UpdateUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserRetentionRate(ctx context.Context, in *GetUserRetentionRateReq, opts ...grpc.CallOption) (*GetUserRetentionRateResp, error) {
	out := new(GetUserRetentionRateResp)
	err := c.cc.Invoke(ctx, UserRpc_GetUserRetentionRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RegisterUsernamePrompt(ctx context.Context, in *RegisterUsernamePromptReq, opts ...grpc.CallOption) (*RegisterUsernamePromptResp, error) {
	out := new(RegisterUsernamePromptResp)
	err := c.cc.Invoke(ctx, UserRpc_RegisterUsernamePrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
// All implementations must embed UnimplementedUserRpcServer
// for forward compatibility
type UserRpcServer interface {
	// group: ag
	Balance(context.Context, *AgRes) (*AgResp, error)
	// group: authentication
	Login(context.Context, *LoginRequest) (*LoginData, error)
	// group: authentication
	GoogleAuthLogin(context.Context, *GoogleAuthLoginRequest) (*LoginData, error)
	// group: authentication
	// lock:Mobile:zero-user-rpc-dl:3
	Register(context.Context, *RegisterReqDto) (*LoginData, error)
	// group: authentication
	MobileLogin(context.Context, *SendSmsCodeReqDto) (*LoginData, error)
	// group: authentication
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// group:authentication
	GetTokenByRefreshToken(context.Context, *GetTokenByRefreshTokenRequest) (*GetTokenByRefreshTokenResponse, error)
	// group: bonusRecord
	GetBonusRecord(context.Context, *BonusRecordRequest) (*BonusRecordResponse, error)
	// group: bonusRecordExport
	BonusRecordExport(context.Context, *BonusRecordRequest) (*BonusRecordExportResponse, error)
	// group: common
	Init(context.Context, *EmptyRequest) (*ConfigResp, error)
	// group: userCoin
	GetUserCoin(context.Context, *UserCoinRequest) (*UserCoinResponse, error)
	// group: adminTransfer
	AdminTransfer(context.Context, *AdminTransferRequest) (*AdminTransferResponse, error)
	// group: miscellaneous
	ListLevel(context.Context, *BaseInfo) (*ListLevelDto, error)
	// group: miscellaneous
	UserStatusInfo(context.Context, *BaseInfo) (*UserStatusInfoDto, error)
	// group: profile
	UpdateUserProfile(context.Context, *UpdateProfileReqDto) (*LoginData, error)
	// group: profile
	UserProfile(context.Context, *UserProfileRes) (*LoginData, error)
	// group: profile
	ResetMobile(context.Context, *SendSmsCodeReqDto) (*ResetMobileResp, error)
	// group: security
	SendSmsCode(context.Context, *SendSmsCodeReqDto) (*SendResp, error)
	// group: security
	SendSesCode(context.Context, *SendSesCodeReqDto) (*SendResp, error)
	// group: security
	SendSnsCode(context.Context, *SendSnsCodeReqDto) (*SendResp, error)
	// group: security
	ForgotPassword(context.Context, *ForgotPasswordReqDto) (*SendResp, error)
	// group: security
	ResetPassword(context.Context, *ResetPasswordReqDtoNew) (*SendResp, error)
	// group: security
	ResetEmail(context.Context, *ResetEmailReqDto) (*SendResp, error)
	// group: security
	SendSms(context.Context, *SendSmsCodeReqDto) (*SendResp, error)
	// group: security
	SetPassword(context.Context, *SetPasswordReqDto) (*SendResp, error)
	// group: security
	BetByToken(context.Context, *EmptyRequest) (*BetByTokenResDto, error)
	// group: vipInfo
	MemberShipDetails(context.Context, *BaseInfo) (*MemberShipResp, error)
	// group: vipInfo
	MemberShipLevelDetails(context.Context, *BaseInfo) (*MemberShipLevelResp, error)
	// group: vipLevel
	UserLevelInfo(context.Context, *BaseInfo) (*UserLevelResDto, error)
	// group: vipLevel
	UserLevelDetails(context.Context, *BaseInfo) (*UserDetailsResDto, error)
	// group: vipLevel
	UserLevelBenefits(context.Context, *BaseInfo) (*UserLevelBenefitsResp, error)
	// group: vipOther
	UserLeveReward(context.Context, *UserLevelRewardReqDto) (*UserLevelRewardResp, error)
	//	group: vipOther
	//
	// lock:Id:zero-user-rpc-vip-receive:2
	Receive(context.Context, *ReceiveReqDto) (*ReceiveResp, error)
	// group: walletRecord
	GetWalletRecord(context.Context, *WalletRecordRequest) (*WalletRecordResponse, error)
	// group: walletStatistics
	GetWalletStatistics(context.Context, *WalletStatisticsRequest) (*WalletStatisticsResponse, error)
	// group: walletRecordExport
	WalletRecordExport(context.Context, *WalletRecordRequest) (*WalletRecordExportResponse, error)
	// group: home
	InitCity(context.Context, *InitCityRequest) (*InitCityResponse, error)
	// group:user
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	// group:user
	UserDetail(context.Context, *UserDetailReq) (*UserDetailResp, error)
	// group:user
	UserExportList(context.Context, *UserListReq) (*UserExportListResp, error)
	//group:user
	UserMemberType(context.Context, *UserMemberTypeReq) (*UserMemberTypeResp, error)
	//group:user
	UserMemberStatus(context.Context, *UserMemberStatusReq) (*UserMemberStatusResp, error)
	//group:user
	UserListFlag(context.Context, *UserListFlagReq) (*UserListFlagResp, error)
	//group:user
	UserListLevel(context.Context, *UserListLevelReq) (*UserListLevelResp, error)
	//group:user
	ListFlagUsed(context.Context, *ListFlagUsedReq) (*ListFlagUsedResp, error)
	//group:user
	AddUserFlag(context.Context, *AddUserFlagReq) (*AddUserFlagResp, error)
	//group:user
	ListMerchant(context.Context, *ListMerchantReq) (*ListMerchantResp, error)
	//group:user
	RefreshGetRule(context.Context, *RefreshGetRuleReq) (*RefreshGetRuleResp, error)
	// group:user
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	//group:user
	OnLineNum(context.Context, *OnLineNumReq) (*OnLineNumResp, error)
	//group:user
	GetPushDnData(context.Context, *GetPushDnDataReq) (*GetPushDnDataResp, error)
	//group:user
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	// admin: agentList
	AdminAgentLineList(context.Context, *AdminAgentLineListReq) (*AdminAgentLineListRes, error)
	//group:rule
	GetAdminRuleList(context.Context, *GetAdminRuleListReq) (*GetAdminRuleListResp, error)
	//group:rule
	QueryAdminAllRuleTitleManager(context.Context, *QueryAdminAllRuleTitleManagerReq) (*QueryAdminAllRuleTitleManagerResp, error)
	//group:rule
	QueryAdminRuleTitleManager(context.Context, *QueryAdminRuleTitleManagerReq) (*QueryAdminRuleTitleManagerResp, error)
	//group:rule
	DelRoleAuthManager(context.Context, *DelRoleAuthManagerReq) (*DelRoleAuthManagerResp, error)
	// group: rule
	GetRoleAuthManagerList(context.Context, *GetRoleAuthManagerListReq) (*GetRoleAuthManagerListResp, error)
	// group: rule
	UpdateRoleAuthManager(context.Context, *UpdateRoleAuthManagerReq) (*UpdateRoleAuthManagerResp, error)
	// group: rule
	UpdateAdminUser(context.Context, *UpdateAdminUserReq) (*UpdateAdminUserResp, error)
	// group: rule
	UpdateUserGroup(context.Context, *UpdateUserGroupReq) (*UpdateUserGroupResp, error)
	//group:user
	GetUserRetentionRate(context.Context, *GetUserRetentionRateReq) (*GetUserRetentionRateResp, error)
	//group:user
	RegisterUsernamePrompt(context.Context, *RegisterUsernamePromptReq) (*RegisterUsernamePromptResp, error)
	mustEmbedUnimplementedUserRpcServer()
}

// UnimplementedUserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (UnimplementedUserRpcServer) Balance(context.Context, *AgRes) (*AgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedUserRpcServer) Login(context.Context, *LoginRequest) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserRpcServer) GoogleAuthLogin(context.Context, *GoogleAuthLoginRequest) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleAuthLogin not implemented")
}
func (UnimplementedUserRpcServer) Register(context.Context, *RegisterReqDto) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserRpcServer) MobileLogin(context.Context, *SendSmsCodeReqDto) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MobileLogin not implemented")
}
func (UnimplementedUserRpcServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserRpcServer) GetTokenByRefreshToken(context.Context, *GetTokenByRefreshTokenRequest) (*GetTokenByRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenByRefreshToken not implemented")
}
func (UnimplementedUserRpcServer) GetBonusRecord(context.Context, *BonusRecordRequest) (*BonusRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBonusRecord not implemented")
}
func (UnimplementedUserRpcServer) BonusRecordExport(context.Context, *BonusRecordRequest) (*BonusRecordExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BonusRecordExport not implemented")
}
func (UnimplementedUserRpcServer) Init(context.Context, *EmptyRequest) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedUserRpcServer) GetUserCoin(context.Context, *UserCoinRequest) (*UserCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoin not implemented")
}
func (UnimplementedUserRpcServer) AdminTransfer(context.Context, *AdminTransferRequest) (*AdminTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTransfer not implemented")
}
func (UnimplementedUserRpcServer) ListLevel(context.Context, *BaseInfo) (*ListLevelDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLevel not implemented")
}
func (UnimplementedUserRpcServer) UserStatusInfo(context.Context, *BaseInfo) (*UserStatusInfoDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStatusInfo not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserProfile(context.Context, *UpdateProfileReqDto) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserRpcServer) UserProfile(context.Context, *UserProfileRes) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedUserRpcServer) ResetMobile(context.Context, *SendSmsCodeReqDto) (*ResetMobileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMobile not implemented")
}
func (UnimplementedUserRpcServer) SendSmsCode(context.Context, *SendSmsCodeReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmsCode not implemented")
}
func (UnimplementedUserRpcServer) SendSesCode(context.Context, *SendSesCodeReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSesCode not implemented")
}
func (UnimplementedUserRpcServer) SendSnsCode(context.Context, *SendSnsCodeReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSnsCode not implemented")
}
func (UnimplementedUserRpcServer) ForgotPassword(context.Context, *ForgotPasswordReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedUserRpcServer) ResetPassword(context.Context, *ResetPasswordReqDtoNew) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserRpcServer) ResetEmail(context.Context, *ResetEmailReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEmail not implemented")
}
func (UnimplementedUserRpcServer) SendSms(context.Context, *SendSmsCodeReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserRpcServer) SetPassword(context.Context, *SetPasswordReqDto) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedUserRpcServer) BetByToken(context.Context, *EmptyRequest) (*BetByTokenResDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByToken not implemented")
}
func (UnimplementedUserRpcServer) MemberShipDetails(context.Context, *BaseInfo) (*MemberShipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberShipDetails not implemented")
}
func (UnimplementedUserRpcServer) MemberShipLevelDetails(context.Context, *BaseInfo) (*MemberShipLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberShipLevelDetails not implemented")
}
func (UnimplementedUserRpcServer) UserLevelInfo(context.Context, *BaseInfo) (*UserLevelResDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelInfo not implemented")
}
func (UnimplementedUserRpcServer) UserLevelDetails(context.Context, *BaseInfo) (*UserDetailsResDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelDetails not implemented")
}
func (UnimplementedUserRpcServer) UserLevelBenefits(context.Context, *BaseInfo) (*UserLevelBenefitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelBenefits not implemented")
}
func (UnimplementedUserRpcServer) UserLeveReward(context.Context, *UserLevelRewardReqDto) (*UserLevelRewardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLeveReward not implemented")
}
func (UnimplementedUserRpcServer) Receive(context.Context, *ReceiveReqDto) (*ReceiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedUserRpcServer) GetWalletRecord(context.Context, *WalletRecordRequest) (*WalletRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletRecord not implemented")
}
func (UnimplementedUserRpcServer) GetWalletStatistics(context.Context, *WalletStatisticsRequest) (*WalletStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletStatistics not implemented")
}
func (UnimplementedUserRpcServer) WalletRecordExport(context.Context, *WalletRecordRequest) (*WalletRecordExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletRecordExport not implemented")
}
func (UnimplementedUserRpcServer) InitCity(context.Context, *InitCityRequest) (*InitCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitCity not implemented")
}
func (UnimplementedUserRpcServer) UserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedUserRpcServer) UserDetail(context.Context, *UserDetailReq) (*UserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDetail not implemented")
}
func (UnimplementedUserRpcServer) UserExportList(context.Context, *UserListReq) (*UserExportListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExportList not implemented")
}
func (UnimplementedUserRpcServer) UserMemberType(context.Context, *UserMemberTypeReq) (*UserMemberTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMemberType not implemented")
}
func (UnimplementedUserRpcServer) UserMemberStatus(context.Context, *UserMemberStatusReq) (*UserMemberStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMemberStatus not implemented")
}
func (UnimplementedUserRpcServer) UserListFlag(context.Context, *UserListFlagReq) (*UserListFlagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserListFlag not implemented")
}
func (UnimplementedUserRpcServer) UserListLevel(context.Context, *UserListLevelReq) (*UserListLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserListLevel not implemented")
}
func (UnimplementedUserRpcServer) ListFlagUsed(context.Context, *ListFlagUsedReq) (*ListFlagUsedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlagUsed not implemented")
}
func (UnimplementedUserRpcServer) AddUserFlag(context.Context, *AddUserFlagReq) (*AddUserFlagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserFlag not implemented")
}
func (UnimplementedUserRpcServer) ListMerchant(context.Context, *ListMerchantReq) (*ListMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchant not implemented")
}
func (UnimplementedUserRpcServer) RefreshGetRule(context.Context, *RefreshGetRuleReq) (*RefreshGetRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshGetRule not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserRpcServer) OnLineNum(context.Context, *OnLineNumReq) (*OnLineNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLineNum not implemented")
}
func (UnimplementedUserRpcServer) GetPushDnData(context.Context, *GetPushDnDataReq) (*GetPushDnDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushDnData not implemented")
}
func (UnimplementedUserRpcServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserRpcServer) AdminAgentLineList(context.Context, *AdminAgentLineListReq) (*AdminAgentLineListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAgentLineList not implemented")
}
func (UnimplementedUserRpcServer) GetAdminRuleList(context.Context, *GetAdminRuleListReq) (*GetAdminRuleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminRuleList not implemented")
}
func (UnimplementedUserRpcServer) QueryAdminAllRuleTitleManager(context.Context, *QueryAdminAllRuleTitleManagerReq) (*QueryAdminAllRuleTitleManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminAllRuleTitleManager not implemented")
}
func (UnimplementedUserRpcServer) QueryAdminRuleTitleManager(context.Context, *QueryAdminRuleTitleManagerReq) (*QueryAdminRuleTitleManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminRuleTitleManager not implemented")
}
func (UnimplementedUserRpcServer) DelRoleAuthManager(context.Context, *DelRoleAuthManagerReq) (*DelRoleAuthManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoleAuthManager not implemented")
}
func (UnimplementedUserRpcServer) GetRoleAuthManagerList(context.Context, *GetRoleAuthManagerListReq) (*GetRoleAuthManagerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAuthManagerList not implemented")
}
func (UnimplementedUserRpcServer) UpdateRoleAuthManager(context.Context, *UpdateRoleAuthManagerReq) (*UpdateRoleAuthManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleAuthManager not implemented")
}
func (UnimplementedUserRpcServer) UpdateAdminUser(context.Context, *UpdateAdminUserReq) (*UpdateAdminUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminUser not implemented")
}
func (UnimplementedUserRpcServer) UpdateUserGroup(context.Context, *UpdateUserGroupReq) (*UpdateUserGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (UnimplementedUserRpcServer) GetUserRetentionRate(context.Context, *GetUserRetentionRateReq) (*GetUserRetentionRateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRetentionRate not implemented")
}
func (UnimplementedUserRpcServer) RegisterUsernamePrompt(context.Context, *RegisterUsernamePromptReq) (*RegisterUsernamePromptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUsernamePrompt not implemented")
}
func (UnimplementedUserRpcServer) mustEmbedUnimplementedUserRpcServer() {}

// UnsafeUserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcServer will
// result in compilation errors.
type UnsafeUserRpcServer interface {
	mustEmbedUnimplementedUserRpcServer()
}

func RegisterUserRpcServer(s grpc.ServiceRegistrar, srv UserRpcServer) {
	s.RegisterService(&UserRpc_ServiceDesc, srv)
}

func _UserRpc_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Balance(ctx, req.(*AgRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GoogleAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GoogleAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GoogleAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GoogleAuthLogin(ctx, req.(*GoogleAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Register(ctx, req.(*RegisterReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_MobileLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).MobileLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_MobileLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).MobileLogin(ctx, req.(*SendSmsCodeReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetTokenByRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenByRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetTokenByRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetTokenByRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetTokenByRefreshToken(ctx, req.(*GetTokenByRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetBonusRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BonusRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetBonusRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetBonusRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetBonusRecord(ctx, req.(*BonusRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_BonusRecordExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BonusRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).BonusRecordExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_BonusRecordExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).BonusRecordExport(ctx, req.(*BonusRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Init(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetUserCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserCoin(ctx, req.(*UserCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AdminTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AdminTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_AdminTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AdminTransfer(ctx, req.(*AdminTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ListLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ListLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ListLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ListLevel(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserStatusInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserStatusInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserStatusInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserStatusInfo(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserProfile(ctx, req.(*UpdateProfileReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserProfile(ctx, req.(*UserProfileRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ResetMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ResetMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ResetMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ResetMobile(ctx, req.(*SendSmsCodeReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SendSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_SendSmsCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendSmsCode(ctx, req.(*SendSmsCodeReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SendSesCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSesCodeReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendSesCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_SendSesCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendSesCode(ctx, req.(*SendSesCodeReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SendSnsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSnsCodeReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendSnsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_SendSnsCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendSnsCode(ctx, req.(*SendSnsCodeReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ForgotPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ForgotPassword(ctx, req.(*ForgotPasswordReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReqDtoNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ResetPassword(ctx, req.(*ResetPasswordReqDtoNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEmailReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ResetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ResetEmail(ctx, req.(*ResetEmailReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendSms(ctx, req.(*SendSmsCodeReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SetPassword(ctx, req.(*SetPasswordReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_BetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).BetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_BetByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).BetByToken(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_MemberShipDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).MemberShipDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_MemberShipDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).MemberShipDetails(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_MemberShipLevelDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).MemberShipLevelDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_MemberShipLevelDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).MemberShipLevelDetails(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserLevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserLevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserLevelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserLevelInfo(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserLevelDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserLevelDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserLevelDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserLevelDetails(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserLevelBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserLevelBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserLevelBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserLevelBenefits(ctx, req.(*BaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserLeveReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLevelRewardReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserLeveReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserLeveReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserLeveReward(ctx, req.(*UserLevelRewardReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveReqDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Receive(ctx, req.(*ReceiveReqDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetWalletRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetWalletRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetWalletRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetWalletRecord(ctx, req.(*WalletRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetWalletStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetWalletStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetWalletStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetWalletStatistics(ctx, req.(*WalletStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_WalletRecordExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).WalletRecordExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_WalletRecordExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).WalletRecordExport(ctx, req.(*WalletRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_InitCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).InitCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_InitCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).InitCity(ctx, req.(*InitCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserDetail(ctx, req.(*UserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserExportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserExportList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserExportList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserExportList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserMemberType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMemberTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserMemberType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserMemberType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserMemberType(ctx, req.(*UserMemberTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserMemberStatus(ctx, req.(*UserMemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserListFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListFlagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserListFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserListFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserListFlag(ctx, req.(*UserListFlagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserListLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserListLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UserListLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserListLevel(ctx, req.(*UserListLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ListFlagUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlagUsedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ListFlagUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ListFlagUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ListFlagUsed(ctx, req.(*ListFlagUsedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AddUserFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserFlagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AddUserFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_AddUserFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AddUserFlag(ctx, req.(*AddUserFlagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ListMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ListMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_ListMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ListMerchant(ctx, req.(*ListMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RefreshGetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshGetRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RefreshGetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_RefreshGetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RefreshGetRule(ctx, req.(*RefreshGetRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_OnLineNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnLineNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).OnLineNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_OnLineNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).OnLineNum(ctx, req.(*OnLineNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetPushDnData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushDnDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetPushDnData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetPushDnData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetPushDnData(ctx, req.(*GetPushDnDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AdminAgentLineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAgentLineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AdminAgentLineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_AdminAgentLineList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AdminAgentLineList(ctx, req.(*AdminAgentLineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetAdminRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminRuleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetAdminRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetAdminRuleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetAdminRuleList(ctx, req.(*GetAdminRuleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_QueryAdminAllRuleTitleManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminAllRuleTitleManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).QueryAdminAllRuleTitleManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_QueryAdminAllRuleTitleManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).QueryAdminAllRuleTitleManager(ctx, req.(*QueryAdminAllRuleTitleManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_QueryAdminRuleTitleManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminRuleTitleManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).QueryAdminRuleTitleManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_QueryAdminRuleTitleManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).QueryAdminRuleTitleManager(ctx, req.(*QueryAdminRuleTitleManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_DelRoleAuthManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleAuthManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).DelRoleAuthManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_DelRoleAuthManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).DelRoleAuthManager(ctx, req.(*DelRoleAuthManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetRoleAuthManagerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleAuthManagerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetRoleAuthManagerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetRoleAuthManagerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetRoleAuthManagerList(ctx, req.(*GetRoleAuthManagerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateRoleAuthManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleAuthManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateRoleAuthManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateRoleAuthManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateRoleAuthManager(ctx, req.(*UpdateRoleAuthManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateAdminUser(ctx, req.(*UpdateAdminUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_UpdateUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUserGroup(ctx, req.(*UpdateUserGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserRetentionRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRetentionRateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserRetentionRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_GetUserRetentionRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserRetentionRate(ctx, req.(*GetUserRetentionRateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RegisterUsernamePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUsernamePromptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RegisterUsernamePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRpc_RegisterUsernamePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RegisterUsernamePrompt(ctx, req.(*RegisterUsernamePromptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpc_ServiceDesc is the grpc.ServiceDesc for UserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userrpc.UserRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "balance",
			Handler:    _UserRpc_Balance_Handler,
		},
		{
			MethodName: "login",
			Handler:    _UserRpc_Login_Handler,
		},
		{
			MethodName: "googleAuthLogin",
			Handler:    _UserRpc_GoogleAuthLogin_Handler,
		},
		{
			MethodName: "register",
			Handler:    _UserRpc_Register_Handler,
		},
		{
			MethodName: "mobileLogin",
			Handler:    _UserRpc_MobileLogin_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _UserRpc_Logout_Handler,
		},
		{
			MethodName: "getTokenByRefreshToken",
			Handler:    _UserRpc_GetTokenByRefreshToken_Handler,
		},
		{
			MethodName: "getBonusRecord",
			Handler:    _UserRpc_GetBonusRecord_Handler,
		},
		{
			MethodName: "bonusRecordExport",
			Handler:    _UserRpc_BonusRecordExport_Handler,
		},
		{
			MethodName: "init",
			Handler:    _UserRpc_Init_Handler,
		},
		{
			MethodName: "getUserCoin",
			Handler:    _UserRpc_GetUserCoin_Handler,
		},
		{
			MethodName: "adminTransfer",
			Handler:    _UserRpc_AdminTransfer_Handler,
		},
		{
			MethodName: "listLevel",
			Handler:    _UserRpc_ListLevel_Handler,
		},
		{
			MethodName: "userStatusInfo",
			Handler:    _UserRpc_UserStatusInfo_Handler,
		},
		{
			MethodName: "updateUserProfile",
			Handler:    _UserRpc_UpdateUserProfile_Handler,
		},
		{
			MethodName: "userProfile",
			Handler:    _UserRpc_UserProfile_Handler,
		},
		{
			MethodName: "resetMobile",
			Handler:    _UserRpc_ResetMobile_Handler,
		},
		{
			MethodName: "sendSmsCode",
			Handler:    _UserRpc_SendSmsCode_Handler,
		},
		{
			MethodName: "sendSesCode",
			Handler:    _UserRpc_SendSesCode_Handler,
		},
		{
			MethodName: "sendSnsCode",
			Handler:    _UserRpc_SendSnsCode_Handler,
		},
		{
			MethodName: "forgotPassword",
			Handler:    _UserRpc_ForgotPassword_Handler,
		},
		{
			MethodName: "resetPassword",
			Handler:    _UserRpc_ResetPassword_Handler,
		},
		{
			MethodName: "resetEmail",
			Handler:    _UserRpc_ResetEmail_Handler,
		},
		{
			MethodName: "sendSms",
			Handler:    _UserRpc_SendSms_Handler,
		},
		{
			MethodName: "setPassword",
			Handler:    _UserRpc_SetPassword_Handler,
		},
		{
			MethodName: "betByToken",
			Handler:    _UserRpc_BetByToken_Handler,
		},
		{
			MethodName: "memberShipDetails",
			Handler:    _UserRpc_MemberShipDetails_Handler,
		},
		{
			MethodName: "memberShipLevelDetails",
			Handler:    _UserRpc_MemberShipLevelDetails_Handler,
		},
		{
			MethodName: "userLevelInfo",
			Handler:    _UserRpc_UserLevelInfo_Handler,
		},
		{
			MethodName: "userLevelDetails",
			Handler:    _UserRpc_UserLevelDetails_Handler,
		},
		{
			MethodName: "userLevelBenefits",
			Handler:    _UserRpc_UserLevelBenefits_Handler,
		},
		{
			MethodName: "userLeveReward",
			Handler:    _UserRpc_UserLeveReward_Handler,
		},
		{
			MethodName: "receive",
			Handler:    _UserRpc_Receive_Handler,
		},
		{
			MethodName: "getWalletRecord",
			Handler:    _UserRpc_GetWalletRecord_Handler,
		},
		{
			MethodName: "getWalletStatistics",
			Handler:    _UserRpc_GetWalletStatistics_Handler,
		},
		{
			MethodName: "walletRecordExport",
			Handler:    _UserRpc_WalletRecordExport_Handler,
		},
		{
			MethodName: "initCity",
			Handler:    _UserRpc_InitCity_Handler,
		},
		{
			MethodName: "userList",
			Handler:    _UserRpc_UserList_Handler,
		},
		{
			MethodName: "userDetail",
			Handler:    _UserRpc_UserDetail_Handler,
		},
		{
			MethodName: "userExportList",
			Handler:    _UserRpc_UserExportList_Handler,
		},
		{
			MethodName: "userMemberType",
			Handler:    _UserRpc_UserMemberType_Handler,
		},
		{
			MethodName: "userMemberStatus",
			Handler:    _UserRpc_UserMemberStatus_Handler,
		},
		{
			MethodName: "userListFlag",
			Handler:    _UserRpc_UserListFlag_Handler,
		},
		{
			MethodName: "userListLevel",
			Handler:    _UserRpc_UserListLevel_Handler,
		},
		{
			MethodName: "listFlagUsed",
			Handler:    _UserRpc_ListFlagUsed_Handler,
		},
		{
			MethodName: "addUserFlag",
			Handler:    _UserRpc_AddUserFlag_Handler,
		},
		{
			MethodName: "listMerchant",
			Handler:    _UserRpc_ListMerchant_Handler,
		},
		{
			MethodName: "refreshGetRule",
			Handler:    _UserRpc_RefreshGetRule_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _UserRpc_UpdateUserInfo_Handler,
		},
		{
			MethodName: "onLineNum",
			Handler:    _UserRpc_OnLineNum_Handler,
		},
		{
			MethodName: "getPushDnData",
			Handler:    _UserRpc_GetPushDnData_Handler,
		},
		{
			MethodName: "addUser",
			Handler:    _UserRpc_AddUser_Handler,
		},
		{
			MethodName: "AdminAgentLineList",
			Handler:    _UserRpc_AdminAgentLineList_Handler,
		},
		{
			MethodName: "getAdminRuleList",
			Handler:    _UserRpc_GetAdminRuleList_Handler,
		},
		{
			MethodName: "QueryAdminAllRuleTitleManager",
			Handler:    _UserRpc_QueryAdminAllRuleTitleManager_Handler,
		},
		{
			MethodName: "QueryAdminRuleTitleManager",
			Handler:    _UserRpc_QueryAdminRuleTitleManager_Handler,
		},
		{
			MethodName: "DelRoleAuthManager",
			Handler:    _UserRpc_DelRoleAuthManager_Handler,
		},
		{
			MethodName: "GetRoleAuthManagerList",
			Handler:    _UserRpc_GetRoleAuthManagerList_Handler,
		},
		{
			MethodName: "UpdateRoleAuthManager",
			Handler:    _UserRpc_UpdateRoleAuthManager_Handler,
		},
		{
			MethodName: "UpdateAdminUser",
			Handler:    _UserRpc_UpdateAdminUser_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _UserRpc_UpdateUserGroup_Handler,
		},
		{
			MethodName: "getUserRetentionRate",
			Handler:    _UserRpc_GetUserRetentionRate_Handler,
		},
		{
			MethodName: "RegisterUsernamePrompt",
			Handler:    _UserRpc_RegisterUsernamePrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userrpc.proto",
}
