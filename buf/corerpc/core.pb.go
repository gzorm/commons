// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: core.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LiveTransactionType int32

const (
	LiveTransactionType_UnknownLiveTransactionType LiveTransactionType = 0
	LiveTransactionType_BET                        LiveTransactionType = 1
	LiveTransactionType_WIN                        LiveTransactionType = 2
	LiveTransactionType_LOSE                       LiveTransactionType = 3
	LiveTransactionType_REFUND                     LiveTransactionType = 4
)

// Enum value maps for LiveTransactionType.
var (
	LiveTransactionType_name = map[int32]string{
		0: "UnknownLiveTransactionType",
		1: "BET",
		2: "WIN",
		3: "LOSE",
		4: "REFUND",
	}
	LiveTransactionType_value = map[string]int32{
		"UnknownLiveTransactionType": 0,
		"BET":                        1,
		"WIN":                        2,
		"LOSE":                       3,
		"REFUND":                     4,
	}
)

func (x LiveTransactionType) Enum() *LiveTransactionType {
	p := new(LiveTransactionType)
	*p = x
	return p
}

func (x LiveTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[0].Descriptor()
}

func (LiveTransactionType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[0]
}

func (x LiveTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveTransactionType.Descriptor instead.
func (LiveTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

type AgQJCusTransRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId     string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Session   string `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	ProductId string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	LoginName string `protobuf:"bytes,4,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AgQJCusTransRequest) Reset() {
	*x = AgQJCusTransRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJCusTransRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJCusTransRequest) ProtoMessage() {}

func (x *AgQJCusTransRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJCusTransRequest.ProtoReflect.Descriptor instead.
func (*AgQJCusTransRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

func (x *AgQJCusTransRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJCusTransRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *AgQJCusTransRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AgQJCusTransRequest) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *AgQJCusTransRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// 1005 Player is blocked
// 1006 Player not found
// 1007 Session is expired
// 2001 Not enough money
// 2002 Invalid currency
// 2004 Bad request
// 2005 Invalid JWT token
// 3001 Bonus not found
// 4001 Player limits exceeded
// 4002 Maximum bonus bet limit exceeded
type BetMakeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BetMakeError) Reset() {
	*x = BetMakeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMakeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMakeError) ProtoMessage() {}

func (x *BetMakeError) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMakeError.ProtoReflect.Descriptor instead.
func (*BetMakeError) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

func (x *BetMakeError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BetMakeError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BetWinTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetslipId           string `protobuf:"bytes,2,opt,name=betslip_id,json=betslipId,proto3" json:"betslip_id,omitempty"`
	PlayerId            string `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId          string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId     string `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId         string `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Timestamp           int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount              uint32 `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Operation           string `protobuf:"bytes,10,opt,name=operation,proto3" json:"operation,omitempty"`
	BonusId             string `protobuf:"bytes,11,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	CrossRateEuro       string `protobuf:"bytes,12,opt,name=cross_rate_euro,json=crossRateEuro,proto3" json:"cross_rate_euro,omitempty"`
	ParentTransactionId string `protobuf:"bytes,13,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
}

func (x *BetWinTransaction) Reset() {
	*x = BetWinTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetWinTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetWinTransaction) ProtoMessage() {}

func (x *BetWinTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetWinTransaction.ProtoReflect.Descriptor instead.
func (*BetWinTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

func (x *BetWinTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetWinTransaction) GetBetslipId() string {
	if x != nil {
		return x.BetslipId
	}
	return ""
}

func (x *BetWinTransaction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetWinTransaction) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetWinTransaction) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetWinTransaction) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetWinTransaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetWinTransaction) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetWinTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetWinTransaction) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetWinTransaction) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetWinTransaction) GetCrossRateEuro() string {
	if x != nil {
		return x.CrossRateEuro
	}
	return ""
}

func (x *BetWinTransaction) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

type Selections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status  string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Odds    string `protobuf:"bytes,4,opt,name=odds,proto3" json:"odds,omitempty"`
}

func (x *Selections) Reset() {
	*x = Selections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selections) ProtoMessage() {}

func (x *Selections) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selections.ProtoReflect.Descriptor instead.
func (*Selections) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3}
}

func (x *Selections) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Selections) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Selections) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Selections) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

// req & resp
type RtgGetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberCode string `protobuf:"bytes,1,opt,name=memberCode,proto3" json:"memberCode,omitempty"`
}

func (x *RtgGetBalanceReq) Reset() {
	*x = RtgGetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtgGetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtgGetBalanceReq) ProtoMessage() {}

func (x *RtgGetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtgGetBalanceReq.ProtoReflect.Descriptor instead.
func (*RtgGetBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{4}
}

func (x *RtgGetBalanceReq) GetMemberCode() string {
	if x != nil {
		return x.MemberCode
	}
	return ""
}

type PinnacleCreditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    *PinnacleCreditReqAction `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	Timestamp string                   `protobuf:"bytes,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Signature string                   `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *PinnacleCreditReq) Reset() {
	*x = PinnacleCreditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleCreditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleCreditReq) ProtoMessage() {}

func (x *PinnacleCreditReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleCreditReq.ProtoReflect.Descriptor instead.
func (*PinnacleCreditReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{5}
}

func (x *PinnacleCreditReq) GetAction() *PinnacleCreditReqAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *PinnacleCreditReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PinnacleCreditReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// 0 成功
// 1 用户 ID 无效
// 2 单号无效
// 3 重送結果
type ResulttexRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *ResulttexRes) Reset() {
	*x = ResulttexRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResulttexRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResulttexRes) ProtoMessage() {}

func (x *ResulttexRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResulttexRes.ProtoReflect.Descriptor instead.
func (*ResulttexRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{6}
}

func (x *ResulttexRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type AgQJBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Body    *AgQJBalanceBody `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AgQJBalanceResponse) Reset() {
	*x = AgQJBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJBalanceResponse) ProtoMessage() {}

func (x *AgQJBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJBalanceResponse.ProtoReflect.Descriptor instead.
func (*AgQJBalanceResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{7}
}

func (x *AgQJBalanceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AgQJBalanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgQJBalanceResponse) GetBody() *AgQJBalanceBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type IDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{8}
}

func (x *IDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BetByBetDiscardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BetByBetDiscardResponse) Reset() {
	*x = BetByBetDiscardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetDiscardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetDiscardResponse) ProtoMessage() {}

func (x *BetByBetDiscardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetDiscardResponse.ProtoReflect.Descriptor instead.
func (*BetByBetDiscardResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{9}
}

type HabaQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Dtsent       string            `protobuf:"bytes,2,opt,name=dtsent,proto3" json:"dtsent,omitempty"`
	Basegame     *HabaBasegame     `protobuf:"bytes,3,opt,name=basegame,proto3" json:"basegame,omitempty"`
	Auth         *HabaAuth         `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Queryrequest *HabaQueryrequest `protobuf:"bytes,5,opt,name=queryrequest,proto3" json:"queryrequest,omitempty"`
}

func (x *HabaQueryReq) Reset() {
	*x = HabaQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaQueryReq) ProtoMessage() {}

func (x *HabaQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaQueryReq.ProtoReflect.Descriptor instead.
func (*HabaQueryReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{10}
}

func (x *HabaQueryReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HabaQueryReq) GetDtsent() string {
	if x != nil {
		return x.Dtsent
	}
	return ""
}

func (x *HabaQueryReq) GetBasegame() *HabaBasegame {
	if x != nil {
		return x.Basegame
	}
	return nil
}

func (x *HabaQueryReq) GetAuth() *HabaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HabaQueryReq) GetQueryrequest() *HabaQueryrequest {
	if x != nil {
		return x.Queryrequest
	}
	return nil
}

type SabaSettleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaSettleResp) Reset() {
	*x = SabaSettleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaSettleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaSettleResp) ProtoMessage() {}

func (x *SabaSettleResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaSettleResp.ProtoReflect.Descriptor instead.
func (*SabaSettleResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{11}
}

func (x *SabaSettleResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaSettleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SabaSettleentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaSettleentResp) Reset() {
	*x = SabaSettleentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaSettleentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaSettleentResp) ProtoMessage() {}

func (x *SabaSettleentResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaSettleentResp.ProtoReflect.Descriptor instead.
func (*SabaSettleentResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{12}
}

func (x *SabaSettleentResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaSettleentResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SabaGetTicketInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg           string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TicketStatus  string  `protobuf:"bytes,3,opt,name=ticketStatus,proto3" json:"ticketStatus,omitempty"`
	ActualStake   float32 `protobuf:"fixed32,4,opt,name=actualStake,proto3" json:"actualStake,omitempty"`
	WinlostAmount float32 `protobuf:"fixed32,5,opt,name=winlostAmount,proto3" json:"winlostAmount,omitempty"`
}

func (x *SabaGetTicketInfoResp) Reset() {
	*x = SabaGetTicketInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaGetTicketInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaGetTicketInfoResp) ProtoMessage() {}

func (x *SabaGetTicketInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaGetTicketInfoResp.ProtoReflect.Descriptor instead.
func (*SabaGetTicketInfoResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{13}
}

func (x *SabaGetTicketInfoResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaGetTicketInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SabaGetTicketInfoResp) GetTicketStatus() string {
	if x != nil {
		return x.TicketStatus
	}
	return ""
}

func (x *SabaGetTicketInfoResp) GetActualStake() float32 {
	if x != nil {
		return x.ActualStake
	}
	return 0
}

func (x *SabaGetTicketInfoResp) GetWinlostAmount() float32 {
	if x != nil {
		return x.WinlostAmount
	}
	return 0
}

type Cq9PlayerCheckRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     bool   `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	Code     string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,4,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9PlayerCheckRes) Reset() {
	*x = Cq9PlayerCheckRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9PlayerCheckRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9PlayerCheckRes) ProtoMessage() {}

func (x *Cq9PlayerCheckRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9PlayerCheckRes.ProtoReflect.Descriptor instead.
func (*Cq9PlayerCheckRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{14}
}

func (x *Cq9PlayerCheckRes) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

func (x *Cq9PlayerCheckRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9PlayerCheckRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9PlayerCheckRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type Cq9RecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Action   string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Target   string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Before   string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	Balance  string `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Event    string `protobuf:"bytes,7,opt,name=event,proto3" json:"event,omitempty"`
	Code     string `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,10,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9RecordRes) Reset() {
	*x = Cq9RecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RecordRes) ProtoMessage() {}

func (x *Cq9RecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RecordRes.ProtoReflect.Descriptor instead.
func (*Cq9RecordRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{15}
}

func (x *Cq9RecordRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cq9RecordRes) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Cq9RecordRes) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Cq9RecordRes) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *Cq9RecordRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9RecordRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9RecordRes) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Cq9RecordRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9RecordRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9RecordRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type EvoBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken string   `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	Sid       string   `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	UserId    string   `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Game      *EvoGame `protobuf:"bytes,4,opt,name=game,proto3" json:"game,omitempty"`
	Currency  string   `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Uuid      string   `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *EvoBalanceReq) Reset() {
	*x = EvoBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoBalanceReq) ProtoMessage() {}

func (x *EvoBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoBalanceReq.ProtoReflect.Descriptor instead.
func (*EvoBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{16}
}

func (x *EvoBalanceReq) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *EvoBalanceReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *EvoBalanceReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvoBalanceReq) GetGame() *EvoGame {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *EvoBalanceReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EvoBalanceReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 取消投注-请求
type JiLiCancelBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId         string  `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency      string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Game          int32   `protobuf:"varint,4,opt,name=game,proto3" json:"game,omitempty"`
	Round         int64   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	BetAmount     float64 `protobuf:"fixed64,6,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinLoseAmount float64 `protobuf:"fixed64,7,opt,name=win_lose_amount,json=winLoseAmount,proto3" json:"win_lose_amount,omitempty"`
	UserId        int64   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      string  `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *JiLiCancelBetReq) Reset() {
	*x = JiLiCancelBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiCancelBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiCancelBetReq) ProtoMessage() {}

func (x *JiLiCancelBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiCancelBetReq.ProtoReflect.Descriptor instead.
func (*JiLiCancelBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{17}
}

func (x *JiLiCancelBetReq) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *JiLiCancelBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiCancelBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiCancelBetReq) GetGame() int32 {
	if x != nil {
		return x.Game
	}
	return 0
}

func (x *JiLiCancelBetReq) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *JiLiCancelBetReq) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *JiLiCancelBetReq) GetWinLoseAmount() float64 {
	if x != nil {
		return x.WinLoseAmount
	}
	return 0
}

func (x *JiLiCancelBetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JiLiCancelBetReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PachinkoBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool                  `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	Message   string                `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Value     *PachinkoBalanceValue `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *PachinkoBalanceResponse) Reset() {
	*x = PachinkoBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PachinkoBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PachinkoBalanceResponse) ProtoMessage() {}

func (x *PachinkoBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PachinkoBalanceResponse.ProtoReflect.Descriptor instead.
func (*PachinkoBalanceResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{18}
}

func (x *PachinkoBalanceResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *PachinkoBalanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PachinkoBalanceResponse) GetValue() *PachinkoBalanceValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Result-响应
type PpResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Cash          string `protobuf:"bytes,3,opt,name=cash,proto3" json:"cash,omitempty"`
	Bonus         string `protobuf:"bytes,4,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Error         int64  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PpResultResp) Reset() {
	*x = PpResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpResultResp) ProtoMessage() {}

func (x *PpResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpResultResp.ProtoReflect.Descriptor instead.
func (*PpResultResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{19}
}

func (x *PpResultResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PpResultResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PpResultResp) GetCash() string {
	if x != nil {
		return x.Cash
	}
	return ""
}

func (x *PpResultResp) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *PpResultResp) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PpResultResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SabaCancelBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *CancelBetMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaCancelBetReq) Reset() {
	*x = SabaCancelBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCancelBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCancelBetReq) ProtoMessage() {}

func (x *SabaCancelBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCancelBetReq.ProtoReflect.Descriptor instead.
func (*SabaCancelBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{20}
}

func (x *SabaCancelBetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaCancelBetReq) GetMessage() *CancelBetMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// SabaCancelBetentReq message definition
type SabaCancelBetentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaCancelBetentMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaCancelBetentReq) Reset() {
	*x = SabaCancelBetentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCancelBetentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCancelBetentReq) ProtoMessage() {}

func (x *SabaCancelBetentReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCancelBetentReq.ProtoReflect.Descriptor instead.
func (*SabaCancelBetentReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{21}
}

func (x *SabaCancelBetentReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaCancelBetentReq) GetMessage() *SabaCancelBetentMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// SabaCancelBetentResp message definition
type SabaCancelBetentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *SabaCancelBetentResp) Reset() {
	*x = SabaCancelBetentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCancelBetentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCancelBetentResp) ProtoMessage() {}

func (x *SabaCancelBetentResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCancelBetentResp.ProtoReflect.Descriptor instead.
func (*SabaCancelBetentResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{22}
}

func (x *SabaCancelBetentResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaCancelBetentResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SabaCancelBetentResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// SabaCancelBetentMessage message definition
type SabaCancelBetentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        string  `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	UserId        string  `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	RefId         string  `protobuf:"bytes,3,opt,name=refId,proto3" json:"refId,omitempty"`
	WinLostDate   string  `protobuf:"bytes,4,opt,name=winLostDate,proto3" json:"winLostDate,omitempty"`
	ActualStake   float64 `protobuf:"fixed64,5,opt,name=actualStake,proto3" json:"actualStake,omitempty"`
	CreditAmount  float64 `protobuf:"fixed64,6,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount   float64 `protobuf:"fixed64,7,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	WinLostAmount int64   `protobuf:"varint,8,opt,name=winLostAmount,proto3" json:"winLostAmount,omitempty"`
	TxIds         []int64 `protobuf:"varint,9,rep,packed,name=txIds,proto3" json:"txIds,omitempty"`
}

func (x *SabaCancelBetentMessage) Reset() {
	*x = SabaCancelBetentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCancelBetentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCancelBetentMessage) ProtoMessage() {}

func (x *SabaCancelBetentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCancelBetentMessage.ProtoReflect.Descriptor instead.
func (*SabaCancelBetentMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{23}
}

func (x *SabaCancelBetentMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaCancelBetentMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaCancelBetentMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SabaCancelBetentMessage) GetWinLostDate() string {
	if x != nil {
		return x.WinLostDate
	}
	return ""
}

func (x *SabaCancelBetentMessage) GetActualStake() float64 {
	if x != nil {
		return x.ActualStake
	}
	return 0
}

func (x *SabaCancelBetentMessage) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SabaCancelBetentMessage) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SabaCancelBetentMessage) GetWinLostAmount() int64 {
	if x != nil {
		return x.WinLostAmount
	}
	return 0
}

func (x *SabaCancelBetentMessage) GetTxIds() []int64 {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type AgIntlEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AgIntelEventData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *AgIntlEventRequest) Reset() {
	*x = AgIntlEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgIntlEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgIntlEventRequest) ProtoMessage() {}

func (x *AgIntlEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgIntlEventRequest.ProtoReflect.Descriptor instead.
func (*AgIntlEventRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{24}
}

func (x *AgIntlEventRequest) GetData() *AgIntelEventData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgQJPlayerTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Body    *AgQJPlayerTransferBody `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AgQJPlayerTransferResponse) Reset() {
	*x = AgQJPlayerTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJPlayerTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJPlayerTransferResponse) ProtoMessage() {}

func (x *AgQJPlayerTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJPlayerTransferResponse.ProtoReflect.Descriptor instead.
func (*AgQJPlayerTransferResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{25}
}

func (x *AgQJPlayerTransferResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AgQJPlayerTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgQJPlayerTransferResponse) GetBody() *AgQJPlayerTransferBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type Cq9RefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Mtcode string `protobuf:"bytes,2,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Json   string `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Cq9RefundReq) Reset() {
	*x = Cq9RefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RefundReq) ProtoMessage() {}

func (x *Cq9RefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RefundReq.ProtoReflect.Descriptor instead.
func (*Cq9RefundReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{26}
}

func (x *Cq9RefundReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9RefundReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9RefundReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type FbsportsWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance    string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	CurrencyId int64  `protobuf:"varint,2,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
}

func (x *FbsportsWallet) Reset() {
	*x = FbsportsWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsWallet) ProtoMessage() {}

func (x *FbsportsWallet) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsWallet.ProtoReflect.Descriptor instead.
func (*FbsportsWallet) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{27}
}

func (x *FbsportsWallet) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *FbsportsWallet) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

type SabaPlaceBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	LicenseeTxId string `protobuf:"bytes,2,opt,name=licenseeTxId,proto3" json:"licenseeTxId,omitempty"`
	Status       string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Msg          string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaPlaceBetResp) Reset() {
	*x = SabaPlaceBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetResp) ProtoMessage() {}

func (x *SabaPlaceBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetResp.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{28}
}

func (x *SabaPlaceBetResp) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SabaPlaceBetResp) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

func (x *SabaPlaceBetResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaPlaceBetResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 定义确认下注接口的输入输出
type SabaConfirmBetTxns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId                 string  `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	TxId                  int64   `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
	LicenseeTxId          string  `protobuf:"bytes,3,opt,name=licenseeTxId,proto3" json:"licenseeTxId,omitempty"`
	Odds                  float64 `protobuf:"fixed64,4,opt,name=odds,proto3" json:"odds,omitempty"`
	OddsType              int32   `protobuf:"varint,5,opt,name=oddsType,proto3" json:"oddsType,omitempty"`
	ActualAmount          float64 `protobuf:"fixed64,6,opt,name=actualAmount,proto3" json:"actualAmount,omitempty"`
	IsOddsChanged         bool    `protobuf:"varint,7,opt,name=isOddsChanged,proto3" json:"isOddsChanged,omitempty"`
	CreditAmount          float64 `protobuf:"fixed64,8,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount           float64 `protobuf:"fixed64,9,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	WinlostDate           string  `protobuf:"bytes,10,opt,name=winlostDate,proto3" json:"winlostDate,omitempty"`
	MmrPercentage         float64 `protobuf:"fixed64,11,opt,name=mmrPercentage,proto3" json:"mmrPercentage,omitempty"`
	IsMmrPercentageChange bool    `protobuf:"varint,12,opt,name=isMmrPercentageChange,proto3" json:"isMmrPercentageChange,omitempty"`
}

func (x *SabaConfirmBetTxns) Reset() {
	*x = SabaConfirmBetTxns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBetTxns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBetTxns) ProtoMessage() {}

func (x *SabaConfirmBetTxns) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBetTxns.ProtoReflect.Descriptor instead.
func (*SabaConfirmBetTxns) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{29}
}

func (x *SabaConfirmBetTxns) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SabaConfirmBetTxns) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

func (x *SabaConfirmBetTxns) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetOddsType() int32 {
	if x != nil {
		return x.OddsType
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetActualAmount() float64 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetIsOddsChanged() bool {
	if x != nil {
		return x.IsOddsChanged
	}
	return false
}

func (x *SabaConfirmBetTxns) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetWinlostDate() string {
	if x != nil {
		return x.WinlostDate
	}
	return ""
}

func (x *SabaConfirmBetTxns) GetMmrPercentage() float64 {
	if x != nil {
		return x.MmrPercentage
	}
	return 0
}

func (x *SabaConfirmBetTxns) GetIsMmrPercentageChange() bool {
	if x != nil {
		return x.IsMmrPercentageChange
	}
	return false
}

// 定义取消结算输入输出
type UnSettleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      string          `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	OperationId string          `protobuf:"bytes,2,opt,name=operationId,proto3" json:"operationId,omitempty"`
	Txns        []*UnSettleTxns `protobuf:"bytes,3,rep,name=txns,proto3" json:"txns,omitempty"`
}

func (x *UnSettleMessage) Reset() {
	*x = UnSettleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSettleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSettleMessage) ProtoMessage() {}

func (x *UnSettleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSettleMessage.ProtoReflect.Descriptor instead.
func (*UnSettleMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{30}
}

func (x *UnSettleMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UnSettleMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *UnSettleMessage) GetTxns() []*UnSettleTxns {
	if x != nil {
		return x.Txns
	}
	return nil
}

type AgQJPlayerTransferBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId       string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	CusAckSeq   string `protobuf:"bytes,2,opt,name=cusAckSeq,proto3" json:"cusAckSeq,omitempty"`
	ProductId   string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	UserName    string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	LoginName   string `protobuf:"bytes,5,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Currency    string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	SubCurrency string `protobuf:"bytes,7,opt,name=subCurrency,proto3" json:"subCurrency,omitempty"`
	SrcAmount   string `protobuf:"bytes,8,opt,name=srcAmount,proto3" json:"srcAmount,omitempty"`
	TransAmount string `protobuf:"bytes,9,opt,name=transAmount,proto3" json:"transAmount,omitempty"`
	DstAmount   string `protobuf:"bytes,10,opt,name=dstAmount,proto3" json:"dstAmount,omitempty"`
}

func (x *AgQJPlayerTransferBody) Reset() {
	*x = AgQJPlayerTransferBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJPlayerTransferBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJPlayerTransferBody) ProtoMessage() {}

func (x *AgQJPlayerTransferBody) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJPlayerTransferBody.ProtoReflect.Descriptor instead.
func (*AgQJPlayerTransferBody) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{31}
}

func (x *AgQJPlayerTransferBody) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetCusAckSeq() string {
	if x != nil {
		return x.CusAckSeq
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetSubCurrency() string {
	if x != nil {
		return x.SubCurrency
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetSrcAmount() string {
	if x != nil {
		return x.SrcAmount
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetTransAmount() string {
	if x != nil {
		return x.TransAmount
	}
	return ""
}

func (x *AgQJPlayerTransferBody) GetDstAmount() string {
	if x != nil {
		return x.DstAmount
	}
	return ""
}

type BaseIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseIDResp) Reset() {
	*x = BaseIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDResp) ProtoMessage() {}

func (x *BaseIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDResp.ProtoReflect.Descriptor instead.
func (*BaseIDResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{32}
}

func (x *BaseIDResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// inner type - fund tx
type HabaFundinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamestatemode          uint32  `protobuf:"varint,1,opt,name=gamestatemode,proto3" json:"gamestatemode,omitempty"`
	Originaltransferid     string  `protobuf:"bytes,2,opt,name=originaltransferid,proto3" json:"originaltransferid,omitempty"`
	Transferid             string  `protobuf:"bytes,3,opt,name=transferid,proto3" json:"transferid,omitempty"`
	Currencycode           string  `protobuf:"bytes,4,opt,name=currencycode,proto3" json:"currencycode,omitempty"`
	Amount                 float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Bonusamount            float64 `protobuf:"fixed64,6,opt,name=bonusamount,proto3" json:"bonusamount,omitempty"`
	Jpwin                  bool    `protobuf:"varint,7,opt,name=jpwin,proto3" json:"jpwin,omitempty"`
	Jpcont                 float64 `protobuf:"fixed64,8,opt,name=jpcont,proto3" json:"jpcont,omitempty"`
	Isbonus                bool    `protobuf:"varint,9,opt,name=isbonus,proto3" json:"isbonus,omitempty"`
	Dtevent                string  `protobuf:"bytes,10,opt,name=dtevent,proto3" json:"dtevent,omitempty"`
	Initialdebittransferid string  `protobuf:"bytes,11,opt,name=initialdebittransferid,proto3" json:"initialdebittransferid,omitempty"`
	Accounttransactiontype uint32  `protobuf:"varint,12,opt,name=accounttransactiontype,proto3" json:"accounttransactiontype,omitempty"`
	Gameinfeature          bool    `protobuf:"varint,13,opt,name=gameinfeature,proto3" json:"gameinfeature,omitempty"`
	Lastbonusaction        bool    `protobuf:"varint,14,opt,name=lastbonusaction,proto3" json:"lastbonusaction,omitempty"`
	Jpid                   string  `protobuf:"bytes,15,opt,name=jpid,proto3" json:"jpid,omitempty"`
	Jpname                 string  `protobuf:"bytes,16,opt,name=jpname,proto3" json:"jpname,omitempty"`
	Jptypeid               uint32  `protobuf:"varint,17,opt,name=jptypeid,proto3" json:"jptypeid,omitempty"`
	Jpseed                 uint32  `protobuf:"varint,18,opt,name=jpseed,proto3" json:"jpseed,omitempty"`
	Jpwinbase              float64 `protobuf:"fixed64,19,opt,name=jpwinbase,proto3" json:"jpwinbase,omitempty"`
}

func (x *HabaFundinfo) Reset() {
	*x = HabaFundinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaFundinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaFundinfo) ProtoMessage() {}

func (x *HabaFundinfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaFundinfo.ProtoReflect.Descriptor instead.
func (*HabaFundinfo) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{33}
}

func (x *HabaFundinfo) GetGamestatemode() uint32 {
	if x != nil {
		return x.Gamestatemode
	}
	return 0
}

func (x *HabaFundinfo) GetOriginaltransferid() string {
	if x != nil {
		return x.Originaltransferid
	}
	return ""
}

func (x *HabaFundinfo) GetTransferid() string {
	if x != nil {
		return x.Transferid
	}
	return ""
}

func (x *HabaFundinfo) GetCurrencycode() string {
	if x != nil {
		return x.Currencycode
	}
	return ""
}

func (x *HabaFundinfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HabaFundinfo) GetBonusamount() float64 {
	if x != nil {
		return x.Bonusamount
	}
	return 0
}

func (x *HabaFundinfo) GetJpwin() bool {
	if x != nil {
		return x.Jpwin
	}
	return false
}

func (x *HabaFundinfo) GetJpcont() float64 {
	if x != nil {
		return x.Jpcont
	}
	return 0
}

func (x *HabaFundinfo) GetIsbonus() bool {
	if x != nil {
		return x.Isbonus
	}
	return false
}

func (x *HabaFundinfo) GetDtevent() string {
	if x != nil {
		return x.Dtevent
	}
	return ""
}

func (x *HabaFundinfo) GetInitialdebittransferid() string {
	if x != nil {
		return x.Initialdebittransferid
	}
	return ""
}

func (x *HabaFundinfo) GetAccounttransactiontype() uint32 {
	if x != nil {
		return x.Accounttransactiontype
	}
	return 0
}

func (x *HabaFundinfo) GetGameinfeature() bool {
	if x != nil {
		return x.Gameinfeature
	}
	return false
}

func (x *HabaFundinfo) GetLastbonusaction() bool {
	if x != nil {
		return x.Lastbonusaction
	}
	return false
}

func (x *HabaFundinfo) GetJpid() string {
	if x != nil {
		return x.Jpid
	}
	return ""
}

func (x *HabaFundinfo) GetJpname() string {
	if x != nil {
		return x.Jpname
	}
	return ""
}

func (x *HabaFundinfo) GetJptypeid() uint32 {
	if x != nil {
		return x.Jptypeid
	}
	return 0
}

func (x *HabaFundinfo) GetJpseed() uint32 {
	if x != nil {
		return x.Jpseed
	}
	return 0
}

func (x *HabaFundinfo) GetJpwinbase() float64 {
	if x != nil {
		return x.Jpwinbase
	}
	return 0
}

type PachinkoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName      string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency      string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Money         string `protobuf:"bytes,4,opt,name=money,proto3" json:"money,omitempty"`
	Action        string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	TransactionId string `protobuf:"bytes,6,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	MachineId     string `protobuf:"bytes,7,opt,name=machineId,proto3" json:"machineId,omitempty"`
	GameId        string `protobuf:"bytes,8,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameCode      string `protobuf:"bytes,9,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	GameType      string `protobuf:"bytes,10,opt,name=gameType,proto3" json:"gameType,omitempty"`
	TableId       string `protobuf:"bytes,11,opt,name=tableId,proto3" json:"tableId,omitempty"`
	WalletId      string `protobuf:"bytes,12,opt,name=walletId,proto3" json:"walletId,omitempty"`
}

func (x *PachinkoRequest) Reset() {
	*x = PachinkoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PachinkoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PachinkoRequest) ProtoMessage() {}

func (x *PachinkoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PachinkoRequest.ProtoReflect.Descriptor instead.
func (*PachinkoRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{34}
}

func (x *PachinkoRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PachinkoRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PachinkoRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PachinkoRequest) GetMoney() string {
	if x != nil {
		return x.Money
	}
	return ""
}

func (x *PachinkoRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PachinkoRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PachinkoRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *PachinkoRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PachinkoRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *PachinkoRequest) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *PachinkoRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *PachinkoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{35}
}

func (x *BaseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Cq9TransactionBalanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9TransactionBalanceRes) Reset() {
	*x = Cq9TransactionBalanceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9TransactionBalanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9TransactionBalanceRes) ProtoMessage() {}

func (x *Cq9TransactionBalanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9TransactionBalanceRes.ProtoReflect.Descriptor instead.
func (*Cq9TransactionBalanceRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{36}
}

func (x *Cq9TransactionBalanceRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9TransactionBalanceRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9TransactionBalanceRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9TransactionBalanceRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9TransactionBalanceRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

// outer - req & resp
type HabaEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HabaEmpty) Reset() {
	*x = HabaEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaEmpty) ProtoMessage() {}

func (x *HabaEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaEmpty.ProtoReflect.Descriptor instead.
func (*HabaEmpty) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{37}
}

type HealthZResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Now string `protobuf:"bytes,2,opt,name=now,proto3" json:"now,omitempty"`
}

func (x *HealthZResp) Reset() {
	*x = HealthZResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthZResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthZResp) ProtoMessage() {}

func (x *HealthZResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthZResp.ProtoReflect.Descriptor instead.
func (*HealthZResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{38}
}

func (x *HealthZResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HealthZResp) GetNow() string {
	if x != nil {
		return x.Now
	}
	return ""
}

type Cq9RollinRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9RollinRes) Reset() {
	*x = Cq9RollinRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RollinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RollinRes) ProtoMessage() {}

func (x *Cq9RollinRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RollinRes.ProtoReflect.Descriptor instead.
func (*Cq9RollinRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{39}
}

func (x *Cq9RollinRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9RollinRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9RollinRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9RollinRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9RollinRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type ObCancelTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player          string     `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	TranId          int64      `protobuf:"varint,2,opt,name=tranId,proto3" json:"tranId,omitempty"`
	OriginalTranId  int64      `protobuf:"varint,3,opt,name=originalTranId,proto3" json:"originalTranId,omitempty"`
	IsRetry         bool       `protobuf:"varint,4,opt,name=isRetry,proto3" json:"isRetry,omitempty"`
	OriginalDetails []*Details `protobuf:"bytes,5,rep,name=originalDetails,proto3" json:"originalDetails,omitempty"`
}

func (x *ObCancelTransferReq) Reset() {
	*x = ObCancelTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObCancelTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObCancelTransferReq) ProtoMessage() {}

func (x *ObCancelTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObCancelTransferReq.ProtoReflect.Descriptor instead.
func (*ObCancelTransferReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{40}
}

func (x *ObCancelTransferReq) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

func (x *ObCancelTransferReq) GetTranId() int64 {
	if x != nil {
		return x.TranId
	}
	return 0
}

func (x *ObCancelTransferReq) GetOriginalTranId() int64 {
	if x != nil {
		return x.OriginalTranId
	}
	return 0
}

func (x *ObCancelTransferReq) GetIsRetry() bool {
	if x != nil {
		return x.IsRetry
	}
	return false
}

func (x *ObCancelTransferReq) GetOriginalDetails() []*Details {
	if x != nil {
		return x.OriginalDetails
	}
	return nil
}

type AuthRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	MemberId   string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	MemberName string `protobuf:"bytes,3,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
	Balance    int64  `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Type       int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AuthRes) Reset() {
	*x = AuthRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRes) ProtoMessage() {}

func (x *AuthRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRes.ProtoReflect.Descriptor instead.
func (*AuthRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{41}
}

func (x *AuthRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AuthRes) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *AuthRes) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *AuthRes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AuthRes) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 下著结果
type BetResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string  `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	TxnId       int64   `protobuf:"varint,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	TotalWin    int64   `protobuf:"varint,3,opt,name=total_win,json=totalWin,proto3" json:"total_win,omitempty"`
	BonusWin    int64   `protobuf:"varint,4,opt,name=bonus_win,json=bonusWin,proto3" json:"bonus_win,omitempty"`
	GameId      string  `protobuf:"bytes,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SubgameId   int64   `protobuf:"varint,6,opt,name=subgame_id,json=subgameId,proto3" json:"subgame_id,omitempty"`
	Ts          int64   `protobuf:"varint,7,opt,name=ts,proto3" json:"ts,omitempty"`
	JpContrib   float32 `protobuf:"fixed32,8,opt,name=jp_contrib,json=jpContrib,proto3" json:"jp_contrib,omitempty"`
	Betamt      int64   `protobuf:"varint,9,opt,name=betamt,proto3" json:"betamt,omitempty"`
	Winamt      int64   `protobuf:"varint,10,opt,name=winamt,proto3" json:"winamt,omitempty"`
	Json        string  `protobuf:"bytes,11,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *BetResultReq) Reset() {
	*x = BetResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetResultReq) ProtoMessage() {}

func (x *BetResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetResultReq.ProtoReflect.Descriptor instead.
func (*BetResultReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{42}
}

func (x *BetResultReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *BetResultReq) GetTxnId() int64 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *BetResultReq) GetTotalWin() int64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *BetResultReq) GetBonusWin() int64 {
	if x != nil {
		return x.BonusWin
	}
	return 0
}

func (x *BetResultReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *BetResultReq) GetSubgameId() int64 {
	if x != nil {
		return x.SubgameId
	}
	return 0
}

func (x *BetResultReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *BetResultReq) GetJpContrib() float32 {
	if x != nil {
		return x.JpContrib
	}
	return 0
}

func (x *BetResultReq) GetBetamt() int64 {
	if x != nil {
		return x.Betamt
	}
	return 0
}

func (x *BetResultReq) GetWinamt() int64 {
	if x != nil {
		return x.Winamt
	}
	return 0
}

func (x *BetResultReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type PageInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageInfoReq) Reset() {
	*x = PageInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfoReq) ProtoMessage() {}

func (x *PageInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfoReq.ProtoReflect.Descriptor instead.
func (*PageInfoReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{43}
}

func (x *PageInfoReq) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfoReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type BetByBets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId        string   `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SportId        string   `protobuf:"bytes,3,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	TournamentId   string   `protobuf:"bytes,4,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	CategoryId     string   `protobuf:"bytes,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Live           bool     `protobuf:"varint,6,opt,name=live,proto3" json:"live,omitempty"`
	SportName      string   `protobuf:"bytes,7,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"`
	CategoryName   string   `protobuf:"bytes,8,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	TournamentName string   `protobuf:"bytes,9,opt,name=tournament_name,json=tournamentName,proto3" json:"tournament_name,omitempty"`
	CompetitorName []string `protobuf:"bytes,10,rep,name=competitor_name,json=competitorName,proto3" json:"competitor_name,omitempty"`
	MarketName     string   `protobuf:"bytes,11,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	OutcomeName    string   `protobuf:"bytes,12,opt,name=outcome_name,json=outcomeName,proto3" json:"outcome_name,omitempty"`
	Scheduled      uint32   `protobuf:"varint,13,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	Odds           string   `protobuf:"bytes,14,opt,name=odds,proto3" json:"odds,omitempty"`
}

func (x *BetByBets) Reset() {
	*x = BetByBets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBets) ProtoMessage() {}

func (x *BetByBets) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBets.ProtoReflect.Descriptor instead.
func (*BetByBets) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{44}
}

func (x *BetByBets) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBets) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *BetByBets) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *BetByBets) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *BetByBets) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *BetByBets) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *BetByBets) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

func (x *BetByBets) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *BetByBets) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *BetByBets) GetCompetitorName() []string {
	if x != nil {
		return x.CompetitorName
	}
	return nil
}

func (x *BetByBets) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *BetByBets) GetOutcomeName() string {
	if x != nil {
		return x.OutcomeName
	}
	return ""
}

func (x *BetByBets) GetScheduled() uint32 {
	if x != nil {
		return x.Scheduled
	}
	return 0
}

func (x *BetByBets) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

type ElGetUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TotalBalance float64 `protobuf:"fixed64,2,opt,name=totalBalance,proto3" json:"totalBalance,omitempty"`
	Currency     string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	UserName     string  `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	UserId       string  `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	Country      string  `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Language     string  `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	Status       int32   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ElGetUserResp) Reset() {
	*x = ElGetUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElGetUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElGetUserResp) ProtoMessage() {}

func (x *ElGetUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElGetUserResp.ProtoReflect.Descriptor instead.
func (*ElGetUserResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{45}
}

func (x *ElGetUserResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ElGetUserResp) GetTotalBalance() float64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

func (x *ElGetUserResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ElGetUserResp) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ElGetUserResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ElGetUserResp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ElGetUserResp) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ElGetUserResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SabaConfirmBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaConfirmBetMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaConfirmBetReq) Reset() {
	*x = SabaConfirmBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBetReq) ProtoMessage() {}

func (x *SabaConfirmBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBetReq.ProtoReflect.Descriptor instead.
func (*SabaConfirmBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{46}
}

func (x *SabaConfirmBetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaConfirmBetReq) GetMessage() *SabaConfirmBetMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaConfirmBet3RdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaConfirmBet3RdMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaConfirmBet3RdReq) Reset() {
	*x = SabaConfirmBet3RdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBet3RdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBet3RdReq) ProtoMessage() {}

func (x *SabaConfirmBet3RdReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBet3RdReq.ProtoReflect.Descriptor instead.
func (*SabaConfirmBet3RdReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{47}
}

func (x *SabaConfirmBet3RdReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaConfirmBet3RdReq) GetMessage() *SabaConfirmBet3RdMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type BetByBetWinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtTransactionId    string `protobuf:"bytes,2,opt,name=ext_transaction_id,json=extTransactionId,proto3" json:"ext_transaction_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,3,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation           string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Amount              uint32 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance             int64  `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetByBetWinResponse) Reset() {
	*x = BetByBetWinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetWinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetWinResponse) ProtoMessage() {}

func (x *BetByBetWinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetWinResponse.ProtoReflect.Descriptor instead.
func (*BetByBetWinResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{48}
}

func (x *BetByBetWinResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBetWinResponse) GetExtTransactionId() string {
	if x != nil {
		return x.ExtTransactionId
	}
	return ""
}

func (x *BetByBetWinResponse) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetByBetWinResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetByBetWinResponse) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetByBetWinResponse) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetWinResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetWinResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type Cq9CreditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account   string  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime string  `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Gamehall  string  `protobuf:"bytes,4,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode  string  `protobuf:"bytes,5,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid   string  `protobuf:"bytes,6,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Amount    float32 `protobuf:"fixed32,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Mtcode    string  `protobuf:"bytes,8,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Request   string  `protobuf:"bytes,9,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *Cq9CreditReq) Reset() {
	*x = Cq9CreditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9CreditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9CreditReq) ProtoMessage() {}

func (x *Cq9CreditReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9CreditReq.ProtoReflect.Descriptor instead.
func (*Cq9CreditReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{49}
}

func (x *Cq9CreditReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9CreditReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9CreditReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9CreditReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9CreditReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9CreditReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9CreditReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Cq9CreditReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9CreditReq) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type HabaAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Passkey     string `protobuf:"bytes,2,opt,name=passkey,proto3" json:"passkey,omitempty"`
	Machinename string `protobuf:"bytes,3,opt,name=machinename,proto3" json:"machinename,omitempty"`
	Locale      string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Brandid     string `protobuf:"bytes,5,opt,name=brandid,proto3" json:"brandid,omitempty"`
}

func (x *HabaAuth) Reset() {
	*x = HabaAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaAuth) ProtoMessage() {}

func (x *HabaAuth) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaAuth.ProtoReflect.Descriptor instead.
func (*HabaAuth) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{50}
}

func (x *HabaAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *HabaAuth) GetPasskey() string {
	if x != nil {
		return x.Passkey
	}
	return ""
}

func (x *HabaAuth) GetMachinename() string {
	if x != nil {
		return x.Machinename
	}
	return ""
}

func (x *HabaAuth) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *HabaAuth) GetBrandid() string {
	if x != nil {
		return x.Brandid
	}
	return ""
}

type HabaFunds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debitandcredit bool            `protobuf:"varint,1,opt,name=debitandcredit,proto3" json:"debitandcredit,omitempty"`
	Fundinfo       []*HabaFundinfo `protobuf:"bytes,2,rep,name=fundinfo,proto3" json:"fundinfo,omitempty"`
	Refund         *HabaRefund     `protobuf:"bytes,3,opt,name=refund,proto3" json:"refund,omitempty"`
}

func (x *HabaFunds) Reset() {
	*x = HabaFunds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaFunds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaFunds) ProtoMessage() {}

func (x *HabaFunds) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaFunds.ProtoReflect.Descriptor instead.
func (*HabaFunds) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{51}
}

func (x *HabaFunds) GetDebitandcredit() bool {
	if x != nil {
		return x.Debitandcredit
	}
	return false
}

func (x *HabaFunds) GetFundinfo() []*HabaFundinfo {
	if x != nil {
		return x.Fundinfo
	}
	return nil
}

func (x *HabaFunds) GetRefund() *HabaRefund {
	if x != nil {
		return x.Refund
	}
	return nil
}

type SabaCheckMemberOnlineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode string `protobuf:"bytes,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaCheckMemberOnlineResp) Reset() {
	*x = SabaCheckMemberOnlineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCheckMemberOnlineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCheckMemberOnlineResp) ProtoMessage() {}

func (x *SabaCheckMemberOnlineResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCheckMemberOnlineResp.ProtoReflect.Descriptor instead.
func (*SabaCheckMemberOnlineResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{52}
}

func (x *SabaCheckMemberOnlineResp) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *SabaCheckMemberOnlineResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PinnacleCreditRspAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TransactionId uint32 `protobuf:"varint,2,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	ResponseCode  uint32 `protobuf:"varint,3,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
}

func (x *PinnacleCreditRspAction) Reset() {
	*x = PinnacleCreditRspAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleCreditRspAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleCreditRspAction) ProtoMessage() {}

func (x *PinnacleCreditRspAction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleCreditRspAction.ProtoReflect.Descriptor instead.
func (*PinnacleCreditRspAction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{53}
}

func (x *PinnacleCreditRspAction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PinnacleCreditRspAction) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PinnacleCreditRspAction) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

type SabaPlaceBetParlayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Txns   []*PlaceBetParlayTxnsResp `protobuf:"bytes,3,rep,name=txns,proto3" json:"txns,omitempty"`
}

func (x *SabaPlaceBetParlayResp) Reset() {
	*x = SabaPlaceBetParlayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetParlayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetParlayResp) ProtoMessage() {}

func (x *SabaPlaceBetParlayResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetParlayResp.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetParlayResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{54}
}

func (x *SabaPlaceBetParlayResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaPlaceBetParlayResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SabaPlaceBetParlayResp) GetTxns() []*PlaceBetParlayTxnsResp {
	if x != nil {
		return x.Txns
	}
	return nil
}

type SabaPlace3RdParlayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg     string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Txns    []*Place3RdParlayTxnsResp `protobuf:"bytes,3,rep,name=txns,proto3" json:"txns,omitempty"`
	Balance float32                   `protobuf:"fixed32,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *SabaPlace3RdParlayResp) Reset() {
	*x = SabaPlace3RdParlayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlace3RdParlayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlace3RdParlayResp) ProtoMessage() {}

func (x *SabaPlace3RdParlayResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlace3RdParlayResp.ProtoReflect.Descriptor instead.
func (*SabaPlace3RdParlayResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{55}
}

func (x *SabaPlace3RdParlayResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaPlace3RdParlayResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SabaPlace3RdParlayResp) GetTxns() []*Place3RdParlayTxnsResp {
	if x != nil {
		return x.Txns
	}
	return nil
}

func (x *SabaPlace3RdParlayResp) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type SabaPlaceBetentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                       `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Balance    float32                      `protobuf:"fixed32,2,opt,name=balance,proto3" json:"balance,omitempty"`
	TicketList []*PlaceBetentTicketListResp `protobuf:"bytes,3,rep,name=ticketList,proto3" json:"ticketList,omitempty"`
	Status     string                       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Msg        string                       `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaPlaceBetentResp) Reset() {
	*x = SabaPlaceBetentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetentResp) ProtoMessage() {}

func (x *SabaPlaceBetentResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetentResp.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetentResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{56}
}

func (x *SabaPlaceBetentResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaPlaceBetentResp) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SabaPlaceBetentResp) GetTicketList() []*PlaceBetentTicketListResp {
	if x != nil {
		return x.TicketList
	}
	return nil
}

func (x *SabaPlaceBetentResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaPlaceBetentResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PlaceBetentTicketListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string `protobuf:"bytes,1,opt,name=RefId,proto3" json:"RefId,omitempty"`
	LicenseeTxId string `protobuf:"bytes,2,opt,name=LicenseeTxId,proto3" json:"LicenseeTxId,omitempty"`
}

func (x *PlaceBetentTicketListResp) Reset() {
	*x = PlaceBetentTicketListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetentTicketListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetentTicketListResp) ProtoMessage() {}

func (x *PlaceBetentTicketListResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetentTicketListResp.ProtoReflect.Descriptor instead.
func (*PlaceBetentTicketListResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{57}
}

func (x *PlaceBetentTicketListResp) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *PlaceBetentTicketListResp) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

type Place3RdParlayTxnsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string `protobuf:"bytes,1,opt,name=RefId,proto3" json:"RefId,omitempty"`
	LicenseeTxId string `protobuf:"bytes,2,opt,name=LicenseeTxId,proto3" json:"LicenseeTxId,omitempty"`
}

func (x *Place3RdParlayTxnsResp) Reset() {
	*x = Place3RdParlayTxnsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place3RdParlayTxnsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place3RdParlayTxnsResp) ProtoMessage() {}

func (x *Place3RdParlayTxnsResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place3RdParlayTxnsResp.ProtoReflect.Descriptor instead.
func (*Place3RdParlayTxnsResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{58}
}

func (x *Place3RdParlayTxnsResp) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *Place3RdParlayTxnsResp) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

type AgIntelEventItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Currency        string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount          string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Playname        string `protobuf:"bytes,4,opt,name=playname,proto3" json:"playname,omitempty"`
	Time            string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	TransactionID   string `protobuf:"bytes,6,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	EventID         string `protobuf:"bytes,7,opt,name=eventID,proto3" json:"eventID,omitempty"`
	TransactionType string `protobuf:"bytes,8,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	Remark          string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *AgIntelEventItem) Reset() {
	*x = AgIntelEventItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgIntelEventItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgIntelEventItem) ProtoMessage() {}

func (x *AgIntelEventItem) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgIntelEventItem.ProtoReflect.Descriptor instead.
func (*AgIntelEventItem) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{59}
}

func (x *AgIntelEventItem) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *AgIntelEventItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AgIntelEventItem) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AgIntelEventItem) GetPlayname() string {
	if x != nil {
		return x.Playname
	}
	return ""
}

func (x *AgIntelEventItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *AgIntelEventItem) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *AgIntelEventItem) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *AgIntelEventItem) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *AgIntelEventItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type BetByBetSettlementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BetByBetSettlementResponse) Reset() {
	*x = BetByBetSettlementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetSettlementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetSettlementResponse) ProtoMessage() {}

func (x *BetByBetSettlementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetSettlementResponse.ProtoReflect.Descriptor instead.
func (*BetByBetSettlementResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{60}
}

type Cq9TransactionBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	GameCode string `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Cq9TransactionBalanceReq) Reset() {
	*x = Cq9TransactionBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9TransactionBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9TransactionBalanceReq) ProtoMessage() {}

func (x *Cq9TransactionBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9TransactionBalanceReq.ProtoReflect.Descriptor instead.
func (*Cq9TransactionBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{61}
}

func (x *Cq9TransactionBalanceReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9TransactionBalanceReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *Cq9TransactionBalanceReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ElBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Currency      string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount        float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	GameId        int64   `protobuf:"varint,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoundId       string  `protobuf:"bytes,5,opt,name=roundId,proto3" json:"roundId,omitempty"`
	TransactionId string  `protobuf:"bytes,6,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *ElBetReq) Reset() {
	*x = ElBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElBetReq) ProtoMessage() {}

func (x *ElBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElBetReq.ProtoReflect.Descriptor instead.
func (*ElBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{62}
}

func (x *ElBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ElBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ElBetReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ElBetReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ElBetReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *ElBetReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type FbsportsOrderPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   string  `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	UserId          string  `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	MerchantId      string  `protobuf:"bytes,3,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	MerchantUserId  string  `protobuf:"bytes,4,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`
	BusinessId      string  `protobuf:"bytes,5,opt,name=businessId,proto3" json:"businessId,omitempty"`
	TransactionType string  `protobuf:"bytes,6,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	TransferType    string  `protobuf:"bytes,7,opt,name=transferType,proto3" json:"transferType,omitempty"`
	CurrencyId      int64   `protobuf:"varint,8,opt,name=currencyId,proto3" json:"currencyId,omitempty"`
	Amount          float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`
	Status          int64   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	RelatedId       string  `protobuf:"bytes,11,opt,name=relatedId,proto3" json:"relatedId,omitempty"`
	ThirdRemark     string  `protobuf:"bytes,12,opt,name=thirdRemark,proto3" json:"thirdRemark,omitempty"`
}

func (x *FbsportsOrderPayReq) Reset() {
	*x = FbsportsOrderPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsOrderPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsOrderPayReq) ProtoMessage() {}

func (x *FbsportsOrderPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsOrderPayReq.ProtoReflect.Descriptor instead.
func (*FbsportsOrderPayReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{63}
}

func (x *FbsportsOrderPayReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetTransferType() string {
	if x != nil {
		return x.TransferType
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *FbsportsOrderPayReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FbsportsOrderPayReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FbsportsOrderPayReq) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

func (x *FbsportsOrderPayReq) GetThirdRemark() string {
	if x != nil {
		return x.ThirdRemark
	}
	return ""
}

// 额外奖励（积宝奖金）
type BonusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	BonusId     int64  `protobuf:"varint,2,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	BonusReward int64  `protobuf:"varint,3,opt,name=bonus_reward,json=bonusReward,proto3" json:"bonus_reward,omitempty"`
	BonusType   string `protobuf:"bytes,4,opt,name=bonus_type,json=bonusType,proto3" json:"bonus_type,omitempty"`
	GameId      string `protobuf:"bytes,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SubgameId   int32  `protobuf:"varint,6,opt,name=subgame_id,json=subgameId,proto3" json:"subgame_id,omitempty"`
	TxnId       int64  `protobuf:"varint,7,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	Json        string `protobuf:"bytes,9,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *BonusReq) Reset() {
	*x = BonusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusReq) ProtoMessage() {}

func (x *BonusReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusReq.ProtoReflect.Descriptor instead.
func (*BonusReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{64}
}

func (x *BonusReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *BonusReq) GetBonusId() int64 {
	if x != nil {
		return x.BonusId
	}
	return 0
}

func (x *BonusReq) GetBonusReward() int64 {
	if x != nil {
		return x.BonusReward
	}
	return 0
}

func (x *BonusReq) GetBonusType() string {
	if x != nil {
		return x.BonusType
	}
	return ""
}

func (x *BonusReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *BonusReq) GetSubgameId() int32 {
	if x != nil {
		return x.SubgameId
	}
	return 0
}

func (x *BonusReq) GetTxnId() int64 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *BonusReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type CSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Productid    string `protobuf:"bytes,1,opt,name=productid,proto3" json:"productid,omitempty"`
	Username     string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	SessionToken string `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Credit       int64  `protobuf:"varint,4,opt,name=credit,proto3" json:"credit,omitempty"`
}

func (x *CSessionReq) Reset() {
	*x = CSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSessionReq) ProtoMessage() {}

func (x *CSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSessionReq.ProtoReflect.Descriptor instead.
func (*CSessionReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{65}
}

func (x *CSessionReq) GetProductid() string {
	if x != nil {
		return x.Productid
	}
	return ""
}

func (x *CSessionReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CSessionReq) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CSessionReq) GetCredit() int64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

type Cq9TakeAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account   string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime string `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Gamehall  string `protobuf:"bytes,4,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode  string `protobuf:"bytes,5,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid   string `protobuf:"bytes,6,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Mtcode    string `protobuf:"bytes,7,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Session   string `protobuf:"bytes,8,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *Cq9TakeAllReq) Reset() {
	*x = Cq9TakeAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9TakeAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9TakeAllReq) ProtoMessage() {}

func (x *Cq9TakeAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9TakeAllReq.ProtoReflect.Descriptor instead.
func (*Cq9TakeAllReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{66}
}

func (x *Cq9TakeAllReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9TakeAllReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9TakeAllReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9TakeAllReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9TakeAllReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9TakeAllReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9TakeAllReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9TakeAllReq) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

// req & resp
type EvoCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken string      `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	UserId    string      `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Sid       string      `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
	Channel   *EvoChannel `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Uuid      string      `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *EvoCheckReq) Reset() {
	*x = EvoCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoCheckReq) ProtoMessage() {}

func (x *EvoCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoCheckReq.ProtoReflect.Descriptor instead.
func (*EvoCheckReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{67}
}

func (x *EvoCheckReq) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *EvoCheckReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvoCheckReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *EvoCheckReq) GetChannel() *EvoChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *EvoCheckReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 棋牌投注-请求
type JiLiSessionBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId           string  `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Token           string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency        string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Game            int32   `protobuf:"varint,4,opt,name=game,proto3" json:"game,omitempty"`
	Round           int64   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	WagersTime      int64   `protobuf:"varint,6,opt,name=wagers_time,json=wagersTime,proto3" json:"wagers_time,omitempty"`
	BetAmount       float64 `protobuf:"fixed64,7,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinLoseAmount   float64 `protobuf:"fixed64,8,opt,name=win_lose_amount,json=winLoseAmount,proto3" json:"win_lose_amount,omitempty"`
	SessionId       int64   `protobuf:"varint,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type            int32   `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	UserId          int64   `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Turnover        float64 `protobuf:"fixed64,12,opt,name=turnover,proto3" json:"turnover,omitempty"`
	Preserve        float64 `protobuf:"fixed64,13,opt,name=preserve,proto3" json:"preserve,omitempty"`
	Platform        string  `protobuf:"bytes,14,opt,name=platform,proto3" json:"platform,omitempty"`
	StatementType   int32   `protobuf:"varint,15,opt,name=statement_type,json=statementType,proto3" json:"statement_type,omitempty"`
	SessionTotalBet float64 `protobuf:"fixed64,16,opt,name=session_total_bet,json=sessionTotalBet,proto3" json:"session_total_bet,omitempty"`
	Username        string  `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *JiLiSessionBetReq) Reset() {
	*x = JiLiSessionBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiSessionBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiSessionBetReq) ProtoMessage() {}

func (x *JiLiSessionBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiSessionBetReq.ProtoReflect.Descriptor instead.
func (*JiLiSessionBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{68}
}

func (x *JiLiSessionBetReq) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *JiLiSessionBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiSessionBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiSessionBetReq) GetGame() int32 {
	if x != nil {
		return x.Game
	}
	return 0
}

func (x *JiLiSessionBetReq) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *JiLiSessionBetReq) GetWagersTime() int64 {
	if x != nil {
		return x.WagersTime
	}
	return 0
}

func (x *JiLiSessionBetReq) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *JiLiSessionBetReq) GetWinLoseAmount() float64 {
	if x != nil {
		return x.WinLoseAmount
	}
	return 0
}

func (x *JiLiSessionBetReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *JiLiSessionBetReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *JiLiSessionBetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JiLiSessionBetReq) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *JiLiSessionBetReq) GetPreserve() float64 {
	if x != nil {
		return x.Preserve
	}
	return 0
}

func (x *JiLiSessionBetReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *JiLiSessionBetReq) GetStatementType() int32 {
	if x != nil {
		return x.StatementType
	}
	return 0
}

func (x *JiLiSessionBetReq) GetSessionTotalBet() float64 {
	if x != nil {
		return x.SessionTotalBet
	}
	return 0
}

func (x *JiLiSessionBetReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PgCashTransferOutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorToken         string  `protobuf:"bytes,1,opt,name=operator_token,json=operatorToken,proto3" json:"operator_token,omitempty"`
	SecretKey             string  `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	OperatorPlayerSession string  `protobuf:"bytes,3,opt,name=operator_player_session,json=operatorPlayerSession,proto3" json:"operator_player_session,omitempty"`
	PlayerName            string  `protobuf:"bytes,4,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	GameId                uint32  `protobuf:"varint,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	ParentBetId           string  `protobuf:"bytes,6,opt,name=parent_bet_id,json=parentBetId,proto3" json:"parent_bet_id,omitempty"`
	BetId                 string  `protobuf:"bytes,7,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`
	CurrencyCode          string  `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Platform              string  `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	TransferAmount        float64 `protobuf:"fixed64,10,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
	TransactionId         string  `protobuf:"bytes,11,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	WalletType            string  `protobuf:"bytes,12,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`
	CreateTime            int64   `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdatedTime           int64   `protobuf:"varint,14,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	IsValidateBet         bool    `protobuf:"varint,15,opt,name=is_validate_bet,json=isValidateBet,proto3" json:"is_validate_bet,omitempty"`
	IsAdjustment          bool    `protobuf:"varint,16,opt,name=is_adjustment,json=isAdjustment,proto3" json:"is_adjustment,omitempty"`
	IsParentZeroStake     bool    `protobuf:"varint,17,opt,name=is_parent_zero_stake,json=isParentZeroStake,proto3" json:"is_parent_zero_stake,omitempty"`
	IsFeature             bool    `protobuf:"varint,18,opt,name=is_feature,json=isFeature,proto3" json:"is_feature,omitempty"`
	IsFeatureBuy          bool    `protobuf:"varint,19,opt,name=is_feature_buy,json=isFeatureBuy,proto3" json:"is_feature_buy,omitempty"`
	IsWager               bool    `protobuf:"varint,20,opt,name=is_wager,json=isWager,proto3" json:"is_wager,omitempty"`
	FreeGameTransactionId string  `protobuf:"bytes,21,opt,name=free_game_transaction_id,json=freeGameTransactionId,proto3" json:"free_game_transaction_id,omitempty"`
	FreeGameName          string  `protobuf:"bytes,22,opt,name=free_game_name,json=freeGameName,proto3" json:"free_game_name,omitempty"`
	FreeGameId            string  `protobuf:"bytes,23,opt,name=free_game_id,json=freeGameId,proto3" json:"free_game_id,omitempty"`
	IsMinusCount          bool    `protobuf:"varint,24,opt,name=is_minus_count,json=isMinusCount,proto3" json:"is_minus_count,omitempty"`
	BonusTransactionId    string  `protobuf:"bytes,25,opt,name=bonus_transaction_id,json=bonusTransactionId,proto3" json:"bonus_transaction_id,omitempty"`
	BonusName             string  `protobuf:"bytes,26,opt,name=bonus_name,json=bonusName,proto3" json:"bonus_name,omitempty"`
	BonusId               int64   `protobuf:"varint,27,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	BonusBalanceAmount    float64 `protobuf:"fixed64,28,opt,name=bonus_balance_amount,json=bonusBalanceAmount,proto3" json:"bonus_balance_amount,omitempty"`
	BonusRatioAmount      float64 `protobuf:"fixed64,29,opt,name=bonus_ratio_amount,json=bonusRatioAmount,proto3" json:"bonus_ratio_amount,omitempty"`
	BetAmount             float64 `protobuf:"fixed64,30,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinAmount             float64 `protobuf:"fixed64,31,opt,name=win_amount,json=winAmount,proto3" json:"win_amount,omitempty"`
}

func (x *PgCashTransferOutReq) Reset() {
	*x = PgCashTransferOutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgCashTransferOutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCashTransferOutReq) ProtoMessage() {}

func (x *PgCashTransferOutReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCashTransferOutReq.ProtoReflect.Descriptor instead.
func (*PgCashTransferOutReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{69}
}

func (x *PgCashTransferOutReq) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

func (x *PgCashTransferOutReq) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *PgCashTransferOutReq) GetOperatorPlayerSession() string {
	if x != nil {
		return x.OperatorPlayerSession
	}
	return ""
}

func (x *PgCashTransferOutReq) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PgCashTransferOutReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *PgCashTransferOutReq) GetParentBetId() string {
	if x != nil {
		return x.ParentBetId
	}
	return ""
}

func (x *PgCashTransferOutReq) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *PgCashTransferOutReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PgCashTransferOutReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PgCashTransferOutReq) GetTransferAmount() float64 {
	if x != nil {
		return x.TransferAmount
	}
	return 0
}

func (x *PgCashTransferOutReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PgCashTransferOutReq) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *PgCashTransferOutReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PgCashTransferOutReq) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *PgCashTransferOutReq) GetIsValidateBet() bool {
	if x != nil {
		return x.IsValidateBet
	}
	return false
}

func (x *PgCashTransferOutReq) GetIsAdjustment() bool {
	if x != nil {
		return x.IsAdjustment
	}
	return false
}

func (x *PgCashTransferOutReq) GetIsParentZeroStake() bool {
	if x != nil {
		return x.IsParentZeroStake
	}
	return false
}

func (x *PgCashTransferOutReq) GetIsFeature() bool {
	if x != nil {
		return x.IsFeature
	}
	return false
}

func (x *PgCashTransferOutReq) GetIsFeatureBuy() bool {
	if x != nil {
		return x.IsFeatureBuy
	}
	return false
}

func (x *PgCashTransferOutReq) GetIsWager() bool {
	if x != nil {
		return x.IsWager
	}
	return false
}

func (x *PgCashTransferOutReq) GetFreeGameTransactionId() string {
	if x != nil {
		return x.FreeGameTransactionId
	}
	return ""
}

func (x *PgCashTransferOutReq) GetFreeGameName() string {
	if x != nil {
		return x.FreeGameName
	}
	return ""
}

func (x *PgCashTransferOutReq) GetFreeGameId() string {
	if x != nil {
		return x.FreeGameId
	}
	return ""
}

func (x *PgCashTransferOutReq) GetIsMinusCount() bool {
	if x != nil {
		return x.IsMinusCount
	}
	return false
}

func (x *PgCashTransferOutReq) GetBonusTransactionId() string {
	if x != nil {
		return x.BonusTransactionId
	}
	return ""
}

func (x *PgCashTransferOutReq) GetBonusName() string {
	if x != nil {
		return x.BonusName
	}
	return ""
}

func (x *PgCashTransferOutReq) GetBonusId() int64 {
	if x != nil {
		return x.BonusId
	}
	return 0
}

func (x *PgCashTransferOutReq) GetBonusBalanceAmount() float64 {
	if x != nil {
		return x.BonusBalanceAmount
	}
	return 0
}

func (x *PgCashTransferOutReq) GetBonusRatioAmount() float64 {
	if x != nil {
		return x.BonusRatioAmount
	}
	return 0
}

func (x *PgCashTransferOutReq) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *PgCashTransferOutReq) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

type SabaHealthCheckResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaHealthCheckResp) Reset() {
	*x = SabaHealthCheckResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaHealthCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaHealthCheckResp) ProtoMessage() {}

func (x *SabaHealthCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaHealthCheckResp.ProtoReflect.Descriptor instead.
func (*SabaHealthCheckResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{70}
}

func (x *SabaHealthCheckResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaHealthCheckResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PlaceBetParlayDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BetCount int32   `protobuf:"varint,3,opt,name=betCount,proto3" json:"betCount,omitempty"`
	Stake    float64 `protobuf:"fixed64,4,opt,name=stake,proto3" json:"stake,omitempty"`
	Odds     float64 `protobuf:"fixed64,5,opt,name=odds,proto3" json:"odds,omitempty"`
	MatchId  int64   `protobuf:"varint,6,opt,name=matchId,proto3" json:"matchId,omitempty"`
}

func (x *PlaceBetParlayDetail) Reset() {
	*x = PlaceBetParlayDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetParlayDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetParlayDetail) ProtoMessage() {}

func (x *PlaceBetParlayDetail) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetParlayDetail.ProtoReflect.Descriptor instead.
func (*PlaceBetParlayDetail) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{71}
}

func (x *PlaceBetParlayDetail) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PlaceBetParlayDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaceBetParlayDetail) GetBetCount() int32 {
	if x != nil {
		return x.BetCount
	}
	return 0
}

func (x *PlaceBetParlayDetail) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *PlaceBetParlayDetail) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *PlaceBetParlayDetail) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type BetByBetRefundTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetslipId           string  `protobuf:"bytes,2,opt,name=betslip_id,json=betslipId,proto3" json:"betslip_id,omitempty"`
	PlayerId            string  `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId          string  `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId     string  `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId         string  `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Timestamp           float64 `protobuf:"fixed64,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount              int64   `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string  `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	CrossRateEuro       string  `protobuf:"bytes,10,opt,name=cross_rate_euro,json=crossRateEuro,proto3" json:"cross_rate_euro,omitempty"`
	Operation           string  `protobuf:"bytes,11,opt,name=operation,proto3" json:"operation,omitempty"`
	BonusId             string  `protobuf:"bytes,12,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	ParentTransactionId string  `protobuf:"bytes,13,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
}

func (x *BetByBetRefundTransaction) Reset() {
	*x = BetByBetRefundTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetRefundTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetRefundTransaction) ProtoMessage() {}

func (x *BetByBetRefundTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetRefundTransaction.ProtoReflect.Descriptor instead.
func (*BetByBetRefundTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{72}
}

func (x *BetByBetRefundTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetBetslipId() string {
	if x != nil {
		return x.BetslipId
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetByBetRefundTransaction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetRefundTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetCrossRateEuro() string {
	if x != nil {
		return x.CrossRateEuro
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetByBetRefundTransaction) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

// PpPromoWin-响应
type PpPromoWinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Cash          string `protobuf:"bytes,3,opt,name=cash,proto3" json:"cash,omitempty"`
	Bonus         string `protobuf:"bytes,4,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Error         int64  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PpPromoWinResp) Reset() {
	*x = PpPromoWinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpPromoWinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpPromoWinResp) ProtoMessage() {}

func (x *PpPromoWinResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpPromoWinResp.ProtoReflect.Descriptor instead.
func (*PpPromoWinResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{73}
}

func (x *PpPromoWinResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PpPromoWinResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PpPromoWinResp) GetCash() string {
	if x != nil {
		return x.Cash
	}
	return ""
}

func (x *PpPromoWinResp) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *PpPromoWinResp) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PpPromoWinResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PpAdjustmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash           string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId         string `protobuf:"bytes,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoundId        int64  `protobuf:"varint,4,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Amount         string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Reference      string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	ProviderId     string `protobuf:"bytes,7,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Timestamp      int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ValidBetAmount string `protobuf:"bytes,9,opt,name=validBetAmount,proto3" json:"validBetAmount,omitempty"`
}

func (x *PpAdjustmentReq) Reset() {
	*x = PpAdjustmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpAdjustmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpAdjustmentReq) ProtoMessage() {}

func (x *PpAdjustmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpAdjustmentReq.ProtoReflect.Descriptor instead.
func (*PpAdjustmentReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{74}
}

func (x *PpAdjustmentReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpAdjustmentReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpAdjustmentReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PpAdjustmentReq) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *PpAdjustmentReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PpAdjustmentReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PpAdjustmentReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *PpAdjustmentReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PpAdjustmentReq) GetValidBetAmount() string {
	if x != nil {
		return x.ValidBetAmount
	}
	return ""
}

type Cq9EndRoundRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9EndRoundRes) Reset() {
	*x = Cq9EndRoundRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9EndRoundRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9EndRoundRes) ProtoMessage() {}

func (x *Cq9EndRoundRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9EndRoundRes.ProtoReflect.Descriptor instead.
func (*Cq9EndRoundRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{75}
}

func (x *Cq9EndRoundRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9EndRoundRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9EndRoundRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9EndRoundRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9EndRoundRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type EvoChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EvoChannel) Reset() {
	*x = EvoChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoChannel) ProtoMessage() {}

func (x *EvoChannel) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoChannel.ProtoReflect.Descriptor instead.
func (*EvoChannel) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{76}
}

func (x *EvoChannel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PinnacleDebitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    *PinnacleDebitAction `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	Timestamp string               `protobuf:"bytes,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Signature string               `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *PinnacleDebitReq) Reset() {
	*x = PinnacleDebitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleDebitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleDebitReq) ProtoMessage() {}

func (x *PinnacleDebitReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleDebitReq.ProtoReflect.Descriptor instead.
func (*PinnacleDebitReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{77}
}

func (x *PinnacleDebitReq) GetAction() *PinnacleDebitAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *PinnacleDebitReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PinnacleDebitReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type SabaUnsettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *UnSettleMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaUnsettleReq) Reset() {
	*x = SabaUnsettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaUnsettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaUnsettleReq) ProtoMessage() {}

func (x *SabaUnsettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaUnsettleReq.ProtoReflect.Descriptor instead.
func (*SabaUnsettleReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{78}
}

func (x *SabaUnsettleReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaUnsettleReq) GetMessage() *UnSettleMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type Cq9RecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	MtCode string `protobuf:"bytes,2,opt,name=mtCode,proto3" json:"mtCode,omitempty"`
}

func (x *Cq9RecordReq) Reset() {
	*x = Cq9RecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RecordReq) ProtoMessage() {}

func (x *Cq9RecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RecordReq.ProtoReflect.Descriptor instead.
func (*Cq9RecordReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{79}
}

func (x *Cq9RecordReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9RecordReq) GetMtCode() string {
	if x != nil {
		return x.MtCode
	}
	return ""
}

type RtgSettlementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                   float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency                 string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Gameid                   int64   `protobuf:"varint,3,opt,name=gameid,proto3" json:"gameid,omitempty"`
	Membercode               string  `protobuf:"bytes,4,opt,name=membercode,proto3" json:"membercode,omitempty"`
	Roundid                  string  `protobuf:"bytes,5,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Transactionid            string  `protobuf:"bytes,6,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	Freegame                 int32   `protobuf:"varint,7,opt,name=freegame,proto3" json:"freegame,omitempty"`
	Gameroundend             int32   `protobuf:"varint,8,opt,name=gameroundend,proto3" json:"gameroundend,omitempty"`
	Sessionid                int64   `protobuf:"varint,9,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	Gamenum                  int64   `protobuf:"varint,10,opt,name=gamenum,proto3" json:"gamenum,omitempty"`
	Platformid               int64   `protobuf:"varint,11,opt,name=platformid,proto3" json:"platformid,omitempty"`
	Token                    string  `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	Bonusamount              float64 `protobuf:"fixed64,13,opt,name=bonusamount,proto3" json:"bonusamount,omitempty"`
	Jackpotamount            float64 `protobuf:"fixed64,14,opt,name=Jackpotamount,proto3" json:"Jackpotamount,omitempty"`
	Maxbonusconversion       float64 `protobuf:"fixed64,15,opt,name=Maxbonusconversion,proto3" json:"Maxbonusconversion,omitempty"`
	Isbonusroundend          float64 `protobuf:"fixed64,16,opt,name=Isbonusroundend,proto3" json:"Isbonusroundend,omitempty"`
	Bonusconverted           float64 `protobuf:"fixed64,17,opt,name=Bonusconverted,proto3" json:"Bonusconverted,omitempty"`
	Jackpotcontribution      float64 `protobuf:"fixed64,18,opt,name=Jackpotcontribution,proto3" json:"Jackpotcontribution,omitempty"`
	Bonusjackpotcontribution float64 `protobuf:"fixed64,19,opt,name=Bonusjackpotcontribution,proto3" json:"Bonusjackpotcontribution,omitempty"`
	Transactiondate          string  `protobuf:"bytes,20,opt,name=transactiondate,proto3" json:"transactiondate,omitempty"`
}

func (x *RtgSettlementReq) Reset() {
	*x = RtgSettlementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtgSettlementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtgSettlementReq) ProtoMessage() {}

func (x *RtgSettlementReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtgSettlementReq.ProtoReflect.Descriptor instead.
func (*RtgSettlementReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{80}
}

func (x *RtgSettlementReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RtgSettlementReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RtgSettlementReq) GetGameid() int64 {
	if x != nil {
		return x.Gameid
	}
	return 0
}

func (x *RtgSettlementReq) GetMembercode() string {
	if x != nil {
		return x.Membercode
	}
	return ""
}

func (x *RtgSettlementReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *RtgSettlementReq) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

func (x *RtgSettlementReq) GetFreegame() int32 {
	if x != nil {
		return x.Freegame
	}
	return 0
}

func (x *RtgSettlementReq) GetGameroundend() int32 {
	if x != nil {
		return x.Gameroundend
	}
	return 0
}

func (x *RtgSettlementReq) GetSessionid() int64 {
	if x != nil {
		return x.Sessionid
	}
	return 0
}

func (x *RtgSettlementReq) GetGamenum() int64 {
	if x != nil {
		return x.Gamenum
	}
	return 0
}

func (x *RtgSettlementReq) GetPlatformid() int64 {
	if x != nil {
		return x.Platformid
	}
	return 0
}

func (x *RtgSettlementReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RtgSettlementReq) GetBonusamount() float64 {
	if x != nil {
		return x.Bonusamount
	}
	return 0
}

func (x *RtgSettlementReq) GetJackpotamount() float64 {
	if x != nil {
		return x.Jackpotamount
	}
	return 0
}

func (x *RtgSettlementReq) GetMaxbonusconversion() float64 {
	if x != nil {
		return x.Maxbonusconversion
	}
	return 0
}

func (x *RtgSettlementReq) GetIsbonusroundend() float64 {
	if x != nil {
		return x.Isbonusroundend
	}
	return 0
}

func (x *RtgSettlementReq) GetBonusconverted() float64 {
	if x != nil {
		return x.Bonusconverted
	}
	return 0
}

func (x *RtgSettlementReq) GetJackpotcontribution() float64 {
	if x != nil {
		return x.Jackpotcontribution
	}
	return 0
}

func (x *RtgSettlementReq) GetBonusjackpotcontribution() float64 {
	if x != nil {
		return x.Bonusjackpotcontribution
	}
	return 0
}

func (x *RtgSettlementReq) GetTransactiondate() string {
	if x != nil {
		return x.Transactiondate
	}
	return ""
}

type PgVerifySessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorToken         string `protobuf:"bytes,1,opt,name=operator_token,json=operatorToken,proto3" json:"operator_token,omitempty"`
	SecretKey             string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	OperatorPlayerSession string `protobuf:"bytes,3,opt,name=operator_player_session,json=operatorPlayerSession,proto3" json:"operator_player_session,omitempty"`
	GameId                uint32 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CustomParameter       string `protobuf:"bytes,5,opt,name=custom_parameter,json=customParameter,proto3" json:"custom_parameter,omitempty"`
	BetType               uint32 `protobuf:"varint,6,opt,name=bet_type,json=betType,proto3" json:"bet_type,omitempty"`
}

func (x *PgVerifySessionReq) Reset() {
	*x = PgVerifySessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgVerifySessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgVerifySessionReq) ProtoMessage() {}

func (x *PgVerifySessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgVerifySessionReq.ProtoReflect.Descriptor instead.
func (*PgVerifySessionReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{81}
}

func (x *PgVerifySessionReq) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

func (x *PgVerifySessionReq) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *PgVerifySessionReq) GetOperatorPlayerSession() string {
	if x != nil {
		return x.OperatorPlayerSession
	}
	return ""
}

func (x *PgVerifySessionReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *PgVerifySessionReq) GetCustomParameter() string {
	if x != nil {
		return x.CustomParameter
	}
	return ""
}

func (x *PgVerifySessionReq) GetBetType() uint32 {
	if x != nil {
		return x.BetType
	}
	return 0
}

type PinnacleQueryRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCode         string                       `protobuf:"bytes,1,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	AvailableBalance float64                      `protobuf:"fixed64,2,opt,name=AvailableBalance,proto3" json:"AvailableBalance,omitempty"`
	Transaction      *PinnacleQueryRspTransaction `protobuf:"bytes,3,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
}

func (x *PinnacleQueryRspResult) Reset() {
	*x = PinnacleQueryRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleQueryRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleQueryRspResult) ProtoMessage() {}

func (x *PinnacleQueryRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleQueryRspResult.ProtoReflect.Descriptor instead.
func (*PinnacleQueryRspResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{82}
}

func (x *PinnacleQueryRspResult) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *PinnacleQueryRspResult) GetAvailableBalance() float64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *PinnacleQueryRspResult) GetTransaction() *PinnacleQueryRspTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// 2003 Parent transaction not found
// 2004 Bad request
// 2005 Invalid JWT token
type BetLostError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BetLostError) Reset() {
	*x = BetLostError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetLostError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLostError) ProtoMessage() {}

func (x *BetLostError) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLostError.ProtoReflect.Descriptor instead.
func (*BetLostError) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{83}
}

func (x *BetLostError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BetLostError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HabaPlayerDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playerdetailresponse *HabaPlayerdetailresponse `protobuf:"bytes,1,opt,name=playerdetailresponse,proto3" json:"playerdetailresponse,omitempty"`
}

func (x *HabaPlayerDetailResp) Reset() {
	*x = HabaPlayerDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaPlayerDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaPlayerDetailResp) ProtoMessage() {}

func (x *HabaPlayerDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaPlayerDetailResp.ProtoReflect.Descriptor instead.
func (*HabaPlayerDetailResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{84}
}

func (x *HabaPlayerDetailResp) GetPlayerdetailresponse() *HabaPlayerdetailresponse {
	if x != nil {
		return x.Playerdetailresponse
	}
	return nil
}

type PinnacleDebitAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string                    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Remark      string                    `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Transaction *PinnacleDebitTransaction `protobuf:"bytes,4,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
}

func (x *PinnacleDebitAction) Reset() {
	*x = PinnacleDebitAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleDebitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleDebitAction) ProtoMessage() {}

func (x *PinnacleDebitAction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleDebitAction.ProtoReflect.Descriptor instead.
func (*PinnacleDebitAction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{85}
}

func (x *PinnacleDebitAction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PinnacleDebitAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PinnacleDebitAction) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PinnacleDebitAction) GetTransaction() *PinnacleDebitTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type PinnacleQueryRspTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   uint32  `protobuf:"varint,1,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	TransactionType string  `protobuf:"bytes,2,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	TransactionDate string  `protobuf:"bytes,3,opt,name=TransactionDate,proto3" json:"TransactionDate,omitempty"`
	Amount          float64 `protobuf:"fixed64,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Status          string  `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *PinnacleQueryRspTransaction) Reset() {
	*x = PinnacleQueryRspTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleQueryRspTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleQueryRspTransaction) ProtoMessage() {}

func (x *PinnacleQueryRspTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleQueryRspTransaction.ProtoReflect.Descriptor instead.
func (*PinnacleQueryRspTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{86}
}

func (x *PinnacleQueryRspTransaction) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PinnacleQueryRspTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *PinnacleQueryRspTransaction) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *PinnacleQueryRspTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PinnacleQueryRspTransaction) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RollbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Time     int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	RefID    string `protobuf:"bytes,4,opt,name=refID,proto3" json:"refID,omitempty"`
}

func (x *RollbackResp) Reset() {
	*x = RollbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackResp) ProtoMessage() {}

func (x *RollbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackResp.ProtoReflect.Descriptor instead.
func (*RollbackResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{87}
}

func (x *RollbackResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RollbackResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RollbackResp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RollbackResp) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

// base message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{88}
}

type BoomingCallbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Buttons string `protobuf:"bytes,3,opt,name=buttons,proto3" json:"buttons,omitempty"`
	Balance string `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BoomingCallbackResp) Reset() {
	*x = BoomingCallbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoomingCallbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoomingCallbackResp) ProtoMessage() {}

func (x *BoomingCallbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoomingCallbackResp.ProtoReflect.Descriptor instead.
func (*BoomingCallbackResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{89}
}

func (x *BoomingCallbackResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *BoomingCallbackResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BoomingCallbackResp) GetButtons() string {
	if x != nil {
		return x.Buttons
	}
	return ""
}

func (x *BoomingCallbackResp) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type CrownGenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *CrownGenericData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Method    string            `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	Respcode  string            `protobuf:"bytes,3,opt,name=respcode,proto3" json:"respcode,omitempty"`
	Status    string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp int64             `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CrownGenericResponse) Reset() {
	*x = CrownGenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrownGenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrownGenericResponse) ProtoMessage() {}

func (x *CrownGenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrownGenericResponse.ProtoReflect.Descriptor instead.
func (*CrownGenericResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{90}
}

func (x *CrownGenericResponse) GetData() *CrownGenericData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CrownGenericResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CrownGenericResponse) GetRespcode() string {
	if x != nil {
		return x.Respcode
	}
	return ""
}

func (x *CrownGenericResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CrownGenericResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 结算
type FunkyBetSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     string                 `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	SessionId    string                 `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	RefNo        string                 `protobuf:"bytes,3,opt,name=refNo,proto3" json:"refNo,omitempty"`
	BetResultReq *FunkyBetSettleReqData `protobuf:"bytes,4,opt,name=betResultReq,proto3" json:"betResultReq,omitempty"`
}

func (x *FunkyBetSettleReq) Reset() {
	*x = FunkyBetSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyBetSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyBetSettleReq) ProtoMessage() {}

func (x *FunkyBetSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyBetSettleReq.ProtoReflect.Descriptor instead.
func (*FunkyBetSettleReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{91}
}

func (x *FunkyBetSettleReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FunkyBetSettleReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FunkyBetSettleReq) GetRefNo() string {
	if x != nil {
		return x.RefNo
	}
	return ""
}

func (x *FunkyBetSettleReq) GetBetResultReq() *FunkyBetSettleReqData {
	if x != nil {
		return x.BetResultReq
	}
	return nil
}

type RtgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message      string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Balance      float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Bonusbalance float64 `protobuf:"fixed64,4,opt,name=bonusbalance,proto3" json:"bonusbalance,omitempty"`
	Currency     string  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *RtgResp) Reset() {
	*x = RtgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtgResp) ProtoMessage() {}

func (x *RtgResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtgResp.ProtoReflect.Descriptor instead.
func (*RtgResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{92}
}

func (x *RtgResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RtgResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RtgResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RtgResp) GetBonusbalance() float64 {
	if x != nil {
		return x.Bonusbalance
	}
	return 0
}

func (x *RtgResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type PinnacleDebitRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *PinnacleDebitRspResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode uint32                  `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Timestamp string                  `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnacleDebitRsp) Reset() {
	*x = PinnacleDebitRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleDebitRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleDebitRsp) ProtoMessage() {}

func (x *PinnacleDebitRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleDebitRsp.ProtoReflect.Descriptor instead.
func (*PinnacleDebitRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{93}
}

func (x *PinnacleDebitRsp) GetResult() *PinnacleDebitRspResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PinnacleDebitRsp) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PinnacleDebitRsp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// 串关确认投注接口输入输出定义
type SabaConfirmBetParlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *PlaceConfirmBetParlayMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaConfirmBetParlayReq) Reset() {
	*x = SabaConfirmBetParlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBetParlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBetParlayReq) ProtoMessage() {}

func (x *SabaConfirmBetParlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBetParlayReq.ProtoReflect.Descriptor instead.
func (*SabaConfirmBetParlayReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{94}
}

func (x *SabaConfirmBetParlayReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaConfirmBetParlayReq) GetMessage() *PlaceConfirmBetParlayMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type BetByBetRollbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtTransactionId    string `protobuf:"bytes,2,opt,name=ext_transaction_id,json=extTransactionId,proto3" json:"ext_transaction_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,3,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation           string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Amount              uint32 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance             int64  `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetByBetRollbackResponse) Reset() {
	*x = BetByBetRollbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetRollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetRollbackResponse) ProtoMessage() {}

func (x *BetByBetRollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetRollbackResponse.ProtoReflect.Descriptor instead.
func (*BetByBetRollbackResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{95}
}

func (x *BetByBetRollbackResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBetRollbackResponse) GetExtTransactionId() string {
	if x != nil {
		return x.ExtTransactionId
	}
	return ""
}

func (x *BetByBetRollbackResponse) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetByBetRollbackResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetByBetRollbackResponse) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetByBetRollbackResponse) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetRollbackResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetRollbackResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type FbsportsOrderPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    int64  `protobuf:"varint,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FbsportsOrderPayResp) Reset() {
	*x = FbsportsOrderPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsOrderPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsOrderPayResp) ProtoMessage() {}

func (x *FbsportsOrderPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsOrderPayResp.ProtoReflect.Descriptor instead.
func (*FbsportsOrderPayResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{96}
}

func (x *FbsportsOrderPayResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbsportsOrderPayResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FbsportsOrderPayResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbsportsOrderPayResp) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

// 投注-请求
type JiLiBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId         string  `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency      string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Game          int32   `protobuf:"varint,4,opt,name=game,proto3" json:"game,omitempty"`
	Round         int64   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	WagersTime    int64   `protobuf:"varint,6,opt,name=wagers_time,json=wagersTime,proto3" json:"wagers_time,omitempty"`
	BetAmount     float64 `protobuf:"fixed64,7,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinLoseAmount float64 `protobuf:"fixed64,8,opt,name=win_lose_amount,json=winLoseAmount,proto3" json:"win_lose_amount,omitempty"`
	IsFreeRound   bool    `protobuf:"varint,9,opt,name=is_free_round,json=isFreeRound,proto3" json:"is_free_round,omitempty"`
	UserId        int64   `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      string  `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	TransactionId int64   `protobuf:"varint,12,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Platform      string  `protobuf:"bytes,13,opt,name=platform,proto3" json:"platform,omitempty"`
	StatementType int32   `protobuf:"varint,14,opt,name=statement_type,json=statementType,proto3" json:"statement_type,omitempty"`
	GameCategory  int32   `protobuf:"varint,15,opt,name=game_category,json=gameCategory,proto3" json:"game_category,omitempty"`
}

func (x *JiLiBetReq) Reset() {
	*x = JiLiBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiBetReq) ProtoMessage() {}

func (x *JiLiBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiBetReq.ProtoReflect.Descriptor instead.
func (*JiLiBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{97}
}

func (x *JiLiBetReq) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *JiLiBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiBetReq) GetGame() int32 {
	if x != nil {
		return x.Game
	}
	return 0
}

func (x *JiLiBetReq) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *JiLiBetReq) GetWagersTime() int64 {
	if x != nil {
		return x.WagersTime
	}
	return 0
}

func (x *JiLiBetReq) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *JiLiBetReq) GetWinLoseAmount() float64 {
	if x != nil {
		return x.WinLoseAmount
	}
	return 0
}

func (x *JiLiBetReq) GetIsFreeRound() bool {
	if x != nil {
		return x.IsFreeRound
	}
	return false
}

func (x *JiLiBetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JiLiBetReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JiLiBetReq) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *JiLiBetReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *JiLiBetReq) GetStatementType() int32 {
	if x != nil {
		return x.StatementType
	}
	return 0
}

func (x *JiLiBetReq) GetGameCategory() int32 {
	if x != nil {
		return x.GameCategory
	}
	return 0
}

type PinnacleGetbalanceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCode         string  `protobuf:"bytes,1,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	AvailableBalance float64 `protobuf:"fixed64,2,opt,name=AvailableBalance,proto3" json:"AvailableBalance,omitempty"`
}

func (x *PinnacleGetbalanceResult) Reset() {
	*x = PinnacleGetbalanceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleGetbalanceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleGetbalanceResult) ProtoMessage() {}

func (x *PinnacleGetbalanceResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleGetbalanceResult.ProtoReflect.Descriptor instead.
func (*PinnacleGetbalanceResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{98}
}

func (x *PinnacleGetbalanceResult) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *PinnacleGetbalanceResult) GetAvailableBalance() float64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

// 返还押注
type BetRefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	TxnId       int64  `protobuf:"varint,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	Json        string `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *BetRefundReq) Reset() {
	*x = BetRefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRefundReq) ProtoMessage() {}

func (x *BetRefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRefundReq.ProtoReflect.Descriptor instead.
func (*BetRefundReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{99}
}

func (x *BetRefundReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *BetRefundReq) GetTxnId() int64 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *BetRefundReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// 投注-请求
type PpBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId       string `protobuf:"bytes,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoundId      int64  `protobuf:"varint,4,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Amount       string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Reference    string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	ProviderId   string `protobuf:"bytes,7,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Timestamp    int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RoundDetails string `protobuf:"bytes,9,opt,name=roundDetails,proto3" json:"roundDetails,omitempty"`
}

func (x *PpBetReq) Reset() {
	*x = PpBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpBetReq) ProtoMessage() {}

func (x *PpBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpBetReq.ProtoReflect.Descriptor instead.
func (*PpBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{100}
}

func (x *PpBetReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpBetReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpBetReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PpBetReq) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *PpBetReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PpBetReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PpBetReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *PpBetReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PpBetReq) GetRoundDetails() string {
	if x != nil {
		return x.RoundDetails
	}
	return ""
}

type CreditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CreditReq) Reset() {
	*x = CreditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditReq) ProtoMessage() {}

func (x *CreditReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditReq.ProtoReflect.Descriptor instead.
func (*CreditReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{101}
}

func (x *CreditReq) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type JiLiAuthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Currency  string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance   float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Token     string  `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	ErrorCode int32   `protobuf:"varint,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message   string  `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JiLiAuthResp) Reset() {
	*x = JiLiAuthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiAuthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiAuthResp) ProtoMessage() {}

func (x *JiLiAuthResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiAuthResp.ProtoReflect.Descriptor instead.
func (*JiLiAuthResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{102}
}

func (x *JiLiAuthResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JiLiAuthResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiAuthResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JiLiAuthResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiAuthResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *JiLiAuthResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// PpJackpotWin-请求
type PpJackpotWinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ProviderId string `protobuf:"bytes,2,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Timestamp  int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId     string `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId     string `protobuf:"bytes,5,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoundId    int64  `protobuf:"varint,6,opt,name=roundId,proto3" json:"roundId,omitempty"`
	JackpotId  int64  `protobuf:"varint,7,opt,name=jackpotId,proto3" json:"jackpotId,omitempty"`
	Amount     string `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Reference  string `protobuf:"bytes,9,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *PpJackpotWinReq) Reset() {
	*x = PpJackpotWinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpJackpotWinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpJackpotWinReq) ProtoMessage() {}

func (x *PpJackpotWinReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpJackpotWinReq.ProtoReflect.Descriptor instead.
func (*PpJackpotWinReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{103}
}

func (x *PpJackpotWinReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpJackpotWinReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *PpJackpotWinReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PpJackpotWinReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpJackpotWinReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PpJackpotWinReq) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *PpJackpotWinReq) GetJackpotId() int64 {
	if x != nil {
		return x.JackpotId
	}
	return 0
}

func (x *PpJackpotWinReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PpJackpotWinReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type TurboProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign  string `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TurboProfileReq) Reset() {
	*x = TurboProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurboProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurboProfileReq) ProtoMessage() {}

func (x *TurboProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurboProfileReq.ProtoReflect.Descriptor instead.
func (*TurboProfileReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{104}
}

func (x *TurboProfileReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *TurboProfileReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AgQJPlayerTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent           string                 `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	AgentCode       string                 `protobuf:"bytes,2,opt,name=agentCode,proto3" json:"agentCode,omitempty"`
	AgentType       uint32                 `protobuf:"varint,3,opt,name=agentType,proto3" json:"agentType,omitempty"`
	Currency        string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	SubCurrency     string                 `protobuf:"bytes,5,opt,name=subCurrency,proto3" json:"subCurrency,omitempty"`
	LoginName       string                 `protobuf:"bytes,6,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Password        string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	PlatformSession string                 `protobuf:"bytes,8,opt,name=platformSession,proto3" json:"platformSession,omitempty"`
	PlatformType    string                 `protobuf:"bytes,9,opt,name=platformType,proto3" json:"platformType,omitempty"`
	ProductId       string                 `protobuf:"bytes,10,opt,name=productId,proto3" json:"productId,omitempty"`
	ReqId           string                 `protobuf:"bytes,11,opt,name=reqId,proto3" json:"reqId,omitempty"`
	SessionTicket   string                 `protobuf:"bytes,12,opt,name=sessionTicket,proto3" json:"sessionTicket,omitempty"`
	Timestamp       uint64                 `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransAmount     string                 `protobuf:"bytes,14,opt,name=transAmount,proto3" json:"transAmount,omitempty"`
	TransAction     string                 `protobuf:"bytes,15,opt,name=transAction,proto3" json:"transAction,omitempty"`
	TransCode       string                 `protobuf:"bytes,16,opt,name=transCode,proto3" json:"transCode,omitempty"`
	UserName        string                 `protobuf:"bytes,17,opt,name=userName,proto3" json:"userName,omitempty"`
	Tranfers        []*AgQJPlayerTransfers `protobuf:"bytes,18,rep,name=tranfers,proto3" json:"tranfers,omitempty"`
	RollbackReqId   string                 `protobuf:"bytes,19,opt,name=rollbackReqId,proto3" json:"rollbackReqId,omitempty"`
}

func (x *AgQJPlayerTransferRequest) Reset() {
	*x = AgQJPlayerTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJPlayerTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJPlayerTransferRequest) ProtoMessage() {}

func (x *AgQJPlayerTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJPlayerTransferRequest.ProtoReflect.Descriptor instead.
func (*AgQJPlayerTransferRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{105}
}

func (x *AgQJPlayerTransferRequest) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetAgentCode() string {
	if x != nil {
		return x.AgentCode
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetAgentType() uint32 {
	if x != nil {
		return x.AgentType
	}
	return 0
}

func (x *AgQJPlayerTransferRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetSubCurrency() string {
	if x != nil {
		return x.SubCurrency
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetPlatformSession() string {
	if x != nil {
		return x.PlatformSession
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetPlatformType() string {
	if x != nil {
		return x.PlatformType
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetSessionTicket() string {
	if x != nil {
		return x.SessionTicket
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AgQJPlayerTransferRequest) GetTransAmount() string {
	if x != nil {
		return x.TransAmount
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetTransAction() string {
	if x != nil {
		return x.TransAction
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetTransCode() string {
	if x != nil {
		return x.TransCode
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AgQJPlayerTransferRequest) GetTranfers() []*AgQJPlayerTransfers {
	if x != nil {
		return x.Tranfers
	}
	return nil
}

func (x *AgQJPlayerTransferRequest) GetRollbackReqId() string {
	if x != nil {
		return x.RollbackReqId
	}
	return ""
}

type CrownGenericData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wagerdataresp []*CrownGenericWagerdataresp `protobuf:"bytes,1,rep,name=wagerdataresp,proto3" json:"wagerdataresp,omitempty"`
}

func (x *CrownGenericData) Reset() {
	*x = CrownGenericData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrownGenericData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrownGenericData) ProtoMessage() {}

func (x *CrownGenericData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrownGenericData.ProtoReflect.Descriptor instead.
func (*CrownGenericData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{106}
}

func (x *CrownGenericData) GetWagerdataresp() []*CrownGenericWagerdataresp {
	if x != nil {
		return x.Wagerdataresp
	}
	return nil
}

type EvoGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type    string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Details *EvoGameDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *EvoGame) Reset() {
	*x = EvoGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoGame) ProtoMessage() {}

func (x *EvoGame) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoGame.ProtoReflect.Descriptor instead.
func (*EvoGame) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{107}
}

func (x *EvoGame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvoGame) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EvoGame) GetDetails() *EvoGameDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// inner type - query
type HabaQueryrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transferid             string `protobuf:"bytes,1,opt,name=transferid,proto3" json:"transferid,omitempty"`
	Token                  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Partnermeta            string `protobuf:"bytes,3,opt,name=partnermeta,proto3" json:"partnermeta,omitempty"`
	Gameinstanceid         string `protobuf:"bytes,4,opt,name=gameinstanceid,proto3" json:"gameinstanceid,omitempty"`
	Friendlygameinstanceid uint32 `protobuf:"varint,5,opt,name=friendlygameinstanceid,proto3" json:"friendlygameinstanceid,omitempty"`
	Accountid              string `protobuf:"bytes,6,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Queryamount            int32  `protobuf:"varint,7,opt,name=queryamount,proto3" json:"queryamount,omitempty"`
	Initialdebittransferid string `protobuf:"bytes,8,opt,name=initialdebittransferid,proto3" json:"initialdebittransferid,omitempty"`
}

func (x *HabaQueryrequest) Reset() {
	*x = HabaQueryrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaQueryrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaQueryrequest) ProtoMessage() {}

func (x *HabaQueryrequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaQueryrequest.ProtoReflect.Descriptor instead.
func (*HabaQueryrequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{108}
}

func (x *HabaQueryrequest) GetTransferid() string {
	if x != nil {
		return x.Transferid
	}
	return ""
}

func (x *HabaQueryrequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HabaQueryrequest) GetPartnermeta() string {
	if x != nil {
		return x.Partnermeta
	}
	return ""
}

func (x *HabaQueryrequest) GetGameinstanceid() string {
	if x != nil {
		return x.Gameinstanceid
	}
	return ""
}

func (x *HabaQueryrequest) GetFriendlygameinstanceid() uint32 {
	if x != nil {
		return x.Friendlygameinstanceid
	}
	return 0
}

func (x *HabaQueryrequest) GetAccountid() string {
	if x != nil {
		return x.Accountid
	}
	return ""
}

func (x *HabaQueryrequest) GetQueryamount() int32 {
	if x != nil {
		return x.Queryamount
	}
	return 0
}

func (x *HabaQueryrequest) GetInitialdebittransferid() string {
	if x != nil {
		return x.Initialdebittransferid
	}
	return ""
}

// 认证
type JiLiAuthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId   int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *JiLiAuthReq) Reset() {
	*x = JiLiAuthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiAuthReq) ProtoMessage() {}

func (x *JiLiAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiAuthReq.ProtoReflect.Descriptor instead.
func (*JiLiAuthReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{109}
}

func (x *JiLiAuthReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiAuthReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JiLiAuthReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// 取消棋牌投注-响应
type JiLiCancelSessionBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Currency  string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	TxId      int64   `protobuf:"varint,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Balance   float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	ErrorCode int32   `protobuf:"varint,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message   string  `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JiLiCancelSessionBetResp) Reset() {
	*x = JiLiCancelSessionBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiCancelSessionBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiCancelSessionBetResp) ProtoMessage() {}

func (x *JiLiCancelSessionBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiCancelSessionBetResp.ProtoReflect.Descriptor instead.
func (*JiLiCancelSessionBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{110}
}

func (x *JiLiCancelSessionBetResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JiLiCancelSessionBetResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiCancelSessionBetResp) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *JiLiCancelSessionBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JiLiCancelSessionBetResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *JiLiCancelSessionBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PinnaclePingRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *PinnaclePingRspResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode uint32                 `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Timestamp string                 `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnaclePingRsp) Reset() {
	*x = PinnaclePingRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnaclePingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnaclePingRsp) ProtoMessage() {}

func (x *PinnaclePingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnaclePingRsp.ProtoReflect.Descriptor instead.
func (*PinnaclePingRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{111}
}

func (x *PinnaclePingRsp) GetResult() *PinnaclePingRspResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PinnaclePingRsp) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PinnaclePingRsp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Ping
type BetByPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BetByPingRequest) Reset() {
	*x = BetByPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByPingRequest) ProtoMessage() {}

func (x *BetByPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByPingRequest.ProtoReflect.Descriptor instead.
func (*BetByPingRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{112}
}

type Cq9DebitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account   string  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime string  `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Gamehall  string  `protobuf:"bytes,4,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode  string  `protobuf:"bytes,5,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid   string  `protobuf:"bytes,6,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Amount    float32 `protobuf:"fixed32,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Mtcode    string  `protobuf:"bytes,8,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Request   string  `protobuf:"bytes,9,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *Cq9DebitReq) Reset() {
	*x = Cq9DebitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9DebitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9DebitReq) ProtoMessage() {}

func (x *Cq9DebitReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9DebitReq.ProtoReflect.Descriptor instead.
func (*Cq9DebitReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{113}
}

func (x *Cq9DebitReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9DebitReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9DebitReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9DebitReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9DebitReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9DebitReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9DebitReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Cq9DebitReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9DebitReq) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type FunkyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    int32          `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMessage string         `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	Data         *FunkyRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FunkyResp) Reset() {
	*x = FunkyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyResp) ProtoMessage() {}

func (x *FunkyResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyResp.ProtoReflect.Descriptor instead.
func (*FunkyResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{114}
}

func (x *FunkyResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *FunkyResp) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *FunkyResp) GetData() *FunkyRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PinnacleWageringRspActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TransactionId uint64 `protobuf:"varint,2,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	WagerId       uint32 `protobuf:"varint,3,opt,name=WagerId,proto3" json:"WagerId,omitempty"`
	ResponseCode  uint32 `protobuf:"varint,4,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
}

func (x *PinnacleWageringRspActions) Reset() {
	*x = PinnacleWageringRspActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleWageringRspActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleWageringRspActions) ProtoMessage() {}

func (x *PinnacleWageringRspActions) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleWageringRspActions.ProtoReflect.Descriptor instead.
func (*PinnacleWageringRspActions) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{115}
}

func (x *PinnacleWageringRspActions) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PinnacleWageringRspActions) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PinnacleWageringRspActions) GetWagerId() uint32 {
	if x != nil {
		return x.WagerId
	}
	return 0
}

func (x *PinnacleWageringRspActions) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

type LogOutRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *LogOutRes) Reset() {
	*x = LogOutRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogOutRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOutRes) ProtoMessage() {}

func (x *LogOutRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOutRes.ProtoReflect.Descriptor instead.
func (*LogOutRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{116}
}

func (x *LogOutRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type PlaceConfirmBetParlayTicketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       int64   `protobuf:"varint,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	SportType     int32   `protobuf:"varint,2,opt,name=SportType,proto3" json:"SportType,omitempty"`
	BetType       int32   `protobuf:"varint,3,opt,name=BetType,proto3" json:"BetType,omitempty"`
	OddsId        int64   `protobuf:"varint,4,opt,name=OddsId,proto3" json:"OddsId,omitempty"`
	Odds          float64 `protobuf:"fixed64,5,opt,name=Odds,proto3" json:"Odds,omitempty"`
	OddsType      int32   `protobuf:"varint,6,opt,name=OddsType,proto3" json:"OddsType,omitempty"`
	LeagueId      int64   `protobuf:"varint,7,opt,name=LeagueId,proto3" json:"LeagueId,omitempty"`
	IsLive        bool    `protobuf:"varint,8,opt,name=IsLive,proto3" json:"IsLive,omitempty"`
	IsOddsChanged bool    `protobuf:"varint,9,opt,name=IsOddsChanged,proto3" json:"IsOddsChanged,omitempty"`
}

func (x *PlaceConfirmBetParlayTicketDetail) Reset() {
	*x = PlaceConfirmBetParlayTicketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceConfirmBetParlayTicketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceConfirmBetParlayTicketDetail) ProtoMessage() {}

func (x *PlaceConfirmBetParlayTicketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceConfirmBetParlayTicketDetail.ProtoReflect.Descriptor instead.
func (*PlaceConfirmBetParlayTicketDetail) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{117}
}

func (x *PlaceConfirmBetParlayTicketDetail) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetSportType() int32 {
	if x != nil {
		return x.SportType
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetBetType() int32 {
	if x != nil {
		return x.BetType
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetOddsId() int64 {
	if x != nil {
		return x.OddsId
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetOddsType() int32 {
	if x != nil {
		return x.OddsType
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *PlaceConfirmBetParlayTicketDetail) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *PlaceConfirmBetParlayTicketDetail) GetIsOddsChanged() bool {
	if x != nil {
		return x.IsOddsChanged
	}
	return false
}

type BetLostSelections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status  string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BetLostSelections) Reset() {
	*x = BetLostSelections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetLostSelections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLostSelections) ProtoMessage() {}

func (x *BetLostSelections) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLostSelections.ProtoReflect.Descriptor instead.
func (*BetLostSelections) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{118}
}

func (x *BetLostSelections) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetLostSelections) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *BetLostSelections) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Cq9EndRoundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token               string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account             string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Gamehall            string `protobuf:"bytes,3,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode            string `protobuf:"bytes,4,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid             string `protobuf:"bytes,5,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Data                string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	CreateTime          string `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Freegame            string `protobuf:"bytes,8,opt,name=freegame,proto3" json:"freegame,omitempty"`
	Bonus               string `protobuf:"bytes,9,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Luckydraw           string `protobuf:"bytes,10,opt,name=luckydraw,proto3" json:"luckydraw,omitempty"`
	Jackpot             string `protobuf:"bytes,11,opt,name=jackpot,proto3" json:"jackpot,omitempty"`
	Jackpotcontribution string `protobuf:"bytes,12,opt,name=jackpotcontribution,proto3" json:"jackpotcontribution,omitempty"`
	Freeticket          bool   `protobuf:"varint,13,opt,name=freeticket,proto3" json:"freeticket,omitempty"`
	Json                string `protobuf:"bytes,14,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Cq9EndRoundReq) Reset() {
	*x = Cq9EndRoundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9EndRoundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9EndRoundReq) ProtoMessage() {}

func (x *Cq9EndRoundReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9EndRoundReq.ProtoReflect.Descriptor instead.
func (*Cq9EndRoundReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{119}
}

func (x *Cq9EndRoundReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9EndRoundReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9EndRoundReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9EndRoundReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9EndRoundReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9EndRoundReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Cq9EndRoundReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Cq9EndRoundReq) GetFreegame() string {
	if x != nil {
		return x.Freegame
	}
	return ""
}

func (x *Cq9EndRoundReq) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *Cq9EndRoundReq) GetLuckydraw() string {
	if x != nil {
		return x.Luckydraw
	}
	return ""
}

func (x *Cq9EndRoundReq) GetJackpot() string {
	if x != nil {
		return x.Jackpot
	}
	return ""
}

func (x *Cq9EndRoundReq) GetJackpotcontribution() string {
	if x != nil {
		return x.Jackpotcontribution
	}
	return ""
}

func (x *Cq9EndRoundReq) GetFreeticket() bool {
	if x != nil {
		return x.Freeticket
	}
	return false
}

func (x *Cq9EndRoundReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type JdbRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Balance float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	ErrText string  `protobuf:"bytes,3,opt,name=err_text,json=errText,proto3" json:"err_text,omitempty"`
}

func (x *JdbRsp) Reset() {
	*x = JdbRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JdbRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JdbRsp) ProtoMessage() {}

func (x *JdbRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JdbRsp.ProtoReflect.Descriptor instead.
func (*JdbRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{120}
}

func (x *JdbRsp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JdbRsp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JdbRsp) GetErrText() string {
	if x != nil {
		return x.ErrText
	}
	return ""
}

// Bet Discard
type BetByBetDiscardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtPlayerId   string `protobuf:"bytes,1,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Reason        string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *BetByBetDiscardRequest) Reset() {
	*x = BetByBetDiscardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetDiscardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetDiscardRequest) ProtoMessage() {}

func (x *BetByBetDiscardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetDiscardRequest.ProtoReflect.Descriptor instead.
func (*BetByBetDiscardRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{121}
}

func (x *BetByBetDiscardRequest) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetByBetDiscardRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BetByBetDiscardRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 棋牌投注-响应
type JiLiSessionBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token     string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency  string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	TxId      int64   `protobuf:"varint,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Balance   float64 `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance,omitempty"`
	ErrorCode int32   `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message   string  `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JiLiSessionBetResp) Reset() {
	*x = JiLiSessionBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiSessionBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiSessionBetResp) ProtoMessage() {}

func (x *JiLiSessionBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiSessionBetResp.ProtoReflect.Descriptor instead.
func (*JiLiSessionBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{122}
}

func (x *JiLiSessionBetResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JiLiSessionBetResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiSessionBetResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiSessionBetResp) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *JiLiSessionBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JiLiSessionBetResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *JiLiSessionBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PgVerifySessionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Nickname   string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Currency   string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *PgVerifySessionResp) Reset() {
	*x = PgVerifySessionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgVerifySessionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgVerifySessionResp) ProtoMessage() {}

func (x *PgVerifySessionResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgVerifySessionResp.ProtoReflect.Descriptor instead.
func (*PgVerifySessionResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{123}
}

func (x *PgVerifySessionResp) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PgVerifySessionResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PgVerifySessionResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Refund-请求
type PpRefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Reference  string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	ProviderId string `protobuf:"bytes,4,opt,name=providerId,proto3" json:"providerId,omitempty"`
}

func (x *PpRefundReq) Reset() {
	*x = PpRefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpRefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpRefundReq) ProtoMessage() {}

func (x *PpRefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpRefundReq.ProtoReflect.Descriptor instead.
func (*PpRefundReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{124}
}

func (x *PpRefundReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpRefundReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpRefundReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PpRefundReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

type AdjustBalanceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      string                    `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	Time        string                    `protobuf:"bytes,2,opt,name=Time,proto3" json:"Time,omitempty"`
	UserId      string                    `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Currency    int32                     `protobuf:"varint,4,opt,name=Currency,proto3" json:"Currency,omitempty"`
	TxId        int64                     `protobuf:"varint,5,opt,name=TxId,proto3" json:"TxId,omitempty"`
	RefId       string                    `protobuf:"bytes,6,opt,name=RefId,proto3" json:"RefId,omitempty"`
	OperationId string                    `protobuf:"bytes,7,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
	BetType     int32                     `protobuf:"varint,8,opt,name=BetType,proto3" json:"BetType,omitempty"`
	BetTypeName string                    `protobuf:"bytes,9,opt,name=BetTypeName,proto3" json:"BetTypeName,omitempty"`
	WinlostDate string                    `protobuf:"bytes,10,opt,name=WinlostDate,proto3" json:"WinlostDate,omitempty"`
	BalanceInfo *AdjustBalanceBalanceInfo `protobuf:"bytes,11,opt,name=BalanceInfo,proto3" json:"BalanceInfo,omitempty"`
}

func (x *AdjustBalanceMessage) Reset() {
	*x = AdjustBalanceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustBalanceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustBalanceMessage) ProtoMessage() {}

func (x *AdjustBalanceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustBalanceMessage.ProtoReflect.Descriptor instead.
func (*AdjustBalanceMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{125}
}

func (x *AdjustBalanceMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AdjustBalanceMessage) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *AdjustBalanceMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AdjustBalanceMessage) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *AdjustBalanceMessage) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *AdjustBalanceMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *AdjustBalanceMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *AdjustBalanceMessage) GetBetType() int32 {
	if x != nil {
		return x.BetType
	}
	return 0
}

func (x *AdjustBalanceMessage) GetBetTypeName() string {
	if x != nil {
		return x.BetTypeName
	}
	return ""
}

func (x *AdjustBalanceMessage) GetWinlostDate() string {
	if x != nil {
		return x.WinlostDate
	}
	return ""
}

func (x *AdjustBalanceMessage) GetBalanceInfo() *AdjustBalanceBalanceInfo {
	if x != nil {
		return x.BalanceInfo
	}
	return nil
}

type BetRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTransactionId string                `protobuf:"bytes,1,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`
	Reason           string                `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	BonusId          string                `protobuf:"bytes,3,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	Transaction      *BetRefundTransaction `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *BetRefundRequest) Reset() {
	*x = BetRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRefundRequest) ProtoMessage() {}

func (x *BetRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRefundRequest.ProtoReflect.Descriptor instead.
func (*BetRefundRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{126}
}

func (x *BetRefundRequest) GetBetTransactionId() string {
	if x != nil {
		return x.BetTransactionId
	}
	return ""
}

func (x *BetRefundRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BetRefundRequest) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetRefundRequest) GetTransaction() *BetRefundTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type RtgCancelBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                  float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency                string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Gameid                  int64   `protobuf:"varint,3,opt,name=gameid,proto3" json:"gameid,omitempty"`
	Membercode              string  `protobuf:"bytes,4,opt,name=membercode,proto3" json:"membercode,omitempty"`
	Roundid                 string  `protobuf:"bytes,5,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Transactionid           string  `protobuf:"bytes,6,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	Freegame                int32   `protobuf:"varint,7,opt,name=freegame,proto3" json:"freegame,omitempty"`
	Gameroundend            int32   `protobuf:"varint,8,opt,name=gameroundend,proto3" json:"gameroundend,omitempty"`
	Sessionid               int64   `protobuf:"varint,9,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	Gamenum                 int64   `protobuf:"varint,10,opt,name=gamenum,proto3" json:"gamenum,omitempty"`
	Platformid              int64   `protobuf:"varint,11,opt,name=platformid,proto3" json:"platformid,omitempty"`
	Token                   string  `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	Bonusamount             float64 `protobuf:"fixed64,13,opt,name=bonusamount,proto3" json:"bonusamount,omitempty"`
	Bonusroundid            string  `protobuf:"bytes,14,opt,name=bonusroundid,proto3" json:"bonusroundid,omitempty"`
	Bonuscode               string  `protobuf:"bytes,15,opt,name=bonuscode,proto3" json:"bonuscode,omitempty"`
	Bonusplaythrough        float64 `protobuf:"fixed64,16,opt,name=bonusplaythrough,proto3" json:"bonusplaythrough,omitempty"`
	Bonusplaythroughbalance float64 `protobuf:"fixed64,17,opt,name=bonusplaythroughbalance,proto3" json:"bonusplaythroughbalance,omitempty"`
	Bonusbalance            float64 `protobuf:"fixed64,18,opt,name=bonusbalance,proto3" json:"bonusbalance,omitempty"`
	Transactiondate         string  `protobuf:"bytes,19,opt,name=transactiondate,proto3" json:"transactiondate,omitempty"`
	TxnReferenceID          string  `protobuf:"bytes,20,opt,name=txnReferenceID,proto3" json:"txnReferenceID,omitempty"`
}

func (x *RtgCancelBetReq) Reset() {
	*x = RtgCancelBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtgCancelBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtgCancelBetReq) ProtoMessage() {}

func (x *RtgCancelBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtgCancelBetReq.ProtoReflect.Descriptor instead.
func (*RtgCancelBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{127}
}

func (x *RtgCancelBetReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RtgCancelBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RtgCancelBetReq) GetGameid() int64 {
	if x != nil {
		return x.Gameid
	}
	return 0
}

func (x *RtgCancelBetReq) GetMembercode() string {
	if x != nil {
		return x.Membercode
	}
	return ""
}

func (x *RtgCancelBetReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *RtgCancelBetReq) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

func (x *RtgCancelBetReq) GetFreegame() int32 {
	if x != nil {
		return x.Freegame
	}
	return 0
}

func (x *RtgCancelBetReq) GetGameroundend() int32 {
	if x != nil {
		return x.Gameroundend
	}
	return 0
}

func (x *RtgCancelBetReq) GetSessionid() int64 {
	if x != nil {
		return x.Sessionid
	}
	return 0
}

func (x *RtgCancelBetReq) GetGamenum() int64 {
	if x != nil {
		return x.Gamenum
	}
	return 0
}

func (x *RtgCancelBetReq) GetPlatformid() int64 {
	if x != nil {
		return x.Platformid
	}
	return 0
}

func (x *RtgCancelBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RtgCancelBetReq) GetBonusamount() float64 {
	if x != nil {
		return x.Bonusamount
	}
	return 0
}

func (x *RtgCancelBetReq) GetBonusroundid() string {
	if x != nil {
		return x.Bonusroundid
	}
	return ""
}

func (x *RtgCancelBetReq) GetBonuscode() string {
	if x != nil {
		return x.Bonuscode
	}
	return ""
}

func (x *RtgCancelBetReq) GetBonusplaythrough() float64 {
	if x != nil {
		return x.Bonusplaythrough
	}
	return 0
}

func (x *RtgCancelBetReq) GetBonusplaythroughbalance() float64 {
	if x != nil {
		return x.Bonusplaythroughbalance
	}
	return 0
}

func (x *RtgCancelBetReq) GetBonusbalance() float64 {
	if x != nil {
		return x.Bonusbalance
	}
	return 0
}

func (x *RtgCancelBetReq) GetTransactiondate() string {
	if x != nil {
		return x.Transactiondate
	}
	return ""
}

func (x *RtgCancelBetReq) GetTxnReferenceID() string {
	if x != nil {
		return x.TxnReferenceID
	}
	return ""
}

type ObResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode int64   `protobuf:"varint,1,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	Message    string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Balance    float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Version    int64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ObResp) Reset() {
	*x = ObResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObResp) ProtoMessage() {}

func (x *ObResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObResp.ProtoReflect.Descriptor instead.
func (*ObResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{128}
}

func (x *ObResp) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *ObResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ObResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ObResp) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 定义结算/重新结算输入输出
type SettleTxns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RefId        string  `protobuf:"bytes,2,opt,name=refId,proto3" json:"refId,omitempty"`
	TxId         int64   `protobuf:"varint,3,opt,name=txId,proto3" json:"txId,omitempty"`
	UpdateTime   string  `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	WinlostDate  string  `protobuf:"bytes,5,opt,name=winlostDate,proto3" json:"winlostDate,omitempty"`
	Status       string  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Payout       float64 `protobuf:"fixed64,7,opt,name=payout,proto3" json:"payout,omitempty"`
	CreditAmount float64 `protobuf:"fixed64,8,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount  float64 `protobuf:"fixed64,9,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	ExtraStatus  string  `protobuf:"bytes,10,opt,name=extraStatus,proto3" json:"extraStatus,omitempty"`
}

func (x *SettleTxns) Reset() {
	*x = SettleTxns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleTxns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleTxns) ProtoMessage() {}

func (x *SettleTxns) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleTxns.ProtoReflect.Descriptor instead.
func (*SettleTxns) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{129}
}

func (x *SettleTxns) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SettleTxns) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SettleTxns) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *SettleTxns) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SettleTxns) GetWinlostDate() string {
	if x != nil {
		return x.WinlostDate
	}
	return ""
}

func (x *SettleTxns) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SettleTxns) GetPayout() float64 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *SettleTxns) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SettleTxns) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SettleTxns) GetExtraStatus() string {
	if x != nil {
		return x.ExtraStatus
	}
	return ""
}

type UnSettleTxns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RefId        string  `protobuf:"bytes,2,opt,name=refId,proto3" json:"refId,omitempty"`
	TxId         int64   `protobuf:"varint,3,opt,name=txId,proto3" json:"txId,omitempty"`
	UpdateTime   string  `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreditAmount float64 `protobuf:"fixed64,5,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount  float64 `protobuf:"fixed64,6,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	ExtraStatus  string  `protobuf:"bytes,7,opt,name=extraStatus,proto3" json:"extraStatus,omitempty"`
}

func (x *UnSettleTxns) Reset() {
	*x = UnSettleTxns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSettleTxns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSettleTxns) ProtoMessage() {}

func (x *UnSettleTxns) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSettleTxns.ProtoReflect.Descriptor instead.
func (*UnSettleTxns) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{130}
}

func (x *UnSettleTxns) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnSettleTxns) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *UnSettleTxns) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *UnSettleTxns) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *UnSettleTxns) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *UnSettleTxns) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *UnSettleTxns) GetExtraStatus() string {
	if x != nil {
		return x.ExtraStatus
	}
	return ""
}

// Bet Lost
type BetByBetLostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTransactionId string               `protobuf:"bytes,1,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`
	Amount           uint32               `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency         string               `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Transaction      *BetLostTransaction  `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Selections       []*BetLostSelections `protobuf:"bytes,5,rep,name=selections,proto3" json:"selections,omitempty"`
}

func (x *BetByBetLostRequest) Reset() {
	*x = BetByBetLostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetLostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetLostRequest) ProtoMessage() {}

func (x *BetByBetLostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetLostRequest.ProtoReflect.Descriptor instead.
func (*BetByBetLostRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{131}
}

func (x *BetByBetLostRequest) GetBetTransactionId() string {
	if x != nil {
		return x.BetTransactionId
	}
	return ""
}

func (x *BetByBetLostRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetLostRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetLostRequest) GetTransaction() *BetLostTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *BetByBetLostRequest) GetSelections() []*BetLostSelections {
	if x != nil {
		return x.Selections
	}
	return nil
}

type Cq9RolloutRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9RolloutRes) Reset() {
	*x = Cq9RolloutRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RolloutRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RolloutRes) ProtoMessage() {}

func (x *Cq9RolloutRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RolloutRes.ProtoReflect.Descriptor instead.
func (*Cq9RolloutRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{132}
}

func (x *Cq9RolloutRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9RolloutRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9RolloutRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9RolloutRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9RolloutRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

// 下注
type FunkyPlaceBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId  string                `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	SessionId string                `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	PlayerIp  string                `protobuf:"bytes,3,opt,name=playerIp,proto3" json:"playerIp,omitempty"`
	Bet       *FunkyPlaceBetReqData `protobuf:"bytes,4,opt,name=bet,proto3" json:"bet,omitempty"`
}

func (x *FunkyPlaceBetReq) Reset() {
	*x = FunkyPlaceBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyPlaceBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyPlaceBetReq) ProtoMessage() {}

func (x *FunkyPlaceBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyPlaceBetReq.ProtoReflect.Descriptor instead.
func (*FunkyPlaceBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{133}
}

func (x *FunkyPlaceBetReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FunkyPlaceBetReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FunkyPlaceBetReq) GetPlayerIp() string {
	if x != nil {
		return x.PlayerIp
	}
	return ""
}

func (x *FunkyPlaceBetReq) GetBet() *FunkyPlaceBetReqData {
	if x != nil {
		return x.Bet
	}
	return nil
}

type ObTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranId   int64      `protobuf:"varint,1,opt,name=tranId,proto3" json:"tranId,omitempty"`
	Player   string     `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	Amount   float64    `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string     `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Type     int64      `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	IsRetry  bool       `protobuf:"varint,6,opt,name=isRetry,proto3" json:"isRetry,omitempty"`
	Details  []*Details `protobuf:"bytes,7,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *ObTransferReq) Reset() {
	*x = ObTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObTransferReq) ProtoMessage() {}

func (x *ObTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObTransferReq.ProtoReflect.Descriptor instead.
func (*ObTransferReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{134}
}

func (x *ObTransferReq) GetTranId() int64 {
	if x != nil {
		return x.TranId
	}
	return 0
}

func (x *ObTransferReq) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

func (x *ObTransferReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ObTransferReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ObTransferReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ObTransferReq) GetIsRetry() bool {
	if x != nil {
		return x.IsRetry
	}
	return false
}

func (x *ObTransferReq) GetDetails() []*Details {
	if x != nil {
		return x.Details
	}
	return nil
}

// 检查玩家帐号
type Cq9PlayerCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Cq9PlayerCheckReq) Reset() {
	*x = Cq9PlayerCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9PlayerCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9PlayerCheckReq) ProtoMessage() {}

func (x *Cq9PlayerCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9PlayerCheckReq.ProtoReflect.Descriptor instead.
func (*Cq9PlayerCheckReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{135}
}

func (x *Cq9PlayerCheckReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Cq9PlayerCheckReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9PlayerCheckReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type EndingGetBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency    string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance     string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	MessageCode string `protobuf:"bytes,3,opt,name=message_code,json=messageCode,proto3" json:"message_code,omitempty"`
}

func (x *EndingGetBalanceResp) Reset() {
	*x = EndingGetBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndingGetBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndingGetBalanceResp) ProtoMessage() {}

func (x *EndingGetBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndingGetBalanceResp.ProtoReflect.Descriptor instead.
func (*EndingGetBalanceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{136}
}

func (x *EndingGetBalanceResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EndingGetBalanceResp) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *EndingGetBalanceResp) GetMessageCode() string {
	if x != nil {
		return x.MessageCode
	}
	return ""
}

type PachinkoTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess bool               `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	Message   string             `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Value     *PachinkoValueData `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *PachinkoTransferResponse) Reset() {
	*x = PachinkoTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PachinkoTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PachinkoTransferResponse) ProtoMessage() {}

func (x *PachinkoTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PachinkoTransferResponse.ProtoReflect.Descriptor instead.
func (*PachinkoTransferResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{137}
}

func (x *PachinkoTransferResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *PachinkoTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PachinkoTransferResponse) GetValue() *PachinkoValueData {
	if x != nil {
		return x.Value
	}
	return nil
}

type PinnacleCreditReqAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string                        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Remark      string                        `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Transaction *PinnacleCreditReqTransaction `protobuf:"bytes,4,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
}

func (x *PinnacleCreditReqAction) Reset() {
	*x = PinnacleCreditReqAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleCreditReqAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleCreditReqAction) ProtoMessage() {}

func (x *PinnacleCreditReqAction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleCreditReqAction.ProtoReflect.Descriptor instead.
func (*PinnacleCreditReqAction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{138}
}

func (x *PinnacleCreditReqAction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PinnacleCreditReqAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PinnacleCreditReqAction) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PinnacleCreditReqAction) GetTransaction() *PinnacleCreditReqTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// 定义检查用户是否在线接口的输入输出
type SabaCheckMemberOnlineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretKey      string `protobuf:"bytes,1,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	VendorMemberId string `protobuf:"bytes,2,opt,name=vendorMemberId,proto3" json:"vendorMemberId,omitempty"`
	Op             string `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *SabaCheckMemberOnlineReq) Reset() {
	*x = SabaCheckMemberOnlineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCheckMemberOnlineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCheckMemberOnlineReq) ProtoMessage() {}

func (x *SabaCheckMemberOnlineReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCheckMemberOnlineReq.ProtoReflect.Descriptor instead.
func (*SabaCheckMemberOnlineReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{139}
}

func (x *SabaCheckMemberOnlineReq) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SabaCheckMemberOnlineReq) GetVendorMemberId() string {
	if x != nil {
		return x.VendorMemberId
	}
	return ""
}

func (x *SabaCheckMemberOnlineReq) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type UUIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *UUIDsReq) Reset() {
	*x = UUIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDsReq) ProtoMessage() {}

func (x *UUIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDsReq.ProtoReflect.Descriptor instead.
func (*UUIDsReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{140}
}

func (x *UUIDsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BetByPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BetByPingResponse) Reset() {
	*x = BetByPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByPingResponse) ProtoMessage() {}

func (x *BetByPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByPingResponse.ProtoReflect.Descriptor instead.
func (*BetByPingResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{141}
}

func (x *BetByPingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type FbsportsBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantUserId string `protobuf:"bytes,1,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
	MerchantId     string `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	CurrencyId     int64  `protobuf:"varint,3,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
}

func (x *FbsportsBalanceReq) Reset() {
	*x = FbsportsBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsBalanceReq) ProtoMessage() {}

func (x *FbsportsBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsBalanceReq.ProtoReflect.Descriptor instead.
func (*FbsportsBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{142}
}

func (x *FbsportsBalanceReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

func (x *FbsportsBalanceReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *FbsportsBalanceReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

type HabaPlayerdetailresponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *HabaStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Accountid    string      `protobuf:"bytes,2,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Accountname  string      `protobuf:"bytes,3,opt,name=accountname,proto3" json:"accountname,omitempty"`
	Balance      float64     `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Currencycode string      `protobuf:"bytes,5,opt,name=currencycode,proto3" json:"currencycode,omitempty"`
}

func (x *HabaPlayerdetailresponse) Reset() {
	*x = HabaPlayerdetailresponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaPlayerdetailresponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaPlayerdetailresponse) ProtoMessage() {}

func (x *HabaPlayerdetailresponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaPlayerdetailresponse.ProtoReflect.Descriptor instead.
func (*HabaPlayerdetailresponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{143}
}

func (x *HabaPlayerdetailresponse) GetStatus() *HabaStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HabaPlayerdetailresponse) GetAccountid() string {
	if x != nil {
		return x.Accountid
	}
	return ""
}

func (x *HabaPlayerdetailresponse) GetAccountname() string {
	if x != nil {
		return x.Accountname
	}
	return ""
}

func (x *HabaPlayerdetailresponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HabaPlayerdetailresponse) GetCurrencycode() string {
	if x != nil {
		return x.Currencycode
	}
	return ""
}

// PpJackpotWin-响应
type PpJackpotWinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Cash          string `protobuf:"bytes,3,opt,name=cash,proto3" json:"cash,omitempty"`
	Bonus         string `protobuf:"bytes,4,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Error         int64  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PpJackpotWinResp) Reset() {
	*x = PpJackpotWinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpJackpotWinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpJackpotWinResp) ProtoMessage() {}

func (x *PpJackpotWinResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpJackpotWinResp.ProtoReflect.Descriptor instead.
func (*PpJackpotWinResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{144}
}

func (x *PpJackpotWinResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PpJackpotWinResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PpJackpotWinResp) GetCash() string {
	if x != nil {
		return x.Cash
	}
	return ""
}

func (x *PpJackpotWinResp) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *PpJackpotWinResp) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PpJackpotWinResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DebitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OperatorID  string `protobuf:"bytes,2,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	AppSecret   string `protobuf:"bytes,3,opt,name=appSecret,proto3" json:"appSecret,omitempty"`
	PlayerID    string `protobuf:"bytes,4,opt,name=playerID,proto3" json:"playerID,omitempty"`
	GameID      string `protobuf:"bytes,5,opt,name=gameID,proto3" json:"gameID,omitempty"`
	BetID       string `protobuf:"bytes,6,opt,name=betID,proto3" json:"betID,omitempty"`
	GameRoundID string `protobuf:"bytes,7,opt,name=gameRoundID,proto3" json:"gameRoundID,omitempty"`
	ParentBetID string `protobuf:"bytes,8,opt,name=parentBetID,proto3" json:"parentBetID,omitempty"`
	BetType     string `protobuf:"bytes,9,opt,name=betType,proto3" json:"betType,omitempty"`
	Amount      int64  `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency    string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	Type        string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	Time        int64  `protobuf:"varint,13,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DebitReq) Reset() {
	*x = DebitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitReq) ProtoMessage() {}

func (x *DebitReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitReq.ProtoReflect.Descriptor instead.
func (*DebitReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{145}
}

func (x *DebitReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DebitReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *DebitReq) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *DebitReq) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *DebitReq) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *DebitReq) GetBetID() string {
	if x != nil {
		return x.BetID
	}
	return ""
}

func (x *DebitReq) GetGameRoundID() string {
	if x != nil {
		return x.GameRoundID
	}
	return ""
}

func (x *DebitReq) GetParentBetID() string {
	if x != nil {
		return x.ParentBetID
	}
	return ""
}

func (x *DebitReq) GetBetType() string {
	if x != nil {
		return x.BetType
	}
	return ""
}

func (x *DebitReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DebitReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DebitReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DebitReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type BetByBetRollbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTransactionId    string                  `protobuf:"bytes,1,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`
	ParentTransactionId string                  `protobuf:"bytes,2,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	Transaction         *BetRollbackTransaction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *BetByBetRollbackRequest) Reset() {
	*x = BetByBetRollbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetRollbackRequest) ProtoMessage() {}

func (x *BetByBetRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetRollbackRequest.ProtoReflect.Descriptor instead.
func (*BetByBetRollbackRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{146}
}

func (x *BetByBetRollbackRequest) GetBetTransactionId() string {
	if x != nil {
		return x.BetTransactionId
	}
	return ""
}

func (x *BetByBetRollbackRequest) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetByBetRollbackRequest) GetTransaction() *BetRollbackTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type ElGetBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBalance float64 `protobuf:"fixed64,1,opt,name=totalBalance,proto3" json:"totalBalance,omitempty"`
	Currency     string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Status       int32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ElGetBalanceResp) Reset() {
	*x = ElGetBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElGetBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElGetBalanceResp) ProtoMessage() {}

func (x *ElGetBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElGetBalanceResp.ProtoReflect.Descriptor instead.
func (*ElGetBalanceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{147}
}

func (x *ElGetBalanceResp) GetTotalBalance() float64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

func (x *ElGetBalanceResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ElGetBalanceResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// for: debit, credit, cancel,
type EvoMainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken   string          `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	Sid         string          `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	UserId      string          `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Currency    string          `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Game        *EvoGame        `protobuf:"bytes,5,opt,name=game,proto3" json:"game,omitempty"`
	Transaction *EvoTransaction `protobuf:"bytes,6,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Uuid        string          `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *EvoMainReq) Reset() {
	*x = EvoMainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoMainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoMainReq) ProtoMessage() {}

func (x *EvoMainReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoMainReq.ProtoReflect.Descriptor instead.
func (*EvoMainReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{148}
}

func (x *EvoMainReq) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *EvoMainReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *EvoMainReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvoMainReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EvoMainReq) GetGame() *EvoGame {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *EvoMainReq) GetTransaction() *EvoTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *EvoMainReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type FunkyRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      string  `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	RefNo         string  `protobuf:"bytes,2,opt,name=refNo,proto3" json:"refNo,omitempty"`
	Balance       float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency      string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	StatementDate string  `protobuf:"bytes,5,opt,name=statementDate,proto3" json:"statementDate,omitempty"`
	Stake         float64 `protobuf:"fixed64,6,opt,name=stake,proto3" json:"stake,omitempty"`
	WinAmount     float64 `protobuf:"fixed64,7,opt,name=winAmount,proto3" json:"winAmount,omitempty"`
	Status        string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FunkyRespData) Reset() {
	*x = FunkyRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyRespData) ProtoMessage() {}

func (x *FunkyRespData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyRespData.ProtoReflect.Descriptor instead.
func (*FunkyRespData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{149}
}

func (x *FunkyRespData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FunkyRespData) GetRefNo() string {
	if x != nil {
		return x.RefNo
	}
	return ""
}

func (x *FunkyRespData) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *FunkyRespData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FunkyRespData) GetStatementDate() string {
	if x != nil {
		return x.StatementDate
	}
	return ""
}

func (x *FunkyRespData) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *FunkyRespData) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *FunkyRespData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// inner type - PlayerDetail
type HabaPlayerdetailrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Gamelaunch bool   `protobuf:"varint,2,opt,name=gamelaunch,proto3" json:"gamelaunch,omitempty"`
}

func (x *HabaPlayerdetailrequest) Reset() {
	*x = HabaPlayerdetailrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaPlayerdetailrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaPlayerdetailrequest) ProtoMessage() {}

func (x *HabaPlayerdetailrequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaPlayerdetailrequest.ProtoReflect.Descriptor instead.
func (*HabaPlayerdetailrequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{150}
}

func (x *HabaPlayerdetailrequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HabaPlayerdetailrequest) GetGamelaunch() bool {
	if x != nil {
		return x.Gamelaunch
	}
	return false
}

type PachinkoValueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money      float64 `protobuf:"fixed64,1,opt,name=money,proto3" json:"money,omitempty"`
	AfterMoney float64 `protobuf:"fixed64,2,opt,name=afterMoney,proto3" json:"afterMoney,omitempty"`
	TradeNo    string  `protobuf:"bytes,3,opt,name=tradeNo,proto3" json:"tradeNo,omitempty"`
	Currency   string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *PachinkoValueData) Reset() {
	*x = PachinkoValueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PachinkoValueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PachinkoValueData) ProtoMessage() {}

func (x *PachinkoValueData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PachinkoValueData.ProtoReflect.Descriptor instead.
func (*PachinkoValueData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{151}
}

func (x *PachinkoValueData) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PachinkoValueData) GetAfterMoney() float64 {
	if x != nil {
		return x.AfterMoney
	}
	return 0
}

func (x *PachinkoValueData) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *PachinkoValueData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type EvoGameDetailsTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vid string `protobuf:"bytes,2,opt,name=vid,proto3" json:"vid,omitempty"`
}

func (x *EvoGameDetailsTable) Reset() {
	*x = EvoGameDetailsTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoGameDetailsTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoGameDetailsTable) ProtoMessage() {}

func (x *EvoGameDetailsTable) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoGameDetailsTable.ProtoReflect.Descriptor instead.
func (*EvoGameDetailsTable) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{152}
}

func (x *EvoGameDetailsTable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvoGameDetailsTable) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

type PinnacleDebitRspAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TransactionId uint32 `protobuf:"varint,2,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	ResponseCode  uint32 `protobuf:"varint,3,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
}

func (x *PinnacleDebitRspAction) Reset() {
	*x = PinnacleDebitRspAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleDebitRspAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleDebitRspAction) ProtoMessage() {}

func (x *PinnacleDebitRspAction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleDebitRspAction.ProtoReflect.Descriptor instead.
func (*PinnacleDebitRspAction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{153}
}

func (x *PinnacleDebitRspAction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PinnacleDebitRspAction) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PinnacleDebitRspAction) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

type PgCashGetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime   int64   `protobuf:"varint,1,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	BalanceAmount float64 `protobuf:"fixed64,2,opt,name=balance_amount,json=balanceAmount,proto3" json:"balance_amount,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *PgCashGetResp) Reset() {
	*x = PgCashGetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgCashGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCashGetResp) ProtoMessage() {}

func (x *PgCashGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCashGetResp.ProtoReflect.Descriptor instead.
func (*PgCashGetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{154}
}

func (x *PgCashGetResp) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *PgCashGetResp) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *PgCashGetResp) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// <?xml version=”1.0” encoding=”UTF-8” standalone=”yes”?>
//
// <TransferResponse><ResponseCode>OK</ResponseCode><Balance>19934.61</Balance></TransferResponse>
type LiveTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode string `protobuf:"bytes,1,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
	Balance      int64  `protobuf:"varint,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
}

func (x *LiveTransferResponse) Reset() {
	*x = LiveTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveTransferResponse) ProtoMessage() {}

func (x *LiveTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveTransferResponse.ProtoReflect.Descriptor instead.
func (*LiveTransferResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{155}
}

func (x *LiveTransferResponse) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *LiveTransferResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// Bet Refund
type BetRefundTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetslipId           string `protobuf:"bytes,2,opt,name=betslip_id,json=betslipId,proto3" json:"betslip_id,omitempty"`
	PlayerId            string `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId          string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId     string `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId         string `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Timestamp           int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount              uint32 `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	CrossRateEuro       string `protobuf:"bytes,10,opt,name=cross_rate_euro,json=crossRateEuro,proto3" json:"cross_rate_euro,omitempty"`
	Operation           string `protobuf:"bytes,11,opt,name=operation,proto3" json:"operation,omitempty"`
	BonusId             string `protobuf:"bytes,12,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,13,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
}

func (x *BetRefundTransaction) Reset() {
	*x = BetRefundTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRefundTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRefundTransaction) ProtoMessage() {}

func (x *BetRefundTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRefundTransaction.ProtoReflect.Descriptor instead.
func (*BetRefundTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{156}
}

func (x *BetRefundTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetRefundTransaction) GetBetslipId() string {
	if x != nil {
		return x.BetslipId
	}
	return ""
}

func (x *BetRefundTransaction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetRefundTransaction) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetRefundTransaction) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetRefundTransaction) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetRefundTransaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetRefundTransaction) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetRefundTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetRefundTransaction) GetCrossRateEuro() string {
	if x != nil {
		return x.CrossRateEuro
	}
	return ""
}

func (x *BetRefundTransaction) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetRefundTransaction) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetRefundTransaction) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

type Cq9TakeAllRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Balance  string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,6,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9TakeAllRes) Reset() {
	*x = Cq9TakeAllRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9TakeAllRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9TakeAllRes) ProtoMessage() {}

func (x *Cq9TakeAllRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9TakeAllRes.ProtoReflect.Descriptor instead.
func (*Cq9TakeAllRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{157}
}

func (x *Cq9TakeAllRes) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Cq9TakeAllRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9TakeAllRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9TakeAllRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9TakeAllRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9TakeAllRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type EndingPlaceBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency    string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance     string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	MessageCode string `protobuf:"bytes,3,opt,name=message_code,json=messageCode,proto3" json:"message_code,omitempty"`
}

func (x *EndingPlaceBetResp) Reset() {
	*x = EndingPlaceBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndingPlaceBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndingPlaceBetResp) ProtoMessage() {}

func (x *EndingPlaceBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndingPlaceBetResp.ProtoReflect.Descriptor instead.
func (*EndingPlaceBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{158}
}

func (x *EndingPlaceBetResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EndingPlaceBetResp) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *EndingPlaceBetResp) GetMessageCode() string {
	if x != nil {
		return x.MessageCode
	}
	return ""
}

type FunkyPlaceBetReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode     string  `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	RefNo        string  `protobuf:"bytes,2,opt,name=refNo,proto3" json:"refNo,omitempty"`
	Stake        float64 `protobuf:"fixed64,3,opt,name=stake,proto3" json:"stake,omitempty"`
	GameProvider string  `protobuf:"bytes,4,opt,name=gameProvider,proto3" json:"gameProvider,omitempty"`
	VoucherId    string  `protobuf:"bytes,5,opt,name=voucherId,proto3" json:"voucherId,omitempty"`
}

func (x *FunkyPlaceBetReqData) Reset() {
	*x = FunkyPlaceBetReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyPlaceBetReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyPlaceBetReqData) ProtoMessage() {}

func (x *FunkyPlaceBetReqData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyPlaceBetReqData.ProtoReflect.Descriptor instead.
func (*FunkyPlaceBetReqData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{159}
}

func (x *FunkyPlaceBetReqData) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FunkyPlaceBetReqData) GetRefNo() string {
	if x != nil {
		return x.RefNo
	}
	return ""
}

func (x *FunkyPlaceBetReqData) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *FunkyPlaceBetReqData) GetGameProvider() string {
	if x != nil {
		return x.GameProvider
	}
	return ""
}

func (x *FunkyPlaceBetReqData) GetVoucherId() string {
	if x != nil {
		return x.VoucherId
	}
	return ""
}

// inner type - fund tx - bonus credit
type HabaBonusdetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bonusbalanceid string  `protobuf:"bytes,1,opt,name=bonusbalanceid,proto3" json:"bonusbalanceid,omitempty"`
	Couponid       string  `protobuf:"bytes,2,opt,name=couponid,proto3" json:"couponid,omitempty"`
	Coupontypeid   uint32  `protobuf:"varint,3,opt,name=coupontypeid,proto3" json:"coupontypeid,omitempty"`
	Couponcode     string  `protobuf:"bytes,4,opt,name=couponcode,proto3" json:"couponcode,omitempty"`
	Fsvalue        float64 `protobuf:"fixed64,5,opt,name=fsvalue,proto3" json:"fsvalue,omitempty"`
	Fscount        uint32  `protobuf:"varint,6,opt,name=fscount,proto3" json:"fscount,omitempty"`
}

func (x *HabaBonusdetails) Reset() {
	*x = HabaBonusdetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaBonusdetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaBonusdetails) ProtoMessage() {}

func (x *HabaBonusdetails) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaBonusdetails.ProtoReflect.Descriptor instead.
func (*HabaBonusdetails) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{160}
}

func (x *HabaBonusdetails) GetBonusbalanceid() string {
	if x != nil {
		return x.Bonusbalanceid
	}
	return ""
}

func (x *HabaBonusdetails) GetCouponid() string {
	if x != nil {
		return x.Couponid
	}
	return ""
}

func (x *HabaBonusdetails) GetCoupontypeid() uint32 {
	if x != nil {
		return x.Coupontypeid
	}
	return 0
}

func (x *HabaBonusdetails) GetCouponcode() string {
	if x != nil {
		return x.Couponcode
	}
	return ""
}

func (x *HabaBonusdetails) GetFsvalue() float64 {
	if x != nil {
		return x.Fsvalue
	}
	return 0
}

func (x *HabaBonusdetails) GetFscount() uint32 {
	if x != nil {
		return x.Fscount
	}
	return 0
}

type TpgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int64   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TpgResp) Reset() {
	*x = TpgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpgResp) ProtoMessage() {}

func (x *TpgResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpgResp.ProtoReflect.Descriptor instead.
func (*TpgResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{161}
}

func (x *TpgResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TpgResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TpgResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type PinnacleWageringRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *PinnacleWageringRspResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode int32                      `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Timestamp string                     `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnacleWageringRsp) Reset() {
	*x = PinnacleWageringRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleWageringRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleWageringRsp) ProtoMessage() {}

func (x *PinnacleWageringRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleWageringRsp.ProtoReflect.Descriptor instead.
func (*PinnacleWageringRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{162}
}

func (x *PinnacleWageringRsp) GetResult() *PinnacleWageringRspResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PinnacleWageringRsp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PinnacleWageringRsp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// 投注-响应
type PpBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Cash          string `protobuf:"bytes,3,opt,name=cash,proto3" json:"cash,omitempty"`
	Bonus         string `protobuf:"bytes,4,opt,name=bonus,proto3" json:"bonus,omitempty"`
	UsedPromo     string `protobuf:"bytes,5,opt,name=usedPromo,proto3" json:"usedPromo,omitempty"`
	Error         int64  `protobuf:"varint,6,opt,name=error,proto3" json:"error,omitempty"`
	Description   string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PpBetResp) Reset() {
	*x = PpBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpBetResp) ProtoMessage() {}

func (x *PpBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpBetResp.ProtoReflect.Descriptor instead.
func (*PpBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{163}
}

func (x *PpBetResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PpBetResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PpBetResp) GetCash() string {
	if x != nil {
		return x.Cash
	}
	return ""
}

func (x *PpBetResp) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *PpBetResp) GetUsedPromo() string {
	if x != nil {
		return x.UsedPromo
	}
	return ""
}

func (x *PpBetResp) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PpBetResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type JdbData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action            int64   `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Ts                int64   `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Uid               string  `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Currency          string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	GType             int64   `protobuf:"varint,5,opt,name=gType,proto3" json:"gType,omitempty"`
	TransferId        int64   `protobuf:"varint,6,opt,name=transferId,proto3" json:"transferId,omitempty"`
	GameSeqNo         int64   `protobuf:"varint,7,opt,name=gameSeqNo,proto3" json:"gameSeqNo,omitempty"`
	MType             int64   `protobuf:"varint,8,opt,name=mType,proto3" json:"mType,omitempty"`
	ReportDate        string  `protobuf:"bytes,9,opt,name=reportDate,proto3" json:"reportDate,omitempty"`
	GameDate          string  `protobuf:"bytes,10,opt,name=gameDate,proto3" json:"gameDate,omitempty"`
	Bet               float64 `protobuf:"fixed64,11,opt,name=bet,proto3" json:"bet,omitempty"`
	Win               int64   `protobuf:"varint,12,opt,name=win,proto3" json:"win,omitempty"`
	NetWin            float64 `protobuf:"fixed64,13,opt,name=netWin,proto3" json:"netWin,omitempty"`
	Denom             float64 `protobuf:"fixed64,14,opt,name=denom,proto3" json:"denom,omitempty"`
	IpAddress         string  `protobuf:"bytes,15,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	ClientType        string  `protobuf:"bytes,16,opt,name=clientType,proto3" json:"clientType,omitempty"`
	SystemTakeWin     int64   `protobuf:"varint,17,opt,name=systemTakeWin,proto3" json:"systemTakeWin,omitempty"`
	LastModifyTime    string  `protobuf:"bytes,18,opt,name=lastModifyTime,proto3" json:"lastModifyTime,omitempty"`
	JackpotWin        int64   `protobuf:"varint,19,opt,name=jackpotWin,proto3" json:"jackpotWin,omitempty"`
	JackpotContribute float64 `protobuf:"fixed64,20,opt,name=jackpotContribute,proto3" json:"jackpotContribute,omitempty"`
	HasFreeGame       int64   `protobuf:"varint,21,opt,name=hasFreeGame,proto3" json:"hasFreeGame,omitempty"`
	HasGamble         int64   `protobuf:"varint,22,opt,name=hasGamble,proto3" json:"hasGamble,omitempty"`
	RoomType          int64   `protobuf:"varint,23,opt,name=roomType,proto3" json:"roomType,omitempty"`
	HasBonusGame      int64   `protobuf:"varint,24,opt,name=hasBonusGame,proto3" json:"hasBonusGame,omitempty"`
	Amount            float64 `protobuf:"fixed64,25,opt,name=amount,proto3" json:"amount,omitempty"`
	GameRoundSeqNo    int64   `protobuf:"varint,26,opt,name=gameRoundSeqNo,proto3" json:"gameRoundSeqNo,omitempty"`
	RefTransferIds    []int64 `protobuf:"varint,27,rep,packed,name=refTransferIds,proto3" json:"refTransferIds,omitempty"`
	ValidBet          float64 `protobuf:"fixed64,28,opt,name=validBet,proto3" json:"validBet,omitempty"`
	Tax               float64 `protobuf:"fixed64,29,opt,name=tax,proto3" json:"tax,omitempty"`
	SessionNo         string  `protobuf:"bytes,30,opt,name=sessionNo,proto3" json:"sessionNo,omitempty"`
	ActivityNo        int64   `protobuf:"varint,31,opt,name=activityNo,proto3" json:"activityNo,omitempty"`
	ActivityName      string  `protobuf:"bytes,32,opt,name=activityName,proto3" json:"activityName,omitempty"`
	ActivityDate      string  `protobuf:"bytes,33,opt,name=activityDate,proto3" json:"activityDate,omitempty"`
	SumOfBets         float64 `protobuf:"fixed64,34,opt,name=sumOfBets,proto3" json:"sumOfBets,omitempty"`
	SumOfWins         float64 `protobuf:"fixed64,35,opt,name=sumOfWins,proto3" json:"sumOfWins,omitempty"`
	RefTransferId     int64   `protobuf:"varint,36,opt,name=refTransferId,proto3" json:"refTransferId,omitempty"`
}

func (x *JdbData) Reset() {
	*x = JdbData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JdbData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JdbData) ProtoMessage() {}

func (x *JdbData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JdbData.ProtoReflect.Descriptor instead.
func (*JdbData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{164}
}

func (x *JdbData) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *JdbData) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *JdbData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JdbData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JdbData) GetGType() int64 {
	if x != nil {
		return x.GType
	}
	return 0
}

func (x *JdbData) GetTransferId() int64 {
	if x != nil {
		return x.TransferId
	}
	return 0
}

func (x *JdbData) GetGameSeqNo() int64 {
	if x != nil {
		return x.GameSeqNo
	}
	return 0
}

func (x *JdbData) GetMType() int64 {
	if x != nil {
		return x.MType
	}
	return 0
}

func (x *JdbData) GetReportDate() string {
	if x != nil {
		return x.ReportDate
	}
	return ""
}

func (x *JdbData) GetGameDate() string {
	if x != nil {
		return x.GameDate
	}
	return ""
}

func (x *JdbData) GetBet() float64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *JdbData) GetWin() int64 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *JdbData) GetNetWin() float64 {
	if x != nil {
		return x.NetWin
	}
	return 0
}

func (x *JdbData) GetDenom() float64 {
	if x != nil {
		return x.Denom
	}
	return 0
}

func (x *JdbData) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *JdbData) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *JdbData) GetSystemTakeWin() int64 {
	if x != nil {
		return x.SystemTakeWin
	}
	return 0
}

func (x *JdbData) GetLastModifyTime() string {
	if x != nil {
		return x.LastModifyTime
	}
	return ""
}

func (x *JdbData) GetJackpotWin() int64 {
	if x != nil {
		return x.JackpotWin
	}
	return 0
}

func (x *JdbData) GetJackpotContribute() float64 {
	if x != nil {
		return x.JackpotContribute
	}
	return 0
}

func (x *JdbData) GetHasFreeGame() int64 {
	if x != nil {
		return x.HasFreeGame
	}
	return 0
}

func (x *JdbData) GetHasGamble() int64 {
	if x != nil {
		return x.HasGamble
	}
	return 0
}

func (x *JdbData) GetRoomType() int64 {
	if x != nil {
		return x.RoomType
	}
	return 0
}

func (x *JdbData) GetHasBonusGame() int64 {
	if x != nil {
		return x.HasBonusGame
	}
	return 0
}

func (x *JdbData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *JdbData) GetGameRoundSeqNo() int64 {
	if x != nil {
		return x.GameRoundSeqNo
	}
	return 0
}

func (x *JdbData) GetRefTransferIds() []int64 {
	if x != nil {
		return x.RefTransferIds
	}
	return nil
}

func (x *JdbData) GetValidBet() float64 {
	if x != nil {
		return x.ValidBet
	}
	return 0
}

func (x *JdbData) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *JdbData) GetSessionNo() string {
	if x != nil {
		return x.SessionNo
	}
	return ""
}

func (x *JdbData) GetActivityNo() int64 {
	if x != nil {
		return x.ActivityNo
	}
	return 0
}

func (x *JdbData) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *JdbData) GetActivityDate() string {
	if x != nil {
		return x.ActivityDate
	}
	return ""
}

func (x *JdbData) GetSumOfBets() float64 {
	if x != nil {
		return x.SumOfBets
	}
	return 0
}

func (x *JdbData) GetSumOfWins() float64 {
	if x != nil {
		return x.SumOfWins
	}
	return 0
}

func (x *JdbData) GetRefTransferId() int64 {
	if x != nil {
		return x.RefTransferId
	}
	return 0
}

// success:
// <PlayerTicketResponse>
//
//	<ResponseCode>OK</ResponseCode>
//
// </PlayerTicketResponse>
type PlayerTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode string `protobuf:"bytes,1,opt,name=ResponseCode,proto3" json:"ResponseCode,omitempty"`
}

func (x *PlayerTicketResponse) Reset() {
	*x = PlayerTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTicketResponse) ProtoMessage() {}

func (x *PlayerTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTicketResponse.ProtoReflect.Descriptor instead.
func (*PlayerTicketResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{165}
}

func (x *PlayerTicketResponse) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

type AgQJCusTransBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId         string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	CusAckSeq     string `protobuf:"bytes,2,opt,name=cusAckSeq,proto3" json:"cusAckSeq,omitempty"`
	ProductId     string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	UserName      string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	LoginName     string `protobuf:"bytes,5,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Currency      string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	SubCurrency   string `protobuf:"bytes,7,opt,name=subCurrency,proto3" json:"subCurrency,omitempty"`
	TransAction   string `protobuf:"bytes,8,opt,name=transAction,proto3" json:"transAction,omitempty"`
	TransCode     string `protobuf:"bytes,9,opt,name=transCode,proto3" json:"transCode,omitempty"`
	SrcAmount     string `protobuf:"bytes,10,opt,name=srcAmount,proto3" json:"srcAmount,omitempty"`
	TransAmount   string `protobuf:"bytes,11,opt,name=transAmount,proto3" json:"transAmount,omitempty"`
	DstAmount     string `protobuf:"bytes,12,opt,name=dstAmount,proto3" json:"dstAmount,omitempty"`
	RollbackReqId string `protobuf:"bytes,13,opt,name=rollbackReqId,proto3" json:"rollbackReqId,omitempty"`
	RollbackState string `protobuf:"bytes,14,opt,name=rollbackState,proto3" json:"rollbackState,omitempty"`
}

func (x *AgQJCusTransBody) Reset() {
	*x = AgQJCusTransBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJCusTransBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJCusTransBody) ProtoMessage() {}

func (x *AgQJCusTransBody) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJCusTransBody.ProtoReflect.Descriptor instead.
func (*AgQJCusTransBody) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{166}
}

func (x *AgQJCusTransBody) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJCusTransBody) GetCusAckSeq() string {
	if x != nil {
		return x.CusAckSeq
	}
	return ""
}

func (x *AgQJCusTransBody) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AgQJCusTransBody) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AgQJCusTransBody) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *AgQJCusTransBody) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AgQJCusTransBody) GetSubCurrency() string {
	if x != nil {
		return x.SubCurrency
	}
	return ""
}

func (x *AgQJCusTransBody) GetTransAction() string {
	if x != nil {
		return x.TransAction
	}
	return ""
}

func (x *AgQJCusTransBody) GetTransCode() string {
	if x != nil {
		return x.TransCode
	}
	return ""
}

func (x *AgQJCusTransBody) GetSrcAmount() string {
	if x != nil {
		return x.SrcAmount
	}
	return ""
}

func (x *AgQJCusTransBody) GetTransAmount() string {
	if x != nil {
		return x.TransAmount
	}
	return ""
}

func (x *AgQJCusTransBody) GetDstAmount() string {
	if x != nil {
		return x.DstAmount
	}
	return ""
}

func (x *AgQJCusTransBody) GetRollbackReqId() string {
	if x != nil {
		return x.RollbackReqId
	}
	return ""
}

func (x *AgQJCusTransBody) GetRollbackState() string {
	if x != nil {
		return x.RollbackState
	}
	return ""
}

type Cq9RolloutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account   string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime string `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Gamehall  string `protobuf:"bytes,4,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode  string `protobuf:"bytes,5,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid   string `protobuf:"bytes,6,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Amount    string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Mtcode    string `protobuf:"bytes,8,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Session   string `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *Cq9RolloutReq) Reset() {
	*x = Cq9RolloutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RolloutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RolloutReq) ProtoMessage() {}

func (x *Cq9RolloutReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RolloutReq.ProtoReflect.Descriptor instead.
func (*Cq9RolloutReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{167}
}

func (x *Cq9RolloutReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9RolloutReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9RolloutReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9RolloutReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9RolloutReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9RolloutReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9RolloutReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Cq9RolloutReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9RolloutReq) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type CrownGenericWagerdataresp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Wagerid  string `protobuf:"bytes,2,opt,name=wagerid,proto3" json:"wagerid,omitempty"`
	Respcode string `protobuf:"bytes,3,opt,name=respcode,proto3" json:"respcode,omitempty"`
}

func (x *CrownGenericWagerdataresp) Reset() {
	*x = CrownGenericWagerdataresp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrownGenericWagerdataresp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrownGenericWagerdataresp) ProtoMessage() {}

func (x *CrownGenericWagerdataresp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrownGenericWagerdataresp.ProtoReflect.Descriptor instead.
func (*CrownGenericWagerdataresp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{168}
}

func (x *CrownGenericWagerdataresp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CrownGenericWagerdataresp) GetWagerid() string {
	if x != nil {
		return x.Wagerid
	}
	return ""
}

func (x *CrownGenericWagerdataresp) GetRespcode() string {
	if x != nil {
		return x.Respcode
	}
	return ""
}

type EndingSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccount   string   `protobuf:"bytes,1,opt,name=player_account,json=playerAccount,proto3" json:"player_account,omitempty"`
	TxnId           string   `protobuf:"bytes,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	Hash            string   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	BetId           string   `protobuf:"bytes,4,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`
	LeagueName      string   `protobuf:"bytes,5,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
	LeagueShortName string   `protobuf:"bytes,6,opt,name=league_short_name,json=leagueShortName,proto3" json:"league_short_name,omitempty"`
	LeagueYear      string   `protobuf:"bytes,7,opt,name=league_year,json=leagueYear,proto3" json:"league_year,omitempty"`
	HostName        string   `protobuf:"bytes,8,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	AwayName        string   `protobuf:"bytes,9,opt,name=away_name,json=awayName,proto3" json:"away_name,omitempty"`
	BetTime         int64    `protobuf:"varint,10,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`
	BetQuater       string   `protobuf:"bytes,11,opt,name=bet_quater,json=betQuater,proto3" json:"bet_quater,omitempty"`
	GameRuleId      string   `protobuf:"bytes,12,opt,name=game_rule_id,json=gameRuleId,proto3" json:"game_rule_id,omitempty"`
	GameRuleName    string   `protobuf:"bytes,13,opt,name=game_rule_name,json=gameRuleName,proto3" json:"game_rule_name,omitempty"`
	Odds            string   `protobuf:"bytes,14,opt,name=odds,proto3" json:"odds,omitempty"`
	Stake           string   `protobuf:"bytes,15,opt,name=stake,proto3" json:"stake,omitempty"`
	BetType         string   `protobuf:"bytes,16,opt,name=bet_type,json=betType,proto3" json:"bet_type,omitempty"`
	WinLose         string   `protobuf:"bytes,17,opt,name=win_lose,json=winLose,proto3" json:"win_lose,omitempty"`
	CurrentScore    []string `protobuf:"bytes,18,rep,name=current_score,json=currentScore,proto3" json:"current_score,omitempty"`
	TimeUnix        int64    `protobuf:"varint,19,opt,name=time_unix,json=timeUnix,proto3" json:"time_unix,omitempty"`
}

func (x *EndingSettleReq) Reset() {
	*x = EndingSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndingSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndingSettleReq) ProtoMessage() {}

func (x *EndingSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndingSettleReq.ProtoReflect.Descriptor instead.
func (*EndingSettleReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{169}
}

func (x *EndingSettleReq) GetPlayerAccount() string {
	if x != nil {
		return x.PlayerAccount
	}
	return ""
}

func (x *EndingSettleReq) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *EndingSettleReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *EndingSettleReq) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *EndingSettleReq) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *EndingSettleReq) GetLeagueShortName() string {
	if x != nil {
		return x.LeagueShortName
	}
	return ""
}

func (x *EndingSettleReq) GetLeagueYear() string {
	if x != nil {
		return x.LeagueYear
	}
	return ""
}

func (x *EndingSettleReq) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *EndingSettleReq) GetAwayName() string {
	if x != nil {
		return x.AwayName
	}
	return ""
}

func (x *EndingSettleReq) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *EndingSettleReq) GetBetQuater() string {
	if x != nil {
		return x.BetQuater
	}
	return ""
}

func (x *EndingSettleReq) GetGameRuleId() string {
	if x != nil {
		return x.GameRuleId
	}
	return ""
}

func (x *EndingSettleReq) GetGameRuleName() string {
	if x != nil {
		return x.GameRuleName
	}
	return ""
}

func (x *EndingSettleReq) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *EndingSettleReq) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *EndingSettleReq) GetBetType() string {
	if x != nil {
		return x.BetType
	}
	return ""
}

func (x *EndingSettleReq) GetWinLose() string {
	if x != nil {
		return x.WinLose
	}
	return ""
}

func (x *EndingSettleReq) GetCurrentScore() []string {
	if x != nil {
		return x.CurrentScore
	}
	return nil
}

func (x *EndingSettleReq) GetTimeUnix() int64 {
	if x != nil {
		return x.TimeUnix
	}
	return 0
}

type EvoGameDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *EvoGameDetailsTable `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *EvoGameDetails) Reset() {
	*x = EvoGameDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoGameDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoGameDetails) ProtoMessage() {}

func (x *EvoGameDetails) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoGameDetails.ProtoReflect.Descriptor instead.
func (*EvoGameDetails) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{170}
}

func (x *EvoGameDetails) GetTable() *EvoGameDetailsTable {
	if x != nil {
		return x.Table
	}
	return nil
}

type EvoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Sid         string  `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	ChannelType string  `protobuf:"bytes,3,opt,name=channelType,proto3" json:"channelType,omitempty"`
	Uuid        string  `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Balance     float64 `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Bonus       float64 `protobuf:"fixed64,6,opt,name=bonus,proto3" json:"bonus,omitempty"`
}

func (x *EvoResp) Reset() {
	*x = EvoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoResp) ProtoMessage() {}

func (x *EvoResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoResp.ProtoReflect.Descriptor instead.
func (*EvoResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{171}
}

func (x *EvoResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EvoResp) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *EvoResp) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *EvoResp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EvoResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EvoResp) GetBonus() float64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

type PgCashGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorToken         string `protobuf:"bytes,1,opt,name=operator_token,json=operatorToken,proto3" json:"operator_token,omitempty"`
	SecretKey             string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	OperatorPlayerSession string `protobuf:"bytes,3,opt,name=operator_player_session,json=operatorPlayerSession,proto3" json:"operator_player_session,omitempty"`
	PlayerName            string `protobuf:"bytes,4,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	GameId                uint32 `protobuf:"varint,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *PgCashGetReq) Reset() {
	*x = PgCashGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgCashGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCashGetReq) ProtoMessage() {}

func (x *PgCashGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCashGetReq.ProtoReflect.Descriptor instead.
func (*PgCashGetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{172}
}

func (x *PgCashGetReq) GetOperatorToken() string {
	if x != nil {
		return x.OperatorToken
	}
	return ""
}

func (x *PgCashGetReq) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *PgCashGetReq) GetOperatorPlayerSession() string {
	if x != nil {
		return x.OperatorPlayerSession
	}
	return ""
}

func (x *PgCashGetReq) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PgCashGetReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

// debit
type PinnacleDebitTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   uint32  `protobuf:"varint,1,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	TransactionType string  `protobuf:"bytes,2,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	TransactionDate string  `protobuf:"bytes,3,opt,name=TransactionDate,proto3" json:"TransactionDate,omitempty"`
	Amount          float64 `protobuf:"fixed64,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *PinnacleDebitTransaction) Reset() {
	*x = PinnacleDebitTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleDebitTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleDebitTransaction) ProtoMessage() {}

func (x *PinnacleDebitTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleDebitTransaction.ProtoReflect.Descriptor instead.
func (*PinnacleDebitTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{173}
}

func (x *PinnacleDebitTransaction) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PinnacleDebitTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *PinnacleDebitTransaction) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *PinnacleDebitTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// PpPromoWin-请求
type PpPromoWinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ProviderId   string `protobuf:"bytes,2,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Timestamp    int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId       string `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	CampaignId   int64  `protobuf:"varint,5,opt,name=campaignId,proto3" json:"campaignId,omitempty"`
	CampaignType string `protobuf:"bytes,6,opt,name=campaignType,proto3" json:"campaignType,omitempty"`
	Amount       string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency     string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	Reference    string `protobuf:"bytes,9,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *PpPromoWinReq) Reset() {
	*x = PpPromoWinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpPromoWinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpPromoWinReq) ProtoMessage() {}

func (x *PpPromoWinReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpPromoWinReq.ProtoReflect.Descriptor instead.
func (*PpPromoWinReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{174}
}

func (x *PpPromoWinReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpPromoWinReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *PpPromoWinReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PpPromoWinReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpPromoWinReq) GetCampaignId() int64 {
	if x != nil {
		return x.CampaignId
	}
	return 0
}

func (x *PpPromoWinReq) GetCampaignType() string {
	if x != nil {
		return x.CampaignType
	}
	return ""
}

func (x *PpPromoWinReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PpPromoWinReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PpPromoWinReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type LivePostTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string              `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Currency        string              `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Value           string              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Playname        string              `protobuf:"bytes,4,opt,name=playname,proto3" json:"playname,omitempty"`
	AgentCode       string              `protobuf:"bytes,5,opt,name=agentCode,proto3" json:"agentCode,omitempty"`
	BetTime         int64               `protobuf:"varint,6,opt,name=betTime,proto3" json:"betTime,omitempty"`
	TransactionID   string              `protobuf:"bytes,7,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	PlatformType    string              `protobuf:"bytes,8,opt,name=platformType,proto3" json:"platformType,omitempty"`
	Round           string              `protobuf:"bytes,9,opt,name=round,proto3" json:"round,omitempty"`
	Gametype        string              `protobuf:"bytes,10,opt,name=gametype,proto3" json:"gametype,omitempty"`
	GameCode        string              `protobuf:"bytes,11,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	TableCode       string              `protobuf:"bytes,12,opt,name=tableCode,proto3" json:"tableCode,omitempty"`
	TransactionType LiveTransactionType `protobuf:"varint,13,opt,name=transactionType,proto3,enum=core.LiveTransactionType" json:"transactionType,omitempty"`
	TransactionCode string              `protobuf:"bytes,14,opt,name=transactionCode,proto3" json:"transactionCode,omitempty"`
	DeviceType      string              `protobuf:"bytes,15,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Playtype        string              `protobuf:"bytes,16,opt,name=playtype,proto3" json:"playtype,omitempty"`
	NetAmount       string              `protobuf:"bytes,17,opt,name=netAmount,proto3" json:"netAmount,omitempty"`
	ValidBetAmount  string              `protobuf:"bytes,18,opt,name=validBetAmount,proto3" json:"validBetAmount,omitempty"`
	Settletime      string              `protobuf:"bytes,19,opt,name=settletime,proto3" json:"settletime,omitempty"`
	BillNo          string              `protobuf:"bytes,20,opt,name=billNo,proto3" json:"billNo,omitempty"`
	TicketStatus    string              `protobuf:"bytes,21,opt,name=ticketStatus,proto3" json:"ticketStatus,omitempty"`
	GameResult      string              `protobuf:"bytes,22,opt,name=gameResult,proto3" json:"gameResult,omitempty"`
	Finished        bool                `protobuf:"varint,23,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *LivePostTransferItem) Reset() {
	*x = LivePostTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePostTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePostTransferItem) ProtoMessage() {}

func (x *LivePostTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePostTransferItem.ProtoReflect.Descriptor instead.
func (*LivePostTransferItem) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{175}
}

func (x *LivePostTransferItem) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *LivePostTransferItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *LivePostTransferItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LivePostTransferItem) GetPlayname() string {
	if x != nil {
		return x.Playname
	}
	return ""
}

func (x *LivePostTransferItem) GetAgentCode() string {
	if x != nil {
		return x.AgentCode
	}
	return ""
}

func (x *LivePostTransferItem) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *LivePostTransferItem) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *LivePostTransferItem) GetPlatformType() string {
	if x != nil {
		return x.PlatformType
	}
	return ""
}

func (x *LivePostTransferItem) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

func (x *LivePostTransferItem) GetGametype() string {
	if x != nil {
		return x.Gametype
	}
	return ""
}

func (x *LivePostTransferItem) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *LivePostTransferItem) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *LivePostTransferItem) GetTransactionType() LiveTransactionType {
	if x != nil {
		return x.TransactionType
	}
	return LiveTransactionType_UnknownLiveTransactionType
}

func (x *LivePostTransferItem) GetTransactionCode() string {
	if x != nil {
		return x.TransactionCode
	}
	return ""
}

func (x *LivePostTransferItem) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *LivePostTransferItem) GetPlaytype() string {
	if x != nil {
		return x.Playtype
	}
	return ""
}

func (x *LivePostTransferItem) GetNetAmount() string {
	if x != nil {
		return x.NetAmount
	}
	return ""
}

func (x *LivePostTransferItem) GetValidBetAmount() string {
	if x != nil {
		return x.ValidBetAmount
	}
	return ""
}

func (x *LivePostTransferItem) GetSettletime() string {
	if x != nil {
		return x.Settletime
	}
	return ""
}

func (x *LivePostTransferItem) GetBillNo() string {
	if x != nil {
		return x.BillNo
	}
	return ""
}

func (x *LivePostTransferItem) GetTicketStatus() string {
	if x != nil {
		return x.TicketStatus
	}
	return ""
}

func (x *LivePostTransferItem) GetGameResult() string {
	if x != nil {
		return x.GameResult
	}
	return ""
}

func (x *LivePostTransferItem) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

// inner type - alt funds
type HabaTournamentdetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score             float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Rank              uint32  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Tournamenteventid uint32  `protobuf:"varint,3,opt,name=tournamenteventid,proto3" json:"tournamenteventid,omitempty"`
}

func (x *HabaTournamentdetails) Reset() {
	*x = HabaTournamentdetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaTournamentdetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaTournamentdetails) ProtoMessage() {}

func (x *HabaTournamentdetails) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaTournamentdetails.ProtoReflect.Descriptor instead.
func (*HabaTournamentdetails) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{176}
}

func (x *HabaTournamentdetails) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *HabaTournamentdetails) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *HabaTournamentdetails) GetTournamenteventid() uint32 {
	if x != nil {
		return x.Tournamenteventid
	}
	return 0
}

type PinnacleDebitRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCode         string                  `protobuf:"bytes,1,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	AvaliableBalance float64                 `protobuf:"fixed64,2,opt,name=AvaliableBalance,proto3" json:"AvaliableBalance,omitempty"`
	Action           *PinnacleDebitRspAction `protobuf:"bytes,3,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *PinnacleDebitRspResult) Reset() {
	*x = PinnacleDebitRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleDebitRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleDebitRspResult) ProtoMessage() {}

func (x *PinnacleDebitRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleDebitRspResult.ProtoReflect.Descriptor instead.
func (*PinnacleDebitRspResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{177}
}

func (x *PinnacleDebitRspResult) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *PinnacleDebitRspResult) GetAvaliableBalance() float64 {
	if x != nil {
		return x.AvaliableBalance
	}
	return 0
}

func (x *PinnacleDebitRspResult) GetAction() *PinnacleDebitRspAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type SabaConfirmBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Status  string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Msg     string  `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaConfirmBetResp) Reset() {
	*x = SabaConfirmBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBetResp) ProtoMessage() {}

func (x *SabaConfirmBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBetResp.ProtoReflect.Descriptor instead.
func (*SabaConfirmBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{178}
}

func (x *SabaConfirmBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SabaConfirmBetResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaConfirmBetResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SabaConfirmBet3RdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Status  string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Msg     string  `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaConfirmBet3RdResp) Reset() {
	*x = SabaConfirmBet3RdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBet3RdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBet3RdResp) ProtoMessage() {}

func (x *SabaConfirmBet3RdResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBet3RdResp.ProtoReflect.Descriptor instead.
func (*SabaConfirmBet3RdResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{179}
}

func (x *SabaConfirmBet3RdResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SabaConfirmBet3RdResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaConfirmBet3RdResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 串关投注接口输入输出定义
type SabaPlaceBetParlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *PlaceBetParlayMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaPlaceBetParlayReq) Reset() {
	*x = SabaPlaceBetParlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetParlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetParlayReq) ProtoMessage() {}

func (x *SabaPlaceBetParlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetParlayReq.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetParlayReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{180}
}

func (x *SabaPlaceBetParlayReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaPlaceBetParlayReq) GetMessage() *PlaceBetParlayMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaPlace3RdParlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *Place3RdParlayMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaPlace3RdParlayReq) Reset() {
	*x = SabaPlace3RdParlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlace3RdParlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlace3RdParlayReq) ProtoMessage() {}

func (x *SabaPlace3RdParlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlace3RdParlayReq.ProtoReflect.Descriptor instead.
func (*SabaPlace3RdParlayReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{181}
}

func (x *SabaPlace3RdParlayReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaPlace3RdParlayReq) GetMessage() *Place3RdParlayMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaPlaceBetentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaPlaceBetentMessageReq `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaPlaceBetentReq) Reset() {
	*x = SabaPlaceBetentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetentReq) ProtoMessage() {}

func (x *SabaPlaceBetentReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetentReq.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetentReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{182}
}

func (x *SabaPlaceBetentReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaPlaceBetentReq) GetMessage() *SabaPlaceBetentMessageReq {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaPlaceBetentMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        string                        `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	BetTime       string                        `protobuf:"bytes,2,opt,name=betTime,proto3" json:"betTime,omitempty"`
	UserId        string                        `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	TicketList    []*SabaPlaceBetentListMessage `protobuf:"bytes,4,rep,name=ticketList,proto3" json:"ticketList,omitempty"`
	Currency      int64                         `protobuf:"varint,5,opt,name=currency,proto3" json:"currency,omitempty"`
	ProductId     int64                         `protobuf:"varint,6,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductNameEn string                        `protobuf:"bytes,7,opt,name=productNameEn,proto3" json:"productNameEn,omitempty"`
	GameId        int64                         `protobuf:"varint,8,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameNameEn    string                        `protobuf:"bytes,9,opt,name=gameNameEn,proto3" json:"gameNameEn,omitempty"`
	Roundid       string                        `protobuf:"bytes,10,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Ip            string                        `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`
	BetFrom       string                        `protobuf:"bytes,12,opt,name=betFrom,proto3" json:"betFrom,omitempty"`
	CreditAmount  float32                       `protobuf:"fixed32,13,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount   float32                       `protobuf:"fixed32,14,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
}

func (x *SabaPlaceBetentMessageReq) Reset() {
	*x = SabaPlaceBetentMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetentMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetentMessageReq) ProtoMessage() {}

func (x *SabaPlaceBetentMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetentMessageReq.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetentMessageReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{183}
}

func (x *SabaPlaceBetentMessageReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetTicketList() []*SabaPlaceBetentListMessage {
	if x != nil {
		return x.TicketList
	}
	return nil
}

func (x *SabaPlaceBetentMessageReq) GetCurrency() int64 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *SabaPlaceBetentMessageReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SabaPlaceBetentMessageReq) GetProductNameEn() string {
	if x != nil {
		return x.ProductNameEn
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SabaPlaceBetentMessageReq) GetGameNameEn() string {
	if x != nil {
		return x.GameNameEn
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetBetFrom() string {
	if x != nil {
		return x.BetFrom
	}
	return ""
}

func (x *SabaPlaceBetentMessageReq) GetCreditAmount() float32 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SabaPlaceBetentMessageReq) GetDebitAmount() float32 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

type SabaPlaceBetentListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId       string  `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	Stake       float32 `protobuf:"fixed32,2,opt,name=stake,proto3" json:"stake,omitempty"`
	ActualStake float32 `protobuf:"fixed32,3,opt,name=actualStake,proto3" json:"actualStake,omitempty"`
}

func (x *SabaPlaceBetentListMessage) Reset() {
	*x = SabaPlaceBetentListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetentListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetentListMessage) ProtoMessage() {}

func (x *SabaPlaceBetentListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetentListMessage.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetentListMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{184}
}

func (x *SabaPlaceBetentListMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SabaPlaceBetentListMessage) GetStake() float32 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *SabaPlaceBetentListMessage) GetActualStake() float32 {
	if x != nil {
		return x.ActualStake
	}
	return 0
}

type RollbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID string `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	AppSecret  string `protobuf:"bytes,2,opt,name=appSecret,proto3" json:"appSecret,omitempty"`
	PlayerID   string `protobuf:"bytes,3,opt,name=playerID,proto3" json:"playerID,omitempty"`
	GameID     string `protobuf:"bytes,4,opt,name=gameID,proto3" json:"gameID,omitempty"`
	BetID      string `protobuf:"bytes,5,opt,name=betID,proto3" json:"betID,omitempty"`
	Amount     int64  `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency   string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Type       string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Time       int64  `protobuf:"varint,9,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RollbackReq) Reset() {
	*x = RollbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackReq) ProtoMessage() {}

func (x *RollbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackReq.ProtoReflect.Descriptor instead.
func (*RollbackReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{185}
}

func (x *RollbackReq) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *RollbackReq) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *RollbackReq) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *RollbackReq) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *RollbackReq) GetBetID() string {
	if x != nil {
		return x.BetID
	}
	return ""
}

func (x *RollbackReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RollbackReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RollbackReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RollbackReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type AgQJBalanceBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId           string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	CusAckSeq       string `protobuf:"bytes,2,opt,name=cusAckSeq,proto3" json:"cusAckSeq,omitempty"`
	PlatformSession string `protobuf:"bytes,3,opt,name=platformSession,proto3" json:"platformSession,omitempty"`
	ProductId       string `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	UserName        string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
	LoginName       string `protobuf:"bytes,6,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Balance         string `protobuf:"bytes,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency        string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	SubCurrency     string `protobuf:"bytes,9,opt,name=subCurrency,proto3" json:"subCurrency,omitempty"`
}

func (x *AgQJBalanceBody) Reset() {
	*x = AgQJBalanceBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJBalanceBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJBalanceBody) ProtoMessage() {}

func (x *AgQJBalanceBody) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJBalanceBody.ProtoReflect.Descriptor instead.
func (*AgQJBalanceBody) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{186}
}

func (x *AgQJBalanceBody) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJBalanceBody) GetCusAckSeq() string {
	if x != nil {
		return x.CusAckSeq
	}
	return ""
}

func (x *AgQJBalanceBody) GetPlatformSession() string {
	if x != nil {
		return x.PlatformSession
	}
	return ""
}

func (x *AgQJBalanceBody) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AgQJBalanceBody) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AgQJBalanceBody) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *AgQJBalanceBody) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *AgQJBalanceBody) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AgQJBalanceBody) GetSubCurrency() string {
	if x != nil {
		return x.SubCurrency
	}
	return ""
}

type BetByBetMakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                 uint32            `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency               string            `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	PlayerId               string            `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SessionId              string            `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	BonusId                uint64            `protobuf:"varint,5,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	BonusType              string            `protobuf:"bytes,6,opt,name=bonus_type,json=bonusType,proto3" json:"bonus_type,omitempty"`
	Transaction            *BetByTransaction `protobuf:"bytes,7,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Betslip                *BetByBetslip     `protobuf:"bytes,8,opt,name=betslip,proto3" json:"betslip,omitempty"`
	PotentialWin           uint32            `protobuf:"varint,9,opt,name=potential_win,json=potentialWin,proto3" json:"potential_win,omitempty"`
	PotentialComboboostWin uint32            `protobuf:"varint,10,opt,name=potential_comboboost_win,json=potentialComboboostWin,proto3" json:"potential_comboboost_win,omitempty"`
}

func (x *BetByBetMakeRequest) Reset() {
	*x = BetByBetMakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetMakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetMakeRequest) ProtoMessage() {}

func (x *BetByBetMakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetMakeRequest.ProtoReflect.Descriptor instead.
func (*BetByBetMakeRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{187}
}

func (x *BetByBetMakeRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetMakeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetMakeRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetByBetMakeRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BetByBetMakeRequest) GetBonusId() uint64 {
	if x != nil {
		return x.BonusId
	}
	return 0
}

func (x *BetByBetMakeRequest) GetBonusType() string {
	if x != nil {
		return x.BonusType
	}
	return ""
}

func (x *BetByBetMakeRequest) GetTransaction() *BetByTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *BetByBetMakeRequest) GetBetslip() *BetByBetslip {
	if x != nil {
		return x.Betslip
	}
	return nil
}

func (x *BetByBetMakeRequest) GetPotentialWin() uint32 {
	if x != nil {
		return x.PotentialWin
	}
	return 0
}

func (x *BetByBetMakeRequest) GetPotentialComboboostWin() uint32 {
	if x != nil {
		return x.PotentialComboboostWin
	}
	return 0
}

type ElGetUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ElGetUserReq) Reset() {
	*x = ElGetUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElGetUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElGetUserReq) ProtoMessage() {}

func (x *ElGetUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElGetUserReq.ProtoReflect.Descriptor instead.
func (*ElGetUserReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{188}
}

func (x *ElGetUserReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type HabaFundtransferresponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *HabaStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Balance      float64     `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Currencycode string      `protobuf:"bytes,3,opt,name=currencycode,proto3" json:"currencycode,omitempty"`
}

func (x *HabaFundtransferresponse) Reset() {
	*x = HabaFundtransferresponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaFundtransferresponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaFundtransferresponse) ProtoMessage() {}

func (x *HabaFundtransferresponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaFundtransferresponse.ProtoReflect.Descriptor instead.
func (*HabaFundtransferresponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{189}
}

func (x *HabaFundtransferresponse) GetStatus() *HabaStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HabaFundtransferresponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HabaFundtransferresponse) GetCurrencycode() string {
	if x != nil {
		return x.Currencycode
	}
	return ""
}

// 0 成功
// 1 Token 无效
// 2 单号无效
// 3 馀额不足
// 4 停止投注
type BetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Balance    int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetRes) Reset() {
	*x = BetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRes) ProtoMessage() {}

func (x *BetRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRes.ProtoReflect.Descriptor instead.
func (*BetRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{190}
}

func (x *BetRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *BetRes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type BaseUUIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *BaseUUIDResp) Reset() {
	*x = BaseUUIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUUIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUUIDResp) ProtoMessage() {}

func (x *BaseUUIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUUIDResp.ProtoReflect.Descriptor instead.
func (*BaseUUIDResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{191}
}

func (x *BaseUUIDResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseUUIDResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 2003 Parent transaction not found
// 2004 Bad request
// 2005 Invalid JWT token
type BetRefundError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BetRefundError) Reset() {
	*x = BetRefundError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRefundError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRefundError) ProtoMessage() {}

func (x *BetRefundError) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRefundError.ProtoReflect.Descriptor instead.
func (*BetRefundError) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{192}
}

func (x *BetRefundError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BetRefundError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EvoPromoTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id              string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Amount          float64       `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	VoucherId       string        `protobuf:"bytes,4,opt,name=voucherId,proto3" json:"voucherId,omitempty"`
	RemainingRounds int64         `protobuf:"varint,5,opt,name=remainingRounds,proto3" json:"remainingRounds,omitempty"`
	Jackpots        []*EvoJackpot `protobuf:"bytes,6,rep,name=jackpots,proto3" json:"jackpots,omitempty"`
	PlayableBalance float64       `protobuf:"fixed64,7,opt,name=playableBalance,proto3" json:"playableBalance,omitempty"`
	BonusConfigId   string        `protobuf:"bytes,8,opt,name=bonusConfigId,proto3" json:"bonusConfigId,omitempty"`
	RewardId        string        `protobuf:"bytes,9,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
}

func (x *EvoPromoTransaction) Reset() {
	*x = EvoPromoTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoPromoTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoPromoTransaction) ProtoMessage() {}

func (x *EvoPromoTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoPromoTransaction.ProtoReflect.Descriptor instead.
func (*EvoPromoTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{193}
}

func (x *EvoPromoTransaction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EvoPromoTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvoPromoTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *EvoPromoTransaction) GetVoucherId() string {
	if x != nil {
		return x.VoucherId
	}
	return ""
}

func (x *EvoPromoTransaction) GetRemainingRounds() int64 {
	if x != nil {
		return x.RemainingRounds
	}
	return 0
}

func (x *EvoPromoTransaction) GetJackpots() []*EvoJackpot {
	if x != nil {
		return x.Jackpots
	}
	return nil
}

func (x *EvoPromoTransaction) GetPlayableBalance() float64 {
	if x != nil {
		return x.PlayableBalance
	}
	return 0
}

func (x *EvoPromoTransaction) GetBonusConfigId() string {
	if x != nil {
		return x.BonusConfigId
	}
	return ""
}

func (x *EvoPromoTransaction) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

// 请求订单同步数据结构
type FbsportsSyncOrdersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                          // 订单号
	RejectReason           int32                         `protobuf:"varint,2,opt,name=rejectReason,proto3" json:"rejectReason,omitempty"`                     // 拒单原因码, 可选
	RejectReasonStr        string                        `protobuf:"bytes,3,opt,name=rejectReasonStr,proto3" json:"rejectReasonStr,omitempty"`                // 拒单原因描述, 可选
	UserId                 string                        `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`                                  // 用户ID
	MerchantId             string                        `protobuf:"bytes,5,opt,name=merchantId,proto3" json:"merchantId,omitempty"`                          // 渠道ID
	MerchantUserId         string                        `protobuf:"bytes,6,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`                  // 渠道用户ID
	Currency               int64                         `protobuf:"varint,7,opt,name=currency,proto3" json:"currency,omitempty"`                             // 币种，参见枚举: currency
	ExchangeRate           string                        `protobuf:"bytes,8,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`                      // 汇率快照
	SeriesType             int64                         `protobuf:"varint,9,opt,name=seriesType,proto3" json:"seriesType,omitempty"`                         // 关次类型，0 单关，1 串关, 参见枚举: series_type
	BetType                string                        `protobuf:"bytes,10,opt,name=betType,proto3" json:"betType,omitempty"`                               // 投注类型
	AllUp                  int64                         `protobuf:"varint,11,opt,name=allUp,proto3" json:"allUp,omitempty"`                                  // 总关数
	AllUpAlive             int64                         `protobuf:"varint,12,opt,name=allUpAlive,proto3" json:"allUpAlive,omitempty"`                        // 存活关数
	StakeAmount            string                        `protobuf:"bytes,13,opt,name=stakeAmount,proto3" json:"stakeAmount,omitempty"`                       // 投注额（本金）
	LiabilityStake         string                        `protobuf:"bytes,14,opt,name=liabilityStake,proto3" json:"liabilityStake,omitempty"`                 // 名义投注额（名义本金）, 可选
	SettleAmount           string                        `protobuf:"bytes,15,opt,name=settleAmount,proto3" json:"settleAmount,omitempty"`                     // 结算派奖金额
	OrderStatus            int64                         `protobuf:"varint,16,opt,name=orderStatus,proto3" json:"orderStatus,omitempty"`                      // 订单状态, 参见枚举: order_status
	PayStatus              int64                         `protobuf:"varint,17,opt,name=payStatus,proto3" json:"payStatus,omitempty"`                          // 付款状态, 弃用
	OddsChange             int64                         `protobuf:"varint,18,opt,name=oddsChange,proto3" json:"oddsChange,omitempty"`                        // 是否接受赔率变更设置: 0不接受，1接受更好赔率，2接受任意赔率, 参见枚举: odds_change_enum
	Device                 string                        `protobuf:"bytes,19,opt,name=device,proto3" json:"device,omitempty"`                                 // 设备类型（pc、h5、mobile), 参见枚举: plat_form_enum, 可选
	Ip                     string                        `protobuf:"bytes,20,opt,name=ip,proto3" json:"ip,omitempty"`                                         // 投注IP地址, 可选
	SettleTime             string                        `protobuf:"bytes,21,opt,name=settleTime,proto3" json:"settleTime,omitempty"`                         // 订单结算时间, 可选
	CreateTime             string                        `protobuf:"bytes,22,opt,name=createTime,proto3" json:"createTime,omitempty"`                         // 订单创建时间
	ModifyTime             string                        `protobuf:"bytes,23,opt,name=modifyTime,proto3" json:"modifyTime,omitempty"`                         // 订单确认时间
	CancelTime             string                        `protobuf:"bytes,24,opt,name=cancelTime,proto3" json:"cancelTime,omitempty"`                         // 订单取消时间, 可选
	ThirdRemark            string                        `protobuf:"bytes,25,opt,name=thirdRemark,proto3" json:"thirdRemark,omitempty"`                       // 第三方备注, 可选
	RelatedId              string                        `protobuf:"bytes,26,opt,name=relatedId,proto3" json:"relatedId,omitempty"`                           // 三方关联ID, 可选
	MaxWinAmount           string                        `protobuf:"bytes,27,opt,name=maxWinAmount,proto3" json:"maxWinAmount,omitempty"`                     // 最大可赢金额, 可选
	LoseAmount             string                        `protobuf:"bytes,28,opt,name=loseAmount,proto3" json:"loseAmount,omitempty"`                         // 最大赔付金额, 可选
	RollBackCount          int32                         `protobuf:"varint,29,opt,name=rollBackCount,proto3" json:"rollBackCount,omitempty"`                  // 回滚次数, 可选
	ItemCount              int64                         `protobuf:"varint,30,opt,name=itemCount,proto3" json:"itemCount,omitempty"`                          // 选项数
	SeriesValue            int64                         `protobuf:"varint,31,opt,name=seriesValue,proto3" json:"seriesValue,omitempty"`                      // 串几关
	BetNum                 int64                         `protobuf:"varint,32,opt,name=betNum,proto3" json:"betNum,omitempty"`                                // 子单数
	CashOutTotalStake      string                        `protobuf:"bytes,33,opt,name=cashOutTotalStake,proto3" json:"cashOutTotalStake,omitempty"`           // 提前结算总本金, 可选
	LiabilityCashoutStake  string                        `protobuf:"bytes,34,opt,name=liabilityCashoutStake,proto3" json:"liabilityCashoutStake,omitempty"`   // 提前结算名义总本金, 可选
	CashOutPayoutStake     string                        `protobuf:"bytes,35,opt,name=cashOutPayoutStake,proto3" json:"cashOutPayoutStake,omitempty"`         // 提前结算总派奖额, 可选
	ReserveId              string                        `protobuf:"bytes,36,opt,name=reserveId,proto3" json:"reserveId,omitempty"`                           // 预约订单单号, 可选
	CashOutCount           int32                         `protobuf:"varint,37,opt,name=cashOutCount,proto3" json:"cashOutCount,omitempty"`                    // 提前结算次数, 可选
	UnitStake              string                        `protobuf:"bytes,38,opt,name=unitStake,proto3" json:"unitStake,omitempty"`                           // 每单金额, 可选
	ReserveVersion         int32                         `protobuf:"varint,39,opt,name=reserveVersion,proto3" json:"reserveVersion,omitempty"`                // 预约订单版本号, 可选
	BetList                []*FbsportsOrderSyncDetailReq `protobuf:"bytes,40,rep,name=betList,proto3" json:"betList,omitempty"`                               // 注单集合
	MaxStake               string                        `protobuf:"bytes,41,opt,name=maxStake,proto3" json:"maxStake,omitempty"`                             // 最大投注额, 可选
	ValidSettleStakeAmount string                        `protobuf:"bytes,42,opt,name=validSettleStakeAmount,proto3" json:"validSettleStakeAmount,omitempty"` // 有效已结算投注额, 可选
	ValidSettleAmount      string                        `protobuf:"bytes,43,opt,name=validSettleAmount,proto3" json:"validSettleAmount,omitempty"`           // 有效返还额, 可选
	CashOutCancelStake     string                        `protobuf:"bytes,44,opt,name=cashOutCancelStake,proto3" json:"cashOutCancelStake,omitempty"`         // 提前结算取消总额, 可选
	WalletType             int32                         `protobuf:"varint,45,opt,name=walletType,proto3" json:"walletType,omitempty"`                        // 钱包类型, 参见枚举: wallet_type, 可选
	Version                int64                         `protobuf:"varint,46,opt,name=version,proto3" json:"version,omitempty"`                              // 数据变更标记，升序，根据大小可判断是否是最新的数据
}

func (x *FbsportsSyncOrdersReq) Reset() {
	*x = FbsportsSyncOrdersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsSyncOrdersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsSyncOrdersReq) ProtoMessage() {}

func (x *FbsportsSyncOrdersReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsSyncOrdersReq.ProtoReflect.Descriptor instead.
func (*FbsportsSyncOrdersReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{194}
}

func (x *FbsportsSyncOrdersReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetRejectReason() int32 {
	if x != nil {
		return x.RejectReason
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetRejectReasonStr() string {
	if x != nil {
		return x.RejectReasonStr
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetCurrency() int64 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetSeriesType() int64 {
	if x != nil {
		return x.SeriesType
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetBetType() string {
	if x != nil {
		return x.BetType
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetAllUp() int64 {
	if x != nil {
		return x.AllUp
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetAllUpAlive() int64 {
	if x != nil {
		return x.AllUpAlive
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetStakeAmount() string {
	if x != nil {
		return x.StakeAmount
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetLiabilityStake() string {
	if x != nil {
		return x.LiabilityStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetSettleAmount() string {
	if x != nil {
		return x.SettleAmount
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetPayStatus() int64 {
	if x != nil {
		return x.PayStatus
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetOddsChange() int64 {
	if x != nil {
		return x.OddsChange
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetSettleTime() string {
	if x != nil {
		return x.SettleTime
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetThirdRemark() string {
	if x != nil {
		return x.ThirdRemark
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetMaxWinAmount() string {
	if x != nil {
		return x.MaxWinAmount
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetLoseAmount() string {
	if x != nil {
		return x.LoseAmount
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetRollBackCount() int32 {
	if x != nil {
		return x.RollBackCount
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetItemCount() int64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetSeriesValue() int64 {
	if x != nil {
		return x.SeriesValue
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetBetNum() int64 {
	if x != nil {
		return x.BetNum
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetCashOutTotalStake() string {
	if x != nil {
		return x.CashOutTotalStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetLiabilityCashoutStake() string {
	if x != nil {
		return x.LiabilityCashoutStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetCashOutPayoutStake() string {
	if x != nil {
		return x.CashOutPayoutStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetReserveId() string {
	if x != nil {
		return x.ReserveId
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetCashOutCount() int32 {
	if x != nil {
		return x.CashOutCount
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetUnitStake() string {
	if x != nil {
		return x.UnitStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetReserveVersion() int32 {
	if x != nil {
		return x.ReserveVersion
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetBetList() []*FbsportsOrderSyncDetailReq {
	if x != nil {
		return x.BetList
	}
	return nil
}

func (x *FbsportsSyncOrdersReq) GetMaxStake() string {
	if x != nil {
		return x.MaxStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetValidSettleStakeAmount() string {
	if x != nil {
		return x.ValidSettleStakeAmount
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetValidSettleAmount() string {
	if x != nil {
		return x.ValidSettleAmount
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetCashOutCancelStake() string {
	if x != nil {
		return x.CashOutCancelStake
	}
	return ""
}

func (x *FbsportsSyncOrdersReq) GetWalletType() int32 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *FbsportsSyncOrdersReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type HabaPlayerEndSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Dtsent                  string                       `protobuf:"bytes,2,opt,name=dtsent,proto3" json:"dtsent,omitempty"`
	Basegame                *HabaBasegame                `protobuf:"bytes,3,opt,name=basegame,proto3" json:"basegame,omitempty"`
	Auth                    *HabaAuth                    `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Playerendsessionrequest *HabaPlayerendsessionrequest `protobuf:"bytes,5,opt,name=playerendsessionrequest,proto3" json:"playerendsessionrequest,omitempty"`
}

func (x *HabaPlayerEndSessionReq) Reset() {
	*x = HabaPlayerEndSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaPlayerEndSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaPlayerEndSessionReq) ProtoMessage() {}

func (x *HabaPlayerEndSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaPlayerEndSessionReq.ProtoReflect.Descriptor instead.
func (*HabaPlayerEndSessionReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{195}
}

func (x *HabaPlayerEndSessionReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HabaPlayerEndSessionReq) GetDtsent() string {
	if x != nil {
		return x.Dtsent
	}
	return ""
}

func (x *HabaPlayerEndSessionReq) GetBasegame() *HabaBasegame {
	if x != nil {
		return x.Basegame
	}
	return nil
}

func (x *HabaPlayerEndSessionReq) GetAuth() *HabaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HabaPlayerEndSessionReq) GetPlayerendsessionrequest() *HabaPlayerendsessionrequest {
	if x != nil {
		return x.Playerendsessionrequest
	}
	return nil
}

type HabaAltFundsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Dtsent          string               `protobuf:"bytes,2,opt,name=dtsent,proto3" json:"dtsent,omitempty"`
	Tt              string               `protobuf:"bytes,3,opt,name=tt,proto3" json:"tt,omitempty"`
	Auth            *HabaAuth            `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Altfundsrequest *HabaAltfundsrequest `protobuf:"bytes,5,opt,name=altfundsrequest,proto3" json:"altfundsrequest,omitempty"`
}

func (x *HabaAltFundsReq) Reset() {
	*x = HabaAltFundsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaAltFundsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaAltFundsReq) ProtoMessage() {}

func (x *HabaAltFundsReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaAltFundsReq.ProtoReflect.Descriptor instead.
func (*HabaAltFundsReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{196}
}

func (x *HabaAltFundsReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HabaAltFundsReq) GetDtsent() string {
	if x != nil {
		return x.Dtsent
	}
	return ""
}

func (x *HabaAltFundsReq) GetTt() string {
	if x != nil {
		return x.Tt
	}
	return ""
}

func (x *HabaAltFundsReq) GetAuth() *HabaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HabaAltFundsReq) GetAltfundsrequest() *HabaAltfundsrequest {
	if x != nil {
		return x.Altfundsrequest
	}
	return nil
}

// credit
type PinnacleCreditReqTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   uint32  `protobuf:"varint,1,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	TransactionType string  `protobuf:"bytes,2,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	TransactionDate string  `protobuf:"bytes,3,opt,name=TransactionDate,proto3" json:"TransactionDate,omitempty"`
	Amount          float64 `protobuf:"fixed64,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *PinnacleCreditReqTransaction) Reset() {
	*x = PinnacleCreditReqTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleCreditReqTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleCreditReqTransaction) ProtoMessage() {}

func (x *PinnacleCreditReqTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleCreditReqTransaction.ProtoReflect.Descriptor instead.
func (*PinnacleCreditReqTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{197}
}

func (x *PinnacleCreditReqTransaction) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PinnacleCreditReqTransaction) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *PinnacleCreditReqTransaction) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *PinnacleCreditReqTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Refund-响应
type PpRefundResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Error         int64  `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PpRefundResp) Reset() {
	*x = PpRefundResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpRefundResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpRefundResp) ProtoMessage() {}

func (x *PpRefundResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpRefundResp.ProtoReflect.Descriptor instead.
func (*PpRefundResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{198}
}

func (x *PpRefundResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PpRefundResp) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PpRefundResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SettleentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       string  `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	UserId       string  `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	RefId        string  `protobuf:"bytes,3,opt,name=refId,proto3" json:"refId,omitempty"`
	Status       string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	ActualStake  float32 `protobuf:"fixed32,5,opt,name=actualStake,proto3" json:"actualStake,omitempty"`
	Stake        float32 `protobuf:"fixed32,6,opt,name=stake,proto3" json:"stake,omitempty"`
	NetStake     float32 `protobuf:"fixed32,7,opt,name=netStake,proto3" json:"netStake,omitempty"`
	CreditAmount float32 `protobuf:"fixed32,8,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount  float32 `protobuf:"fixed32,9,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	WinlostDate  string  `protobuf:"bytes,10,opt,name=winlostDate,proto3" json:"winlostDate,omitempty"`
	TxIds        []int64 `protobuf:"varint,11,rep,packed,name=txIds,proto3" json:"txIds,omitempty"`
}

func (x *SettleentMessage) Reset() {
	*x = SettleentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleentMessage) ProtoMessage() {}

func (x *SettleentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleentMessage.ProtoReflect.Descriptor instead.
func (*SettleentMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{199}
}

func (x *SettleentMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SettleentMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SettleentMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SettleentMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SettleentMessage) GetActualStake() float32 {
	if x != nil {
		return x.ActualStake
	}
	return 0
}

func (x *SettleentMessage) GetStake() float32 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *SettleentMessage) GetNetStake() float32 {
	if x != nil {
		return x.NetStake
	}
	return 0
}

func (x *SettleentMessage) GetCreditAmount() float32 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SettleentMessage) GetDebitAmount() float32 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SettleentMessage) GetWinlostDate() string {
	if x != nil {
		return x.WinlostDate
	}
	return ""
}

func (x *SettleentMessage) GetTxIds() []int64 {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type SettleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      string        `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	OperationId string        `protobuf:"bytes,2,opt,name=operationId,proto3" json:"operationId,omitempty"`
	Txns        []*SettleTxns `protobuf:"bytes,3,rep,name=txns,proto3" json:"txns,omitempty"`
}

func (x *SettleMessage) Reset() {
	*x = SettleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleMessage) ProtoMessage() {}

func (x *SettleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleMessage.ProtoReflect.Descriptor instead.
func (*SettleMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{200}
}

func (x *SettleMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SettleMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *SettleMessage) GetTxns() []*SettleTxns {
	if x != nil {
		return x.Txns
	}
	return nil
}

type PlaceBetParlayTxns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string                  `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	ParlayType   string                  `protobuf:"bytes,2,opt,name=ParlayType,proto3" json:"ParlayType,omitempty"`
	BetAmount    float64                 `protobuf:"fixed64,3,opt,name=BetAmount,proto3" json:"BetAmount,omitempty"`
	CreditAmount float64                 `protobuf:"fixed64,4,opt,name=CreditAmount,proto3" json:"CreditAmount,omitempty"`
	DebitAmount  float64                 `protobuf:"fixed64,5,opt,name=DebitAmount,proto3" json:"DebitAmount,omitempty"`
	Detail       []*PlaceBetParlayDetail `protobuf:"bytes,6,rep,name=Detail,proto3" json:"Detail,omitempty"`
	TxId         int64                   `protobuf:"varint,7,opt,name=txId,proto3" json:"txId,omitempty"`
}

func (x *PlaceBetParlayTxns) Reset() {
	*x = PlaceBetParlayTxns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetParlayTxns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetParlayTxns) ProtoMessage() {}

func (x *PlaceBetParlayTxns) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetParlayTxns.ProtoReflect.Descriptor instead.
func (*PlaceBetParlayTxns) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{201}
}

func (x *PlaceBetParlayTxns) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *PlaceBetParlayTxns) GetParlayType() string {
	if x != nil {
		return x.ParlayType
	}
	return ""
}

func (x *PlaceBetParlayTxns) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *PlaceBetParlayTxns) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *PlaceBetParlayTxns) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *PlaceBetParlayTxns) GetDetail() []*PlaceBetParlayDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *PlaceBetParlayTxns) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

type Cq9RollinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account    string  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime  string  `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Gamehall   string  `protobuf:"bytes,4,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode   string  `protobuf:"bytes,5,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid    string  `protobuf:"bytes,6,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Validbet   float32 `protobuf:"fixed32,7,opt,name=validbet,proto3" json:"validbet,omitempty"`
	Bet        float32 `protobuf:"fixed32,8,opt,name=bet,proto3" json:"bet,omitempty"`
	Win        float32 `protobuf:"fixed32,9,opt,name=win,proto3" json:"win,omitempty"`
	Roomfee    float32 `protobuf:"fixed32,10,opt,name=roomfee,proto3" json:"roomfee,omitempty"`
	Amount     float32 `protobuf:"fixed32,11,opt,name=amount,proto3" json:"amount,omitempty"`
	Mtcode     string  `protobuf:"bytes,12,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	CreateTime string  `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Rake       float32 `protobuf:"fixed32,14,opt,name=rake,proto3" json:"rake,omitempty"`
	Gametype   string  `protobuf:"bytes,15,opt,name=gametype,proto3" json:"gametype,omitempty"`
	Json       string  `protobuf:"bytes,16,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Cq9RollinReq) Reset() {
	*x = Cq9RollinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RollinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RollinReq) ProtoMessage() {}

func (x *Cq9RollinReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RollinReq.ProtoReflect.Descriptor instead.
func (*Cq9RollinReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{202}
}

func (x *Cq9RollinReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9RollinReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9RollinReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9RollinReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9RollinReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9RollinReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9RollinReq) GetValidbet() float32 {
	if x != nil {
		return x.Validbet
	}
	return 0
}

func (x *Cq9RollinReq) GetBet() float32 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *Cq9RollinReq) GetWin() float32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *Cq9RollinReq) GetRoomfee() float32 {
	if x != nil {
		return x.Roomfee
	}
	return 0
}

func (x *Cq9RollinReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Cq9RollinReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9RollinReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Cq9RollinReq) GetRake() float32 {
	if x != nil {
		return x.Rake
	}
	return 0
}

func (x *Cq9RollinReq) GetGametype() string {
	if x != nil {
		return x.Gametype
	}
	return ""
}

func (x *Cq9RollinReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// PpBonusWin-请求
type PpBonusWinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Amount     string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Reference  string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	ProviderId string `protobuf:"bytes,5,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Timestamp  int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PpBonusWinReq) Reset() {
	*x = PpBonusWinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpBonusWinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpBonusWinReq) ProtoMessage() {}

func (x *PpBonusWinReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpBonusWinReq.ProtoReflect.Descriptor instead.
func (*PpBonusWinReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{203}
}

func (x *PpBonusWinReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpBonusWinReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpBonusWinReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PpBonusWinReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PpBonusWinReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *PpBonusWinReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// PpBonusWin-响应
type PpBonusWinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Cash          string `protobuf:"bytes,3,opt,name=cash,proto3" json:"cash,omitempty"`
	Bonus         string `protobuf:"bytes,4,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Error         int64  `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PpBonusWinResp) Reset() {
	*x = PpBonusWinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpBonusWinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpBonusWinResp) ProtoMessage() {}

func (x *PpBonusWinResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpBonusWinResp.ProtoReflect.Descriptor instead.
func (*PpBonusWinResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{204}
}

func (x *PpBonusWinResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PpBonusWinResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PpBonusWinResp) GetCash() string {
	if x != nil {
		return x.Cash
	}
	return ""
}

func (x *PpBonusWinResp) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *PpBonusWinResp) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *PpBonusWinResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 定义取消下注接口输入输出
type CancelBetTxnsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string  `protobuf:"bytes,1,opt,name=RefId,proto3" json:"RefId,omitempty"`
	CreditAmount float64 `protobuf:"fixed64,2,opt,name=CreditAmount,proto3" json:"CreditAmount,omitempty"`
	DebitAmount  float64 `protobuf:"fixed64,3,opt,name=DebitAmount,proto3" json:"DebitAmount,omitempty"`
}

func (x *CancelBetTxnsMessage) Reset() {
	*x = CancelBetTxnsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBetTxnsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBetTxnsMessage) ProtoMessage() {}

func (x *CancelBetTxnsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBetTxnsMessage.ProtoReflect.Descriptor instead.
func (*CancelBetTxnsMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{205}
}

func (x *CancelBetTxnsMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *CancelBetTxnsMessage) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *CancelBetTxnsMessage) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

type PlaceConfirmBetParlayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          string                               `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	UserId          string                               `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OperationId     string                               `protobuf:"bytes,3,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
	UpdateTime      string                               `protobuf:"bytes,4,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	CreditAmount    float64                              `protobuf:"fixed64,5,opt,name=CreditAmount,proto3" json:"CreditAmount,omitempty"`
	DebitAmount     float64                              `protobuf:"fixed64,6,opt,name=DebitAmount,proto3" json:"DebitAmount,omitempty"`
	Txns            []*PlaceConfirmBetParlayTxns         `protobuf:"bytes,7,rep,name=Txns,proto3" json:"Txns,omitempty"`
	TicketDetail    []*PlaceConfirmBetParlayTicketDetail `protobuf:"bytes,8,rep,name=TicketDetail,proto3" json:"TicketDetail,omitempty"`
	TransactionTime string                               `protobuf:"bytes,9,opt,name=TransactionTime,proto3" json:"TransactionTime,omitempty"`
}

func (x *PlaceConfirmBetParlayMessage) Reset() {
	*x = PlaceConfirmBetParlayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceConfirmBetParlayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceConfirmBetParlayMessage) ProtoMessage() {}

func (x *PlaceConfirmBetParlayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceConfirmBetParlayMessage.ProtoReflect.Descriptor instead.
func (*PlaceConfirmBetParlayMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{206}
}

func (x *PlaceConfirmBetParlayMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlaceConfirmBetParlayMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlaceConfirmBetParlayMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *PlaceConfirmBetParlayMessage) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PlaceConfirmBetParlayMessage) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *PlaceConfirmBetParlayMessage) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *PlaceConfirmBetParlayMessage) GetTxns() []*PlaceConfirmBetParlayTxns {
	if x != nil {
		return x.Txns
	}
	return nil
}

func (x *PlaceConfirmBetParlayMessage) GetTicketDetail() []*PlaceConfirmBetParlayTicketDetail {
	if x != nil {
		return x.TicketDetail
	}
	return nil
}

func (x *PlaceConfirmBetParlayMessage) GetTransactionTime() string {
	if x != nil {
		return x.TransactionTime
	}
	return ""
}

type BetByBetslip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp       int64        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PlayerId        string       `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId      string       `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId string       `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId     string       `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Currency        string       `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Type            string       `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Sum             uint32       `protobuf:"varint,9,opt,name=sum,proto3" json:"sum,omitempty"`
	K               string       `protobuf:"bytes,10,opt,name=k,proto3" json:"k,omitempty"`
	IsQuickBet      bool         `protobuf:"varint,11,opt,name=is_quick_bet,json=isQuickBet,proto3" json:"is_quick_bet,omitempty"`
	Bets            []*BetByBets `protobuf:"bytes,12,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *BetByBetslip) Reset() {
	*x = BetByBetslip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetslip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetslip) ProtoMessage() {}

func (x *BetByBetslip) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetslip.ProtoReflect.Descriptor instead.
func (*BetByBetslip) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{207}
}

func (x *BetByBetslip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBetslip) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetByBetslip) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetByBetslip) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetByBetslip) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetByBetslip) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetByBetslip) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetslip) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BetByBetslip) GetSum() uint32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *BetByBetslip) GetK() string {
	if x != nil {
		return x.K
	}
	return ""
}

func (x *BetByBetslip) GetIsQuickBet() bool {
	if x != nil {
		return x.IsQuickBet
	}
	return false
}

func (x *BetByBetslip) GetBets() []*BetByBets {
	if x != nil {
		return x.Bets
	}
	return nil
}

type BetByBetSettlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BetTransactionId string `protobuf:"bytes,2,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`
}

func (x *BetByBetSettlementRequest) Reset() {
	*x = BetByBetSettlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetSettlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetSettlementRequest) ProtoMessage() {}

func (x *BetByBetSettlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetSettlementRequest.ProtoReflect.Descriptor instead.
func (*BetByBetSettlementRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{208}
}

func (x *BetByBetSettlementRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BetByBetSettlementRequest) GetBetTransactionId() string {
	if x != nil {
		return x.BetTransactionId
	}
	return ""
}

type Cq9PayoffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account   string  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime string  `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Amount    float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Mtcode    string  `protobuf:"bytes,5,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Promoid   string  `protobuf:"bytes,6,opt,name=promoid,proto3" json:"promoid,omitempty"`
	Remark    string  `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	Json      string  `protobuf:"bytes,9,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Cq9PayoffReq) Reset() {
	*x = Cq9PayoffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9PayoffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9PayoffReq) ProtoMessage() {}

func (x *Cq9PayoffReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9PayoffReq.ProtoReflect.Descriptor instead.
func (*Cq9PayoffReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{209}
}

func (x *Cq9PayoffReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9PayoffReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9PayoffReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9PayoffReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Cq9PayoffReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9PayoffReq) GetPromoid() string {
	if x != nil {
		return x.Promoid
	}
	return ""
}

func (x *Cq9PayoffReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Cq9PayoffReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type HabaFundtransferrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                  string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Partnermeta            string            `protobuf:"bytes,2,opt,name=partnermeta,proto3" json:"partnermeta,omitempty"`
	Accountid              string            `protobuf:"bytes,3,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Customplayertype       uint32            `protobuf:"varint,4,opt,name=customplayertype,proto3" json:"customplayertype,omitempty"`
	Gameinstanceid         string            `protobuf:"bytes,5,opt,name=gameinstanceid,proto3" json:"gameinstanceid,omitempty"`
	Friendlygameinstanceid uint32            `protobuf:"varint,6,opt,name=friendlygameinstanceid,proto3" json:"friendlygameinstanceid,omitempty"`
	Isretry                bool              `protobuf:"varint,7,opt,name=isretry,proto3" json:"isretry,omitempty"`
	Retrycount             uint32            `protobuf:"varint,8,opt,name=retrycount,proto3" json:"retrycount,omitempty"`
	Isrefund               bool              `protobuf:"varint,9,opt,name=isrefund,proto3" json:"isrefund,omitempty"`
	Isrecredit             bool              `protobuf:"varint,10,opt,name=isrecredit,proto3" json:"isrecredit,omitempty"`
	Funds                  *HabaFunds        `protobuf:"bytes,11,opt,name=funds,proto3" json:"funds,omitempty"`
	Gamedetails            *HabaGamedetails  `protobuf:"bytes,12,opt,name=gamedetails,proto3" json:"gamedetails,omitempty"`
	Bonusdetails           *HabaBonusdetails `protobuf:"bytes,13,opt,name=bonusdetails,proto3" json:"bonusdetails,omitempty"`
}

func (x *HabaFundtransferrequest) Reset() {
	*x = HabaFundtransferrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaFundtransferrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaFundtransferrequest) ProtoMessage() {}

func (x *HabaFundtransferrequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaFundtransferrequest.ProtoReflect.Descriptor instead.
func (*HabaFundtransferrequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{210}
}

func (x *HabaFundtransferrequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HabaFundtransferrequest) GetPartnermeta() string {
	if x != nil {
		return x.Partnermeta
	}
	return ""
}

func (x *HabaFundtransferrequest) GetAccountid() string {
	if x != nil {
		return x.Accountid
	}
	return ""
}

func (x *HabaFundtransferrequest) GetCustomplayertype() uint32 {
	if x != nil {
		return x.Customplayertype
	}
	return 0
}

func (x *HabaFundtransferrequest) GetGameinstanceid() string {
	if x != nil {
		return x.Gameinstanceid
	}
	return ""
}

func (x *HabaFundtransferrequest) GetFriendlygameinstanceid() uint32 {
	if x != nil {
		return x.Friendlygameinstanceid
	}
	return 0
}

func (x *HabaFundtransferrequest) GetIsretry() bool {
	if x != nil {
		return x.Isretry
	}
	return false
}

func (x *HabaFundtransferrequest) GetRetrycount() uint32 {
	if x != nil {
		return x.Retrycount
	}
	return 0
}

func (x *HabaFundtransferrequest) GetIsrefund() bool {
	if x != nil {
		return x.Isrefund
	}
	return false
}

func (x *HabaFundtransferrequest) GetIsrecredit() bool {
	if x != nil {
		return x.Isrecredit
	}
	return false
}

func (x *HabaFundtransferrequest) GetFunds() *HabaFunds {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *HabaFundtransferrequest) GetGamedetails() *HabaGamedetails {
	if x != nil {
		return x.Gamedetails
	}
	return nil
}

func (x *HabaFundtransferrequest) GetBonusdetails() *HabaBonusdetails {
	if x != nil {
		return x.Bonusdetails
	}
	return nil
}

// 定义查询余额接口的输入输出
type SabaGetBalanceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SabaGetBalanceMessage) Reset() {
	*x = SabaGetBalanceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaGetBalanceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaGetBalanceMessage) ProtoMessage() {}

func (x *SabaGetBalanceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaGetBalanceMessage.ProtoReflect.Descriptor instead.
func (*SabaGetBalanceMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{211}
}

func (x *SabaGetBalanceMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaGetBalanceMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SabaPlaceBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaPlaceBetMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaPlaceBetReq) Reset() {
	*x = SabaPlaceBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetReq) ProtoMessage() {}

func (x *SabaPlaceBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetReq.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{212}
}

func (x *SabaPlaceBetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaPlaceBetReq) GetMessage() *SabaPlaceBetMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type CancelBetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      string                  `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	OperationId string                  `protobuf:"bytes,2,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
	UserId      string                  `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UpdateTime  string                  `protobuf:"bytes,4,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	Txns        []*CancelBetTxnsMessage `protobuf:"bytes,5,rep,name=Txns,proto3" json:"Txns,omitempty"`
}

func (x *CancelBetMessage) Reset() {
	*x = CancelBetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBetMessage) ProtoMessage() {}

func (x *CancelBetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBetMessage.ProtoReflect.Descriptor instead.
func (*CancelBetMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{213}
}

func (x *CancelBetMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CancelBetMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *CancelBetMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelBetMessage) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CancelBetMessage) GetTxns() []*CancelBetTxnsMessage {
	if x != nil {
		return x.Txns
	}
	return nil
}

type Cq9DebitRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9DebitRes) Reset() {
	*x = Cq9DebitRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9DebitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9DebitRes) ProtoMessage() {}

func (x *Cq9DebitRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9DebitRes.ProtoReflect.Descriptor instead.
func (*Cq9DebitRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{214}
}

func (x *Cq9DebitRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9DebitRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9DebitRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9DebitRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9DebitRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

// ping
type PinnaclePingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnaclePingReq) Reset() {
	*x = PinnaclePingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnaclePingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnaclePingReq) ProtoMessage() {}

func (x *PinnaclePingReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnaclePingReq.ProtoReflect.Descriptor instead.
func (*PinnaclePingReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{215}
}

func (x *PinnaclePingReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type SabaGetBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Balance   float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	BalanceTs string  `protobuf:"bytes,3,opt,name=balanceTs,proto3" json:"balanceTs,omitempty"`
	Status    string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Msg       string  `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaGetBalanceResp) Reset() {
	*x = SabaGetBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaGetBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaGetBalanceResp) ProtoMessage() {}

func (x *SabaGetBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaGetBalanceResp.ProtoReflect.Descriptor instead.
func (*SabaGetBalanceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{216}
}

func (x *SabaGetBalanceResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaGetBalanceResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SabaGetBalanceResp) GetBalanceTs() string {
	if x != nil {
		return x.BalanceTs
	}
	return ""
}

func (x *SabaGetBalanceResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaGetBalanceResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 调整余额输入输出定义
type AdjustBalanceBalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditAmount float64 `protobuf:"fixed64,1,opt,name=CreditAmount,proto3" json:"CreditAmount,omitempty"`
	DebitAmount  float64 `protobuf:"fixed64,2,opt,name=DebitAmount,proto3" json:"DebitAmount,omitempty"`
}

func (x *AdjustBalanceBalanceInfo) Reset() {
	*x = AdjustBalanceBalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustBalanceBalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustBalanceBalanceInfo) ProtoMessage() {}

func (x *AdjustBalanceBalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustBalanceBalanceInfo.ProtoReflect.Descriptor instead.
func (*AdjustBalanceBalanceInfo) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{217}
}

func (x *AdjustBalanceBalanceInfo) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *AdjustBalanceBalanceInfo) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

type AgQJCusTransResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Body    *AgQJCusTransBody `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AgQJCusTransResponse) Reset() {
	*x = AgQJCusTransResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJCusTransResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJCusTransResponse) ProtoMessage() {}

func (x *AgQJCusTransResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJCusTransResponse.ProtoReflect.Descriptor instead.
func (*AgQJCusTransResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{218}
}

func (x *AgQJCusTransResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AgQJCusTransResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgQJCusTransResponse) GetBody() *AgQJCusTransBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type BoomingCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     string  `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	PlayerId      string  `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Round         int64   `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Type          string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Debit         float32 `protobuf:"fixed32,5,opt,name=debit,proto3" json:"debit,omitempty"`
	Credit        float32 `protobuf:"fixed32,6,opt,name=credit,proto3" json:"credit,omitempty"`
	RootSessionId string  `protobuf:"bytes,7,opt,name=rootSessionId,proto3" json:"rootSessionId,omitempty"`
	RootRound     int64   `protobuf:"varint,8,opt,name=rootRound,proto3" json:"rootRound,omitempty"`
	Ends          bool    `protobuf:"varint,9,opt,name=ends,proto3" json:"ends,omitempty"`
	IsRollback    bool    `protobuf:"varint,10,opt,name=isRollback,proto3" json:"isRollback,omitempty"`
	ReqJson       string  `protobuf:"bytes,11,opt,name=reqJson,proto3" json:"reqJson,omitempty"`
	CallbackBody  string  `protobuf:"bytes,12,opt,name=callbackBody,proto3" json:"callbackBody,omitempty"`
	BgSignature   string  `protobuf:"bytes,13,opt,name=bgSignature,proto3" json:"bgSignature,omitempty"`
	BgNonce       string  `protobuf:"bytes,14,opt,name=bgNonce,proto3" json:"bgNonce,omitempty"`
}

func (x *BoomingCallbackReq) Reset() {
	*x = BoomingCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoomingCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoomingCallbackReq) ProtoMessage() {}

func (x *BoomingCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoomingCallbackReq.ProtoReflect.Descriptor instead.
func (*BoomingCallbackReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{219}
}

func (x *BoomingCallbackReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BoomingCallbackReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BoomingCallbackReq) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *BoomingCallbackReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BoomingCallbackReq) GetDebit() float32 {
	if x != nil {
		return x.Debit
	}
	return 0
}

func (x *BoomingCallbackReq) GetCredit() float32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *BoomingCallbackReq) GetRootSessionId() string {
	if x != nil {
		return x.RootSessionId
	}
	return ""
}

func (x *BoomingCallbackReq) GetRootRound() int64 {
	if x != nil {
		return x.RootRound
	}
	return 0
}

func (x *BoomingCallbackReq) GetEnds() bool {
	if x != nil {
		return x.Ends
	}
	return false
}

func (x *BoomingCallbackReq) GetIsRollback() bool {
	if x != nil {
		return x.IsRollback
	}
	return false
}

func (x *BoomingCallbackReq) GetReqJson() string {
	if x != nil {
		return x.ReqJson
	}
	return ""
}

func (x *BoomingCallbackReq) GetCallbackBody() string {
	if x != nil {
		return x.CallbackBody
	}
	return ""
}

func (x *BoomingCallbackReq) GetBgSignature() string {
	if x != nil {
		return x.BgSignature
	}
	return ""
}

func (x *BoomingCallbackReq) GetBgNonce() string {
	if x != nil {
		return x.BgNonce
	}
	return ""
}

// 认证
type AuthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Step        int32  `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *AuthReq) Reset() {
	*x = AuthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthReq) ProtoMessage() {}

func (x *AuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthReq.ProtoReflect.Descriptor instead.
func (*AuthReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{220}
}

func (x *AuthReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AuthReq) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

//	message AgQJPlayerTransferRequestBak{
//	  string reqId = 1; // 请求唯一性序列号
//	  string timestamp = 2; // 时间戳(毫秒)
//	  string session = 3; // 用户进厅的session
//	  string platformSession = 4; // 厅方唯一ID
//	  string agentCode = 5; // 代理线名称
//	  int32  agentType = 6; // 0: 真钱 1：试玩
//	  string agent = 7; // 代理线名称
//	  string productId = 8; // 产品ID
//	  string userName = 9; // 用户名
//	  string loginName = 10; // 唯一登录名称：productId+userName
//	  string password = 11; // 用户密码
//	  string currency = 12; // 货币类型
//	  string subCurrency = 13; // 子盘口类型，用于匹配多货币接入的盘口类型
//	  string platformType = 14; // 平台类型
//	  string transAmount = 15; // 转账类型
//	  string transferType = 16; // 转账总额度[大于等于0 ]
//	  double amount = 17; // 转账金额
//	  string transAction = 18; // 转账类型
//	  string transCode = 19; // 交易代码 交易码(交易备注信息)
//	  string rollbackReqId = 20; // 回滚请求ID
//	  string betNo = 21; // 注单号,同一局里两次同一位置(playtype)只会产生同一組 billno, 不同的playtype产生不同的billNo
//	  string gameType = 22; // 游戏类型
//	  string gmCode = 23; // 游戏局号
//	  string tableCode = 24; // 台号
//	  string vid = 25; // 视频ID
//	  int32 playType = 26; // 玩家下注的玩法
//	  string billTime = 27; // 玩家下注【美东】 时间戳(单位:秒)
//	  string reckonTime = 28; // 结算时间【美东】 时间戳(单位:秒)
//	  double account = 29; // 当前下注额度（> 0）
//	  double totalAccount = 30; // 累计下注额度(注单合并时的累计额度)
//	  double validAcount = 31; // 有效投注额度（>=0）
//	  double cusAcount = 32; // 派彩额度（正负或0）
//	  string gameResult = 33; // 游戏结果
//	  int32 deviceType = 34; // 客户端终端类型
//	  string realGmType = 35; // 真实的游戏类型，比如gametype=LINK时，该值可能为BAC或SBAC
//	  string anchorId = 36; // 针对跟随主播下注时，该字段有效
//	  string ip = 37; // 客户IP
//	  int32 seat = 38; // 玩家座位号
//	  string remark = 39; // 备注信息
//	  int32 flag = 40; // 0 未结算 1 已结算 -2 注单异常 -8 已取消
//
// }
type AgQJPlayerTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	AnchorID     string `protobuf:"bytes,2,opt,name=anchorID,proto3" json:"anchorID,omitempty"`
	BillNo       string `protobuf:"bytes,3,opt,name=billNo,proto3" json:"billNo,omitempty"`
	BillTime     string `protobuf:"bytes,4,opt,name=billTime,proto3" json:"billTime,omitempty"`
	CusAcount    string `protobuf:"bytes,5,opt,name=cusAcount,proto3" json:"cusAcount,omitempty"`
	DeviceType   uint32 `protobuf:"varint,6,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Flag         uint32 `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	GameType     string `protobuf:"bytes,8,opt,name=gameType,proto3" json:"gameType,omitempty"`
	GmCode       string `protobuf:"bytes,9,opt,name=gmCode,proto3" json:"gmCode,omitempty"`
	Ip           string `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`
	PlayType     uint32 `protobuf:"varint,11,opt,name=playType,proto3" json:"playType,omitempty"`
	RealGmType   string `protobuf:"bytes,12,opt,name=realGmType,proto3" json:"realGmType,omitempty"`
	ReckonTime   string `protobuf:"bytes,13,opt,name=reckonTime,proto3" json:"reckonTime,omitempty"`
	Remark       string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	Seat         uint32 `protobuf:"varint,15,opt,name=seat,proto3" json:"seat,omitempty"`
	TableCode    string `protobuf:"bytes,16,opt,name=tableCode,proto3" json:"tableCode,omitempty"`
	TotalAccount string `protobuf:"bytes,17,opt,name=totalAccount,proto3" json:"totalAccount,omitempty"`
	ValidAcount  string `protobuf:"bytes,18,opt,name=validAcount,proto3" json:"validAcount,omitempty"`
	Vid          string `protobuf:"bytes,19,opt,name=vid,proto3" json:"vid,omitempty"`
}

func (x *AgQJPlayerTransfers) Reset() {
	*x = AgQJPlayerTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJPlayerTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJPlayerTransfers) ProtoMessage() {}

func (x *AgQJPlayerTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJPlayerTransfers.ProtoReflect.Descriptor instead.
func (*AgQJPlayerTransfers) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{221}
}

func (x *AgQJPlayerTransfers) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetAnchorID() string {
	if x != nil {
		return x.AnchorID
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetBillNo() string {
	if x != nil {
		return x.BillNo
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetBillTime() string {
	if x != nil {
		return x.BillTime
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetCusAcount() string {
	if x != nil {
		return x.CusAcount
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetDeviceType() uint32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *AgQJPlayerTransfers) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *AgQJPlayerTransfers) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetGmCode() string {
	if x != nil {
		return x.GmCode
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetPlayType() uint32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *AgQJPlayerTransfers) GetRealGmType() string {
	if x != nil {
		return x.RealGmType
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetReckonTime() string {
	if x != nil {
		return x.ReckonTime
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *AgQJPlayerTransfers) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetTotalAccount() string {
	if x != nil {
		return x.TotalAccount
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetValidAcount() string {
	if x != nil {
		return x.ValidAcount
	}
	return ""
}

func (x *AgQJPlayerTransfers) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

type HabaGamedetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Keyname                string `protobuf:"bytes,2,opt,name=keyname,proto3" json:"keyname,omitempty"`
	Gametypeid             uint32 `protobuf:"varint,3,opt,name=gametypeid,proto3" json:"gametypeid,omitempty"`
	Gametypename           string `protobuf:"bytes,4,opt,name=gametypename,proto3" json:"gametypename,omitempty"`
	Brandgameid            string `protobuf:"bytes,5,opt,name=brandgameid,proto3" json:"brandgameid,omitempty"`
	Gamesessionid          string `protobuf:"bytes,6,opt,name=gamesessionid,proto3" json:"gamesessionid,omitempty"`
	Gameinstanceid         string `protobuf:"bytes,7,opt,name=gameinstanceid,proto3" json:"gameinstanceid,omitempty"`
	Friendlygameinstanceid uint32 `protobuf:"varint,8,opt,name=friendlygameinstanceid,proto3" json:"friendlygameinstanceid,omitempty"`
	Channel                uint32 `protobuf:"varint,9,opt,name=channel,proto3" json:"channel,omitempty"`
	Device                 string `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`
	Browser                string `protobuf:"bytes,11,opt,name=browser,proto3" json:"browser,omitempty"`
}

func (x *HabaGamedetails) Reset() {
	*x = HabaGamedetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaGamedetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaGamedetails) ProtoMessage() {}

func (x *HabaGamedetails) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaGamedetails.ProtoReflect.Descriptor instead.
func (*HabaGamedetails) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{222}
}

func (x *HabaGamedetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HabaGamedetails) GetKeyname() string {
	if x != nil {
		return x.Keyname
	}
	return ""
}

func (x *HabaGamedetails) GetGametypeid() uint32 {
	if x != nil {
		return x.Gametypeid
	}
	return 0
}

func (x *HabaGamedetails) GetGametypename() string {
	if x != nil {
		return x.Gametypename
	}
	return ""
}

func (x *HabaGamedetails) GetBrandgameid() string {
	if x != nil {
		return x.Brandgameid
	}
	return ""
}

func (x *HabaGamedetails) GetGamesessionid() string {
	if x != nil {
		return x.Gamesessionid
	}
	return ""
}

func (x *HabaGamedetails) GetGameinstanceid() string {
	if x != nil {
		return x.Gameinstanceid
	}
	return ""
}

func (x *HabaGamedetails) GetFriendlygameinstanceid() uint32 {
	if x != nil {
		return x.Friendlygameinstanceid
	}
	return 0
}

func (x *HabaGamedetails) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *HabaGamedetails) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *HabaGamedetails) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

type TpgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username       string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	TransactionId  string   `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionIds []string `protobuf:"bytes,4,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
	ActionType     string   `protobuf:"bytes,5,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	GameType       int64    `protobuf:"varint,6,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	GameTheme      int64    `protobuf:"varint,7,opt,name=game_theme,json=gameTheme,proto3" json:"game_theme,omitempty"`
	RequestId      string   `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Amount         float64  `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason         string   `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	JackpotPayout  float64  `protobuf:"fixed64,11,opt,name=jackpot_payout,json=jackpotPayout,proto3" json:"jackpot_payout,omitempty"`
	DeductAmount   float64  `protobuf:"fixed64,12,opt,name=deduct_amount,json=deductAmount,proto3" json:"deduct_amount,omitempty"`
	DeductReason   string   `protobuf:"bytes,13,opt,name=deduct_reason,json=deductReason,proto3" json:"deduct_reason,omitempty"`
	PayoutAmount   float64  `protobuf:"fixed64,14,opt,name=payout_amount,json=payoutAmount,proto3" json:"payout_amount,omitempty"`
	PayoutReason   string   `protobuf:"bytes,15,opt,name=payout_reason,json=payoutReason,proto3" json:"payout_reason,omitempty"`
}

func (x *TpgReq) Reset() {
	*x = TpgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpgReq) ProtoMessage() {}

func (x *TpgReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpgReq.ProtoReflect.Descriptor instead.
func (*TpgReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{223}
}

func (x *TpgReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TpgReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TpgReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TpgReq) GetTransactionIds() []string {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

func (x *TpgReq) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *TpgReq) GetGameType() int64 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TpgReq) GetGameTheme() int64 {
	if x != nil {
		return x.GameTheme
	}
	return 0
}

func (x *TpgReq) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TpgReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TpgReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TpgReq) GetJackpotPayout() float64 {
	if x != nil {
		return x.JackpotPayout
	}
	return 0
}

func (x *TpgReq) GetDeductAmount() float64 {
	if x != nil {
		return x.DeductAmount
	}
	return 0
}

func (x *TpgReq) GetDeductReason() string {
	if x != nil {
		return x.DeductReason
	}
	return ""
}

func (x *TpgReq) GetPayoutAmount() float64 {
	if x != nil {
		return x.PayoutAmount
	}
	return 0
}

func (x *TpgReq) GetPayoutReason() string {
	if x != nil {
		return x.PayoutReason
	}
	return ""
}

type SabaSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SettleMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaSettleReq) Reset() {
	*x = SabaSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaSettleReq) ProtoMessage() {}

func (x *SabaSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaSettleReq.ProtoReflect.Descriptor instead.
func (*SabaSettleReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{224}
}

func (x *SabaSettleReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaSettleReq) GetMessage() *SettleMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaSettleentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SettleentMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaSettleentReq) Reset() {
	*x = SabaSettleentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaSettleentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaSettleentReq) ProtoMessage() {}

func (x *SabaSettleentReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaSettleentReq.ProtoReflect.Descriptor instead.
func (*SabaSettleentReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{225}
}

func (x *SabaSettleentReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaSettleentReq) GetMessage() *SettleentMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaGetTicketInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaGetTicketInfoMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaGetTicketInfoReq) Reset() {
	*x = SabaGetTicketInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaGetTicketInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaGetTicketInfoReq) ProtoMessage() {}

func (x *SabaGetTicketInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaGetTicketInfoReq.ProtoReflect.Descriptor instead.
func (*SabaGetTicketInfoReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{226}
}

func (x *SabaGetTicketInfoReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaGetTicketInfoReq) GetMessage() *SabaGetTicketInfoMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SabaGetTicketInfoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	RefId  string `protobuf:"bytes,3,opt,name=refId,proto3" json:"refId,omitempty"`
}

func (x *SabaGetTicketInfoMessage) Reset() {
	*x = SabaGetTicketInfoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaGetTicketInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaGetTicketInfoMessage) ProtoMessage() {}

func (x *SabaGetTicketInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaGetTicketInfoMessage.ProtoReflect.Descriptor instead.
func (*SabaGetTicketInfoMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{227}
}

func (x *SabaGetTicketInfoMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaGetTicketInfoMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaGetTicketInfoMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

type SabaUnsettleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaUnsettleResp) Reset() {
	*x = SabaUnsettleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaUnsettleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaUnsettleResp) ProtoMessage() {}

func (x *SabaUnsettleResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaUnsettleResp.ProtoReflect.Descriptor instead.
func (*SabaUnsettleResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{228}
}

func (x *SabaUnsettleResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaUnsettleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BetRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtTransactionId    string `protobuf:"bytes,2,opt,name=ext_transaction_id,json=extTransactionId,proto3" json:"ext_transaction_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,3,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation           string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Amount              uint32 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance             uint32 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetRefundResponse) Reset() {
	*x = BetRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRefundResponse) ProtoMessage() {}

func (x *BetRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRefundResponse.ProtoReflect.Descriptor instead.
func (*BetRefundResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{229}
}

func (x *BetRefundResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetRefundResponse) GetExtTransactionId() string {
	if x != nil {
		return x.ExtTransactionId
	}
	return ""
}

func (x *BetRefundResponse) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetRefundResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetRefundResponse) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetRefundResponse) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetRefundResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetRefundResponse) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type EvoPromoPayoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken        string               `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	Sid              string               `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	UserId           string               `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Currency         string               `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Game             *EvoGame             `protobuf:"bytes,5,opt,name=game,proto3" json:"game,omitempty"`
	PromoTransaction *EvoPromoTransaction `protobuf:"bytes,6,opt,name=promoTransaction,proto3" json:"promoTransaction,omitempty"`
	Uuid             string               `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *EvoPromoPayoutReq) Reset() {
	*x = EvoPromoPayoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoPromoPayoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoPromoPayoutReq) ProtoMessage() {}

func (x *EvoPromoPayoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoPromoPayoutReq.ProtoReflect.Descriptor instead.
func (*EvoPromoPayoutReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{230}
}

func (x *EvoPromoPayoutReq) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *EvoPromoPayoutReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *EvoPromoPayoutReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvoPromoPayoutReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EvoPromoPayoutReq) GetGame() *EvoGame {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *EvoPromoPayoutReq) GetPromoTransaction() *EvoPromoTransaction {
	if x != nil {
		return x.PromoTransaction
	}
	return nil
}

func (x *EvoPromoPayoutReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 离开（注销）
type LogOutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	GameId      string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SubgameId   string `protobuf:"bytes,3,opt,name=subgame_id,json=subgameId,proto3" json:"subgame_id,omitempty"`
}

func (x *LogOutReq) Reset() {
	*x = LogOutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogOutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOutReq) ProtoMessage() {}

func (x *LogOutReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOutReq.ProtoReflect.Descriptor instead.
func (*LogOutReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{231}
}

func (x *LogOutReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LogOutReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *LogOutReq) GetSubgameId() string {
	if x != nil {
		return x.SubgameId
	}
	return ""
}

type LivePostTransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record []*LivePostTransferItem `protobuf:"bytes,1,rep,name=Record,proto3" json:"Record,omitempty"`
}

func (x *LivePostTransferData) Reset() {
	*x = LivePostTransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePostTransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePostTransferData) ProtoMessage() {}

func (x *LivePostTransferData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePostTransferData.ProtoReflect.Descriptor instead.
func (*LivePostTransferData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{232}
}

func (x *LivePostTransferData) GetRecord() []*LivePostTransferItem {
	if x != nil {
		return x.Record
	}
	return nil
}

type AgQJgetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId           string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Timestamp       string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Session         string `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	PlatformSession string `protobuf:"bytes,4,opt,name=platformSession,proto3" json:"platformSession,omitempty"`
	ProductId       string `protobuf:"bytes,5,opt,name=productId,proto3" json:"productId,omitempty"`
	UserName        string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	LoginName       string `protobuf:"bytes,7,opt,name=loginName,proto3" json:"loginName,omitempty"`
	Password        string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	Currency        string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	SubCurrency     string `protobuf:"bytes,10,opt,name=subCurrency,proto3" json:"subCurrency,omitempty"`
	AgentType       int32  `protobuf:"varint,11,opt,name=agentType,proto3" json:"agentType,omitempty"`
	Agent           string `protobuf:"bytes,12,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *AgQJgetBalanceRequest) Reset() {
	*x = AgQJgetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJgetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJgetBalanceRequest) ProtoMessage() {}

func (x *AgQJgetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJgetBalanceRequest.ProtoReflect.Descriptor instead.
func (*AgQJgetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{233}
}

func (x *AgQJgetBalanceRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetPlatformSession() string {
	if x != nil {
		return x.PlatformSession
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetSubCurrency() string {
	if x != nil {
		return x.SubCurrency
	}
	return ""
}

func (x *AgQJgetBalanceRequest) GetAgentType() int32 {
	if x != nil {
		return x.AgentType
	}
	return 0
}

func (x *AgQJgetBalanceRequest) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

type BetWinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount               uint32             `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency             string             `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	IsCashout            bool               `protobuf:"varint,3,opt,name=is_cashout,json=isCashout,proto3" json:"is_cashout,omitempty"`
	BetTransactionId     uint64             `protobuf:"varint,4,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`
	Transaction          *BetWinTransaction `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
	IsSnrLost            bool               `protobuf:"varint,6,opt,name=is_snr_lost,json=isSnrLost,proto3" json:"is_snr_lost,omitempty"`
	Selections           []*Selections      `protobuf:"bytes,7,rep,name=selections,proto3" json:"selections,omitempty"`
	Odds                 string             `protobuf:"bytes,8,opt,name=odds,proto3" json:"odds,omitempty"`
	BonusId              string             `protobuf:"bytes,9,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	BonusType            string             `protobuf:"bytes,10,opt,name=bonus_type,json=bonusType,proto3" json:"bonus_type,omitempty"`
	ComboboostMultiplier string             `protobuf:"bytes,11,opt,name=comboboost_multiplier,json=comboboostMultiplier,proto3" json:"comboboost_multiplier,omitempty"`
}

func (x *BetWinRequest) Reset() {
	*x = BetWinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetWinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetWinRequest) ProtoMessage() {}

func (x *BetWinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetWinRequest.ProtoReflect.Descriptor instead.
func (*BetWinRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{234}
}

func (x *BetWinRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetWinRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetWinRequest) GetIsCashout() bool {
	if x != nil {
		return x.IsCashout
	}
	return false
}

func (x *BetWinRequest) GetBetTransactionId() uint64 {
	if x != nil {
		return x.BetTransactionId
	}
	return 0
}

func (x *BetWinRequest) GetTransaction() *BetWinTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *BetWinRequest) GetIsSnrLost() bool {
	if x != nil {
		return x.IsSnrLost
	}
	return false
}

func (x *BetWinRequest) GetSelections() []*Selections {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *BetWinRequest) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *BetWinRequest) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetWinRequest) GetBonusType() string {
	if x != nil {
		return x.BonusType
	}
	return ""
}

func (x *BetWinRequest) GetComboboostMultiplier() string {
	if x != nil {
		return x.ComboboostMultiplier
	}
	return ""
}

type BetByBetRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTransactionId string                     `protobuf:"bytes,1,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`
	Reason           string                     `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	BonusId          string                     `protobuf:"bytes,3,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	Transaction      *BetByBetRefundTransaction `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *BetByBetRefundRequest) Reset() {
	*x = BetByBetRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetRefundRequest) ProtoMessage() {}

func (x *BetByBetRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetRefundRequest.ProtoReflect.Descriptor instead.
func (*BetByBetRefundRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{235}
}

func (x *BetByBetRefundRequest) GetBetTransactionId() string {
	if x != nil {
		return x.BetTransactionId
	}
	return ""
}

func (x *BetByBetRefundRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BetByBetRefundRequest) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetByBetRefundRequest) GetTransaction() *BetByBetRefundTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type FbsportsBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int64             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*FbsportsWallet `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FbsportsBalanceResp) Reset() {
	*x = FbsportsBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsBalanceResp) ProtoMessage() {}

func (x *FbsportsBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsBalanceResp.ProtoReflect.Descriptor instead.
func (*FbsportsBalanceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{236}
}

func (x *FbsportsBalanceResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbsportsBalanceResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FbsportsBalanceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbsportsBalanceResp) GetData() []*FbsportsWallet {
	if x != nil {
		return x.Data
	}
	return nil
}

// inner type - fund tx - refund
type HabaRefund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamestatemode          uint32  `protobuf:"varint,1,opt,name=gamestatemode,proto3" json:"gamestatemode,omitempty"`
	Originaltransferid     string  `protobuf:"bytes,2,opt,name=originaltransferid,proto3" json:"originaltransferid,omitempty"`
	Transferid             string  `protobuf:"bytes,3,opt,name=transferid,proto3" json:"transferid,omitempty"`
	Currencycode           string  `protobuf:"bytes,4,opt,name=currencycode,proto3" json:"currencycode,omitempty"`
	Amount                 float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Bonusamount            float64 `protobuf:"fixed64,6,opt,name=bonusamount,proto3" json:"bonusamount,omitempty"`
	Jpwin                  bool    `protobuf:"varint,7,opt,name=jpwin,proto3" json:"jpwin,omitempty"`
	Jpid                   string  `protobuf:"bytes,8,opt,name=jpid,proto3" json:"jpid,omitempty"`
	Jpcont                 float64 `protobuf:"fixed64,9,opt,name=jpcont,proto3" json:"jpcont,omitempty"`
	Isbonus                bool    `protobuf:"varint,10,opt,name=isbonus,proto3" json:"isbonus,omitempty"`
	Dtevent                string  `protobuf:"bytes,11,opt,name=dtevent,proto3" json:"dtevent,omitempty"`
	Initialdebittransferid string  `protobuf:"bytes,12,opt,name=initialdebittransferid,proto3" json:"initialdebittransferid,omitempty"`
	Accounttransactiontype uint32  `protobuf:"varint,13,opt,name=accounttransactiontype,proto3" json:"accounttransactiontype,omitempty"`
	Gameinfeature          bool    `protobuf:"varint,14,opt,name=gameinfeature,proto3" json:"gameinfeature,omitempty"`
	Lastbonusaction        bool    `protobuf:"varint,15,opt,name=lastbonusaction,proto3" json:"lastbonusaction,omitempty"`
}

func (x *HabaRefund) Reset() {
	*x = HabaRefund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaRefund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaRefund) ProtoMessage() {}

func (x *HabaRefund) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaRefund.ProtoReflect.Descriptor instead.
func (*HabaRefund) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{237}
}

func (x *HabaRefund) GetGamestatemode() uint32 {
	if x != nil {
		return x.Gamestatemode
	}
	return 0
}

func (x *HabaRefund) GetOriginaltransferid() string {
	if x != nil {
		return x.Originaltransferid
	}
	return ""
}

func (x *HabaRefund) GetTransferid() string {
	if x != nil {
		return x.Transferid
	}
	return ""
}

func (x *HabaRefund) GetCurrencycode() string {
	if x != nil {
		return x.Currencycode
	}
	return ""
}

func (x *HabaRefund) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HabaRefund) GetBonusamount() float64 {
	if x != nil {
		return x.Bonusamount
	}
	return 0
}

func (x *HabaRefund) GetJpwin() bool {
	if x != nil {
		return x.Jpwin
	}
	return false
}

func (x *HabaRefund) GetJpid() string {
	if x != nil {
		return x.Jpid
	}
	return ""
}

func (x *HabaRefund) GetJpcont() float64 {
	if x != nil {
		return x.Jpcont
	}
	return 0
}

func (x *HabaRefund) GetIsbonus() bool {
	if x != nil {
		return x.Isbonus
	}
	return false
}

func (x *HabaRefund) GetDtevent() string {
	if x != nil {
		return x.Dtevent
	}
	return ""
}

func (x *HabaRefund) GetInitialdebittransferid() string {
	if x != nil {
		return x.Initialdebittransferid
	}
	return ""
}

func (x *HabaRefund) GetAccounttransactiontype() uint32 {
	if x != nil {
		return x.Accounttransactiontype
	}
	return 0
}

func (x *HabaRefund) GetGameinfeature() bool {
	if x != nil {
		return x.Gameinfeature
	}
	return false
}

func (x *HabaRefund) GetLastbonusaction() bool {
	if x != nil {
		return x.Lastbonusaction
	}
	return false
}

type HabaFundTxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Dtsent              string                   `protobuf:"bytes,2,opt,name=dtsent,proto3" json:"dtsent,omitempty"`
	Basegame            *HabaBasegame            `protobuf:"bytes,3,opt,name=basegame,proto3" json:"basegame,omitempty"`
	Tt                  string                   `protobuf:"bytes,4,opt,name=tt,proto3" json:"tt,omitempty"`
	Auth                *HabaAuth                `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	Fundtransferrequest *HabaFundtransferrequest `protobuf:"bytes,6,opt,name=fundtransferrequest,proto3" json:"fundtransferrequest,omitempty"`
}

func (x *HabaFundTxReq) Reset() {
	*x = HabaFundTxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaFundTxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaFundTxReq) ProtoMessage() {}

func (x *HabaFundTxReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaFundTxReq.ProtoReflect.Descriptor instead.
func (*HabaFundTxReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{238}
}

func (x *HabaFundTxReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HabaFundTxReq) GetDtsent() string {
	if x != nil {
		return x.Dtsent
	}
	return ""
}

func (x *HabaFundTxReq) GetBasegame() *HabaBasegame {
	if x != nil {
		return x.Basegame
	}
	return nil
}

func (x *HabaFundTxReq) GetTt() string {
	if x != nil {
		return x.Tt
	}
	return ""
}

func (x *HabaFundTxReq) GetAuth() *HabaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HabaFundTxReq) GetFundtransferrequest() *HabaFundtransferrequest {
	if x != nil {
		return x.Fundtransferrequest
	}
	return nil
}

// 0 成功
// 1 Token 无效
type GetBalanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Balance    int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetBalanceRes) Reset() {
	*x = GetBalanceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRes) ProtoMessage() {}

func (x *GetBalanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRes.ProtoReflect.Descriptor instead.
func (*GetBalanceRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{239}
}

func (x *GetBalanceRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetBalanceRes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type SabaConfirmBetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          string                `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	OperationId     string                `protobuf:"bytes,2,opt,name=operationId,proto3" json:"operationId,omitempty"`
	UserId          string                `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	UpdateTime      string                `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TransactionTime string                `protobuf:"bytes,5,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Txns            []*SabaConfirmBetTxns `protobuf:"bytes,6,rep,name=txns,proto3" json:"txns,omitempty"`
}

func (x *SabaConfirmBetMessage) Reset() {
	*x = SabaConfirmBetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBetMessage) ProtoMessage() {}

func (x *SabaConfirmBetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBetMessage.ProtoReflect.Descriptor instead.
func (*SabaConfirmBetMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{240}
}

func (x *SabaConfirmBetMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaConfirmBetMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *SabaConfirmBetMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaConfirmBetMessage) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SabaConfirmBetMessage) GetTransactionTime() string {
	if x != nil {
		return x.TransactionTime
	}
	return ""
}

func (x *SabaConfirmBetMessage) GetTxns() []*SabaConfirmBetTxns {
	if x != nil {
		return x.Txns
	}
	return nil
}

type SabaConfirmBet3RdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          string                   `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	UserId          string                   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	OperationId     string                   `protobuf:"bytes,3,opt,name=operationId,proto3" json:"operationId,omitempty"`
	UpdateTime      string                   `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TransactionTime string                   `protobuf:"bytes,5,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	CreditAmount    float32                  `protobuf:"fixed32,6,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount     float32                  `protobuf:"fixed32,7,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	Txns            []*SabaConfirmBet3RdTxns `protobuf:"bytes,8,rep,name=txns,proto3" json:"txns,omitempty"`
}

func (x *SabaConfirmBet3RdMessage) Reset() {
	*x = SabaConfirmBet3RdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBet3RdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBet3RdMessage) ProtoMessage() {}

func (x *SabaConfirmBet3RdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBet3RdMessage.ProtoReflect.Descriptor instead.
func (*SabaConfirmBet3RdMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{241}
}

func (x *SabaConfirmBet3RdMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaConfirmBet3RdMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaConfirmBet3RdMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *SabaConfirmBet3RdMessage) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SabaConfirmBet3RdMessage) GetTransactionTime() string {
	if x != nil {
		return x.TransactionTime
	}
	return ""
}

func (x *SabaConfirmBet3RdMessage) GetCreditAmount() float32 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SabaConfirmBet3RdMessage) GetDebitAmount() float32 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SabaConfirmBet3RdMessage) GetTxns() []*SabaConfirmBet3RdTxns {
	if x != nil {
		return x.Txns
	}
	return nil
}

// 定义确认下注接口的输入输出
type SabaConfirmBet3RdTxns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string  `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	TxId         int64   `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
	LicenseeTxId string  `protobuf:"bytes,3,opt,name=licenseeTxId,proto3" json:"licenseeTxId,omitempty"`
	CreditAmount float32 `protobuf:"fixed32,4,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount  float32 `protobuf:"fixed32,5,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	WinlostDate  string  `protobuf:"bytes,6,opt,name=winlostDate,proto3" json:"winlostDate,omitempty"`
}

func (x *SabaConfirmBet3RdTxns) Reset() {
	*x = SabaConfirmBet3RdTxns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBet3RdTxns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBet3RdTxns) ProtoMessage() {}

func (x *SabaConfirmBet3RdTxns) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBet3RdTxns.ProtoReflect.Descriptor instead.
func (*SabaConfirmBet3RdTxns) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{242}
}

func (x *SabaConfirmBet3RdTxns) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SabaConfirmBet3RdTxns) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *SabaConfirmBet3RdTxns) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

func (x *SabaConfirmBet3RdTxns) GetCreditAmount() float32 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SabaConfirmBet3RdTxns) GetDebitAmount() float32 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SabaConfirmBet3RdTxns) GetWinlostDate() string {
	if x != nil {
		return x.WinlostDate
	}
	return ""
}

type AgQJgameResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent           string `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	BankerPoint     string `protobuf:"bytes,2,opt,name=bankerPoint,proto3" json:"bankerPoint,omitempty"`
	BeginTime       string `protobuf:"bytes,3,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	CardList        string `protobuf:"bytes,4,opt,name=cardList,proto3" json:"cardList,omitempty"`
	CardNum         string `protobuf:"bytes,5,opt,name=cardNum,proto3" json:"cardNum,omitempty"`
	CloseTime       string `protobuf:"bytes,6,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
	Dealer          string `protobuf:"bytes,7,opt,name=dealer,proto3" json:"dealer,omitempty"`
	DragonPoint     string `protobuf:"bytes,8,opt,name=dragonPoint,proto3" json:"dragonPoint,omitempty"`
	DragonRes       string `protobuf:"bytes,9,opt,name=dragonRes,proto3" json:"dragonRes,omitempty"`
	Flag            uint32 `protobuf:"varint,10,opt,name=flag,proto3" json:"flag,omitempty"`
	GameType        string `protobuf:"bytes,11,opt,name=gameType,proto3" json:"gameType,omitempty"`
	GmCode          string `protobuf:"bytes,12,opt,name=gmCode,proto3" json:"gmCode,omitempty"`
	Pair            string `protobuf:"bytes,13,opt,name=pair,proto3" json:"pair,omitempty"`
	PhoenixRes      string `protobuf:"bytes,14,opt,name=phoenixRes,proto3" json:"phoenixRes,omitempty"`
	PlatformSession string `protobuf:"bytes,15,opt,name=platformSession,proto3" json:"platformSession,omitempty"`
	PlatformType    string `protobuf:"bytes,16,opt,name=platformType,proto3" json:"platformType,omitempty"`
	PlayerPoint     string `protobuf:"bytes,17,opt,name=playerPoint,proto3" json:"playerPoint,omitempty"`
	ReqId           string `protobuf:"bytes,18,opt,name=reqId,proto3" json:"reqId,omitempty"`
	ShoeCode        string `protobuf:"bytes,19,opt,name=shoeCode,proto3" json:"shoeCode,omitempty"`
	StopBettime     string `protobuf:"bytes,20,opt,name=stopBettime,proto3" json:"stopBettime,omitempty"`
	TigerPoint      string `protobuf:"bytes,21,opt,name=tigerPoint,proto3" json:"tigerPoint,omitempty"`
	Timestamp       uint32 `protobuf:"varint,22,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Vid             string `protobuf:"bytes,23,opt,name=vid,proto3" json:"vid,omitempty"`
}

func (x *AgQJgameResultRequest) Reset() {
	*x = AgQJgameResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJgameResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJgameResultRequest) ProtoMessage() {}

func (x *AgQJgameResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJgameResultRequest.ProtoReflect.Descriptor instead.
func (*AgQJgameResultRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{243}
}

func (x *AgQJgameResultRequest) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *AgQJgameResultRequest) GetBankerPoint() string {
	if x != nil {
		return x.BankerPoint
	}
	return ""
}

func (x *AgQJgameResultRequest) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *AgQJgameResultRequest) GetCardList() string {
	if x != nil {
		return x.CardList
	}
	return ""
}

func (x *AgQJgameResultRequest) GetCardNum() string {
	if x != nil {
		return x.CardNum
	}
	return ""
}

func (x *AgQJgameResultRequest) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

func (x *AgQJgameResultRequest) GetDealer() string {
	if x != nil {
		return x.Dealer
	}
	return ""
}

func (x *AgQJgameResultRequest) GetDragonPoint() string {
	if x != nil {
		return x.DragonPoint
	}
	return ""
}

func (x *AgQJgameResultRequest) GetDragonRes() string {
	if x != nil {
		return x.DragonRes
	}
	return ""
}

func (x *AgQJgameResultRequest) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *AgQJgameResultRequest) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *AgQJgameResultRequest) GetGmCode() string {
	if x != nil {
		return x.GmCode
	}
	return ""
}

func (x *AgQJgameResultRequest) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *AgQJgameResultRequest) GetPhoenixRes() string {
	if x != nil {
		return x.PhoenixRes
	}
	return ""
}

func (x *AgQJgameResultRequest) GetPlatformSession() string {
	if x != nil {
		return x.PlatformSession
	}
	return ""
}

func (x *AgQJgameResultRequest) GetPlatformType() string {
	if x != nil {
		return x.PlatformType
	}
	return ""
}

func (x *AgQJgameResultRequest) GetPlayerPoint() string {
	if x != nil {
		return x.PlayerPoint
	}
	return ""
}

func (x *AgQJgameResultRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *AgQJgameResultRequest) GetShoeCode() string {
	if x != nil {
		return x.ShoeCode
	}
	return ""
}

func (x *AgQJgameResultRequest) GetStopBettime() string {
	if x != nil {
		return x.StopBettime
	}
	return ""
}

func (x *AgQJgameResultRequest) GetTigerPoint() string {
	if x != nil {
		return x.TigerPoint
	}
	return ""
}

func (x *AgQJgameResultRequest) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AgQJgameResultRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

type Cq9CreditRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9CreditRes) Reset() {
	*x = Cq9CreditRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9CreditRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9CreditRes) ProtoMessage() {}

func (x *Cq9CreditRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9CreditRes.ProtoReflect.Descriptor instead.
func (*Cq9CreditRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{244}
}

func (x *Cq9CreditRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9CreditRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9CreditRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9CreditRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9CreditRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type FbsportsHealthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FbsportsHealthReq) Reset() {
	*x = FbsportsHealthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsHealthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsHealthReq) ProtoMessage() {}

func (x *FbsportsHealthReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsHealthReq.ProtoReflect.Descriptor instead.
func (*FbsportsHealthReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{245}
}

// 投注前查询指定玩法赔率
type BatchBetMatchMarketOfJumpLineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageType       string            `protobuf:"bytes,1,opt,name=languageType,proto3" json:"languageType,omitempty"`             // 国际化语言类型
	BetMatchMarketList []*BetMatchMarket `protobuf:"bytes,2,rep,name=betMatchMarketList,proto3" json:"betMatchMarketList,omitempty"` // 赛事盘口数据对象
	IsSelectSeries     bool              `protobuf:"varint,3,opt,name=isSelectSeries,proto3" json:"isSelectSeries,omitempty"`        // 是否查询串关
	CurrencyId         int64             `protobuf:"varint,4,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                // 币种ID（可选）
	MerchantUserId     string            `protobuf:"bytes,5,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`         // 商户uid
}

func (x *BatchBetMatchMarketOfJumpLineReq) Reset() {
	*x = BatchBetMatchMarketOfJumpLineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBetMatchMarketOfJumpLineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBetMatchMarketOfJumpLineReq) ProtoMessage() {}

func (x *BatchBetMatchMarketOfJumpLineReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBetMatchMarketOfJumpLineReq.ProtoReflect.Descriptor instead.
func (*BatchBetMatchMarketOfJumpLineReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{246}
}

func (x *BatchBetMatchMarketOfJumpLineReq) GetLanguageType() string {
	if x != nil {
		return x.LanguageType
	}
	return ""
}

func (x *BatchBetMatchMarketOfJumpLineReq) GetBetMatchMarketList() []*BetMatchMarket {
	if x != nil {
		return x.BetMatchMarketList
	}
	return nil
}

func (x *BatchBetMatchMarketOfJumpLineReq) GetIsSelectSeries() bool {
	if x != nil {
		return x.IsSelectSeries
	}
	return false
}

func (x *BatchBetMatchMarketOfJumpLineReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

// 赛事盘口数据对象
type BetMatchMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId int64 `protobuf:"varint,1,opt,name=marketId,proto3" json:"marketId,omitempty"` // 玩法ID
	MatchId  int64 `protobuf:"varint,2,opt,name=matchId,proto3" json:"matchId,omitempty"`   // 赛事ID
	Type     int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`         // 投注项类型
	OddsType int64 `protobuf:"varint,4,opt,name=oddsType,proto3" json:"oddsType,omitempty"` // 赔率类型
}

func (x *BetMatchMarket) Reset() {
	*x = BetMatchMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMatchMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMatchMarket) ProtoMessage() {}

func (x *BetMatchMarket) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMatchMarket.ProtoReflect.Descriptor instead.
func (*BetMatchMarket) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{247}
}

func (x *BetMatchMarket) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *BetMatchMarket) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *BetMatchMarket) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BetMatchMarket) GetOddsType() int64 {
	if x != nil {
		return x.OddsType
	}
	return 0
}

// 投注前查询指定玩法赔率响应消息结构体
type BatchBetMatchMarketOfJumpLineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 成功的标志，true / false
	Message string                             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 描述信息
	Data    *BatchBetMatchMarketOfJumpLineData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`        // 数据对象
	Code    int64                              `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`       // 返回码
}

func (x *BatchBetMatchMarketOfJumpLineResp) Reset() {
	*x = BatchBetMatchMarketOfJumpLineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBetMatchMarketOfJumpLineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBetMatchMarketOfJumpLineResp) ProtoMessage() {}

func (x *BatchBetMatchMarketOfJumpLineResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBetMatchMarketOfJumpLineResp.ProtoReflect.Descriptor instead.
func (*BatchBetMatchMarketOfJumpLineResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{248}
}

func (x *BatchBetMatchMarketOfJumpLineResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchBetMatchMarketOfJumpLineResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchBetMatchMarketOfJumpLineResp) GetData() *BatchBetMatchMarketOfJumpLineData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BatchBetMatchMarketOfJumpLineResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 投注前查询指定玩法赔率数据对象
type BatchBetMatchMarketOfJumpLineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bms []*BatchBetMatchMarketOfJumpLineDataBetMatchMarket `protobuf:"bytes,1,rep,name=bms,proto3" json:"bms,omitempty"`  // 玩法选项实时赔率及限额
	Sos []*BetCombination                                  `protobuf:"bytes,2,rep,name=sos,proto3" json:"sos,omitempty"`  // 串关组合赔率及限额
	Mon int64                                              `protobuf:"varint,3,opt,name=mon,proto3" json:"mon,omitempty"` // 单关，批量允许最大订单个数
	Msl int64                                              `protobuf:"varint,4,opt,name=msl,proto3" json:"msl,omitempty"` // 串关，订单最大选项个数（关数）
}

func (x *BatchBetMatchMarketOfJumpLineData) Reset() {
	*x = BatchBetMatchMarketOfJumpLineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBetMatchMarketOfJumpLineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBetMatchMarketOfJumpLineData) ProtoMessage() {}

func (x *BatchBetMatchMarketOfJumpLineData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBetMatchMarketOfJumpLineData.ProtoReflect.Descriptor instead.
func (*BatchBetMatchMarketOfJumpLineData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{249}
}

func (x *BatchBetMatchMarketOfJumpLineData) GetBms() []*BatchBetMatchMarketOfJumpLineDataBetMatchMarket {
	if x != nil {
		return x.Bms
	}
	return nil
}

func (x *BatchBetMatchMarketOfJumpLineData) GetSos() []*BetCombination {
	if x != nil {
		return x.Sos
	}
	return nil
}

func (x *BatchBetMatchMarketOfJumpLineData) GetMon() int64 {
	if x != nil {
		return x.Mon
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineData) GetMsl() int64 {
	if x != nil {
		return x.Msl
	}
	return 0
}

// 玩法选项实时赔率及限额
type BatchBetMatchMarketOfJumpLineDataBetMatchMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid  int64      `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`    // 玩法id
	Op   *BetOption `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`       // 玩法选项赔率
	Smin float64    `protobuf:"fixed64,3,opt,name=smin,proto3" json:"smin,omitempty"` // 单关，最小投注额限制
	Smax float64    `protobuf:"fixed64,4,opt,name=smax,proto3" json:"smax,omitempty"` // 单关，最大投注额限制
	Au   int64      `protobuf:"varint,5,opt,name=au,proto3" json:"au,omitempty"`      // 是否支持串关，0 不支持，1 支持
	Ss   int64      `protobuf:"varint,6,opt,name=ss,proto3" json:"ss,omitempty"`      // 玩法销售状态，0暂停，1开售，-1未开售
	Re   string     `protobuf:"bytes,7,opt,name=re,proto3" json:"re,omitempty"`       // 足球让球当前比分
	Omid int64      `protobuf:"varint,8,opt,name=omid,proto3" json:"omid,omitempty"`  // 失效玩法id
	Ip   int64      `protobuf:"varint,9,opt,name=ip,proto3" json:"ip,omitempty"`      // 是否为滚球 1滚球 0非滚球
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) Reset() {
	*x = BatchBetMatchMarketOfJumpLineDataBetMatchMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBetMatchMarketOfJumpLineDataBetMatchMarket) ProtoMessage() {}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBetMatchMarketOfJumpLineDataBetMatchMarket.ProtoReflect.Descriptor instead.
func (*BatchBetMatchMarketOfJumpLineDataBetMatchMarket) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{250}
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetOp() *BetOption {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetSmin() float64 {
	if x != nil {
		return x.Smin
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetSmax() float64 {
	if x != nil {
		return x.Smax
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetAu() int64 {
	if x != nil {
		return x.Au
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetSs() int64 {
	if x != nil {
		return x.Ss
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetRe() string {
	if x != nil {
		return x.Re
	}
	return ""
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetOmid() int64 {
	if x != nil {
		return x.Omid
	}
	return 0
}

func (x *BatchBetMatchMarketOfJumpLineDataBetMatchMarket) GetIp() int64 {
	if x != nil {
		return x.Ip
	}
	return 0
}

// 玩法选项赔率
type BetOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Na   string  `protobuf:"bytes,1,opt,name=na,proto3" json:"na,omitempty"`      // 选项全称
	Nm   string  `protobuf:"bytes,2,opt,name=nm,proto3" json:"nm,omitempty"`      // 选项简称
	Tid  int64   `protobuf:"varint,3,opt,name=tid,proto3" json:"tid,omitempty"`   // 球员玩法球队ID
	Ty   int64   `protobuf:"varint,4,opt,name=ty,proto3" json:"ty,omitempty"`     // 选项类型，主、客、大、小等
	Od   float64 `protobuf:"fixed64,5,opt,name=od,proto3" json:"od,omitempty"`    // 欧盘赔率
	Bod  float64 `protobuf:"fixed64,6,opt,name=bod,proto3" json:"bod,omitempty"`  // 赔率
	Odt  int64   `protobuf:"varint,7,opt,name=odt,proto3" json:"odt,omitempty"`   // 赔率类型
	Otcm int64   `protobuf:"varint,8,opt,name=otcm,proto3" json:"otcm,omitempty"` // 选项结算结果
	Li   string  `protobuf:"bytes,9,opt,name=li,proto3" json:"li,omitempty"`      // 带线玩法的线
}

func (x *BetOption) Reset() {
	*x = BetOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetOption) ProtoMessage() {}

func (x *BetOption) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetOption.ProtoReflect.Descriptor instead.
func (*BetOption) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{251}
}

func (x *BetOption) GetNa() string {
	if x != nil {
		return x.Na
	}
	return ""
}

func (x *BetOption) GetNm() string {
	if x != nil {
		return x.Nm
	}
	return ""
}

func (x *BetOption) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *BetOption) GetTy() int64 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *BetOption) GetOd() float64 {
	if x != nil {
		return x.Od
	}
	return 0
}

func (x *BetOption) GetBod() float64 {
	if x != nil {
		return x.Bod
	}
	return 0
}

func (x *BetOption) GetOdt() int64 {
	if x != nil {
		return x.Odt
	}
	return 0
}

func (x *BetOption) GetOtcm() int64 {
	if x != nil {
		return x.Otcm
	}
	return 0
}

func (x *BetOption) GetLi() string {
	if x != nil {
		return x.Li
	}
	return ""
}

// 串关组合赔率及限额
type BetCombination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   int64   `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`      // 串关子单选项个数
	In   int64   `protobuf:"varint,2,opt,name=in,proto3" json:"in,omitempty"`      // 串关子单个数
	Sodd float64 `protobuf:"fixed64,3,opt,name=sodd,proto3" json:"sodd,omitempty"` // 串关对应的赔率
	Mi   float64 `protobuf:"fixed64,4,opt,name=mi,proto3" json:"mi,omitempty"`     // 串关，最小投注额
	Mx   float64 `protobuf:"fixed64,5,opt,name=mx,proto3" json:"mx,omitempty"`     // 串关，最大投注额
}

func (x *BetCombination) Reset() {
	*x = BetCombination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetCombination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetCombination) ProtoMessage() {}

func (x *BetCombination) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetCombination.ProtoReflect.Descriptor instead.
func (*BetCombination) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{252}
}

func (x *BetCombination) GetSn() int64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *BetCombination) GetIn() int64 {
	if x != nil {
		return x.In
	}
	return 0
}

func (x *BetCombination) GetSodd() float64 {
	if x != nil {
		return x.Sodd
	}
	return 0
}

func (x *BetCombination) GetMi() float64 {
	if x != nil {
		return x.Mi
	}
	return 0
}

func (x *BetCombination) GetMx() float64 {
	if x != nil {
		return x.Mx
	}
	return 0
}

// 请求消息
type BetSinglePassReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageType   string               `protobuf:"bytes,1,opt,name=languageType,proto3" json:"languageType,omitempty"`      // 国际化语言类型
	SingleBetList  []*BetSinglePassList `protobuf:"bytes,2,rep,name=singleBetList,proto3" json:"singleBetList,omitempty"`    // 单关投注数组
	CurrencyId     int64                `protobuf:"varint,3,opt,name=currencyId,proto3" json:"currencyId,omitempty"`         // 币种ID（可选）
	IsSelectSeries bool                 `protobuf:"varint,4,opt,name=isSelectSeries,proto3" json:"isSelectSeries,omitempty"` // 币种ID（可选）
	MerchantUserId string               `protobuf:"bytes,5,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`  // 商户uid
}

func (x *BetSinglePassReq) Reset() {
	*x = BetSinglePassReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSinglePassReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSinglePassReq) ProtoMessage() {}

func (x *BetSinglePassReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSinglePassReq.ProtoReflect.Descriptor instead.
func (*BetSinglePassReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{253}
}

func (x *BetSinglePassReq) GetLanguageType() string {
	if x != nil {
		return x.LanguageType
	}
	return ""
}

func (x *BetSinglePassReq) GetSingleBetList() []*BetSinglePassList {
	if x != nil {
		return x.SingleBetList
	}
	return nil
}

func (x *BetSinglePassReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *BetSinglePassReq) GetIsSelectSeries() bool {
	if x != nil {
		return x.IsSelectSeries
	}
	return false
}

func (x *BetSinglePassReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

// 单关投注数据对象
type BetSinglePassList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitStake     float64                    `protobuf:"fixed64,1,opt,name=unitStake,proto3" json:"unitStake,omitempty"`       // 每单的投注金额
	OddsChange    int64                      `protobuf:"varint,2,opt,name=oddsChange,proto3" json:"oddsChange,omitempty"`      // 是否接受赔率变更类型（0: 不接受, 1: 接受最优赔率变动, 2: 接受任意赔率变动）
	BetOptionList []*BetSinglePassListOption `protobuf:"bytes,3,rep,name=betOptionList,proto3" json:"betOptionList,omitempty"` // 投注玩法选项（数组大小为1）
	RelatedId     string                     `protobuf:"bytes,4,opt,name=relatedId,proto3" json:"relatedId,omitempty"`         // 三方数据关联ID（可为空）
	ThirdRemark   string                     `protobuf:"bytes,5,opt,name=thirdRemark,proto3" json:"thirdRemark,omitempty"`     // 第三方备注（可为空）
}

func (x *BetSinglePassList) Reset() {
	*x = BetSinglePassList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSinglePassList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSinglePassList) ProtoMessage() {}

func (x *BetSinglePassList) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSinglePassList.ProtoReflect.Descriptor instead.
func (*BetSinglePassList) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{254}
}

func (x *BetSinglePassList) GetUnitStake() float64 {
	if x != nil {
		return x.UnitStake
	}
	return 0
}

func (x *BetSinglePassList) GetOddsChange() int64 {
	if x != nil {
		return x.OddsChange
	}
	return 0
}

func (x *BetSinglePassList) GetBetOptionList() []*BetSinglePassListOption {
	if x != nil {
		return x.BetOptionList
	}
	return nil
}

func (x *BetSinglePassList) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

func (x *BetSinglePassList) GetThirdRemark() string {
	if x != nil {
		return x.ThirdRemark
	}
	return ""
}

// 投注选项数据对象
type BetSinglePassListOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId   int64   `protobuf:"varint,1,opt,name=marketId,proto3" json:"marketId,omitempty"`     // 玩法ID
	OptionType int64   `protobuf:"varint,2,opt,name=optionType,proto3" json:"optionType,omitempty"` // 投注选项类型
	Odds       float64 `protobuf:"fixed64,3,opt,name=odds,proto3" json:"odds,omitempty"`            // 下注赔率
	OddsFormat int64   `protobuf:"varint,4,opt,name=oddsFormat,proto3" json:"oddsFormat,omitempty"` // 赔率类型（如欧盘、港盘等）
}

func (x *BetSinglePassListOption) Reset() {
	*x = BetSinglePassListOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSinglePassListOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSinglePassListOption) ProtoMessage() {}

func (x *BetSinglePassListOption) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSinglePassListOption.ProtoReflect.Descriptor instead.
func (*BetSinglePassListOption) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{255}
}

func (x *BetSinglePassListOption) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *BetSinglePassListOption) GetOptionType() int64 {
	if x != nil {
		return x.OptionType
	}
	return 0
}

func (x *BetSinglePassListOption) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *BetSinglePassListOption) GetOddsFormat() int64 {
	if x != nil {
		return x.OddsFormat
	}
	return 0
}

// 响应消息
type BetSinglePassResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 成功的标志，true / false
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 描述信息
	Data    []*BetMatchOrder `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`        // 订单数据对象
	Code    int64            `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`       // 返回码
}

func (x *BetSinglePassResp) Reset() {
	*x = BetSinglePassResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSinglePassResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSinglePassResp) ProtoMessage() {}

func (x *BetSinglePassResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSinglePassResp.ProtoReflect.Descriptor instead.
func (*BetSinglePassResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{256}
}

func (x *BetSinglePassResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BetSinglePassResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BetSinglePassResp) GetData() []*BetMatchOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BetSinglePassResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 订单数据对象
type BetMatchOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`   // 订单ID
	St  int64             `protobuf:"varint,2,opt,name=st,proto3" json:"st,omitempty"`  // 订单状态code
	Ops []*BetMatchOption `protobuf:"bytes,3,rep,name=ops,proto3" json:"ops,omitempty"` // 订单选项集合
}

func (x *BetMatchOrder) Reset() {
	*x = BetMatchOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMatchOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMatchOrder) ProtoMessage() {}

func (x *BetMatchOrder) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMatchOrder.ProtoReflect.Descriptor instead.
func (*BetMatchOrder) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{257}
}

func (x *BetMatchOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetMatchOrder) GetSt() int64 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *BetMatchOrder) GetOps() []*BetMatchOption {
	if x != nil {
		return x.Ops
	}
	return nil
}

// 订单选项对象
type BetMatchOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid string `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"` // 盘口id
	Od  string `protobuf:"bytes,2,opt,name=od,proto3" json:"od,omitempty"`   // 欧式赔率
	Of  int32  `protobuf:"varint,3,opt,name=of,proto3" json:"of,omitempty"`  // 赔率类型
	Bod string `protobuf:"bytes,4,opt,name=bod,proto3" json:"bod,omitempty"` // 下注赔率
	Tr  string `protobuf:"bytes,5,opt,name=tr,proto3" json:"tr,omitempty"`   // 第三方备注
	Rid string `protobuf:"bytes,6,opt,name=rid,proto3" json:"rid,omitempty"` // 下单时三方带的订单ID
}

func (x *BetMatchOption) Reset() {
	*x = BetMatchOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMatchOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMatchOption) ProtoMessage() {}

func (x *BetMatchOption) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMatchOption.ProtoReflect.Descriptor instead.
func (*BetMatchOption) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{258}
}

func (x *BetMatchOption) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *BetMatchOption) GetOd() string {
	if x != nil {
		return x.Od
	}
	return ""
}

func (x *BetMatchOption) GetOf() int32 {
	if x != nil {
		return x.Of
	}
	return 0
}

func (x *BetMatchOption) GetBod() string {
	if x != nil {
		return x.Bod
	}
	return ""
}

func (x *BetMatchOption) GetTr() string {
	if x != nil {
		return x.Tr
	}
	return ""
}

func (x *BetMatchOption) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

// 串关投注接口
type BetMultipleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        string             `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`               // 设备ID
	BetMultipleData []*BetMultipleData `protobuf:"bytes,2,rep,name=betMultipleData,proto3" json:"betMultipleData,omitempty"` // 串关投注关次数据
	BetOptionList   []*BetOptionList   `protobuf:"bytes,3,rep,name=betOptionList,proto3" json:"betOptionList,omitempty"`     // 投注的盘口玩法项数据集合
	CurrencyId      int64              `protobuf:"varint,4,opt,name=currencyId,proto3" json:"currencyId,omitempty"`          // 币种id
	LanguageType    string             `protobuf:"bytes,5,opt,name=languageType,proto3" json:"languageType,omitempty"`       // 国际化语言类型
	RelatedId       string             `protobuf:"bytes,6,opt,name=relatedId,proto3" json:"relatedId,omitempty"`             // 三方数据关联ID
	MerchantUserId  string             `protobuf:"bytes,7,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`   // 商户uid
}

func (x *BetMultipleReq) Reset() {
	*x = BetMultipleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMultipleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMultipleReq) ProtoMessage() {}

func (x *BetMultipleReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMultipleReq.ProtoReflect.Descriptor instead.
func (*BetMultipleReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{259}
}

func (x *BetMultipleReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *BetMultipleReq) GetBetMultipleData() []*BetMultipleData {
	if x != nil {
		return x.BetMultipleData
	}
	return nil
}

func (x *BetMultipleReq) GetBetOptionList() []*BetOptionList {
	if x != nil {
		return x.BetOptionList
	}
	return nil
}

func (x *BetMultipleReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *BetMultipleReq) GetLanguageType() string {
	if x != nil {
		return x.LanguageType
	}
	return ""
}

func (x *BetMultipleReq) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

func (x *BetMultipleReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

// 串关投注关次数据
type BetMultipleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OddsChange  int64   `protobuf:"varint,1,opt,name=oddsChange,proto3" json:"oddsChange,omitempty"`   // 是否接受赔率变更设置（0:不接受, 1:接受更好赔率, 2:接受任意赔率）
	SeriesValue int64   `protobuf:"varint,2,opt,name=seriesValue,proto3" json:"seriesValue,omitempty"` // 串关子单选项个数
	UnitStake   float64 `protobuf:"fixed64,3,opt,name=unitStake,proto3" json:"unitStake,omitempty"`    // 每个子单投注金额
	ThirdRemark string  `protobuf:"bytes,4,opt,name=thirdRemark,proto3" json:"thirdRemark,omitempty"`  // 第三方备注
	RelatedId   string  `protobuf:"bytes,5,opt,name=relatedId,proto3" json:"relatedId,omitempty"`      // 三方数据关联ID
}

func (x *BetMultipleData) Reset() {
	*x = BetMultipleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMultipleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMultipleData) ProtoMessage() {}

func (x *BetMultipleData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMultipleData.ProtoReflect.Descriptor instead.
func (*BetMultipleData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{260}
}

func (x *BetMultipleData) GetOddsChange() int64 {
	if x != nil {
		return x.OddsChange
	}
	return 0
}

func (x *BetMultipleData) GetSeriesValue() int64 {
	if x != nil {
		return x.SeriesValue
	}
	return 0
}

func (x *BetMultipleData) GetUnitStake() float64 {
	if x != nil {
		return x.UnitStake
	}
	return 0
}

func (x *BetMultipleData) GetThirdRemark() string {
	if x != nil {
		return x.ThirdRemark
	}
	return ""
}

func (x *BetMultipleData) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

// 投注的盘口玩法项数据集合
type BetOptionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId   int64   `protobuf:"varint,1,opt,name=marketId,proto3" json:"marketId,omitempty"`     // 玩法ID
	OptionType int64   `protobuf:"varint,2,opt,name=optionType,proto3" json:"optionType,omitempty"` // 投注选项类型
	Odds       float64 `protobuf:"fixed64,3,opt,name=odds,proto3" json:"odds,omitempty"`            // 下注赔率
	OddsFormat int32   `protobuf:"varint,4,opt,name=oddsFormat,proto3" json:"oddsFormat,omitempty"` // 赔率类型（如港盘、欧盘等）
}

func (x *BetOptionList) Reset() {
	*x = BetOptionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetOptionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetOptionList) ProtoMessage() {}

func (x *BetOptionList) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetOptionList.ProtoReflect.Descriptor instead.
func (*BetOptionList) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{261}
}

func (x *BetOptionList) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *BetOptionList) GetOptionType() int64 {
	if x != nil {
		return x.OptionType
	}
	return 0
}

func (x *BetOptionList) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *BetOptionList) GetOddsFormat() int32 {
	if x != nil {
		return x.OddsFormat
	}
	return 0
}

// 响应消息
type BetMultipleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 成功的标志，true / false
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 描述信息
	Data    []*BetOptionMatchOrder `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`        // 订单数据对象
	Code    int64                  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`       // 返回码
}

func (x *BetMultipleResp) Reset() {
	*x = BetMultipleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetMultipleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMultipleResp) ProtoMessage() {}

func (x *BetMultipleResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMultipleResp.ProtoReflect.Descriptor instead.
func (*BetMultipleResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{262}
}

func (x *BetMultipleResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BetMultipleResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BetMultipleResp) GetData() []*BetOptionMatchOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BetMultipleResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 订单数据对象
type BetOptionMatchOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`   // 订单ID
	St  int64                        `protobuf:"varint,2,opt,name=st,proto3" json:"st,omitempty"`  // 订单状态code
	Ops []*BetOptionMatchOrderOption `protobuf:"bytes,3,rep,name=ops,proto3" json:"ops,omitempty"` // 订单选项集合
}

func (x *BetOptionMatchOrder) Reset() {
	*x = BetOptionMatchOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetOptionMatchOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetOptionMatchOrder) ProtoMessage() {}

func (x *BetOptionMatchOrder) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetOptionMatchOrder.ProtoReflect.Descriptor instead.
func (*BetOptionMatchOrder) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{263}
}

func (x *BetOptionMatchOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetOptionMatchOrder) GetSt() int64 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *BetOptionMatchOrder) GetOps() []*BetOptionMatchOrderOption {
	if x != nil {
		return x.Ops
	}
	return nil
}

// 订单选项对象
type BetOptionMatchOrderOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid string `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"` // 盘口id
	Od  string `protobuf:"bytes,2,opt,name=od,proto3" json:"od,omitempty"`   // 欧式赔率
	Of  int64  `protobuf:"varint,3,opt,name=of,proto3" json:"of,omitempty"`  // 赔率类型
	Bod string `protobuf:"bytes,4,opt,name=bod,proto3" json:"bod,omitempty"` // 下注赔率
	Tr  string `protobuf:"bytes,5,opt,name=tr,proto3" json:"tr,omitempty"`   // 第三方备注
	Rid string `protobuf:"bytes,6,opt,name=rid,proto3" json:"rid,omitempty"` // 下单时三方带的订单ID
}

func (x *BetOptionMatchOrderOption) Reset() {
	*x = BetOptionMatchOrderOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetOptionMatchOrderOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetOptionMatchOrderOption) ProtoMessage() {}

func (x *BetOptionMatchOrderOption) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetOptionMatchOrderOption.ProtoReflect.Descriptor instead.
func (*BetOptionMatchOrderOption) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{264}
}

func (x *BetOptionMatchOrderOption) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *BetOptionMatchOrderOption) GetOd() string {
	if x != nil {
		return x.Od
	}
	return ""
}

func (x *BetOptionMatchOrderOption) GetOf() int64 {
	if x != nil {
		return x.Of
	}
	return 0
}

func (x *BetOptionMatchOrderOption) GetBod() string {
	if x != nil {
		return x.Bod
	}
	return ""
}

func (x *BetOptionMatchOrderOption) GetTr() string {
	if x != nil {
		return x.Tr
	}
	return ""
}

func (x *BetOptionMatchOrderOption) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

// 投注记录接口
type FbBetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsettledAllowTimeRange bool   `protobuf:"varint,1,opt,name=unsettledAllowTimeRange,proto3" json:"unsettledAllowTimeRange,omitempty"` // 查询未结算订单时，是否支持时间范围筛选（可选）
	IsSettled               bool   `protobuf:"varint,2,opt,name=isSettled,proto3" json:"isSettled,omitempty"`                             // true: 查询已结算订单，false: 查询未结算订单（必填）
	StartTime               int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`                             // 查询已结算订单的开始时间，13位时间戳（当 isSettled=true 时必填）
	EndTime                 int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`                                 // 查询已结算订单的结束时间，13位时间戳（当 isSettled=true 时必填）
	LanguageType            string `protobuf:"bytes,5,opt,name=languageType,proto3" json:"languageType,omitempty"`                        // 国际化语言类型，如 CMN（中文）、ENG（英文），默认英文（可选）
	Current                 int32  `protobuf:"varint,6,opt,name=current,proto3" json:"current,omitempty"`                                 // 当前分页页数，从 1 开始（可选）
	Size                    int32  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                       // 每页返回的订单条数（可选）
	TimeType                int32  `protobuf:"varint,8,opt,name=timeType,proto3" json:"timeType,omitempty"`                               // 时间范围类型，1: 下单时间，2: 结算时间（可选）
	CurrencyId              int32  `protobuf:"varint,9,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                           // 币种 ID，例如 USD、CNY 等（可选）
	MerchantUserId          string `protobuf:"bytes,10,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`                   // 商户uid
}

func (x *FbBetListReq) Reset() {
	*x = FbBetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbBetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbBetListReq) ProtoMessage() {}

func (x *FbBetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbBetListReq.ProtoReflect.Descriptor instead.
func (*FbBetListReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{265}
}

func (x *FbBetListReq) GetUnsettledAllowTimeRange() bool {
	if x != nil {
		return x.UnsettledAllowTimeRange
	}
	return false
}

func (x *FbBetListReq) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *FbBetListReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FbBetListReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FbBetListReq) GetLanguageType() string {
	if x != nil {
		return x.LanguageType
	}
	return ""
}

func (x *FbBetListReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FbBetListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FbBetListReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *FbBetListReq) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *FbBetListReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

type FbBetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *FbBetListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64          `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"` // 返回码
}

func (x *FbBetListResp) Reset() {
	*x = FbBetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbBetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbBetListResp) ProtoMessage() {}

func (x *FbBetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbBetListResp.ProtoReflect.Descriptor instead.
func (*FbBetListResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{266}
}

func (x *FbBetListResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbBetListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbBetListResp) GetData() *FbBetListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbBetListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type FbBetListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int32              `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size      int32              `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total     int32              `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalType int32              `protobuf:"varint,4,opt,name=totalType,proto3" json:"totalType,omitempty"`
	Records   []*FbBetListRecord `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	Tamt      float64            `protobuf:"fixed64,6,opt,name=tamt,proto3" json:"tamt,omitempty"`
	Tsamt     float64            `protobuf:"fixed64,7,opt,name=tsamt,proto3" json:"tsamt,omitempty"`
}

func (x *FbBetListData) Reset() {
	*x = FbBetListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbBetListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbBetListData) ProtoMessage() {}

func (x *FbBetListData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbBetListData.ProtoReflect.Descriptor instead.
func (*FbBetListData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{267}
}

func (x *FbBetListData) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FbBetListData) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FbBetListData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FbBetListData) GetTotalType() int32 {
	if x != nil {
		return x.TotalType
	}
	return 0
}

func (x *FbBetListData) GetRecords() []*FbBetListRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *FbBetListData) GetTamt() float64 {
	if x != nil {
		return x.Tamt
	}
	return 0
}

func (x *FbBetListData) GetTsamt() float64 {
	if x != nil {
		return x.Tsamt
	}
	return 0
}

type FbBetListRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sert int32                 `protobuf:"varint,1,opt,name=sert,proto3" json:"sert,omitempty"`
	St   int32                 `protobuf:"varint,2,opt,name=st,proto3" json:"st,omitempty"`
	Ab   bool                  `protobuf:"varint,3,opt,name=ab,proto3" json:"ab,omitempty"`
	Sv   int32                 `protobuf:"varint,4,opt,name=sv,proto3" json:"sv,omitempty"`
	Mla  float64               `protobuf:"fixed64,5,opt,name=mla,proto3" json:"mla,omitempty"`
	Sat  float64               `protobuf:"fixed64,6,opt,name=sat,proto3" json:"sat,omitempty"`
	Mt   int64                 `protobuf:"varint,7,opt,name=mt,proto3" json:"mt,omitempty"`
	Al   int32                 `protobuf:"varint,8,opt,name=al,proto3" json:"al,omitempty"`
	Bn   int32                 `protobuf:"varint,9,opt,name=bn,proto3" json:"bn,omitempty"`
	Bt   string                `protobuf:"bytes,10,opt,name=bt,proto3" json:"bt,omitempty"`
	Ops  []*FbBetListRecordOps `protobuf:"bytes,11,rep,name=ops,proto3" json:"ops,omitempty"`
	Oc   int32                 `protobuf:"varint,12,opt,name=oc,proto3" json:"oc,omitempty"`
	Cte  float64               `protobuf:"fixed64,13,opt,name=cte,proto3" json:"cte,omitempty"`
	Mwa  float64               `protobuf:"fixed64,14,opt,name=mwa,proto3" json:"mwa,omitempty"`
	Lwa  float64               `protobuf:"fixed64,15,opt,name=lwa,proto3" json:"lwa,omitempty"`
	Ic   int32                 `protobuf:"varint,16,opt,name=ic,proto3" json:"ic,omitempty"`
	Id   string                `protobuf:"bytes,17,opt,name=id,proto3" json:"id,omitempty"`
	Us   float64               `protobuf:"fixed64,18,opt,name=us,proto3" json:"us,omitempty"`
	Exr  float64               `protobuf:"fixed64,19,opt,name=exr,proto3" json:"exr,omitempty"`
	Cid  int32                 `protobuf:"varint,20,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *FbBetListRecord) Reset() {
	*x = FbBetListRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbBetListRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbBetListRecord) ProtoMessage() {}

func (x *FbBetListRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbBetListRecord.ProtoReflect.Descriptor instead.
func (*FbBetListRecord) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{268}
}

func (x *FbBetListRecord) GetSert() int32 {
	if x != nil {
		return x.Sert
	}
	return 0
}

func (x *FbBetListRecord) GetSt() int32 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *FbBetListRecord) GetAb() bool {
	if x != nil {
		return x.Ab
	}
	return false
}

func (x *FbBetListRecord) GetSv() int32 {
	if x != nil {
		return x.Sv
	}
	return 0
}

func (x *FbBetListRecord) GetMla() float64 {
	if x != nil {
		return x.Mla
	}
	return 0
}

func (x *FbBetListRecord) GetSat() float64 {
	if x != nil {
		return x.Sat
	}
	return 0
}

func (x *FbBetListRecord) GetMt() int64 {
	if x != nil {
		return x.Mt
	}
	return 0
}

func (x *FbBetListRecord) GetAl() int32 {
	if x != nil {
		return x.Al
	}
	return 0
}

func (x *FbBetListRecord) GetBn() int32 {
	if x != nil {
		return x.Bn
	}
	return 0
}

func (x *FbBetListRecord) GetBt() string {
	if x != nil {
		return x.Bt
	}
	return ""
}

func (x *FbBetListRecord) GetOps() []*FbBetListRecordOps {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *FbBetListRecord) GetOc() int32 {
	if x != nil {
		return x.Oc
	}
	return 0
}

func (x *FbBetListRecord) GetCte() float64 {
	if x != nil {
		return x.Cte
	}
	return 0
}

func (x *FbBetListRecord) GetMwa() float64 {
	if x != nil {
		return x.Mwa
	}
	return 0
}

func (x *FbBetListRecord) GetLwa() float64 {
	if x != nil {
		return x.Lwa
	}
	return 0
}

func (x *FbBetListRecord) GetIc() int32 {
	if x != nil {
		return x.Ic
	}
	return 0
}

func (x *FbBetListRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FbBetListRecord) GetUs() float64 {
	if x != nil {
		return x.Us
	}
	return 0
}

func (x *FbBetListRecord) GetExr() float64 {
	if x != nil {
		return x.Exr
	}
	return 0
}

func (x *FbBetListRecord) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

type FbBetListRecordOps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mn   string                    `protobuf:"bytes,1,opt,name=mn,proto3" json:"mn,omitempty"`
	Ln   string                    `protobuf:"bytes,2,opt,name=ln,proto3" json:"ln,omitempty"`
	Ty   int32                     `protobuf:"varint,3,opt,name=ty,proto3" json:"ty,omitempty"`
	Ip   bool                      `protobuf:"varint,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Mtp  int32                     `protobuf:"varint,5,opt,name=mtp,proto3" json:"mtp,omitempty"`
	Mid  int32                     `protobuf:"varint,6,opt,name=mid,proto3" json:"mid,omitempty"`
	Bo   string                    `protobuf:"bytes,7,opt,name=bo,proto3" json:"bo,omitempty"`
	Sid  int32                     `protobuf:"varint,8,opt,name=sid,proto3" json:"sid,omitempty"`
	Onm  string                    `protobuf:"bytes,9,opt,name=onm,proto3" json:"onm,omitempty"`
	Te   []*FbBetListRecordOpsTeam `protobuf:"bytes,10,rep,name=te,proto3" json:"te,omitempty"`
	Bt   int64                     `protobuf:"varint,11,opt,name=bt,proto3" json:"bt,omitempty"`
	Mty  int32                     `protobuf:"varint,12,opt,name=mty,proto3" json:"mty,omitempty"`
	Mrid int32                     `protobuf:"varint,13,opt,name=mrid,proto3" json:"mrid,omitempty"`
	Pe   int32                     `protobuf:"varint,14,opt,name=pe,proto3" json:"pe,omitempty"`
	Od   float64                   `protobuf:"fixed64,15,opt,name=od,proto3" json:"od,omitempty"`
	Mgn  string                    `protobuf:"bytes,16,opt,name=mgn,proto3" json:"mgn,omitempty"`
	Of   int32                     `protobuf:"varint,17,opt,name=of,proto3" json:"of,omitempty"`
	Li   string                    `protobuf:"bytes,18,opt,name=li,proto3" json:"li,omitempty"`
	On   string                    `protobuf:"bytes,19,opt,name=on,proto3" json:"on,omitempty"`
}

func (x *FbBetListRecordOps) Reset() {
	*x = FbBetListRecordOps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbBetListRecordOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbBetListRecordOps) ProtoMessage() {}

func (x *FbBetListRecordOps) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbBetListRecordOps.ProtoReflect.Descriptor instead.
func (*FbBetListRecordOps) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{269}
}

func (x *FbBetListRecordOps) GetMn() string {
	if x != nil {
		return x.Mn
	}
	return ""
}

func (x *FbBetListRecordOps) GetLn() string {
	if x != nil {
		return x.Ln
	}
	return ""
}

func (x *FbBetListRecordOps) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *FbBetListRecordOps) GetIp() bool {
	if x != nil {
		return x.Ip
	}
	return false
}

func (x *FbBetListRecordOps) GetMtp() int32 {
	if x != nil {
		return x.Mtp
	}
	return 0
}

func (x *FbBetListRecordOps) GetMid() int32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *FbBetListRecordOps) GetBo() string {
	if x != nil {
		return x.Bo
	}
	return ""
}

func (x *FbBetListRecordOps) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *FbBetListRecordOps) GetOnm() string {
	if x != nil {
		return x.Onm
	}
	return ""
}

func (x *FbBetListRecordOps) GetTe() []*FbBetListRecordOpsTeam {
	if x != nil {
		return x.Te
	}
	return nil
}

func (x *FbBetListRecordOps) GetBt() int64 {
	if x != nil {
		return x.Bt
	}
	return 0
}

func (x *FbBetListRecordOps) GetMty() int32 {
	if x != nil {
		return x.Mty
	}
	return 0
}

func (x *FbBetListRecordOps) GetMrid() int32 {
	if x != nil {
		return x.Mrid
	}
	return 0
}

func (x *FbBetListRecordOps) GetPe() int32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *FbBetListRecordOps) GetOd() float64 {
	if x != nil {
		return x.Od
	}
	return 0
}

func (x *FbBetListRecordOps) GetMgn() string {
	if x != nil {
		return x.Mgn
	}
	return ""
}

func (x *FbBetListRecordOps) GetOf() int32 {
	if x != nil {
		return x.Of
	}
	return 0
}

func (x *FbBetListRecordOps) GetLi() string {
	if x != nil {
		return x.Li
	}
	return ""
}

func (x *FbBetListRecordOps) GetOn() string {
	if x != nil {
		return x.On
	}
	return ""
}

type FbBetListRecordOpsTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lurl string `protobuf:"bytes,1,opt,name=lurl,proto3" json:"lurl,omitempty"`
	Na   string `protobuf:"bytes,2,opt,name=na,proto3" json:"na,omitempty"`
	Id   int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FbBetListRecordOpsTeam) Reset() {
	*x = FbBetListRecordOpsTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbBetListRecordOpsTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbBetListRecordOpsTeam) ProtoMessage() {}

func (x *FbBetListRecordOpsTeam) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbBetListRecordOpsTeam.ProtoReflect.Descriptor instead.
func (*FbBetListRecordOpsTeam) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{270}
}

func (x *FbBetListRecordOpsTeam) GetLurl() string {
	if x != nil {
		return x.Lurl
	}
	return ""
}

func (x *FbBetListRecordOpsTeam) GetNa() string {
	if x != nil {
		return x.Na
	}
	return ""
}

func (x *FbBetListRecordOpsTeam) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 投注记录接口，并按币种统计
// 请求消息
type FbNewBetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsettledAllowTimeRange bool   `protobuf:"varint,1,opt,name=unsettledAllowTimeRange,proto3" json:"unsettledAllowTimeRange,omitempty"` // 查询未结算订单时支持时间范围筛选
	IsSettled               bool   `protobuf:"varint,2,opt,name=isSettled,proto3" json:"isSettled,omitempty"`                             // true: 查询已结算列表, false: 查询未结算列表
	StartTime               int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`                             // 开始时间 (13位数字时间戳), 查询已结算列表时必填
	EndTime                 int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`                                 // 结束时间 (13位数字时间戳), 查询已结算列表时必填
	LanguageType            string `protobuf:"bytes,5,opt,name=languageType,proto3" json:"languageType,omitempty"`                        // 国际化语言类型，默认英语
	Current                 int32  `protobuf:"varint,6,opt,name=current,proto3" json:"current,omitempty"`                                 // 当前分页页数，从1开始
	Size                    int32  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                       // 每页订单条数
	TimeType                int32  `protobuf:"varint,8,opt,name=timeType,proto3" json:"timeType,omitempty"`                               // 时间范围类型: 1-下单时间, 2-结算时间
	CurrencyId              int32  `protobuf:"varint,9,opt,name=currencyId,proto3" json:"currencyId,omitempty"`                           // 币种ID
	MerchantUserId          string `protobuf:"bytes,10,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"`                   // 商户uid
}

func (x *FbNewBetListReq) Reset() {
	*x = FbNewBetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListReq) ProtoMessage() {}

func (x *FbNewBetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListReq.ProtoReflect.Descriptor instead.
func (*FbNewBetListReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{271}
}

func (x *FbNewBetListReq) GetUnsettledAllowTimeRange() bool {
	if x != nil {
		return x.UnsettledAllowTimeRange
	}
	return false
}

func (x *FbNewBetListReq) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *FbNewBetListReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FbNewBetListReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FbNewBetListReq) GetLanguageType() string {
	if x != nil {
		return x.LanguageType
	}
	return ""
}

func (x *FbNewBetListReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FbNewBetListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FbNewBetListReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *FbNewBetListReq) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *FbNewBetListReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

// 响应消息
type FbNewBetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 成功的标志，true / false
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 描述信息
	Data    *FbNewBetListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`        // 数据
	Code    int32             `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`       // 返回码
}

func (x *FbNewBetListResp) Reset() {
	*x = FbNewBetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListResp) ProtoMessage() {}

func (x *FbNewBetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListResp.ProtoReflect.Descriptor instead.
func (*FbNewBetListResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{272}
}

func (x *FbNewBetListResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbNewBetListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbNewBetListResp) GetData() *FbNewBetListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbNewBetListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 订单数据对象
type FbNewBetListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int32                 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`     // 当前页码
	Size      int32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`           // 每页大小
	Total     int32                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`         // 总记录数
	TotalType int32                 `protobuf:"varint,4,opt,name=totalType,proto3" json:"totalType,omitempty"` // 类型总数
	Records   []*FbNewBetListRecord `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`      // 订单记录
	Sts       []*FbNewBetListSts    `protobuf:"bytes,6,rep,name=sts,proto3" json:"sts,omitempty"`              // 分币种统计
}

func (x *FbNewBetListData) Reset() {
	*x = FbNewBetListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListData) ProtoMessage() {}

func (x *FbNewBetListData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListData.ProtoReflect.Descriptor instead.
func (*FbNewBetListData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{273}
}

func (x *FbNewBetListData) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FbNewBetListData) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FbNewBetListData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FbNewBetListData) GetTotalType() int32 {
	if x != nil {
		return x.TotalType
	}
	return 0
}

func (x *FbNewBetListData) GetRecords() []*FbNewBetListRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *FbNewBetListData) GetSts() []*FbNewBetListSts {
	if x != nil {
		return x.Sts
	}
	return nil
}

type FbNewBetListSts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid int32   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`  // 币种ID
	Ct  int32   `protobuf:"varint,2,opt,name=ct,proto3" json:"ct,omitempty"`    // 订单数
	Sa  float64 `protobuf:"fixed64,3,opt,name=sa,proto3" json:"sa,omitempty"`   // 总投注金额
	Pa  float64 `protobuf:"fixed64,4,opt,name=pa,proto3" json:"pa,omitempty"`   // 总派彩金额
	Cwl float64 `protobuf:"fixed64,5,opt,name=cwl,proto3" json:"cwl,omitempty"` // 总用户输赢
}

func (x *FbNewBetListSts) Reset() {
	*x = FbNewBetListSts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListSts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListSts) ProtoMessage() {}

func (x *FbNewBetListSts) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListSts.ProtoReflect.Descriptor instead.
func (*FbNewBetListSts) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{274}
}

func (x *FbNewBetListSts) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *FbNewBetListSts) GetCt() int32 {
	if x != nil {
		return x.Ct
	}
	return 0
}

func (x *FbNewBetListSts) GetSa() float64 {
	if x != nil {
		return x.Sa
	}
	return 0
}

func (x *FbNewBetListSts) GetPa() float64 {
	if x != nil {
		return x.Pa
	}
	return 0
}

func (x *FbNewBetListSts) GetCwl() float64 {
	if x != nil {
		return x.Cwl
	}
	return 0
}

// 订单记录
type FbNewBetListRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rj   int32                    `protobuf:"varint,1,opt,name=rj,proto3" json:"rj,omitempty"`       // 拒单原因码
	Rjs  string                   `protobuf:"bytes,2,opt,name=rjs,proto3" json:"rjs,omitempty"`      // 拒单原因
	Ops  []*FbNewBetListRecordOps `protobuf:"bytes,3,rep,name=ops,proto3" json:"ops,omitempty"`      // 订单选项详情
	Id   string                   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`        // 订单号
	Uwl  string                   `protobuf:"bytes,5,opt,name=uwl,proto3" json:"uwl,omitempty"`      // 用户输赢
	Sert int32                    `protobuf:"varint,6,opt,name=sert,proto3" json:"sert,omitempty"`   // 注单类型 (0: 单注 1: 串关)
	Bn   int32                    `protobuf:"varint,7,opt,name=bn,proto3" json:"bn,omitempty"`       // 总注单数
	Al   int32                    `protobuf:"varint,8,opt,name=al,proto3" json:"al,omitempty"`       // 选项个数
	Sat  float64                  `protobuf:"fixed64,9,opt,name=sat,proto3" json:"sat,omitempty"`    // 总投注额(本金)
	Sa   float64                  `protobuf:"fixed64,10,opt,name=sa,proto3" json:"sa,omitempty"`     // 正常结算派奖金额
	St   int32                    `protobuf:"varint,11,opt,name=st,proto3" json:"st,omitempty"`      // 订单状态
	Oc   int32                    `protobuf:"varint,12,opt,name=oc,proto3" json:"oc,omitempty"`      // 是否接受赔率变更设置
	Stm  int64                    `protobuf:"varint,13,opt,name=stm,proto3" json:"stm,omitempty"`    // 订单结算时间
	Cte  int64                    `protobuf:"varint,14,opt,name=cte,proto3" json:"cte,omitempty"`    // 订单下单时间
	Ct   int64                    `protobuf:"varint,15,opt,name=ct,proto3" json:"ct,omitempty"`      // 订单取消时间
	Mt   int64                    `protobuf:"varint,16,opt,name=mt,proto3" json:"mt,omitempty"`      // 订单变更时间
	Rmk  string                   `protobuf:"bytes,17,opt,name=rmk,proto3" json:"rmk,omitempty"`     // 第三方备注
	Us   float64                  `protobuf:"fixed64,18,opt,name=us,proto3" json:"us,omitempty"`     // 单笔投注金额
	Bt   string                   `protobuf:"bytes,19,opt,name=bt,proto3" json:"bt,omitempty"`       // 串关类型
	Cots float64                  `protobuf:"fixed64,20,opt,name=cots,proto3" json:"cots,omitempty"` // 提前结算总本金
	Cops float64                  `protobuf:"fixed64,21,opt,name=cops,proto3" json:"cops,omitempty"` // 提前结算派彩金额
	Coc  int32                    `protobuf:"varint,22,opt,name=coc,proto3" json:"coc,omitempty"`    // 提前结算总次数
	Ab   bool                     `protobuf:"varint,23,opt,name=ab,proto3" json:"ab,omitempty"`      // 是否为预约投注单
	Ic   int32                    `protobuf:"varint,24,opt,name=ic,proto3" json:"ic,omitempty"`      // 选项个数，单关为1，串关为选项个数
	Sv   int32                    `protobuf:"varint,25,opt,name=sv,proto3" json:"sv,omitempty"`      // 串关子单选项个数
	Lwa  float64                  `protobuf:"fixed64,26,opt,name=lwa,proto3" json:"lwa,omitempty"`   // 剩余可赢额
	Mla  float64                  `protobuf:"fixed64,27,opt,name=mla,proto3" json:"mla,omitempty"`   // 可返还金额，包含本金
	Mwa  float64                  `protobuf:"fixed64,28,opt,name=mwa,proto3" json:"mwa,omitempty"`   // 最大可赢额，不包含本金
	Cid  int32                    `protobuf:"varint,29,opt,name=cid,proto3" json:"cid,omitempty"`    // 币种ID
	Exr  float64                  `protobuf:"fixed64,30,opt,name=exr,proto3" json:"exr,omitempty"`   // 汇率快照
	Co   int32                    `protobuf:"varint,31,opt,name=co,proto3" json:"co,omitempty"`      // 是否支持提前结算
	Ss   bool                     `protobuf:"varint,32,opt,name=ss,proto3" json:"ss,omitempty"`      // 是否二次结算
	Sts  []*FbNewBetListRecordSts `protobuf:"bytes,33,rep,name=sts,proto3" json:"sts,omitempty"`     // 分币种统计
}

func (x *FbNewBetListRecord) Reset() {
	*x = FbNewBetListRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListRecord) ProtoMessage() {}

func (x *FbNewBetListRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListRecord.ProtoReflect.Descriptor instead.
func (*FbNewBetListRecord) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{275}
}

func (x *FbNewBetListRecord) GetRj() int32 {
	if x != nil {
		return x.Rj
	}
	return 0
}

func (x *FbNewBetListRecord) GetRjs() string {
	if x != nil {
		return x.Rjs
	}
	return ""
}

func (x *FbNewBetListRecord) GetOps() []*FbNewBetListRecordOps {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *FbNewBetListRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FbNewBetListRecord) GetUwl() string {
	if x != nil {
		return x.Uwl
	}
	return ""
}

func (x *FbNewBetListRecord) GetSert() int32 {
	if x != nil {
		return x.Sert
	}
	return 0
}

func (x *FbNewBetListRecord) GetBn() int32 {
	if x != nil {
		return x.Bn
	}
	return 0
}

func (x *FbNewBetListRecord) GetAl() int32 {
	if x != nil {
		return x.Al
	}
	return 0
}

func (x *FbNewBetListRecord) GetSat() float64 {
	if x != nil {
		return x.Sat
	}
	return 0
}

func (x *FbNewBetListRecord) GetSa() float64 {
	if x != nil {
		return x.Sa
	}
	return 0
}

func (x *FbNewBetListRecord) GetSt() int32 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *FbNewBetListRecord) GetOc() int32 {
	if x != nil {
		return x.Oc
	}
	return 0
}

func (x *FbNewBetListRecord) GetStm() int64 {
	if x != nil {
		return x.Stm
	}
	return 0
}

func (x *FbNewBetListRecord) GetCte() int64 {
	if x != nil {
		return x.Cte
	}
	return 0
}

func (x *FbNewBetListRecord) GetCt() int64 {
	if x != nil {
		return x.Ct
	}
	return 0
}

func (x *FbNewBetListRecord) GetMt() int64 {
	if x != nil {
		return x.Mt
	}
	return 0
}

func (x *FbNewBetListRecord) GetRmk() string {
	if x != nil {
		return x.Rmk
	}
	return ""
}

func (x *FbNewBetListRecord) GetUs() float64 {
	if x != nil {
		return x.Us
	}
	return 0
}

func (x *FbNewBetListRecord) GetBt() string {
	if x != nil {
		return x.Bt
	}
	return ""
}

func (x *FbNewBetListRecord) GetCots() float64 {
	if x != nil {
		return x.Cots
	}
	return 0
}

func (x *FbNewBetListRecord) GetCops() float64 {
	if x != nil {
		return x.Cops
	}
	return 0
}

func (x *FbNewBetListRecord) GetCoc() int32 {
	if x != nil {
		return x.Coc
	}
	return 0
}

func (x *FbNewBetListRecord) GetAb() bool {
	if x != nil {
		return x.Ab
	}
	return false
}

func (x *FbNewBetListRecord) GetIc() int32 {
	if x != nil {
		return x.Ic
	}
	return 0
}

func (x *FbNewBetListRecord) GetSv() int32 {
	if x != nil {
		return x.Sv
	}
	return 0
}

func (x *FbNewBetListRecord) GetLwa() float64 {
	if x != nil {
		return x.Lwa
	}
	return 0
}

func (x *FbNewBetListRecord) GetMla() float64 {
	if x != nil {
		return x.Mla
	}
	return 0
}

func (x *FbNewBetListRecord) GetMwa() float64 {
	if x != nil {
		return x.Mwa
	}
	return 0
}

func (x *FbNewBetListRecord) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *FbNewBetListRecord) GetExr() float64 {
	if x != nil {
		return x.Exr
	}
	return 0
}

func (x *FbNewBetListRecord) GetCo() int32 {
	if x != nil {
		return x.Co
	}
	return 0
}

func (x *FbNewBetListRecord) GetSs() bool {
	if x != nil {
		return x.Ss
	}
	return false
}

func (x *FbNewBetListRecord) GetSts() []*FbNewBetListRecordSts {
	if x != nil {
		return x.Sts
	}
	return nil
}

// 订单选项详情
type FbNewBetListRecordOps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid  int32                      `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`         // 运动ID
	Mid  int32                      `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`         // 比赛ID
	Mn   string                     `protobuf:"bytes,3,opt,name=mn,proto3" json:"mn,omitempty"`            // 比赛名称
	Lid  int32                      `protobuf:"varint,4,opt,name=lid,proto3" json:"lid,omitempty"`         // 联赛ID
	Ln   string                     `protobuf:"bytes,5,opt,name=ln,proto3" json:"ln,omitempty"`            // 联赛名称
	Bt   int64                      `protobuf:"varint,6,opt,name=bt,proto3" json:"bt,omitempty"`           // 比赛开赛时间
	Pe   int32                      `protobuf:"varint,7,opt,name=pe,proto3" json:"pe,omitempty"`           // 玩法阶段code
	Mty  int32                      `protobuf:"varint,8,opt,name=mty,proto3" json:"mty,omitempty"`         // 玩法类型code
	On   string                     `protobuf:"bytes,9,opt,name=on,proto3" json:"on,omitempty"`            // 投注选项完整名称
	Onm  string                     `protobuf:"bytes,10,opt,name=onm,proto3" json:"onm,omitempty"`         // 投注选项名称(全名or简名)
	Ip   bool                       `protobuf:"varint,11,opt,name=ip,proto3" json:"ip,omitempty"`          // 是否滚球玩法
	Te   []*FbNewBetListRecordOpsTe `protobuf:"bytes,12,rep,name=te,proto3" json:"te,omitempty"`           // 比赛球队信息
	Rs   string                     `protobuf:"bytes,13,opt,name=rs,proto3" json:"rs,omitempty"`           // 订单结算时比分
	Sr   int32                      `protobuf:"varint,14,opt,name=sr,proto3" json:"sr,omitempty"`          // 选项结算结果
	Bo   string                     `protobuf:"bytes,15,opt,name=bo,proto3" json:"bo,omitempty"`           // 展示赔率
	Of   int32                      `protobuf:"varint,16,opt,name=of,proto3" json:"of,omitempty"`          // 下注时赔率类型
	Li   string                     `protobuf:"bytes,17,opt,name=li,proto3" json:"li,omitempty"`           // 带线（球头）的玩法对应的值
	Rmk  string                     `protobuf:"bytes,18,opt,name=rmk,proto3" json:"rmk,omitempty"`         // 备注
	Re   string                     `protobuf:"bytes,19,opt,name=re,proto3" json:"re,omitempty"`           // 扩展信息
	Mrid int32                      `protobuf:"varint,20,opt,name=mrid,proto3" json:"mrid,omitempty"`      // 选项的玩法ID
	Ty   int32                      `protobuf:"varint,21,opt,name=ty,proto3" json:"ty,omitempty"`          // 选项类型
	Od   float64                    `protobuf:"fixed64,22,opt,name=od,proto3" json:"od,omitempty"`         // 欧盘赔率
	Mgn  string                     `protobuf:"bytes,23,opt,name=mgn,proto3" json:"mgn,omitempty"`         // 玩法名称
	Cr   string                     `protobuf:"bytes,24,opt,name=cr,proto3" json:"cr,omitempty"`           // 取消原因
	Mtp  int32                      `protobuf:"varint,25,opt,name=mtp,proto3" json:"mtp,omitempty"`        // 赛事类型
	Fmt  int32                      `protobuf:"varint,26,opt,name=fmt,proto3" json:"fmt,omitempty"`        // 赛制
	Fid  int32                      `protobuf:"varint,27,opt,name=fid,proto3" json:"fid,omitempty"`        // 场次、局数、节数
	Ms   int32                      `protobuf:"varint,28,opt,name=ms,proto3" json:"ms,omitempty"`          // 赛事状态
	Scs  []int32                    `protobuf:"varint,29,rep,packed,name=scs,proto3" json:"scs,omitempty"` // 当前比分
	Bsc  string                     `protobuf:"bytes,30,opt,name=bsc,proto3" json:"bsc,omitempty"`         // 下注时比分
	Mc   *FbNewBetListRecordOpsMc   `protobuf:"bytes,31,opt,name=mc,proto3" json:"mc,omitempty"`           // 比赛时钟信息
}

func (x *FbNewBetListRecordOps) Reset() {
	*x = FbNewBetListRecordOps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListRecordOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListRecordOps) ProtoMessage() {}

func (x *FbNewBetListRecordOps) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListRecordOps.ProtoReflect.Descriptor instead.
func (*FbNewBetListRecordOps) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{276}
}

func (x *FbNewBetListRecordOps) GetSid() int32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetMid() int32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetMn() string {
	if x != nil {
		return x.Mn
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetLid() int32 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetLn() string {
	if x != nil {
		return x.Ln
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetBt() int64 {
	if x != nil {
		return x.Bt
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetPe() int32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetMty() int32 {
	if x != nil {
		return x.Mty
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetOn() string {
	if x != nil {
		return x.On
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetOnm() string {
	if x != nil {
		return x.Onm
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetIp() bool {
	if x != nil {
		return x.Ip
	}
	return false
}

func (x *FbNewBetListRecordOps) GetTe() []*FbNewBetListRecordOpsTe {
	if x != nil {
		return x.Te
	}
	return nil
}

func (x *FbNewBetListRecordOps) GetRs() string {
	if x != nil {
		return x.Rs
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetSr() int32 {
	if x != nil {
		return x.Sr
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetBo() string {
	if x != nil {
		return x.Bo
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetOf() int32 {
	if x != nil {
		return x.Of
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetLi() string {
	if x != nil {
		return x.Li
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetRmk() string {
	if x != nil {
		return x.Rmk
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetRe() string {
	if x != nil {
		return x.Re
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetMrid() int32 {
	if x != nil {
		return x.Mrid
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetOd() float64 {
	if x != nil {
		return x.Od
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetMgn() string {
	if x != nil {
		return x.Mgn
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetCr() string {
	if x != nil {
		return x.Cr
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetMtp() int32 {
	if x != nil {
		return x.Mtp
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetFmt() int32 {
	if x != nil {
		return x.Fmt
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetFid() int32 {
	if x != nil {
		return x.Fid
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetMs() int32 {
	if x != nil {
		return x.Ms
	}
	return 0
}

func (x *FbNewBetListRecordOps) GetScs() []int32 {
	if x != nil {
		return x.Scs
	}
	return nil
}

func (x *FbNewBetListRecordOps) GetBsc() string {
	if x != nil {
		return x.Bsc
	}
	return ""
}

func (x *FbNewBetListRecordOps) GetMc() *FbNewBetListRecordOpsMc {
	if x != nil {
		return x.Mc
	}
	return nil
}

// 比赛时钟信息
type FbNewBetListRecordOpsMc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S   int32 `protobuf:"varint,1,opt,name=s,proto3" json:"s,omitempty"`     // 走表时间
	Pe  int32 `protobuf:"varint,2,opt,name=pe,proto3" json:"pe,omitempty"`   // 赛事阶段
	R   bool  `protobuf:"varint,3,opt,name=r,proto3" json:"r,omitempty"`     // 是否走表
	Tp  int32 `protobuf:"varint,4,opt,name=tp,proto3" json:"tp,omitempty"`   // 走表类型
	Itd int32 `protobuf:"varint,5,opt,name=itd,proto3" json:"itd,omitempty"` // 伤停补时时长
}

func (x *FbNewBetListRecordOpsMc) Reset() {
	*x = FbNewBetListRecordOpsMc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListRecordOpsMc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListRecordOpsMc) ProtoMessage() {}

func (x *FbNewBetListRecordOpsMc) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListRecordOpsMc.ProtoReflect.Descriptor instead.
func (*FbNewBetListRecordOpsMc) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{277}
}

func (x *FbNewBetListRecordOpsMc) GetS() int32 {
	if x != nil {
		return x.S
	}
	return 0
}

func (x *FbNewBetListRecordOpsMc) GetPe() int32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *FbNewBetListRecordOpsMc) GetR() bool {
	if x != nil {
		return x.R
	}
	return false
}

func (x *FbNewBetListRecordOpsMc) GetTp() int32 {
	if x != nil {
		return x.Tp
	}
	return 0
}

func (x *FbNewBetListRecordOpsMc) GetItd() int32 {
	if x != nil {
		return x.Itd
	}
	return 0
}

// 比赛球队信息
type FbNewBetListRecordOpsTe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Na string `protobuf:"bytes,1,opt,name=na,proto3" json:"na,omitempty"`  // 球队名称
	Id int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // 球队id
}

func (x *FbNewBetListRecordOpsTe) Reset() {
	*x = FbNewBetListRecordOpsTe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListRecordOpsTe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListRecordOpsTe) ProtoMessage() {}

func (x *FbNewBetListRecordOpsTe) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListRecordOpsTe.ProtoReflect.Descriptor instead.
func (*FbNewBetListRecordOpsTe) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{278}
}

func (x *FbNewBetListRecordOpsTe) GetNa() string {
	if x != nil {
		return x.Na
	}
	return ""
}

func (x *FbNewBetListRecordOpsTe) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 分币种统计
type FbNewBetListRecordSts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid int32   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`  // 币种ID
	Ct  int32   `protobuf:"varint,2,opt,name=ct,proto3" json:"ct,omitempty"`    // 订单数
	Sa  float64 `protobuf:"fixed64,3,opt,name=sa,proto3" json:"sa,omitempty"`   // 总投注金额
	Pa  float64 `protobuf:"fixed64,4,opt,name=pa,proto3" json:"pa,omitempty"`   // 总派彩金额
	Cwl float64 `protobuf:"fixed64,5,opt,name=cwl,proto3" json:"cwl,omitempty"` // 总用户输赢
}

func (x *FbNewBetListRecordSts) Reset() {
	*x = FbNewBetListRecordSts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbNewBetListRecordSts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbNewBetListRecordSts) ProtoMessage() {}

func (x *FbNewBetListRecordSts) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbNewBetListRecordSts.ProtoReflect.Descriptor instead.
func (*FbNewBetListRecordSts) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{279}
}

func (x *FbNewBetListRecordSts) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *FbNewBetListRecordSts) GetCt() int32 {
	if x != nil {
		return x.Ct
	}
	return 0
}

func (x *FbNewBetListRecordSts) GetSa() float64 {
	if x != nil {
		return x.Sa
	}
	return 0
}

func (x *FbNewBetListRecordSts) GetPa() float64 {
	if x != nil {
		return x.Pa
	}
	return 0
}

func (x *FbNewBetListRecordSts) GetCwl() float64 {
	if x != nil {
		return x.Cwl
	}
	return 0
}

// 批量获取投注订单状态
type GetStakeOrderStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderIds       []string `protobuf:"bytes,1,rep,name=orderIds,proto3" json:"orderIds,omitempty"`             // 订单ID集合
	LanguageType   string   `protobuf:"bytes,2,opt,name=languageType,proto3" json:"languageType,omitempty"`     // 语言类型 (optional)
	MerchantUserId string   `protobuf:"bytes,3,opt,name=merchantUserId,proto3" json:"merchantUserId,omitempty"` // 商户uid
}

func (x *GetStakeOrderStatusReq) Reset() {
	*x = GetStakeOrderStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeOrderStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeOrderStatusReq) ProtoMessage() {}

func (x *GetStakeOrderStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeOrderStatusReq.ProtoReflect.Descriptor instead.
func (*GetStakeOrderStatusReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{280}
}

func (x *GetStakeOrderStatusReq) GetOrderIds() []string {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

func (x *GetStakeOrderStatusReq) GetLanguageType() string {
	if x != nil {
		return x.LanguageType
	}
	return ""
}

func (x *GetStakeOrderStatusReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

// 批量获取投注订单状态请求
type GetStakeOrderStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Message string                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 描述信息
	Data    []*GetStakeOrderStatusOrderData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`        // 数据
	Code    int32                           `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`       // 返回码
}

func (x *GetStakeOrderStatusResp) Reset() {
	*x = GetStakeOrderStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeOrderStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeOrderStatusResp) ProtoMessage() {}

func (x *GetStakeOrderStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeOrderStatusResp.ProtoReflect.Descriptor instead.
func (*GetStakeOrderStatusResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{281}
}

func (x *GetStakeOrderStatusResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetStakeOrderStatusResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetStakeOrderStatusResp) GetData() []*GetStakeOrderStatusOrderData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetStakeOrderStatusResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type GetStakeOrderStatusOrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"` // 预约订单ID
	St  int32  `protobuf:"varint,2,opt,name=st,proto3" json:"st,omitempty"`  // 订单状态 (直接使用整数值)
	Rj  int32  `protobuf:"varint,3,opt,name=rj,proto3" json:"rj,omitempty"`  // 拒单原因码 (直接使用整数值)
	Rjs string `protobuf:"bytes,4,opt,name=rjs,proto3" json:"rjs,omitempty"` // 拒单原因
}

func (x *GetStakeOrderStatusOrderData) Reset() {
	*x = GetStakeOrderStatusOrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeOrderStatusOrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeOrderStatusOrderData) ProtoMessage() {}

func (x *GetStakeOrderStatusOrderData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeOrderStatusOrderData.ProtoReflect.Descriptor instead.
func (*GetStakeOrderStatusOrderData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{282}
}

func (x *GetStakeOrderStatusOrderData) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GetStakeOrderStatusOrderData) GetSt() int32 {
	if x != nil {
		return x.St
	}
	return 0
}

func (x *GetStakeOrderStatusOrderData) GetRj() int32 {
	if x != nil {
		return x.Rj
	}
	return 0
}

func (x *GetStakeOrderStatusOrderData) GetRjs() string {
	if x != nil {
		return x.Rjs
	}
	return ""
}

// inner type - end session
type HabaPlayerendsessionrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Accountid string `protobuf:"bytes,2,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Command   string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *HabaPlayerendsessionrequest) Reset() {
	*x = HabaPlayerendsessionrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaPlayerendsessionrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaPlayerendsessionrequest) ProtoMessage() {}

func (x *HabaPlayerendsessionrequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaPlayerendsessionrequest.ProtoReflect.Descriptor instead.
func (*HabaPlayerendsessionrequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{283}
}

func (x *HabaPlayerendsessionrequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HabaPlayerendsessionrequest) GetAccountid() string {
	if x != nil {
		return x.Accountid
	}
	return ""
}

func (x *HabaPlayerendsessionrequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type PlaceBetParlayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action         string                        `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	OperationId    string                        `protobuf:"bytes,2,opt,name=operationId,proto3" json:"operationId,omitempty"`
	UserId         string                        `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Currency       int32                         `protobuf:"varint,4,opt,name=currency,proto3" json:"currency,omitempty"`
	BetTime        string                        `protobuf:"bytes,5,opt,name=betTime,proto3" json:"betTime,omitempty"`
	UpdateTime     string                        `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TotalBetAmount float64                       `protobuf:"fixed64,7,opt,name=totalBetAmount,proto3" json:"totalBetAmount,omitempty"`
	Ip             string                        `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	TsId           string                        `protobuf:"bytes,9,opt,name=tsId,proto3" json:"tsId,omitempty"`
	BetFrom        string                        `protobuf:"bytes,10,opt,name=betFrom,proto3" json:"betFrom,omitempty"`
	CreditAmount   float64                       `protobuf:"fixed64,11,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount    float64                       `protobuf:"fixed64,12,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	VendorTransId  string                        `protobuf:"bytes,13,opt,name=vendorTransId,proto3" json:"vendorTransId,omitempty"`
	Txns           []*PlaceBetParlayTxns         `protobuf:"bytes,14,rep,name=Txns,proto3" json:"Txns,omitempty"`
	TicketDetail   []*PlaceBetParlayTicketDetail `protobuf:"bytes,15,rep,name=TicketDetail,proto3" json:"TicketDetail,omitempty"`
}

func (x *PlaceBetParlayMessage) Reset() {
	*x = PlaceBetParlayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetParlayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetParlayMessage) ProtoMessage() {}

func (x *PlaceBetParlayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetParlayMessage.ProtoReflect.Descriptor instead.
func (*PlaceBetParlayMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{284}
}

func (x *PlaceBetParlayMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *PlaceBetParlayMessage) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetTotalBetAmount() float64 {
	if x != nil {
		return x.TotalBetAmount
	}
	return 0
}

func (x *PlaceBetParlayMessage) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetTsId() string {
	if x != nil {
		return x.TsId
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetBetFrom() string {
	if x != nil {
		return x.BetFrom
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *PlaceBetParlayMessage) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *PlaceBetParlayMessage) GetVendorTransId() string {
	if x != nil {
		return x.VendorTransId
	}
	return ""
}

func (x *PlaceBetParlayMessage) GetTxns() []*PlaceBetParlayTxns {
	if x != nil {
		return x.Txns
	}
	return nil
}

func (x *PlaceBetParlayMessage) GetTicketDetail() []*PlaceBetParlayTicketDetail {
	if x != nil {
		return x.TicketDetail
	}
	return nil
}

type Place3RdParlayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        string                             `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	OperationId   string                             `protobuf:"bytes,2,opt,name=operationId,proto3" json:"operationId,omitempty"`
	UserId        string                             `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Currency      int64                              `protobuf:"varint,4,opt,name=currency,proto3" json:"currency,omitempty"`
	ProductId     int64                              `protobuf:"varint,5,opt,name=productId,proto3" json:"productId,omitempty"`
	GameId        int64                              `protobuf:"varint,6,opt,name=gameId,proto3" json:"gameId,omitempty"`
	BetTime       string                             `protobuf:"bytes,7,opt,name=betTime,proto3" json:"betTime,omitempty"`
	Ip            string                             `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	TsId          string                             `protobuf:"bytes,9,opt,name=tsId,proto3" json:"tsId,omitempty"`
	ProductNameEn string                             `protobuf:"bytes,10,opt,name=productNameEn,proto3" json:"productNameEn,omitempty"`
	GameNameEn    string                             `protobuf:"bytes,11,opt,name=gameNameEn,proto3" json:"gameNameEn,omitempty"`
	BetFrom       string                             `protobuf:"bytes,12,opt,name=betFrom,proto3" json:"betFrom,omitempty"`
	CreditAmount  float32                            `protobuf:"fixed32,13,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount   float32                            `protobuf:"fixed32,14,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	TicketList    []*Place3RdParlayTicketListMessage `protobuf:"bytes,15,rep,name=ticketList,proto3" json:"ticketList,omitempty"`
}

func (x *Place3RdParlayMessage) Reset() {
	*x = Place3RdParlayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place3RdParlayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place3RdParlayMessage) ProtoMessage() {}

func (x *Place3RdParlayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place3RdParlayMessage.ProtoReflect.Descriptor instead.
func (*Place3RdParlayMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{285}
}

func (x *Place3RdParlayMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Place3RdParlayMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *Place3RdParlayMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Place3RdParlayMessage) GetCurrency() int64 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *Place3RdParlayMessage) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Place3RdParlayMessage) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *Place3RdParlayMessage) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *Place3RdParlayMessage) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Place3RdParlayMessage) GetTsId() string {
	if x != nil {
		return x.TsId
	}
	return ""
}

func (x *Place3RdParlayMessage) GetProductNameEn() string {
	if x != nil {
		return x.ProductNameEn
	}
	return ""
}

func (x *Place3RdParlayMessage) GetGameNameEn() string {
	if x != nil {
		return x.GameNameEn
	}
	return ""
}

func (x *Place3RdParlayMessage) GetBetFrom() string {
	if x != nil {
		return x.BetFrom
	}
	return ""
}

func (x *Place3RdParlayMessage) GetCreditAmount() float32 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *Place3RdParlayMessage) GetDebitAmount() float32 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *Place3RdParlayMessage) GetTicketList() []*Place3RdParlayTicketListMessage {
	if x != nil {
		return x.TicketList
	}
	return nil
}

type Place3RdParlayTicketListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string                                `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	BetChoiceEn  string                                `protobuf:"bytes,2,opt,name=betChoiceEn,proto3" json:"betChoiceEn,omitempty"`
	Odds         float32                               `protobuf:"fixed32,3,opt,name=odds,proto3" json:"odds,omitempty"`
	OddsType     int64                                 `protobuf:"varint,4,opt,name=oddsType,proto3" json:"oddsType,omitempty"`
	BetAmount    float32                               `protobuf:"fixed32,5,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	ActualAmount float32                               `protobuf:"fixed32,6,opt,name=actualAmount,proto3" json:"actualAmount,omitempty"`
	Message      *Place3RdParlayTicketListExtraMessage `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	CreditAmount float32                               `protobuf:"fixed32,9,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount  float32                               `protobuf:"fixed32,10,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
}

func (x *Place3RdParlayTicketListMessage) Reset() {
	*x = Place3RdParlayTicketListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place3RdParlayTicketListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place3RdParlayTicketListMessage) ProtoMessage() {}

func (x *Place3RdParlayTicketListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place3RdParlayTicketListMessage.ProtoReflect.Descriptor instead.
func (*Place3RdParlayTicketListMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{286}
}

func (x *Place3RdParlayTicketListMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *Place3RdParlayTicketListMessage) GetBetChoiceEn() string {
	if x != nil {
		return x.BetChoiceEn
	}
	return ""
}

func (x *Place3RdParlayTicketListMessage) GetOdds() float32 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *Place3RdParlayTicketListMessage) GetOddsType() int64 {
	if x != nil {
		return x.OddsType
	}
	return 0
}

func (x *Place3RdParlayTicketListMessage) GetBetAmount() float32 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *Place3RdParlayTicketListMessage) GetActualAmount() float32 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *Place3RdParlayTicketListMessage) GetMessage() *Place3RdParlayTicketListExtraMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Place3RdParlayTicketListMessage) GetCreditAmount() float32 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *Place3RdParlayTicketListMessage) GetDebitAmount() float32 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

type Place3RdParlayTicketListExtraMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNo      int64  `protobuf:"varint,1,opt,name=gameNo,proto3" json:"gameNo,omitempty"`
	Range       int64  `protobuf:"varint,2,opt,name=range,proto3" json:"range,omitempty"`
	GameBetType string `protobuf:"bytes,3,opt,name=gameBetType,proto3" json:"gameBetType,omitempty"`
}

func (x *Place3RdParlayTicketListExtraMessage) Reset() {
	*x = Place3RdParlayTicketListExtraMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place3RdParlayTicketListExtraMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place3RdParlayTicketListExtraMessage) ProtoMessage() {}

func (x *Place3RdParlayTicketListExtraMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place3RdParlayTicketListExtraMessage.ProtoReflect.Descriptor instead.
func (*Place3RdParlayTicketListExtraMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{287}
}

func (x *Place3RdParlayTicketListExtraMessage) GetGameNo() int64 {
	if x != nil {
		return x.GameNo
	}
	return 0
}

func (x *Place3RdParlayTicketListExtraMessage) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *Place3RdParlayTicketListExtraMessage) GetGameBetType() string {
	if x != nil {
		return x.GameBetType
	}
	return ""
}

type TurboBodyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign          string  `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	TransactionId string  `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	RoundId       string  `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	GameId        string  `protobuf:"bytes,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Amount        float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency      string  `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	PlayerId      string  `protobuf:"bytes,7,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Token         string  `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TurboBodyReq) Reset() {
	*x = TurboBodyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurboBodyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurboBodyReq) ProtoMessage() {}

func (x *TurboBodyReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurboBodyReq.ProtoReflect.Descriptor instead.
func (*TurboBodyReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{288}
}

func (x *TurboBodyReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *TurboBodyReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TurboBodyReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *TurboBodyReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *TurboBodyReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TurboBodyReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TurboBodyReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *TurboBodyReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UUIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UUIDReq) Reset() {
	*x = UUIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDReq) ProtoMessage() {}

func (x *UUIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDReq.ProtoReflect.Descriptor instead.
func (*UUIDReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{289}
}

func (x *UUIDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// getbalance
type PinnacleGetbalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *PinnacleGetbalanceReq) Reset() {
	*x = PinnacleGetbalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleGetbalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleGetbalanceReq) ProtoMessage() {}

func (x *PinnacleGetbalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleGetbalanceReq.ProtoReflect.Descriptor instead.
func (*PinnacleGetbalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{290}
}

func (x *PinnacleGetbalanceReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PinnacleGetbalanceReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type PinnacleCreditRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *PinnacleCreditRspResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode uint32                   `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Timestamp string                   `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnacleCreditRsp) Reset() {
	*x = PinnacleCreditRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleCreditRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleCreditRsp) ProtoMessage() {}

func (x *PinnacleCreditRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleCreditRsp.ProtoReflect.Descriptor instead.
func (*PinnacleCreditRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{291}
}

func (x *PinnacleCreditRsp) GetResult() *PinnacleCreditRspResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PinnacleCreditRsp) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PinnacleCreditRsp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type BetLostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtTransactionId    string `protobuf:"bytes,2,opt,name=ext_transaction_id,json=extTransactionId,proto3" json:"ext_transaction_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,3,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation           string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Balance             int64  `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetLostResponse) Reset() {
	*x = BetLostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetLostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLostResponse) ProtoMessage() {}

func (x *BetLostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLostResponse.ProtoReflect.Descriptor instead.
func (*BetLostResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{292}
}

func (x *BetLostResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetLostResponse) GetExtTransactionId() string {
	if x != nil {
		return x.ExtTransactionId
	}
	return ""
}

func (x *BetLostResponse) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetLostResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetLostResponse) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetLostResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 取消注单
type FunkyCancelBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	SessionId    string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	RefNo        string `protobuf:"bytes,3,opt,name=refNo,proto3" json:"refNo,omitempty"`
	GameCode     string `protobuf:"bytes,4,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	GameProvider string `protobuf:"bytes,5,opt,name=gameProvider,proto3" json:"gameProvider,omitempty"`
}

func (x *FunkyCancelBetReq) Reset() {
	*x = FunkyCancelBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyCancelBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyCancelBetReq) ProtoMessage() {}

func (x *FunkyCancelBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyCancelBetReq.ProtoReflect.Descriptor instead.
func (*FunkyCancelBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{293}
}

func (x *FunkyCancelBetReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FunkyCancelBetReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FunkyCancelBetReq) GetRefNo() string {
	if x != nil {
		return x.RefNo
	}
	return ""
}

func (x *FunkyCancelBetReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FunkyCancelBetReq) GetGameProvider() string {
	if x != nil {
		return x.GameProvider
	}
	return ""
}

// inner type - common
type HabaBasegame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brandgameid string `protobuf:"bytes,1,opt,name=brandgameid,proto3" json:"brandgameid,omitempty"`
	Keyname     string `protobuf:"bytes,2,opt,name=keyname,proto3" json:"keyname,omitempty"`
}

func (x *HabaBasegame) Reset() {
	*x = HabaBasegame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaBasegame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaBasegame) ProtoMessage() {}

func (x *HabaBasegame) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaBasegame.ProtoReflect.Descriptor instead.
func (*HabaBasegame) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{294}
}

func (x *HabaBasegame) GetBrandgameid() string {
	if x != nil {
		return x.Brandgameid
	}
	return ""
}

func (x *HabaBasegame) GetKeyname() string {
	if x != nil {
		return x.Keyname
	}
	return ""
}

type PachinkoBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *PachinkoBalanceRequest) Reset() {
	*x = PachinkoBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PachinkoBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PachinkoBalanceRequest) ProtoMessage() {}

func (x *PachinkoBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PachinkoBalanceRequest.ProtoReflect.Descriptor instead.
func (*PachinkoBalanceRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{295}
}

func (x *PachinkoBalanceRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PachinkoBalanceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PachinkoBalanceRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// wagering
type PinnacleWageringReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Data      string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Agentcode string `protobuf:"bytes,4,opt,name=agentcode,proto3" json:"agentcode,omitempty"`
	Usercode  string `protobuf:"bytes,5,opt,name=usercode,proto3" json:"usercode,omitempty"`
	Requestid string `protobuf:"bytes,6,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Name      string `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *PinnacleWageringReq) Reset() {
	*x = PinnacleWageringReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleWageringReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleWageringReq) ProtoMessage() {}

func (x *PinnacleWageringReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleWageringReq.ProtoReflect.Descriptor instead.
func (*PinnacleWageringReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{296}
}

func (x *PinnacleWageringReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PinnacleWageringReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PinnacleWageringReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PinnacleWageringReq) GetAgentcode() string {
	if x != nil {
		return x.Agentcode
	}
	return ""
}

func (x *PinnacleWageringReq) GetUsercode() string {
	if x != nil {
		return x.Usercode
	}
	return ""
}

func (x *PinnacleWageringReq) GetRequestid() string {
	if x != nil {
		return x.Requestid
	}
	return ""
}

func (x *PinnacleWageringReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CrownGenericRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Method string `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	AGID   string `protobuf:"bytes,3,opt,name=AGID,proto3" json:"AGID,omitempty"`
}

func (x *CrownGenericRequest) Reset() {
	*x = CrownGenericRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrownGenericRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrownGenericRequest) ProtoMessage() {}

func (x *CrownGenericRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrownGenericRequest.ProtoReflect.Descriptor instead.
func (*CrownGenericRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{297}
}

func (x *CrownGenericRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CrownGenericRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CrownGenericRequest) GetAGID() string {
	if x != nil {
		return x.AGID
	}
	return ""
}

type PlaceBetParlayTxnsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId        string `protobuf:"bytes,1,opt,name=RefId,proto3" json:"RefId,omitempty"`
	LicenseeTxId string `protobuf:"bytes,2,opt,name=LicenseeTxId,proto3" json:"LicenseeTxId,omitempty"`
}

func (x *PlaceBetParlayTxnsResp) Reset() {
	*x = PlaceBetParlayTxnsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetParlayTxnsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetParlayTxnsResp) ProtoMessage() {}

func (x *PlaceBetParlayTxnsResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetParlayTxnsResp.ProtoReflect.Descriptor instead.
func (*PlaceBetParlayTxnsResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{298}
}

func (x *PlaceBetParlayTxnsResp) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *PlaceBetParlayTxnsResp) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

type SabaHealthCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *HealthCheckMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaHealthCheckReq) Reset() {
	*x = SabaHealthCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaHealthCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaHealthCheckReq) ProtoMessage() {}

func (x *SabaHealthCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaHealthCheckReq.ProtoReflect.Descriptor instead.
func (*SabaHealthCheckReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{299}
}

func (x *SabaHealthCheckReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaHealthCheckReq) GetMessage() *HealthCheckMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type LivePostTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LivePostTransferData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *LivePostTransfer) Reset() {
	*x = LivePostTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePostTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePostTransfer) ProtoMessage() {}

func (x *LivePostTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePostTransfer.ProtoReflect.Descriptor instead.
func (*LivePostTransfer) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{300}
}

func (x *LivePostTransfer) GetData() *LivePostTransferData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Bet Make
type BetByTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetslipId       string `protobuf:"bytes,2,opt,name=betslip_id,json=betslipId,proto3" json:"betslip_id,omitempty"`
	PlayerId        string `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId      string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId string `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId     string `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Timestamp       int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount          uint32 `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	CrossRateEuro   string `protobuf:"bytes,10,opt,name=cross_rate_euro,json=crossRateEuro,proto3" json:"cross_rate_euro,omitempty"`
	Operation       string `protobuf:"bytes,11,opt,name=operation,proto3" json:"operation,omitempty"`
	BonusId         uint64 `protobuf:"varint,12,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
}

func (x *BetByTransaction) Reset() {
	*x = BetByTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByTransaction) ProtoMessage() {}

func (x *BetByTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByTransaction.ProtoReflect.Descriptor instead.
func (*BetByTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{301}
}

func (x *BetByTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByTransaction) GetBetslipId() string {
	if x != nil {
		return x.BetslipId
	}
	return ""
}

func (x *BetByTransaction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetByTransaction) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetByTransaction) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetByTransaction) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetByTransaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetByTransaction) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByTransaction) GetCrossRateEuro() string {
	if x != nil {
		return x.CrossRateEuro
	}
	return ""
}

func (x *BetByTransaction) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetByTransaction) GetBonusId() uint64 {
	if x != nil {
		return x.BonusId
	}
	return 0
}

type Cq9RefundRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9RefundRes) Reset() {
	*x = Cq9RefundRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9RefundRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9RefundRes) ProtoMessage() {}

func (x *Cq9RefundRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9RefundRes.ProtoReflect.Descriptor instead.
func (*Cq9RefundRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{302}
}

func (x *Cq9RefundRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9RefundRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9RefundRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9RefundRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9RefundRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type FbsportsSyncTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FbsportsSyncTransactionResp) Reset() {
	*x = FbsportsSyncTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsSyncTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsSyncTransactionResp) ProtoMessage() {}

func (x *FbsportsSyncTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsSyncTransactionResp.ProtoReflect.Descriptor instead.
func (*FbsportsSyncTransactionResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{303}
}

func (x *FbsportsSyncTransactionResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbsportsSyncTransactionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FbsportsSyncTransactionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbsportsSyncTransactionResp) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type FbsportsSyncCashOutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId                string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserId                 string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MerchantId             string `protobuf:"bytes,4,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	MerchantUserId         string `protobuf:"bytes,5,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
	WalletType             int64  `protobuf:"varint,6,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`
	Currency               int64  `protobuf:"varint,7,opt,name=currency,proto3" json:"currency,omitempty"`
	ExchangeRate           string `protobuf:"bytes,8,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	CashoutTime            string `protobuf:"bytes,9,opt,name=cashout_time,json=cashoutTime,proto3" json:"cashout_time,omitempty"`
	BetTime                string `protobuf:"bytes,10,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`
	SettleTime             string `protobuf:"bytes,11,opt,name=settle_time,json=settleTime,proto3" json:"settle_time,omitempty"`
	CreateTime             string `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CancelTime             string `protobuf:"bytes,13,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
	CashOutStake           string `protobuf:"bytes,14,opt,name=cash_out_stake,json=cashOutStake,proto3" json:"cash_out_stake,omitempty"`
	OrderStatus            int64  `protobuf:"varint,15,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	CashOutPayoutStake     string `protobuf:"bytes,16,opt,name=cash_out_payout_stake,json=cashOutPayoutStake,proto3" json:"cash_out_payout_stake,omitempty"`
	AcceptOddsChange       bool   `protobuf:"varint,17,opt,name=accept_odds_change,json=acceptOddsChange,proto3" json:"accept_odds_change,omitempty"`
	SeriesType             int64  `protobuf:"varint,18,opt,name=series_type,json=seriesType,proto3" json:"series_type,omitempty"`
	BetType                string `protobuf:"bytes,19,opt,name=bet_type,json=betType,proto3" json:"bet_type,omitempty"`
	OrderStakeAmount       string `protobuf:"bytes,20,opt,name=order_stake_amount,json=orderStakeAmount,proto3" json:"order_stake_amount,omitempty"`
	Ip                     string `protobuf:"bytes,21,opt,name=ip,proto3" json:"ip,omitempty"`
	Remark                 string `protobuf:"bytes,22,opt,name=remark,proto3" json:"remark,omitempty"`
	CancelReasonCode       int64  `protobuf:"varint,23,opt,name=cancel_reason_code,json=cancelReasonCode,proto3" json:"cancel_reason_code,omitempty"`
	CancelCashOutAmountTo  string `protobuf:"bytes,24,opt,name=cancel_cash_out_amount_to,json=cancelCashOutAmountTo,proto3" json:"cancel_cash_out_amount_to,omitempty"`
	UnitCashOutPayoutStake string `protobuf:"bytes,25,opt,name=unit_cash_out_payout_stake,json=unitCashOutPayoutStake,proto3" json:"unit_cash_out_payout_stake,omitempty"`
	Device                 string `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	Version                int64  `protobuf:"varint,27,opt,name=version,proto3" json:"version,omitempty"`
	LastModifyTime         string `protobuf:"bytes,28,opt,name=last_modify_time,json=lastModifyTime,proto3" json:"last_modify_time,omitempty"`
}

func (x *FbsportsSyncCashOutReq) Reset() {
	*x = FbsportsSyncCashOutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsSyncCashOutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsSyncCashOutReq) ProtoMessage() {}

func (x *FbsportsSyncCashOutReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsSyncCashOutReq.ProtoReflect.Descriptor instead.
func (*FbsportsSyncCashOutReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{304}
}

func (x *FbsportsSyncCashOutReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetMerchantUserId() string {
	if x != nil {
		return x.MerchantUserId
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *FbsportsSyncCashOutReq) GetCurrency() int64 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *FbsportsSyncCashOutReq) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetCashoutTime() string {
	if x != nil {
		return x.CashoutTime
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetSettleTime() string {
	if x != nil {
		return x.SettleTime
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetCashOutStake() string {
	if x != nil {
		return x.CashOutStake
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *FbsportsSyncCashOutReq) GetCashOutPayoutStake() string {
	if x != nil {
		return x.CashOutPayoutStake
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetAcceptOddsChange() bool {
	if x != nil {
		return x.AcceptOddsChange
	}
	return false
}

func (x *FbsportsSyncCashOutReq) GetSeriesType() int64 {
	if x != nil {
		return x.SeriesType
	}
	return 0
}

func (x *FbsportsSyncCashOutReq) GetBetType() string {
	if x != nil {
		return x.BetType
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetOrderStakeAmount() string {
	if x != nil {
		return x.OrderStakeAmount
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetCancelReasonCode() int64 {
	if x != nil {
		return x.CancelReasonCode
	}
	return 0
}

func (x *FbsportsSyncCashOutReq) GetCancelCashOutAmountTo() string {
	if x != nil {
		return x.CancelCashOutAmountTo
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetUnitCashOutPayoutStake() string {
	if x != nil {
		return x.UnitCashOutPayoutStake
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *FbsportsSyncCashOutReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FbsportsSyncCashOutReq) GetLastModifyTime() string {
	if x != nil {
		return x.LastModifyTime
	}
	return ""
}

type PinnacleWageringRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCode         string                        `protobuf:"bytes,1,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	AvailableBalance float64                       `protobuf:"fixed64,2,opt,name=AvailableBalance,proto3" json:"AvailableBalance,omitempty"`
	Actions          []*PinnacleWageringRspActions `protobuf:"bytes,3,rep,name=Actions,proto3" json:"Actions,omitempty"`
}

func (x *PinnacleWageringRspResult) Reset() {
	*x = PinnacleWageringRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleWageringRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleWageringRspResult) ProtoMessage() {}

func (x *PinnacleWageringRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleWageringRspResult.ProtoReflect.Descriptor instead.
func (*PinnacleWageringRspResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{305}
}

func (x *PinnacleWageringRspResult) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *PinnacleWageringRspResult) GetAvailableBalance() float64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *PinnacleWageringRspResult) GetActions() []*PinnacleWageringRspActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

// 查询用户账户余额。
type GetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *GetBalanceReq) Reset() {
	*x = GetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceReq) ProtoMessage() {}

func (x *GetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceReq.ProtoReflect.Descriptor instead.
func (*GetBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{306}
}

func (x *GetBalanceReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type TurboSettleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string  `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Balance       float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt     int64   `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Currency      string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Repeat        bool    `protobuf:"varint,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Code          int32   `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
	Message       string  `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TurboSettleResp) Reset() {
	*x = TurboSettleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurboSettleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurboSettleResp) ProtoMessage() {}

func (x *TurboSettleResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurboSettleResp.ProtoReflect.Descriptor instead.
func (*TurboSettleResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{307}
}

func (x *TurboSettleResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TurboSettleResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TurboSettleResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TurboSettleResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TurboSettleResp) GetRepeat() bool {
	if x != nil {
		return x.Repeat
	}
	return false
}

func (x *TurboSettleResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TurboSettleResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AgQJgameResultBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (x *AgQJgameResultBody) Reset() {
	*x = AgQJgameResultBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJgameResultBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJgameResultBody) ProtoMessage() {}

func (x *AgQJgameResultBody) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJgameResultBody.ProtoReflect.Descriptor instead.
func (*AgQJgameResultBody) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{308}
}

func (x *AgQJgameResultBody) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

type BetLostTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetslipId           string `protobuf:"bytes,2,opt,name=betslip_id,json=betslipId,proto3" json:"betslip_id,omitempty"`
	PlayerId            string `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId          string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId     string `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId         string `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Amount              uint32 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	CrossRateEuro       string `protobuf:"bytes,9,opt,name=cross_rate_euro,json=crossRateEuro,proto3" json:"cross_rate_euro,omitempty"`
	Operation           string `protobuf:"bytes,10,opt,name=operation,proto3" json:"operation,omitempty"`
	BonusId             string `protobuf:"bytes,11,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	Timestamp           int64  `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ParentTransactionId string `protobuf:"bytes,13,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
}

func (x *BetLostTransaction) Reset() {
	*x = BetLostTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetLostTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLostTransaction) ProtoMessage() {}

func (x *BetLostTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLostTransaction.ProtoReflect.Descriptor instead.
func (*BetLostTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{309}
}

func (x *BetLostTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetLostTransaction) GetBetslipId() string {
	if x != nil {
		return x.BetslipId
	}
	return ""
}

func (x *BetLostTransaction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetLostTransaction) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetLostTransaction) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetLostTransaction) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetLostTransaction) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetLostTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetLostTransaction) GetCrossRateEuro() string {
	if x != nil {
		return x.CrossRateEuro
	}
	return ""
}

func (x *BetLostTransaction) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetLostTransaction) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetLostTransaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetLostTransaction) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

type FbsportsSyncCashOutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    int64  `protobuf:"varint,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FbsportsSyncCashOutResp) Reset() {
	*x = FbsportsSyncCashOutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsSyncCashOutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsSyncCashOutResp) ProtoMessage() {}

func (x *FbsportsSyncCashOutResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsSyncCashOutResp.ProtoReflect.Descriptor instead.
func (*FbsportsSyncCashOutResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{310}
}

func (x *FbsportsSyncCashOutResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbsportsSyncCashOutResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FbsportsSyncCashOutResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbsportsSyncCashOutResp) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type RtgPlaceBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                  float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency                string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Gameid                  int64   `protobuf:"varint,3,opt,name=gameid,proto3" json:"gameid,omitempty"`
	Membercode              string  `protobuf:"bytes,4,opt,name=membercode,proto3" json:"membercode,omitempty"`
	Roundid                 string  `protobuf:"bytes,5,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Transactionid           string  `protobuf:"bytes,6,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	Freegame                int32   `protobuf:"varint,7,opt,name=freegame,proto3" json:"freegame,omitempty"`
	Gameroundend            int32   `protobuf:"varint,8,opt,name=gameroundend,proto3" json:"gameroundend,omitempty"`
	Sessionid               int64   `protobuf:"varint,9,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	Gamenum                 int64   `protobuf:"varint,10,opt,name=gamenum,proto3" json:"gamenum,omitempty"`
	Platformid              int64   `protobuf:"varint,11,opt,name=platformid,proto3" json:"platformid,omitempty"`
	Token                   string  `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	Bonusamount             float64 `protobuf:"fixed64,13,opt,name=bonusamount,proto3" json:"bonusamount,omitempty"`
	Bonusroundid            string  `protobuf:"bytes,14,opt,name=bonusroundid,proto3" json:"bonusroundid,omitempty"`
	Bonuscode               string  `protobuf:"bytes,15,opt,name=bonuscode,proto3" json:"bonuscode,omitempty"`
	Bonusplaythrough        float64 `protobuf:"fixed64,16,opt,name=bonusplaythrough,proto3" json:"bonusplaythrough,omitempty"`
	Bonusplaythroughbalance float64 `protobuf:"fixed64,17,opt,name=bonusplaythroughbalance,proto3" json:"bonusplaythroughbalance,omitempty"`
	Bonusbalance            float64 `protobuf:"fixed64,18,opt,name=bonusbalance,proto3" json:"bonusbalance,omitempty"`
	Transactiondate         string  `protobuf:"bytes,19,opt,name=transactiondate,proto3" json:"transactiondate,omitempty"`
}

func (x *RtgPlaceBetReq) Reset() {
	*x = RtgPlaceBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtgPlaceBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtgPlaceBetReq) ProtoMessage() {}

func (x *RtgPlaceBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtgPlaceBetReq.ProtoReflect.Descriptor instead.
func (*RtgPlaceBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{311}
}

func (x *RtgPlaceBetReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RtgPlaceBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RtgPlaceBetReq) GetGameid() int64 {
	if x != nil {
		return x.Gameid
	}
	return 0
}

func (x *RtgPlaceBetReq) GetMembercode() string {
	if x != nil {
		return x.Membercode
	}
	return ""
}

func (x *RtgPlaceBetReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *RtgPlaceBetReq) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

func (x *RtgPlaceBetReq) GetFreegame() int32 {
	if x != nil {
		return x.Freegame
	}
	return 0
}

func (x *RtgPlaceBetReq) GetGameroundend() int32 {
	if x != nil {
		return x.Gameroundend
	}
	return 0
}

func (x *RtgPlaceBetReq) GetSessionid() int64 {
	if x != nil {
		return x.Sessionid
	}
	return 0
}

func (x *RtgPlaceBetReq) GetGamenum() int64 {
	if x != nil {
		return x.Gamenum
	}
	return 0
}

func (x *RtgPlaceBetReq) GetPlatformid() int64 {
	if x != nil {
		return x.Platformid
	}
	return 0
}

func (x *RtgPlaceBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RtgPlaceBetReq) GetBonusamount() float64 {
	if x != nil {
		return x.Bonusamount
	}
	return 0
}

func (x *RtgPlaceBetReq) GetBonusroundid() string {
	if x != nil {
		return x.Bonusroundid
	}
	return ""
}

func (x *RtgPlaceBetReq) GetBonuscode() string {
	if x != nil {
		return x.Bonuscode
	}
	return ""
}

func (x *RtgPlaceBetReq) GetBonusplaythrough() float64 {
	if x != nil {
		return x.Bonusplaythrough
	}
	return 0
}

func (x *RtgPlaceBetReq) GetBonusplaythroughbalance() float64 {
	if x != nil {
		return x.Bonusplaythroughbalance
	}
	return 0
}

func (x *RtgPlaceBetReq) GetBonusbalance() float64 {
	if x != nil {
		return x.Bonusbalance
	}
	return 0
}

func (x *RtgPlaceBetReq) GetTransactiondate() string {
	if x != nil {
		return x.Transactiondate
	}
	return ""
}

type PgCashTransferOutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime   int64   `protobuf:"varint,1,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	BalanceAmount float64 `protobuf:"fixed64,2,opt,name=balance_amount,json=balanceAmount,proto3" json:"balance_amount,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *PgCashTransferOutResp) Reset() {
	*x = PgCashTransferOutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgCashTransferOutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCashTransferOutResp) ProtoMessage() {}

func (x *PgCashTransferOutResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCashTransferOutResp.ProtoReflect.Descriptor instead.
func (*PgCashTransferOutResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{312}
}

func (x *PgCashTransferOutResp) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *PgCashTransferOutResp) GetBalanceAmount() float64 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *PgCashTransferOutResp) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

//	Bet Rollback
//
// {"bet_transaction_id":"1665023074946387968","parent_transaction_id":"2307166563874946502","transaction":{"id":"1265023428769484821","betslip_id":"1659603658884648961","player_id":"1659299365132570624","operator_id":"1657013002915142201","operator_brand_id":"1653815133341880320","ext_player_id":"1659297400285696000","timestamp":1538654560.2354896,"amount":1000,"currency":"USD","cross_rate_euro":"0.893598","operation":"rollback","bonus_id":"1664976298830860288","parent_transaction_id":"2253535328520507883"}}
type BetRollbackTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetslipId           string `protobuf:"bytes,2,opt,name=betslip_id,json=betslipId,proto3" json:"betslip_id,omitempty"`
	PlayerId            string `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OperatorId          string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorBrandId     string `protobuf:"bytes,5,opt,name=operator_brand_id,json=operatorBrandId,proto3" json:"operator_brand_id,omitempty"`
	ExtPlayerId         string `protobuf:"bytes,6,opt,name=ext_player_id,json=extPlayerId,proto3" json:"ext_player_id,omitempty"`
	Timestamp           int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount              uint32 `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	CrossRateEuro       string `protobuf:"bytes,10,opt,name=cross_rate_euro,json=crossRateEuro,proto3" json:"cross_rate_euro,omitempty"`
	Operation           string `protobuf:"bytes,11,opt,name=operation,proto3" json:"operation,omitempty"`
	BonusId             string `protobuf:"bytes,12,opt,name=bonus_id,json=bonusId,proto3" json:"bonus_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,13,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
}

func (x *BetRollbackTransaction) Reset() {
	*x = BetRollbackTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRollbackTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRollbackTransaction) ProtoMessage() {}

func (x *BetRollbackTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRollbackTransaction.ProtoReflect.Descriptor instead.
func (*BetRollbackTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{313}
}

func (x *BetRollbackTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetRollbackTransaction) GetBetslipId() string {
	if x != nil {
		return x.BetslipId
	}
	return ""
}

func (x *BetRollbackTransaction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetRollbackTransaction) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *BetRollbackTransaction) GetOperatorBrandId() string {
	if x != nil {
		return x.OperatorBrandId
	}
	return ""
}

func (x *BetRollbackTransaction) GetExtPlayerId() string {
	if x != nil {
		return x.ExtPlayerId
	}
	return ""
}

func (x *BetRollbackTransaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BetRollbackTransaction) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetRollbackTransaction) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetRollbackTransaction) GetCrossRateEuro() string {
	if x != nil {
		return x.CrossRateEuro
	}
	return ""
}

func (x *BetRollbackTransaction) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetRollbackTransaction) GetBonusId() string {
	if x != nil {
		return x.BonusId
	}
	return ""
}

func (x *BetRollbackTransaction) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

type FbsportsSyncOrdersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    int64  `protobuf:"varint,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FbsportsSyncOrdersResp) Reset() {
	*x = FbsportsSyncOrdersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsSyncOrdersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsSyncOrdersResp) ProtoMessage() {}

func (x *FbsportsSyncOrdersResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsSyncOrdersResp.ProtoReflect.Descriptor instead.
func (*FbsportsSyncOrdersResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{314}
}

func (x *FbsportsSyncOrdersResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbsportsSyncOrdersResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FbsportsSyncOrdersResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbsportsSyncOrdersResp) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

// 获取余额
type FunkyGetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId  string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *FunkyGetBalanceReq) Reset() {
	*x = FunkyGetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyGetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyGetBalanceReq) ProtoMessage() {}

func (x *FunkyGetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyGetBalanceReq.ProtoReflect.Descriptor instead.
func (*FunkyGetBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{315}
}

func (x *FunkyGetBalanceReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FunkyGetBalanceReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type BetResultRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Balance    int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetResultRes) Reset() {
	*x = BetResultRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetResultRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetResultRes) ProtoMessage() {}

func (x *BetResultRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetResultRes.ProtoReflect.Descriptor instead.
func (*BetResultRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{316}
}

func (x *BetResultRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *BetResultRes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type DebitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Time     int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	RefID    string `protobuf:"bytes,4,opt,name=refID,proto3" json:"refID,omitempty"`
}

func (x *DebitResp) Reset() {
	*x = DebitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitResp) ProtoMessage() {}

func (x *DebitResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitResp.ProtoReflect.Descriptor instead.
func (*DebitResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{317}
}

func (x *DebitResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *DebitResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DebitResp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DebitResp) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

type HabaPlayerDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Dtsent              string                   `protobuf:"bytes,2,opt,name=dtsent,proto3" json:"dtsent,omitempty"`
	Basegame            *HabaBasegame            `protobuf:"bytes,3,opt,name=basegame,proto3" json:"basegame,omitempty"`
	Auth                *HabaAuth                `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Playerdetailrequest *HabaPlayerdetailrequest `protobuf:"bytes,5,opt,name=playerdetailrequest,proto3" json:"playerdetailrequest,omitempty"`
}

func (x *HabaPlayerDetailReq) Reset() {
	*x = HabaPlayerDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaPlayerDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaPlayerDetailReq) ProtoMessage() {}

func (x *HabaPlayerDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaPlayerDetailReq.ProtoReflect.Descriptor instead.
func (*HabaPlayerDetailReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{318}
}

func (x *HabaPlayerDetailReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HabaPlayerDetailReq) GetDtsent() string {
	if x != nil {
		return x.Dtsent
	}
	return ""
}

func (x *HabaPlayerDetailReq) GetBasegame() *HabaBasegame {
	if x != nil {
		return x.Basegame
	}
	return nil
}

func (x *HabaPlayerDetailReq) GetAuth() *HabaAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HabaPlayerDetailReq) GetPlayerdetailrequest() *HabaPlayerdetailrequest {
	if x != nil {
		return x.Playerdetailrequest
	}
	return nil
}

// 投注-响应
type JiLiBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token     string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency  string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	TxId      int64   `protobuf:"varint,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Balance   float64 `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance,omitempty"`
	ErrorCode int32   `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message   string  `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JiLiBetResp) Reset() {
	*x = JiLiBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiBetResp) ProtoMessage() {}

func (x *JiLiBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiBetResp.ProtoReflect.Descriptor instead.
func (*JiLiBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{319}
}

func (x *JiLiBetResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JiLiBetResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiBetResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiBetResp) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *JiLiBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JiLiBetResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *JiLiBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SabaCancelBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *SabaCancelBetResp) Reset() {
	*x = SabaCancelBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaCancelBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaCancelBetResp) ProtoMessage() {}

func (x *SabaCancelBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaCancelBetResp.ProtoReflect.Descriptor instead.
func (*SabaCancelBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{320}
}

func (x *SabaCancelBetResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaCancelBetResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SabaCancelBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type SabaAdjustBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *AdjustBalanceMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaAdjustBalanceReq) Reset() {
	*x = SabaAdjustBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaAdjustBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaAdjustBalanceReq) ProtoMessage() {}

func (x *SabaAdjustBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaAdjustBalanceReq.ProtoReflect.Descriptor instead.
func (*SabaAdjustBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{321}
}

func (x *SabaAdjustBalanceReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaAdjustBalanceReq) GetMessage() *AdjustBalanceMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type AgIntelEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record []*AgIntelEventItem `protobuf:"bytes,1,rep,name=Record,proto3" json:"Record,omitempty"`
}

func (x *AgIntelEventData) Reset() {
	*x = AgIntelEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgIntelEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgIntelEventData) ProtoMessage() {}

func (x *AgIntelEventData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgIntelEventData.ProtoReflect.Descriptor instead.
func (*AgIntelEventData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{322}
}

func (x *AgIntelEventData) GetRecord() []*AgIntelEventItem {
	if x != nil {
		return x.Record
	}
	return nil
}

type HabaFundTxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fundtransferresponse *HabaFundtransferresponse `protobuf:"bytes,1,opt,name=fundtransferresponse,proto3" json:"fundtransferresponse,omitempty"`
}

func (x *HabaFundTxResp) Reset() {
	*x = HabaFundTxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaFundTxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaFundTxResp) ProtoMessage() {}

func (x *HabaFundTxResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaFundTxResp.ProtoReflect.Descriptor instead.
func (*HabaFundTxResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{323}
}

func (x *HabaFundTxResp) GetFundtransferresponse() *HabaFundtransferresponse {
	if x != nil {
		return x.Fundtransferresponse
	}
	return nil
}

// 心跳检查输入输出定义
type HealthCheckMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Time   string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HealthCheckMessage) Reset() {
	*x = HealthCheckMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckMessage) ProtoMessage() {}

func (x *HealthCheckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckMessage.ProtoReflect.Descriptor instead.
func (*HealthCheckMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{324}
}

func (x *HealthCheckMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *HealthCheckMessage) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type FbsportsSyncTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderPayReqList []*FbsportsOrderPayReq `protobuf:"bytes,1,rep,name=order_pay_req_list,json=orderPayReqList,proto3" json:"order_pay_req_list,omitempty"`
}

func (x *FbsportsSyncTransactionReq) Reset() {
	*x = FbsportsSyncTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsSyncTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsSyncTransactionReq) ProtoMessage() {}

func (x *FbsportsSyncTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsSyncTransactionReq.ProtoReflect.Descriptor instead.
func (*FbsportsSyncTransactionReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{325}
}

func (x *FbsportsSyncTransactionReq) GetOrderPayReqList() []*FbsportsOrderPayReq {
	if x != nil {
		return x.OrderPayReqList
	}
	return nil
}

type CreditResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Time     int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	RefID    string `protobuf:"bytes,4,opt,name=refID,proto3" json:"refID,omitempty"`
}

func (x *CreditResp) Reset() {
	*x = CreditResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditResp) ProtoMessage() {}

func (x *CreditResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditResp.ProtoReflect.Descriptor instead.
func (*CreditResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{326}
}

func (x *CreditResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CreditResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreditResp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CreditResp) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

type IDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IDsReq) Reset() {
	*x = IDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsReq) ProtoMessage() {}

func (x *IDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsReq.ProtoReflect.Descriptor instead.
func (*IDsReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{327}
}

func (x *IDsReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ElWinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TotalWin      float64 `protobuf:"fixed64,2,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	JackpotWin    float64 `protobuf:"fixed64,3,opt,name=jackpotWin,proto3" json:"jackpotWin,omitempty"`
	BonusWin      float64 `protobuf:"fixed64,4,opt,name=bonusWin,proto3" json:"bonusWin,omitempty"`
	Currency      string  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	GameId        int64   `protobuf:"varint,6,opt,name=gameId,proto3" json:"gameId,omitempty"`
	TransactionId string  `protobuf:"bytes,7,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *ElWinReq) Reset() {
	*x = ElWinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElWinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElWinReq) ProtoMessage() {}

func (x *ElWinReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElWinReq.ProtoReflect.Descriptor instead.
func (*ElWinReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{328}
}

func (x *ElWinReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ElWinReq) GetTotalWin() float64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *ElWinReq) GetJackpotWin() float64 {
	if x != nil {
		return x.JackpotWin
	}
	return 0
}

func (x *ElWinReq) GetBonusWin() float64 {
	if x != nil {
		return x.BonusWin
	}
	return 0
}

func (x *ElWinReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ElWinReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ElWinReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// 取消投注-响应
type JiLiCancelBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Currency  string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	TxId      int64   `protobuf:"varint,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Balance   float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	ErrorCode int32   `protobuf:"varint,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Message   string  `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JiLiCancelBetResp) Reset() {
	*x = JiLiCancelBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiCancelBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiCancelBetResp) ProtoMessage() {}

func (x *JiLiCancelBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiCancelBetResp.ProtoReflect.Descriptor instead.
func (*JiLiCancelBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{329}
}

func (x *JiLiCancelBetResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JiLiCancelBetResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiCancelBetResp) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *JiLiCancelBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JiLiCancelBetResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *JiLiCancelBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BonusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Balance    int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BonusRes) Reset() {
	*x = BonusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusRes) ProtoMessage() {}

func (x *BonusRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusRes.ProtoReflect.Descriptor instead.
func (*BonusRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{330}
}

func (x *BonusRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *BonusRes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 错误帐务处理
type ResultexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId  string  `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	TxnId     int64   `protobuf:"varint,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	TotalWin  int64   `protobuf:"varint,3,opt,name=total_win,json=totalWin,proto3" json:"total_win,omitempty"`
	BonusWin  int64   `protobuf:"varint,4,opt,name=bonus_win,json=bonusWin,proto3" json:"bonus_win,omitempty"`
	GameId    string  `protobuf:"bytes,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SubgameId int32   `protobuf:"varint,6,opt,name=subgame_id,json=subgameId,proto3" json:"subgame_id,omitempty"`
	Ts        int64   `protobuf:"varint,7,opt,name=ts,proto3" json:"ts,omitempty"`
	JpContrib float32 `protobuf:"fixed32,8,opt,name=jp_contrib,json=jpContrib,proto3" json:"jp_contrib,omitempty"`
	Betamt    int64   `protobuf:"varint,9,opt,name=betamt,proto3" json:"betamt,omitempty"`
	Winamt    int64   `protobuf:"varint,10,opt,name=winamt,proto3" json:"winamt,omitempty"`
}

func (x *ResultexReq) Reset() {
	*x = ResultexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultexReq) ProtoMessage() {}

func (x *ResultexReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultexReq.ProtoReflect.Descriptor instead.
func (*ResultexReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{331}
}

func (x *ResultexReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *ResultexReq) GetTxnId() int64 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *ResultexReq) GetTotalWin() int64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *ResultexReq) GetBonusWin() int64 {
	if x != nil {
		return x.BonusWin
	}
	return 0
}

func (x *ResultexReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ResultexReq) GetSubgameId() int32 {
	if x != nil {
		return x.SubgameId
	}
	return 0
}

func (x *ResultexReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ResultexReq) GetJpContrib() float32 {
	if x != nil {
		return x.JpContrib
	}
	return 0
}

func (x *ResultexReq) GetBetamt() int64 {
	if x != nil {
		return x.Betamt
	}
	return 0
}

func (x *ResultexReq) GetWinamt() int64 {
	if x != nil {
		return x.Winamt
	}
	return 0
}

type PlaceBetParlayTicketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId         int32   `protobuf:"varint,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	HomeId          int32   `protobuf:"varint,2,opt,name=homeId,proto3" json:"homeId,omitempty"`
	AwayId          int32   `protobuf:"varint,3,opt,name=awayId,proto3" json:"awayId,omitempty"`
	HomeName        string  `protobuf:"bytes,4,opt,name=homeName,proto3" json:"homeName,omitempty"`
	AwayName        string  `protobuf:"bytes,5,opt,name=awayName,proto3" json:"awayName,omitempty"`
	KickOffTime     string  `protobuf:"bytes,6,opt,name=kickOffTime,proto3" json:"kickOffTime,omitempty"`
	SportType       int32   `protobuf:"varint,7,opt,name=sportType,proto3" json:"sportType,omitempty"`
	SportTypeName   string  `protobuf:"bytes,8,opt,name=sportTypeName,proto3" json:"sportTypeName,omitempty"`
	BetType         int32   `protobuf:"varint,9,opt,name=betType,proto3" json:"betType,omitempty"`
	BetTypeName     string  `protobuf:"bytes,10,opt,name=betTypeName,proto3" json:"betTypeName,omitempty"`
	OddsId          int64   `protobuf:"varint,11,opt,name=oddsId,proto3" json:"oddsId,omitempty"`
	Odds            float64 `protobuf:"fixed64,12,opt,name=odds,proto3" json:"odds,omitempty"`
	OddsType        int32   `protobuf:"varint,13,opt,name=oddsType,proto3" json:"oddsType,omitempty"`
	BetChoice       string  `protobuf:"bytes,14,opt,name=betChoice,proto3" json:"betChoice,omitempty"`
	BetChoiceEn     string  `protobuf:"bytes,15,opt,name=betChoiceEn,proto3" json:"betChoiceEn,omitempty"`
	LeagueId        int64   `protobuf:"varint,16,opt,name=leagueId,proto3" json:"leagueId,omitempty"`
	LeagueName      string  `protobuf:"bytes,17,opt,name=leagueName,proto3" json:"leagueName,omitempty"`
	IsLive          bool    `protobuf:"varint,18,opt,name=isLive,proto3" json:"isLive,omitempty"`
	Point           string  `protobuf:"bytes,19,opt,name=point,proto3" json:"point,omitempty"`
	Point2          string  `protobuf:"bytes,20,opt,name=point2,proto3" json:"point2,omitempty"`
	BetTeam         string  `protobuf:"bytes,21,opt,name=betTeam,proto3" json:"betTeam,omitempty"`
	HomeScore       int64   `protobuf:"varint,22,opt,name=homeScore,proto3" json:"homeScore,omitempty"`
	AwayScore       int64   `protobuf:"varint,23,opt,name=awayScore,proto3" json:"awayScore,omitempty"`
	BaStatus        bool    `protobuf:"varint,24,opt,name=baStatus,proto3" json:"baStatus,omitempty"`
	Excluding       string  `protobuf:"bytes,25,opt,name=excluding,proto3" json:"excluding,omitempty"`
	LeagueNameEn    string  `protobuf:"bytes,26,opt,name=leagueNameEn,proto3" json:"leagueNameEn,omitempty"`
	SportTypeNameEn string  `protobuf:"bytes,27,opt,name=sportTypeNameEn,proto3" json:"sportTypeNameEn,omitempty"`
	HomeNameEn      string  `protobuf:"bytes,28,opt,name=homeNameEn,proto3" json:"homeNameEn,omitempty"`
	AwayNameEn      string  `protobuf:"bytes,29,opt,name=awayNameEn,proto3" json:"awayNameEn,omitempty"`
	BetTypeNameEn   string  `protobuf:"bytes,30,opt,name=betTypeNameEn,proto3" json:"betTypeNameEn,omitempty"`
	MatchDateTime   string  `protobuf:"bytes,31,opt,name=matchDateTime,proto3" json:"matchDateTime,omitempty"`
	BetRemark       string  `protobuf:"bytes,32,opt,name=betRemark,proto3" json:"betRemark,omitempty"`
}

func (x *PlaceBetParlayTicketDetail) Reset() {
	*x = PlaceBetParlayTicketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetParlayTicketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetParlayTicketDetail) ProtoMessage() {}

func (x *PlaceBetParlayTicketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetParlayTicketDetail.ProtoReflect.Descriptor instead.
func (*PlaceBetParlayTicketDetail) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{332}
}

func (x *PlaceBetParlayTicketDetail) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetHomeId() int32 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetAwayId() int32 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetHomeName() string {
	if x != nil {
		return x.HomeName
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetAwayName() string {
	if x != nil {
		return x.AwayName
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetKickOffTime() string {
	if x != nil {
		return x.KickOffTime
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetSportType() int32 {
	if x != nil {
		return x.SportType
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetSportTypeName() string {
	if x != nil {
		return x.SportTypeName
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetBetType() int32 {
	if x != nil {
		return x.BetType
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetBetTypeName() string {
	if x != nil {
		return x.BetTypeName
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetOddsId() int64 {
	if x != nil {
		return x.OddsId
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetOddsType() int32 {
	if x != nil {
		return x.OddsType
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetBetChoice() string {
	if x != nil {
		return x.BetChoice
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetBetChoiceEn() string {
	if x != nil {
		return x.BetChoiceEn
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *PlaceBetParlayTicketDetail) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetPoint2() string {
	if x != nil {
		return x.Point2
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetBetTeam() string {
	if x != nil {
		return x.BetTeam
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetHomeScore() int64 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *PlaceBetParlayTicketDetail) GetBaStatus() bool {
	if x != nil {
		return x.BaStatus
	}
	return false
}

func (x *PlaceBetParlayTicketDetail) GetExcluding() string {
	if x != nil {
		return x.Excluding
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetLeagueNameEn() string {
	if x != nil {
		return x.LeagueNameEn
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetSportTypeNameEn() string {
	if x != nil {
		return x.SportTypeNameEn
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetHomeNameEn() string {
	if x != nil {
		return x.HomeNameEn
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetAwayNameEn() string {
	if x != nil {
		return x.AwayNameEn
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetBetTypeNameEn() string {
	if x != nil {
		return x.BetTypeNameEn
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetMatchDateTime() string {
	if x != nil {
		return x.MatchDateTime
	}
	return ""
}

func (x *PlaceBetParlayTicketDetail) GetBetRemark() string {
	if x != nil {
		return x.BetRemark
	}
	return ""
}

type ElCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CancelAmount  float64 `protobuf:"fixed64,2,opt,name=cancelAmount,proto3" json:"cancelAmount,omitempty"`
	Currency      string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	GameId        int64   `protobuf:"varint,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
	TransactionId string  `protobuf:"bytes,5,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *ElCancelReq) Reset() {
	*x = ElCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElCancelReq) ProtoMessage() {}

func (x *ElCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElCancelReq.ProtoReflect.Descriptor instead.
func (*ElCancelReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{333}
}

func (x *ElCancelReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ElCancelReq) GetCancelAmount() float64 {
	if x != nil {
		return x.CancelAmount
	}
	return 0
}

func (x *ElCancelReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ElCancelReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ElCancelReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type EndingPlaceBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccount string   `protobuf:"bytes,1,opt,name=player_account,json=playerAccount,proto3" json:"player_account,omitempty"`
	TxnId         string   `protobuf:"bytes,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	GameRuleId    string   `protobuf:"bytes,3,opt,name=game_rule_id,json=gameRuleId,proto3" json:"game_rule_id,omitempty"`
	Quater        string   `protobuf:"bytes,4,opt,name=quater,proto3" json:"quater,omitempty"`
	Stake         string   `protobuf:"bytes,5,opt,name=stake,proto3" json:"stake,omitempty"`
	CurrentScore  []string `protobuf:"bytes,6,rep,name=current_score,json=currentScore,proto3" json:"current_score,omitempty"`
	TimeUnix      int64    `protobuf:"varint,7,opt,name=time_unix,json=timeUnix,proto3" json:"time_unix,omitempty"`
	Hash          string   `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *EndingPlaceBetReq) Reset() {
	*x = EndingPlaceBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndingPlaceBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndingPlaceBetReq) ProtoMessage() {}

func (x *EndingPlaceBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndingPlaceBetReq.ProtoReflect.Descriptor instead.
func (*EndingPlaceBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{334}
}

func (x *EndingPlaceBetReq) GetPlayerAccount() string {
	if x != nil {
		return x.PlayerAccount
	}
	return ""
}

func (x *EndingPlaceBetReq) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *EndingPlaceBetReq) GetGameRuleId() string {
	if x != nil {
		return x.GameRuleId
	}
	return ""
}

func (x *EndingPlaceBetReq) GetQuater() string {
	if x != nil {
		return x.Quater
	}
	return ""
}

func (x *EndingPlaceBetReq) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *EndingPlaceBetReq) GetCurrentScore() []string {
	if x != nil {
		return x.CurrentScore
	}
	return nil
}

func (x *EndingPlaceBetReq) GetTimeUnix() int64 {
	if x != nil {
		return x.TimeUnix
	}
	return 0
}

func (x *EndingPlaceBetReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type HabaAltfundsrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid         string                 `protobuf:"bytes,1,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Altcredittype     uint32                 `protobuf:"varint,2,opt,name=altcredittype,proto3" json:"altcredittype,omitempty"`
	Amount            float64                `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currencycode      string                 `protobuf:"bytes,4,opt,name=currencycode,proto3" json:"currencycode,omitempty"`
	Transferid        string                 `protobuf:"bytes,5,opt,name=transferid,proto3" json:"transferid,omitempty"`
	Dtevent           string                 `protobuf:"bytes,6,opt,name=dtevent,proto3" json:"dtevent,omitempty"`
	Description       string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Tournamentdetails *HabaTournamentdetails `protobuf:"bytes,8,opt,name=tournamentdetails,proto3" json:"tournamentdetails,omitempty"`
}

func (x *HabaAltfundsrequest) Reset() {
	*x = HabaAltfundsrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaAltfundsrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaAltfundsrequest) ProtoMessage() {}

func (x *HabaAltfundsrequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaAltfundsrequest.ProtoReflect.Descriptor instead.
func (*HabaAltfundsrequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{335}
}

func (x *HabaAltfundsrequest) GetAccountid() string {
	if x != nil {
		return x.Accountid
	}
	return ""
}

func (x *HabaAltfundsrequest) GetAltcredittype() uint32 {
	if x != nil {
		return x.Altcredittype
	}
	return 0
}

func (x *HabaAltfundsrequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HabaAltfundsrequest) GetCurrencycode() string {
	if x != nil {
		return x.Currencycode
	}
	return ""
}

func (x *HabaAltfundsrequest) GetTransferid() string {
	if x != nil {
		return x.Transferid
	}
	return ""
}

func (x *HabaAltfundsrequest) GetDtevent() string {
	if x != nil {
		return x.Dtevent
	}
	return ""
}

func (x *HabaAltfundsrequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HabaAltfundsrequest) GetTournamentdetails() *HabaTournamentdetails {
	if x != nil {
		return x.Tournamentdetails
	}
	return nil
}

// query
type PinnacleQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *PinnacleQueryReq) Reset() {
	*x = PinnacleQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleQueryReq) ProtoMessage() {}

func (x *PinnacleQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleQueryReq.ProtoReflect.Descriptor instead.
func (*PinnacleQueryReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{336}
}

func (x *PinnacleQueryReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PinnacleQueryReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// Result-请求
type PpResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId       string `protobuf:"bytes,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoundId      int64  `protobuf:"varint,4,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Amount       string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Reference    string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	ProviderId   string `protobuf:"bytes,7,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Timestamp    int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RoundDetails string `protobuf:"bytes,9,opt,name=roundDetails,proto3" json:"roundDetails,omitempty"`
}

func (x *PpResultReq) Reset() {
	*x = PpResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PpResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpResultReq) ProtoMessage() {}

func (x *PpResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpResultReq.ProtoReflect.Descriptor instead.
func (*PpResultReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{337}
}

func (x *PpResultReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PpResultReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PpResultReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PpResultReq) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *PpResultReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PpResultReq) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PpResultReq) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *PpResultReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PpResultReq) GetRoundDetails() string {
	if x != nil {
		return x.RoundDetails
	}
	return ""
}

type PlaceConfirmBetParlayTxns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId         string  `protobuf:"bytes,1,opt,name=refId,proto3" json:"refId,omitempty"`
	TxId          int64   `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
	LicenseeTxId  string  `protobuf:"bytes,3,opt,name=licenseeTxId,proto3" json:"licenseeTxId,omitempty"`
	ActualAmount  float64 `protobuf:"fixed64,4,opt,name=actualAmount,proto3" json:"actualAmount,omitempty"`
	IsOddsChanged bool    `protobuf:"varint,5,opt,name=isOddsChanged,proto3" json:"isOddsChanged,omitempty"`
	CreditAmount  float64 `protobuf:"fixed64,6,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount   float64 `protobuf:"fixed64,7,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	WinlostDate   string  `protobuf:"bytes,8,opt,name=winlostDate,proto3" json:"winlostDate,omitempty"`
}

func (x *PlaceConfirmBetParlayTxns) Reset() {
	*x = PlaceConfirmBetParlayTxns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceConfirmBetParlayTxns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceConfirmBetParlayTxns) ProtoMessage() {}

func (x *PlaceConfirmBetParlayTxns) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceConfirmBetParlayTxns.ProtoReflect.Descriptor instead.
func (*PlaceConfirmBetParlayTxns) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{338}
}

func (x *PlaceConfirmBetParlayTxns) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *PlaceConfirmBetParlayTxns) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *PlaceConfirmBetParlayTxns) GetLicenseeTxId() string {
	if x != nil {
		return x.LicenseeTxId
	}
	return ""
}

func (x *PlaceConfirmBetParlayTxns) GetActualAmount() float64 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *PlaceConfirmBetParlayTxns) GetIsOddsChanged() bool {
	if x != nil {
		return x.IsOddsChanged
	}
	return false
}

func (x *PlaceConfirmBetParlayTxns) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *PlaceConfirmBetParlayTxns) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *PlaceConfirmBetParlayTxns) GetWinlostDate() string {
	if x != nil {
		return x.WinlostDate
	}
	return ""
}

type Cq9BetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9BetRes) Reset() {
	*x = Cq9BetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9BetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9BetRes) ProtoMessage() {}

func (x *Cq9BetRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9BetRes.ProtoReflect.Descriptor instead.
func (*Cq9BetRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{339}
}

func (x *Cq9BetRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9BetRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9BetRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9BetRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9BetRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

// 注单同步明细数据结构
type FbsportsOrderSyncDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // 注单ID
	OrderId           string  `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`                      // 订单ID
	SportId           int64   `protobuf:"varint,3,opt,name=sportId,proto3" json:"sportId,omitempty"`                     // 运动ID, 参见枚举: sports
	MatchId           string  `protobuf:"bytes,4,opt,name=matchId,proto3" json:"matchId,omitempty"`                      // 比赛ID
	MatchName         string  `protobuf:"bytes,5,opt,name=matchName,proto3" json:"matchName,omitempty"`                  // 比赛名称, 可选
	Period            int64   `protobuf:"varint,6,opt,name=period,proto3" json:"period,omitempty"`                       // 阶段ID, 参见枚举: period
	MarketId          string  `protobuf:"bytes,7,opt,name=marketId,proto3" json:"marketId,omitempty"`                    // 玩法ID
	MarketType        int64   `protobuf:"varint,8,opt,name=marketType,proto3" json:"marketType,omitempty"`               // 玩法类型, 参见枚举: market_type
	OptionType        int64   `protobuf:"varint,9,opt,name=optionType,proto3" json:"optionType,omitempty"`               // 投注项类型, 参见枚举: selection_type
	OptionName        string  `protobuf:"bytes,10,opt,name=optionName,proto3" json:"optionName,omitempty"`               // 选项名称, 可选
	MarketName        string  `protobuf:"bytes,11,opt,name=marketName,proto3" json:"marketName,omitempty"`               // 玩法名称, 可选
	TournamentId      string  `protobuf:"bytes,12,opt,name=tournamentId,proto3" json:"tournamentId,omitempty"`           // 联赛ID
	TournamentName    string  `protobuf:"bytes,13,opt,name=tournamentName,proto3" json:"tournamentName,omitempty"`       // 联赛名称, 可选
	Odds              string  `protobuf:"bytes,14,opt,name=odds,proto3" json:"odds,omitempty"`                           // 欧式赔率
	OddsFormat        int64   `protobuf:"varint,15,opt,name=oddsFormat,proto3" json:"oddsFormat,omitempty"`              // 投注时赔率类型, 参见枚举: odds_format_type_enum
	BetOdds           string  `protobuf:"bytes,16,opt,name=betOdds,proto3" json:"betOdds,omitempty"`                     // 投注时赔率
	SettleStatus      int64   `protobuf:"varint,17,opt,name=settleStatus,proto3" json:"settleStatus,omitempty"`          // 结算状态, 参见枚举: settle_status, 可选
	SettleResult      int64   `protobuf:"varint,18,opt,name=settleResult,proto3" json:"settleResult,omitempty"`          // 结算结果, 参见枚举: outcome, 可选
	IsInplay          bool    `protobuf:"varint,19,opt,name=isInplay,proto3" json:"isInplay,omitempty"`                  // 是否滚球 (false:非滚球 true:滚球), 可选
	Remark            string  `protobuf:"bytes,20,opt,name=remark,proto3" json:"remark,omitempty"`                       // 备注, 可选
	P1                float64 `protobuf:"fixed64,21,opt,name=p1,proto3" json:"p1,omitempty"`                             // 变量1 (例如: 让几个球), 可选
	P2                float64 `protobuf:"fixed64,22,opt,name=p2,proto3" json:"p2,omitempty"`                             // 变量2, 可选
	P3                float64 `protobuf:"fixed64,23,opt,name=p3,proto3" json:"p3,omitempty"`                             // 变量3, 可选
	ExtendedParameter string  `protobuf:"bytes,24,opt,name=extendedParameter,proto3" json:"extendedParameter,omitempty"` // 亚洲让球线, 可选
	ExtraInfo         string  `protobuf:"bytes,25,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`                 // 当前比分, 可选
	PendingTime       string  `protobuf:"bytes,26,opt,name=pendingTime,proto3" json:"pendingTime,omitempty"`             // 延迟等待时间, 可选
	BetScore          string  `protobuf:"bytes,27,opt,name=betScore,proto3" json:"betScore,omitempty"`                   // 下注当时比分, 可选
	CancelReason      int64   `protobuf:"varint,28,opt,name=cancelReason,proto3" json:"cancelReason,omitempty"`          // 取消原因, 参见枚举: order_cancel_reason, 可选
	CancelReasonName  string  `protobuf:"bytes,29,opt,name=cancelReasonName,proto3" json:"cancelReasonName,omitempty"`   // 取消原因文本, 可选
	MatchType         int64   `protobuf:"varint,30,opt,name=matchType,proto3" json:"matchType,omitempty"`                // 赛事类型, 参见枚举: match_type, 可选
	MatchTime         string  `protobuf:"bytes,31,opt,name=matchTime,proto3" json:"matchTime,omitempty"`                 // 开赛时间, 可选
	LeaguePhase       string  `protobuf:"bytes,32,opt,name=leaguePhase,proto3" json:"leaguePhase,omitempty"`             // 联赛阶段
}

func (x *FbsportsOrderSyncDetailReq) Reset() {
	*x = FbsportsOrderSyncDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsOrderSyncDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsOrderSyncDetailReq) ProtoMessage() {}

func (x *FbsportsOrderSyncDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsOrderSyncDetailReq.ProtoReflect.Descriptor instead.
func (*FbsportsOrderSyncDetailReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{340}
}

func (x *FbsportsOrderSyncDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetSportId() int64 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetMarketType() int64 {
	if x != nil {
		return x.MarketType
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetOptionType() int64 {
	if x != nil {
		return x.OptionType
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetOptionName() string {
	if x != nil {
		return x.OptionName
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetOddsFormat() int64 {
	if x != nil {
		return x.OddsFormat
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetBetOdds() string {
	if x != nil {
		return x.BetOdds
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetSettleStatus() int64 {
	if x != nil {
		return x.SettleStatus
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetSettleResult() int64 {
	if x != nil {
		return x.SettleResult
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetIsInplay() bool {
	if x != nil {
		return x.IsInplay
	}
	return false
}

func (x *FbsportsOrderSyncDetailReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetP1() float64 {
	if x != nil {
		return x.P1
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetP2() float64 {
	if x != nil {
		return x.P2
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetP3() float64 {
	if x != nil {
		return x.P3
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetExtendedParameter() string {
	if x != nil {
		return x.ExtendedParameter
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetPendingTime() string {
	if x != nil {
		return x.PendingTime
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetBetScore() string {
	if x != nil {
		return x.BetScore
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetCancelReason() int64 {
	if x != nil {
		return x.CancelReason
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetCancelReasonName() string {
	if x != nil {
		return x.CancelReasonName
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetMatchType() int64 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *FbsportsOrderSyncDetailReq) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *FbsportsOrderSyncDetailReq) GetLeaguePhase() string {
	if x != nil {
		return x.LeaguePhase
	}
	return ""
}

type SabaGetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message *SabaGetBalanceMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SabaGetBalanceReq) Reset() {
	*x = SabaGetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaGetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaGetBalanceReq) ProtoMessage() {}

func (x *SabaGetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaGetBalanceReq.ProtoReflect.Descriptor instead.
func (*SabaGetBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{341}
}

func (x *SabaGetBalanceReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SabaGetBalanceReq) GetMessage() *SabaGetBalanceMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type TurboProfileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomPlayerId string  `protobuf:"bytes,2,opt,name=custom_player_id,json=customPlayerId,proto3" json:"custom_player_id,omitempty"`
	DisplayName    string  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Currency       string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	IsTest         bool    `protobuf:"varint,5,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
	Balance        float64 `protobuf:"fixed64,6,opt,name=balance,proto3" json:"balance,omitempty"`
	Code           int32   `protobuf:"varint,7,opt,name=code,proto3" json:"code,omitempty"`
	Message        string  `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TurboProfileResp) Reset() {
	*x = TurboProfileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurboProfileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurboProfileResp) ProtoMessage() {}

func (x *TurboProfileResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurboProfileResp.ProtoReflect.Descriptor instead.
func (*TurboProfileResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{342}
}

func (x *TurboProfileResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TurboProfileResp) GetCustomPlayerId() string {
	if x != nil {
		return x.CustomPlayerId
	}
	return ""
}

func (x *TurboProfileResp) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TurboProfileResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TurboProfileResp) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

func (x *TurboProfileResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TurboProfileResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TurboProfileResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BetByBetRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtTransactionId    string `protobuf:"bytes,2,opt,name=ext_transaction_id,json=extTransactionId,proto3" json:"ext_transaction_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,3,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation           string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Amount              int64  `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance             int64  `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetByBetRefundResponse) Reset() {
	*x = BetByBetRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetRefundResponse) ProtoMessage() {}

func (x *BetByBetRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetRefundResponse.ProtoReflect.Descriptor instead.
func (*BetByBetRefundResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{343}
}

func (x *BetByBetRefundResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBetRefundResponse) GetExtTransactionId() string {
	if x != nil {
		return x.ExtTransactionId
	}
	return ""
}

func (x *BetByBetRefundResponse) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetByBetRefundResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetByBetRefundResponse) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetByBetRefundResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetRefundResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetRefundResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type EvoTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RefId  string  `protobuf:"bytes,2,opt,name=refId,proto3" json:"refId,omitempty"`
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EvoTransaction) Reset() {
	*x = EvoTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoTransaction) ProtoMessage() {}

func (x *EvoTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoTransaction.ProtoReflect.Descriptor instead.
func (*EvoTransaction) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{344}
}

func (x *EvoTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvoTransaction) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *EvoTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type PachinkoBalanceValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money    string `protobuf:"bytes,1,opt,name=money,proto3" json:"money,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *PachinkoBalanceValue) Reset() {
	*x = PachinkoBalanceValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PachinkoBalanceValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PachinkoBalanceValue) ProtoMessage() {}

func (x *PachinkoBalanceValue) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PachinkoBalanceValue.ProtoReflect.Descriptor instead.
func (*PachinkoBalanceValue) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{345}
}

func (x *PachinkoBalanceValue) GetMoney() string {
	if x != nil {
		return x.Money
	}
	return ""
}

func (x *PachinkoBalanceValue) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type PinnacleQueryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *PinnacleQueryRspResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode uint32                  `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Timestamp string                  `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnacleQueryRsp) Reset() {
	*x = PinnacleQueryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleQueryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleQueryRsp) ProtoMessage() {}

func (x *PinnacleQueryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleQueryRsp.ProtoReflect.Descriptor instead.
func (*PinnacleQueryRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{346}
}

func (x *PinnacleQueryRsp) GetResult() *PinnacleQueryRspResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PinnacleQueryRsp) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PinnacleQueryRsp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type BetRefundRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Balance    int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetRefundRes) Reset() {
	*x = BetRefundRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRefundRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRefundRes) ProtoMessage() {}

func (x *BetRefundRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRefundRes.ProtoReflect.Descriptor instead.
func (*BetRefundRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{347}
}

func (x *BetRefundRes) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *BetRefundRes) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type TurboPlaceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string  `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Balance       float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt     int64   `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Currency      string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Rollback      bool    `protobuf:"varint,5,opt,name=rollback,proto3" json:"rollback,omitempty"`
	Code          int32   `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
	Message       string  `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TurboPlaceResp) Reset() {
	*x = TurboPlaceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurboPlaceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurboPlaceResp) ProtoMessage() {}

func (x *TurboPlaceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurboPlaceResp.ProtoReflect.Descriptor instead.
func (*TurboPlaceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{348}
}

func (x *TurboPlaceResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TurboPlaceResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TurboPlaceResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TurboPlaceResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TurboPlaceResp) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *TurboPlaceResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TurboPlaceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EndingGetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccount string `protobuf:"bytes,1,opt,name=player_account,json=playerAccount,proto3" json:"player_account,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	TimeUnix      int64  `protobuf:"varint,3,opt,name=time_unix,json=timeUnix,proto3" json:"time_unix,omitempty"`
	Hash          string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *EndingGetBalanceReq) Reset() {
	*x = EndingGetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndingGetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndingGetBalanceReq) ProtoMessage() {}

func (x *EndingGetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndingGetBalanceReq.ProtoReflect.Descriptor instead.
func (*EndingGetBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{349}
}

func (x *EndingGetBalanceReq) GetPlayerAccount() string {
	if x != nil {
		return x.PlayerAccount
	}
	return ""
}

func (x *EndingGetBalanceReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EndingGetBalanceReq) GetTimeUnix() int64 {
	if x != nil {
		return x.TimeUnix
	}
	return 0
}

func (x *EndingGetBalanceReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type PinnaclePingRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool `protobuf:"varint,1,opt,name=Available,proto3" json:"Available,omitempty"`
}

func (x *PinnaclePingRspResult) Reset() {
	*x = PinnaclePingRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnaclePingRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnaclePingRspResult) ProtoMessage() {}

func (x *PinnaclePingRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnaclePingRspResult.ProtoReflect.Descriptor instead.
func (*PinnaclePingRspResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{350}
}

func (x *PinnaclePingRspResult) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

// 定义下注接口的输入输出
type SabaPlaceBetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          string  `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	OperationId     string  `protobuf:"bytes,2,opt,name=operationId,proto3" json:"operationId,omitempty"`
	UserId          string  `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Currency        int32   `protobuf:"varint,4,opt,name=currency,proto3" json:"currency,omitempty"`
	MatchId         int64   `protobuf:"varint,5,opt,name=matchId,proto3" json:"matchId,omitempty"`
	HomeId          int64   `protobuf:"varint,6,opt,name=homeId,proto3" json:"homeId,omitempty"`
	AwayId          int64   `protobuf:"varint,7,opt,name=awayId,proto3" json:"awayId,omitempty"`
	HomeName        string  `protobuf:"bytes,8,opt,name=homeName,proto3" json:"homeName,omitempty"`
	AwayName        string  `protobuf:"bytes,9,opt,name=awayName,proto3" json:"awayName,omitempty"`
	KickOffTime     string  `protobuf:"bytes,10,opt,name=kickOffTime,proto3" json:"kickOffTime,omitempty"`
	BetTime         string  `protobuf:"bytes,11,opt,name=betTime,proto3" json:"betTime,omitempty"`
	BetAmount       float64 `protobuf:"fixed64,12,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	ActualAmount    float64 `protobuf:"fixed64,13,opt,name=actualAmount,proto3" json:"actualAmount,omitempty"`
	SportType       int64   `protobuf:"varint,14,opt,name=sportType,proto3" json:"sportType,omitempty"`
	SportTypeName   string  `protobuf:"bytes,15,opt,name=sportTypeName,proto3" json:"sportTypeName,omitempty"`
	BetType         int64   `protobuf:"varint,16,opt,name=betType,proto3" json:"betType,omitempty"`
	BetTypeName     string  `protobuf:"bytes,17,opt,name=betTypeName,proto3" json:"betTypeName,omitempty"`
	OddsType        int64   `protobuf:"varint,18,opt,name=oddsType,proto3" json:"oddsType,omitempty"`
	OddsId          int64   `protobuf:"varint,19,opt,name=oddsId,proto3" json:"oddsId,omitempty"`
	Odds            float64 `protobuf:"fixed64,20,opt,name=odds,proto3" json:"odds,omitempty"`
	BetChoice       string  `protobuf:"bytes,21,opt,name=betChoice,proto3" json:"betChoice,omitempty"`
	BetChoiceEn     string  `protobuf:"bytes,22,opt,name=betChoiceEn,proto3" json:"betChoiceEn,omitempty"`
	UpdateTime      string  `protobuf:"bytes,23,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	LeagueId        int64   `protobuf:"varint,24,opt,name=leagueId,proto3" json:"leagueId,omitempty"`
	LeagueName      string  `protobuf:"bytes,25,opt,name=leagueName,proto3" json:"leagueName,omitempty"`
	LeagueNameEn    string  `protobuf:"bytes,26,opt,name=leagueNameEn,proto3" json:"leagueNameEn,omitempty"`
	SportTypeNameEn string  `protobuf:"bytes,27,opt,name=sportTypeNameEn,proto3" json:"sportTypeNameEn,omitempty"`
	BetTypeNameEn   string  `protobuf:"bytes,28,opt,name=betTypeNameEn,proto3" json:"betTypeNameEn,omitempty"`
	HomeNameEn      string  `protobuf:"bytes,29,opt,name=homeNameEn,proto3" json:"homeNameEn,omitempty"`
	AwayNameEn      string  `protobuf:"bytes,30,opt,name=awayNameEn,proto3" json:"awayNameEn,omitempty"`
	Ip              string  `protobuf:"bytes,31,opt,name=ip,proto3" json:"ip,omitempty"`
	IsLive          bool    `protobuf:"varint,32,opt,name=isLive,proto3" json:"isLive,omitempty"`
	RefId           string  `protobuf:"bytes,33,opt,name=refId,proto3" json:"refId,omitempty"`
	TsId            string  `protobuf:"bytes,34,opt,name=tsId,proto3" json:"tsId,omitempty"`
	Point           string  `protobuf:"bytes,35,opt,name=point,proto3" json:"point,omitempty"`
	Point2          string  `protobuf:"bytes,36,opt,name=point2,proto3" json:"point2,omitempty"`
	BetTeam         string  `protobuf:"bytes,37,opt,name=betTeam,proto3" json:"betTeam,omitempty"`
	HomeScore       int64   `protobuf:"varint,38,opt,name=homeScore,proto3" json:"homeScore,omitempty"`
	AwayScore       int64   `protobuf:"varint,39,opt,name=awayScore,proto3" json:"awayScore,omitempty"`
	BaStatus        bool    `protobuf:"varint,40,opt,name=baStatus,proto3" json:"baStatus,omitempty"`
	Excluding       string  `protobuf:"bytes,41,opt,name=excluding,proto3" json:"excluding,omitempty"`
	BetFrom         string  `protobuf:"bytes,42,opt,name=betFrom,proto3" json:"betFrom,omitempty"`
	CreditAmount    float64 `protobuf:"fixed64,43,opt,name=creditAmount,proto3" json:"creditAmount,omitempty"`
	DebitAmount     float64 `protobuf:"fixed64,44,opt,name=debitAmount,proto3" json:"debitAmount,omitempty"`
	OddsInfo        string  `protobuf:"bytes,45,opt,name=oddsInfo,proto3" json:"oddsInfo,omitempty"`
	MatchDateTime   string  `protobuf:"bytes,46,opt,name=matchDateTime,proto3" json:"matchDateTime,omitempty"`
	BetRemark       string  `protobuf:"bytes,47,opt,name=betRemark,proto3" json:"betRemark,omitempty"`
	VendorTransId   string  `protobuf:"bytes,48,opt,name=vendorTransId,proto3" json:"vendorTransId,omitempty"`
	MmrPercentage   float64 `protobuf:"fixed64,49,opt,name=mmrPercentage,proto3" json:"mmrPercentage,omitempty"`
	TxId            int64   `protobuf:"varint,50,opt,name=txId,proto3" json:"txId,omitempty"`
}

func (x *SabaPlaceBetMessage) Reset() {
	*x = SabaPlaceBetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaPlaceBetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaPlaceBetMessage) ProtoMessage() {}

func (x *SabaPlaceBetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaPlaceBetMessage.ProtoReflect.Descriptor instead.
func (*SabaPlaceBetMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{351}
}

func (x *SabaPlaceBetMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetAwayId() int64 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetHomeName() string {
	if x != nil {
		return x.HomeName
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetAwayName() string {
	if x != nil {
		return x.AwayName
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetKickOffTime() string {
	if x != nil {
		return x.KickOffTime
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetActualAmount() float64 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetSportType() int64 {
	if x != nil {
		return x.SportType
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetSportTypeName() string {
	if x != nil {
		return x.SportTypeName
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetType() int64 {
	if x != nil {
		return x.BetType
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetBetTypeName() string {
	if x != nil {
		return x.BetTypeName
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetOddsType() int64 {
	if x != nil {
		return x.OddsType
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetOddsId() int64 {
	if x != nil {
		return x.OddsId
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetBetChoice() string {
	if x != nil {
		return x.BetChoice
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetChoiceEn() string {
	if x != nil {
		return x.BetChoiceEn
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetLeagueNameEn() string {
	if x != nil {
		return x.LeagueNameEn
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetSportTypeNameEn() string {
	if x != nil {
		return x.SportTypeNameEn
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetTypeNameEn() string {
	if x != nil {
		return x.BetTypeNameEn
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetHomeNameEn() string {
	if x != nil {
		return x.HomeNameEn
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetAwayNameEn() string {
	if x != nil {
		return x.AwayNameEn
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *SabaPlaceBetMessage) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetTsId() string {
	if x != nil {
		return x.TsId
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetPoint2() string {
	if x != nil {
		return x.Point2
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetTeam() string {
	if x != nil {
		return x.BetTeam
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetHomeScore() int64 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetAwayScore() int64 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetBaStatus() bool {
	if x != nil {
		return x.BaStatus
	}
	return false
}

func (x *SabaPlaceBetMessage) GetExcluding() string {
	if x != nil {
		return x.Excluding
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetFrom() string {
	if x != nil {
		return x.BetFrom
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetOddsInfo() string {
	if x != nil {
		return x.OddsInfo
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetMatchDateTime() string {
	if x != nil {
		return x.MatchDateTime
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetBetRemark() string {
	if x != nil {
		return x.BetRemark
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetVendorTransId() string {
	if x != nil {
		return x.VendorTransId
	}
	return ""
}

func (x *SabaPlaceBetMessage) GetMmrPercentage() float64 {
	if x != nil {
		return x.MmrPercentage
	}
	return 0
}

func (x *SabaPlaceBetMessage) GetTxId() int64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

// 2003 Parent transaction not found
// 2004 Bad request
// 2005 Invalid JWT token
type BetWinError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BetWinError) Reset() {
	*x = BetWinError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetWinError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetWinError) ProtoMessage() {}

func (x *BetWinError) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetWinError.ProtoReflect.Descriptor instead.
func (*BetWinError) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{352}
}

func (x *BetWinError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BetWinError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EndingSettleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency    string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance     string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	MessageCode string `protobuf:"bytes,3,opt,name=message_code,json=messageCode,proto3" json:"message_code,omitempty"`
}

func (x *EndingSettleResp) Reset() {
	*x = EndingSettleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndingSettleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndingSettleResp) ProtoMessage() {}

func (x *EndingSettleResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndingSettleResp.ProtoReflect.Descriptor instead.
func (*EndingSettleResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{353}
}

func (x *EndingSettleResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EndingSettleResp) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *EndingSettleResp) GetMessageCode() string {
	if x != nil {
		return x.MessageCode
	}
	return ""
}

type HabaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success       bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Autherror     bool   `protobuf:"varint,2,opt,name=autherror,proto3" json:"autherror,omitempty"`
	Nofunds       bool   `protobuf:"varint,3,opt,name=nofunds,proto3" json:"nofunds,omitempty"`
	Successdebit  bool   `protobuf:"varint,4,opt,name=successdebit,proto3" json:"successdebit,omitempty"`
	Successcredit bool   `protobuf:"varint,5,opt,name=successcredit,proto3" json:"successcredit,omitempty"`
	Refundstatus  uint32 `protobuf:"varint,6,opt,name=refundstatus,proto3" json:"refundstatus,omitempty"`
	Message       string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HabaStatus) Reset() {
	*x = HabaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HabaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HabaStatus) ProtoMessage() {}

func (x *HabaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HabaStatus.ProtoReflect.Descriptor instead.
func (*HabaStatus) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{354}
}

func (x *HabaStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HabaStatus) GetAutherror() bool {
	if x != nil {
		return x.Autherror
	}
	return false
}

func (x *HabaStatus) GetNofunds() bool {
	if x != nil {
		return x.Nofunds
	}
	return false
}

func (x *HabaStatus) GetSuccessdebit() bool {
	if x != nil {
		return x.Successdebit
	}
	return false
}

func (x *HabaStatus) GetSuccesscredit() bool {
	if x != nil {
		return x.Successcredit
	}
	return false
}

func (x *HabaStatus) GetRefundstatus() uint32 {
	if x != nil {
		return x.Refundstatus
	}
	return 0
}

func (x *HabaStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JdbReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
}

func (x *JdbReq) Reset() {
	*x = JdbReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JdbReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JdbReq) ProtoMessage() {}

func (x *JdbReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JdbReq.ProtoReflect.Descriptor instead.
func (*JdbReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{355}
}

func (x *JdbReq) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

// 取消棋牌投注-请求
type JiLiCancelSessionBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId         string  `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Token         string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Currency      string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Game          int32   `protobuf:"varint,4,opt,name=game,proto3" json:"game,omitempty"`
	Round         int64   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	BetAmount     float64 `protobuf:"fixed64,6,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	WinLoseAmount float64 `protobuf:"fixed64,7,opt,name=win_lose_amount,json=winLoseAmount,proto3" json:"win_lose_amount,omitempty"`
	UserId        int64   `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId     int64   `protobuf:"varint,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type          int32   `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	Preserve      float64 `protobuf:"fixed64,11,opt,name=preserve,proto3" json:"preserve,omitempty"`
	Username      string  `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *JiLiCancelSessionBetReq) Reset() {
	*x = JiLiCancelSessionBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiLiCancelSessionBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiLiCancelSessionBetReq) ProtoMessage() {}

func (x *JiLiCancelSessionBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiLiCancelSessionBetReq.ProtoReflect.Descriptor instead.
func (*JiLiCancelSessionBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{356}
}

func (x *JiLiCancelSessionBetReq) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *JiLiCancelSessionBetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JiLiCancelSessionBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *JiLiCancelSessionBetReq) GetGame() int32 {
	if x != nil {
		return x.Game
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetWinLoseAmount() float64 {
	if x != nil {
		return x.WinLoseAmount
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetPreserve() float64 {
	if x != nil {
		return x.Preserve
	}
	return 0
}

func (x *JiLiCancelSessionBetReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PinnacleGetbalanceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *PinnacleGetbalanceResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ErrorCode uint32                    `protobuf:"varint,2,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Timestamp string                    `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PinnacleGetbalanceRsp) Reset() {
	*x = PinnacleGetbalanceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleGetbalanceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleGetbalanceRsp) ProtoMessage() {}

func (x *PinnacleGetbalanceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleGetbalanceRsp.ProtoReflect.Descriptor instead.
func (*PinnacleGetbalanceRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{357}
}

func (x *PinnacleGetbalanceRsp) GetResult() *PinnacleGetbalanceResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *PinnacleGetbalanceRsp) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PinnacleGetbalanceRsp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type SabaConfirmBetParlayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *SabaConfirmBetParlayResp) Reset() {
	*x = SabaConfirmBetParlayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaConfirmBetParlayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaConfirmBetParlayResp) ProtoMessage() {}

func (x *SabaConfirmBetParlayResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaConfirmBetParlayResp.ProtoReflect.Descriptor instead.
func (*SabaConfirmBetParlayResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{358}
}

func (x *SabaConfirmBetParlayResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaConfirmBetParlayResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SabaConfirmBetParlayResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type AgQJgameResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *AgQJgameResultBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Code uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AgQJgameResultResponse) Reset() {
	*x = AgQJgameResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgQJgameResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgQJgameResultResponse) ProtoMessage() {}

func (x *AgQJgameResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgQJgameResultResponse.ProtoReflect.Descriptor instead.
func (*AgQJgameResultResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{359}
}

func (x *AgQJgameResultResponse) GetBody() *AgQJgameResultBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AgQJgameResultResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type Cq9PayoffRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Datetime string `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`
}

func (x *Cq9PayoffRes) Reset() {
	*x = Cq9PayoffRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9PayoffRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9PayoffRes) ProtoMessage() {}

func (x *Cq9PayoffRes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9PayoffRes.ProtoReflect.Descriptor instead.
func (*Cq9PayoffRes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{360}
}

func (x *Cq9PayoffRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Cq9PayoffRes) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Cq9PayoffRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Cq9PayoffRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cq9PayoffRes) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

type EvoJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WinAmount float64 `protobuf:"fixed64,2,opt,name=winAmount,proto3" json:"winAmount,omitempty"`
}

func (x *EvoJackpot) Reset() {
	*x = EvoJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvoJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvoJackpot) ProtoMessage() {}

func (x *EvoJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvoJackpot.ProtoReflect.Descriptor instead.
func (*EvoJackpot) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{361}
}

func (x *EvoJackpot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvoJackpot) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

type PinnacleCreditRspResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCode         string                   `protobuf:"bytes,1,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	AvaliableBalance float64                  `protobuf:"fixed64,2,opt,name=AvaliableBalance,proto3" json:"AvaliableBalance,omitempty"`
	Action           *PinnacleCreditRspAction `protobuf:"bytes,3,opt,name=Action,proto3" json:"Action,omitempty"`
}

func (x *PinnacleCreditRspResult) Reset() {
	*x = PinnacleCreditRspResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnacleCreditRspResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnacleCreditRspResult) ProtoMessage() {}

func (x *PinnacleCreditRspResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnacleCreditRspResult.ProtoReflect.Descriptor instead.
func (*PinnacleCreditRspResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{362}
}

func (x *PinnacleCreditRspResult) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *PinnacleCreditRspResult) GetAvaliableBalance() float64 {
	if x != nil {
		return x.AvaliableBalance
	}
	return 0
}

func (x *PinnacleCreditRspResult) GetAction() *PinnacleCreditRspAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type Cq9BetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Account   string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	EventTime string `protobuf:"bytes,3,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Gamehall  string `protobuf:"bytes,4,opt,name=gamehall,proto3" json:"gamehall,omitempty"`
	Gamecode  string `protobuf:"bytes,5,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	Roundid   string `protobuf:"bytes,6,opt,name=roundid,proto3" json:"roundid,omitempty"`
	Amount    string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Mtcode    string `protobuf:"bytes,8,opt,name=mtcode,proto3" json:"mtcode,omitempty"`
	Session   string `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	Platform  string `protobuf:"bytes,10,opt,name=platform,proto3" json:"platform,omitempty"`
	Json      string `protobuf:"bytes,11,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Cq9BetReq) Reset() {
	*x = Cq9BetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cq9BetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cq9BetReq) ProtoMessage() {}

func (x *Cq9BetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cq9BetReq.ProtoReflect.Descriptor instead.
func (*Cq9BetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{363}
}

func (x *Cq9BetReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Cq9BetReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Cq9BetReq) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Cq9BetReq) GetGamehall() string {
	if x != nil {
		return x.Gamehall
	}
	return ""
}

func (x *Cq9BetReq) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *Cq9BetReq) GetRoundid() string {
	if x != nil {
		return x.Roundid
	}
	return ""
}

func (x *Cq9BetReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Cq9BetReq) GetMtcode() string {
	if x != nil {
		return x.Mtcode
	}
	return ""
}

func (x *Cq9BetReq) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *Cq9BetReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Cq9BetReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type FunkyBetSettleReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectiveStake  float64 `protobuf:"fixed64,1,opt,name=effectiveStake,proto3" json:"effectiveStake,omitempty"`
	GameCode        string  `protobuf:"bytes,2,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	Stake           float64 `protobuf:"fixed64,4,opt,name=stake,proto3" json:"stake,omitempty"`
	WinAmount       float64 `protobuf:"fixed64,5,opt,name=winAmount,proto3" json:"winAmount,omitempty"`
	VoucherId       string  `protobuf:"bytes,6,opt,name=voucherId,proto3" json:"voucherId,omitempty"`
	FreeSpinMainBet string  `protobuf:"bytes,7,opt,name=freeSpinMainBet,proto3" json:"freeSpinMainBet,omitempty"`
}

func (x *FunkyBetSettleReqData) Reset() {
	*x = FunkyBetSettleReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyBetSettleReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyBetSettleReqData) ProtoMessage() {}

func (x *FunkyBetSettleReqData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyBetSettleReqData.ProtoReflect.Descriptor instead.
func (*FunkyBetSettleReqData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{364}
}

func (x *FunkyBetSettleReqData) GetEffectiveStake() float64 {
	if x != nil {
		return x.EffectiveStake
	}
	return 0
}

func (x *FunkyBetSettleReqData) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FunkyBetSettleReqData) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *FunkyBetSettleReqData) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *FunkyBetSettleReqData) GetVoucherId() string {
	if x != nil {
		return x.VoucherId
	}
	return ""
}

func (x *FunkyBetSettleReqData) GetFreeSpinMainBet() string {
	if x != nil {
		return x.FreeSpinMainBet
	}
	return ""
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetNum             int64   `protobuf:"varint,1,opt,name=betNum,proto3" json:"betNum,omitempty"`
	GameRoundId        int64   `protobuf:"varint,2,opt,name=gameRoundId,proto3" json:"gameRoundId,omitempty"`
	Status             int64   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	BetAmount          float64 `protobuf:"fixed64,4,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	Deposit            float64 `protobuf:"fixed64,5,opt,name=deposit,proto3" json:"deposit,omitempty"`
	GameType           int64   `protobuf:"varint,6,opt,name=gameType,proto3" json:"gameType,omitempty"`
	BetType            int64   `protobuf:"varint,7,opt,name=betType,proto3" json:"betType,omitempty"`
	Commission         int64   `protobuf:"varint,8,opt,name=commission,proto3" json:"commission,omitempty"`
	ExchangeRate       int64   `protobuf:"varint,9,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	BetTime            string  `protobuf:"bytes,10,opt,name=betTime,proto3" json:"betTime,omitempty"`
	TableName          string  `protobuf:"bytes,11,opt,name=tableName,proto3" json:"tableName,omitempty"`
	BetMethod          int64   `protobuf:"varint,12,opt,name=betMethod,proto3" json:"betMethod,omitempty"`
	AppType            int64   `protobuf:"varint,13,opt,name=appType,proto3" json:"appType,omitempty"`
	GameRoundStartTime string  `protobuf:"bytes,14,opt,name=gameRoundStartTime,proto3" json:"gameRoundStartTime,omitempty"`
	Ip                 string  `protobuf:"bytes,15,opt,name=ip,proto3" json:"ip,omitempty"`
	EventType          int64   `protobuf:"varint,16,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventCode          string  `protobuf:"bytes,17,opt,name=eventCode,proto3" json:"eventCode,omitempty"`
	EventRecordNum     int64   `protobuf:"varint,18,opt,name=eventRecordNum,proto3" json:"eventRecordNum,omitempty"`
	Amount             float64 `protobuf:"fixed64,19,opt,name=amount,proto3" json:"amount,omitempty"`
	SettleTime         string  `protobuf:"bytes,21,opt,name=settleTime,proto3" json:"settleTime,omitempty"`
	ValidAmount        float64 `protobuf:"fixed64,22,opt,name=validAmount,proto3" json:"validAmount,omitempty"`
	WinOrLossAmount    float64 `protobuf:"fixed64,23,opt,name=WinOrLossAmount,proto3" json:"WinOrLossAmount,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{365}
}

func (x *Details) GetBetNum() int64 {
	if x != nil {
		return x.BetNum
	}
	return 0
}

func (x *Details) GetGameRoundId() int64 {
	if x != nil {
		return x.GameRoundId
	}
	return 0
}

func (x *Details) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Details) GetBetAmount() float64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *Details) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *Details) GetGameType() int64 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *Details) GetBetType() int64 {
	if x != nil {
		return x.BetType
	}
	return 0
}

func (x *Details) GetCommission() int64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Details) GetExchangeRate() int64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *Details) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *Details) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Details) GetBetMethod() int64 {
	if x != nil {
		return x.BetMethod
	}
	return 0
}

func (x *Details) GetAppType() int64 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *Details) GetGameRoundStartTime() string {
	if x != nil {
		return x.GameRoundStartTime
	}
	return ""
}

func (x *Details) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Details) GetEventType() int64 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *Details) GetEventCode() string {
	if x != nil {
		return x.EventCode
	}
	return ""
}

func (x *Details) GetEventRecordNum() int64 {
	if x != nil {
		return x.EventRecordNum
	}
	return 0
}

func (x *Details) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Details) GetSettleTime() string {
	if x != nil {
		return x.SettleTime
	}
	return ""
}

func (x *Details) GetValidAmount() float64 {
	if x != nil {
		return x.ValidAmount
	}
	return 0
}

func (x *Details) GetWinOrLossAmount() float64 {
	if x != nil {
		return x.WinOrLossAmount
	}
	return 0
}

type SabaAdjustBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SabaAdjustBalanceResp) Reset() {
	*x = SabaAdjustBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SabaAdjustBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SabaAdjustBalanceResp) ProtoMessage() {}

func (x *SabaAdjustBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SabaAdjustBalanceResp.ProtoReflect.Descriptor instead.
func (*SabaAdjustBalanceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{366}
}

func (x *SabaAdjustBalanceResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SabaAdjustBalanceResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 注意。可选参数可在后台激活。
// 注意。当玩家使用自由投注进行投注时，其余额可能会根据自由投注类型进行更改或不更改：
// 1. 标准免费投注 - 这意味着只有玩家赢取的金额才会转入其余额。例如，用单数投注 5 美元
// 22
//
//	玩家将获得 5 * 3.5 - 5 = 12.50。
//
// 2. 免费投注 - 玩家将获得赢取的金额和免费投注。例如，以单数 3.5 下注 5 美元，玩家将获得 5 * 3.5 = 17.50。
// 3. 无风险投注 - 玩家投注时，余额应减去免费投注的金额。如果投注输了，投注金额将转入余额。如果投注获胜，奖金将包括投注额和获胜额。
type BetByBetMakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtTransactionId    string `protobuf:"bytes,2,opt,name=ext_transaction_id,json=extTransactionId,proto3" json:"ext_transaction_id,omitempty"`
	ParentTransactionId string `protobuf:"bytes,3,opt,name=parent_transaction_id,json=parentTransactionId,proto3" json:"parent_transaction_id,omitempty"`
	UserId              string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation           string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Amount              uint32 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency            string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Balance             int64  `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BetByBetMakeResponse) Reset() {
	*x = BetByBetMakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetByBetMakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetByBetMakeResponse) ProtoMessage() {}

func (x *BetByBetMakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetByBetMakeResponse.ProtoReflect.Descriptor instead.
func (*BetByBetMakeResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{367}
}

func (x *BetByBetMakeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BetByBetMakeResponse) GetExtTransactionId() string {
	if x != nil {
		return x.ExtTransactionId
	}
	return ""
}

func (x *BetByBetMakeResponse) GetParentTransactionId() string {
	if x != nil {
		return x.ParentTransactionId
	}
	return ""
}

func (x *BetByBetMakeResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BetByBetMakeResponse) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BetByBetMakeResponse) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BetByBetMakeResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BetByBetMakeResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type FbsportsHealthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FbsportsHealthResp) Reset() {
	*x = FbsportsHealthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbsportsHealthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbsportsHealthResp) ProtoMessage() {}

func (x *FbsportsHealthResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbsportsHealthResp.ProtoReflect.Descriptor instead.
func (*FbsportsHealthResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{368}
}

func (x *FbsportsHealthResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FbsportsHealthResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FbsportsHealthResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FbsportsHealthResp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 检查注单
type FunkyCheckBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	SessionId    string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Id           string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	GameCode     string `protobuf:"bytes,4,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	GameProvider string `protobuf:"bytes,5,opt,name=gameProvider,proto3" json:"gameProvider,omitempty"`
}

func (x *FunkyCheckBetReq) Reset() {
	*x = FunkyCheckBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunkyCheckBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunkyCheckBetReq) ProtoMessage() {}

func (x *FunkyCheckBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunkyCheckBetReq.ProtoReflect.Descriptor instead.
func (*FunkyCheckBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{369}
}

func (x *FunkyCheckBetReq) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *FunkyCheckBetReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FunkyCheckBetReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FunkyCheckBetReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FunkyCheckBetReq) GetGameProvider() string {
	if x != nil {
		return x.GameProvider
	}
	return ""
}

type BetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	TxnId       int64  `protobuf:"varint,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	TotalBet    int64  `protobuf:"varint,3,opt,name=total_bet,json=totalBet,proto3" json:"total_bet,omitempty"`
	GameId      string `protobuf:"bytes,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SubgameId   int64  `protobuf:"varint,5,opt,name=subgame_id,json=subgameId,proto3" json:"subgame_id,omitempty"`
	Ts          int64  `protobuf:"varint,6,opt,name=ts,proto3" json:"ts,omitempty"`
	Json        string `protobuf:"bytes,7,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *BetReq) Reset() {
	*x = BetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetReq) ProtoMessage() {}

func (x *BetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetReq.ProtoReflect.Descriptor instead.
func (*BetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{370}
}

func (x *BetReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *BetReq) GetTxnId() int64 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *BetReq) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *BetReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *BetReq) GetSubgameId() int64 {
	if x != nil {
		return x.SubgameId
	}
	return 0
}

func (x *BetReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *BetReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type TurboCancelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string  `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Balance       float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt     int64   `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Currency      string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Repeat        bool    `protobuf:"varint,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Code          int32   `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
	Message       string  `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TurboCancelResp) Reset() {
	*x = TurboCancelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurboCancelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurboCancelResp) ProtoMessage() {}

func (x *TurboCancelResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurboCancelResp.ProtoReflect.Descriptor instead.
func (*TurboCancelResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{371}
}

func (x *TurboCancelResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TurboCancelResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TurboCancelResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TurboCancelResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TurboCancelResp) GetRepeat() bool {
	if x != nil {
		return x.Repeat
	}
	return false
}

func (x *TurboCancelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TurboCancelResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID     string `protobuf:"bytes,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	AppSecret      string `protobuf:"bytes,2,opt,name=appSecret,proto3" json:"appSecret,omitempty"`
	PlayerID       string `protobuf:"bytes,3,opt,name=playerID,proto3" json:"playerID,omitempty"`
	GameID         string `protobuf:"bytes,4,opt,name=gameID,proto3" json:"gameID,omitempty"`
	BetID          string `protobuf:"bytes,5,opt,name=betID,proto3" json:"betID,omitempty"`
	Amount         string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	ValidBetAmount string `protobuf:"bytes,7,opt,name=validBetAmount,proto3" json:"validBetAmount,omitempty"`
	GameStatus     string `protobuf:"bytes,8,opt,name=gameStatus,proto3" json:"gameStatus,omitempty"`
	GameResult     string `protobuf:"bytes,9,opt,name=gameResult,proto3" json:"gameResult,omitempty"`
	Currency       string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	Type           string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Time           string `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty"`
	Odds           string `protobuf:"bytes,13,opt,name=odds,proto3" json:"odds,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{372}
}

func (x *Data) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *Data) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *Data) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *Data) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *Data) GetBetID() string {
	if x != nil {
		return x.BetID
	}
	return ""
}

func (x *Data) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Data) GetValidBetAmount() string {
	if x != nil {
		return x.ValidBetAmount
	}
	return ""
}

func (x *Data) GetGameStatus() string {
	if x != nil {
		return x.GameStatus
	}
	return ""
}

func (x *Data) GetGameResult() string {
	if x != nil {
		return x.GameResult
	}
	return ""
}

func (x *Data) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Data) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Data) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

// 平台生成rsa秘钥（未生成则生成,支持重新生成,不是重新生成存在则返回）
type RsaGenerateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatCode     string `protobuf:"bytes,1,opt,name=PlatCode,proto3" json:"PlatCode,omitempty"`          //平台
	Regeneration bool   `protobuf:"varint,2,opt,name=regeneration,proto3" json:"regeneration,omitempty"` //是否重新生成
}

func (x *RsaGenerateReq) Reset() {
	*x = RsaGenerateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsaGenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaGenerateReq) ProtoMessage() {}

func (x *RsaGenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsaGenerateReq.ProtoReflect.Descriptor instead.
func (*RsaGenerateReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{373}
}

func (x *RsaGenerateReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

func (x *RsaGenerateReq) GetRegeneration() bool {
	if x != nil {
		return x.Regeneration
	}
	return false
}

type RsaGenerateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PublicKey string `protobuf:"bytes,3,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"` //PublicKey
}

func (x *RsaGenerateResp) Reset() {
	*x = RsaGenerateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsaGenerateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaGenerateResp) ProtoMessage() {}

func (x *RsaGenerateResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsaGenerateResp.ProtoReflect.Descriptor instead.
func (*RsaGenerateResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{374}
}

func (x *RsaGenerateResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RsaGenerateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RsaGenerateResp) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// 平台登录获取token
type PlatLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`         //平台
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"` //用户名称
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"` //密码
}

func (x *PlatLoginReq) Reset() {
	*x = PlatLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatLoginReq) ProtoMessage() {}

func (x *PlatLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatLoginReq.ProtoReflect.Descriptor instead.
func (*PlatLoginReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{375}
}

func (x *PlatLoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PlatLoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlatLoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type PlatLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg         string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //accessToken
}

func (x *PlatLoginResp) Reset() {
	*x = PlatLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatLoginResp) ProtoMessage() {}

func (x *PlatLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatLoginResp.ProtoReflect.Descriptor instead.
func (*PlatLoginResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{376}
}

func (x *PlatLoginResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlatLoginResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlatLoginResp) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// 初始化游戏
type InitGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode              string `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                            //游戏code编码
	GameProviderSubtypeId int64  `protobuf:"varint,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"` //厂商游戏类型id
	Uid                   int64  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`                                     //用户id
	PlatCode              string `protobuf:"bytes,4,opt,name=platCode,proto3" json:"platCode,omitempty"`                            //平台编码
}

func (x *InitGameReq) Reset() {
	*x = InitGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitGameReq) ProtoMessage() {}

func (x *InitGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitGameReq.ProtoReflect.Descriptor instead.
func (*InitGameReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{377}
}

func (x *InitGameReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *InitGameReq) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *InitGameReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *InitGameReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

type InitGameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                  int64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                   string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Username              string  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                                             //用户名称
	Money                 float64 `protobuf:"fixed64,4,opt,name=money,proto3" json:"money,omitempty"`                                                                 //用户钱包余额
	GameName              string  `protobuf:"bytes,5,opt,name=gameName,proto3" json:"gameName,omitempty"`                                                             //厂商游戏类型名称
	GameProviderSubtypeId int64   `protobuf:"varint,6,opt,name=game_provider_subtype_id,json=gameProviderSubtypeId,proto3" json:"game_provider_subtype_id,omitempty"` //厂商游戏类型id
	GameProviderName      string  `protobuf:"bytes,7,opt,name=game_provider_name,json=gameProviderName,proto3" json:"game_provider_name,omitempty"`                   //游戏供应商名称
	GameProviderCode      string  `protobuf:"bytes,8,opt,name=game_provider_code,json=gameProviderCode,proto3" json:"game_provider_code,omitempty"`                   //游戏供应商平台编码
	Token                 string  `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`                                                                   //token
	Level                 int64   `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`                                                                 //vip 等级
	Recharge              bool    `protobuf:"varint,11,opt,name=Recharge,proto3" json:"Recharge,omitempty"`                                                           //是否充值 返回bool
}

func (x *InitGameResp) Reset() {
	*x = InitGameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitGameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitGameResp) ProtoMessage() {}

func (x *InitGameResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitGameResp.ProtoReflect.Descriptor instead.
func (*InitGameResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{378}
}

func (x *InitGameResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InitGameResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InitGameResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InitGameResp) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *InitGameResp) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *InitGameResp) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *InitGameResp) GetGameProviderName() string {
	if x != nil {
		return x.GameProviderName
	}
	return ""
}

func (x *InitGameResp) GetGameProviderCode() string {
	if x != nil {
		return x.GameProviderCode
	}
	return ""
}

func (x *InitGameResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *InitGameResp) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *InitGameResp) GetRecharge() bool {
	if x != nil {
		return x.Recharge
	}
	return false
}

// 开始游戏接口 下注
type PlayGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode              string  `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                            //游戏code编码
	GameProviderSubtypeId int64   `protobuf:"varint,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"` //厂商游戏类型id
	RoundId               string  `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`               //回合id
	Amount                float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`                              //游戏金额
	TaiwanFee             bool    `protobuf:"varint,5,opt,name=taiwanFee,proto3" json:"taiwanFee,omitempty"`                         //台费 true=扣台费 false=不扣台费
	Uid                   int64   `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`                                     //用户id
	Username              string  `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`                            //用户名称
	PlatCode              string  `protobuf:"bytes,8,opt,name=platCode,proto3" json:"platCode,omitempty"`                            //平台编码
}

func (x *PlayGameReq) Reset() {
	*x = PlayGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameReq) ProtoMessage() {}

func (x *PlayGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameReq.ProtoReflect.Descriptor instead.
func (*PlayGameReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{379}
}

func (x *PlayGameReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *PlayGameReq) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *PlayGameReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *PlayGameReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlayGameReq) GetTaiwanFee() bool {
	if x != nil {
		return x.TaiwanFee
	}
	return false
}

func (x *PlayGameReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayGameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlayGameReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

type PlayGameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Money         float64 `protobuf:"fixed64,3,opt,name=money,proto3" json:"money,omitempty"`                                    //用户钱包余额
	TransactionId string  `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 注单号 对应三方拉单transaction_id
}

func (x *PlayGameResp) Reset() {
	*x = PlayGameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameResp) ProtoMessage() {}

func (x *PlayGameResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameResp.ProtoReflect.Descriptor instead.
func (*PlayGameResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{380}
}

func (x *PlayGameResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlayGameResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlayGameResp) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PlayGameResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// 开始游戏接口 下注
type OverGameResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode              string `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                            //游戏code编码
	GameProviderSubtypeId int64  `protobuf:"varint,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"` //厂商游戏类型id
	Uid                   int64  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`                                     //用户id
	Username              string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                            //用户名称
	PlatCode              string `protobuf:"bytes,5,opt,name=platCode,proto3" json:"platCode,omitempty"`                            //平台编码
	Status                int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                               //游戏状态1=开始 2=结束
}

func (x *OverGameResultReq) Reset() {
	*x = OverGameResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverGameResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverGameResultReq) ProtoMessage() {}

func (x *OverGameResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverGameResultReq.ProtoReflect.Descriptor instead.
func (*OverGameResultReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{381}
}

func (x *OverGameResultReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *OverGameResultReq) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *OverGameResultReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OverGameResultReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OverGameResultReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

func (x *OverGameResultReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type OverGameResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *OverGameResultResp) Reset() {
	*x = OverGameResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverGameResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverGameResultResp) ProtoMessage() {}

func (x *OverGameResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverGameResultResp.ProtoReflect.Descriptor instead.
func (*OverGameResultResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{382}
}

func (x *OverGameResultResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OverGameResultResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 开始游戏接口下注直接返回结果 老虎机类型
type PlaySlotsGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode              string  `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                            //游戏code编码
	GameProviderSubtypeId int64   `protobuf:"varint,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"` //厂商游戏类型id
	RoundId               string  `protobuf:"bytes,3,opt,name=roundId,proto3" json:"roundId,omitempty"`                              //回合id
	WinAmount             float64 `protobuf:"fixed64,6,opt,name=winAmount,proto3" json:"winAmount,omitempty"`                        //输赢金额
	Amount                float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`                              //游戏总金额
	Uid                   int64   `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`                                     //用户id
	Username              string  `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`                            //用户名称
	PlatCode              string  `protobuf:"bytes,10,opt,name=platCode,proto3" json:"platCode,omitempty"`                           //平台编码
}

func (x *PlaySlotsGameReq) Reset() {
	*x = PlaySlotsGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySlotsGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySlotsGameReq) ProtoMessage() {}

func (x *PlaySlotsGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySlotsGameReq.ProtoReflect.Descriptor instead.
func (*PlaySlotsGameReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{383}
}

func (x *PlaySlotsGameReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *PlaySlotsGameReq) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *PlaySlotsGameReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *PlaySlotsGameReq) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *PlaySlotsGameReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlaySlotsGameReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlaySlotsGameReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlaySlotsGameReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

type PlaySlotsGameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Money         float64 `protobuf:"fixed64,3,opt,name=money,proto3" json:"money,omitempty"`                                    //用户钱包余额
	TransactionId string  `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 注单号 对应三方拉单transaction_id
}

func (x *PlaySlotsGameResp) Reset() {
	*x = PlaySlotsGameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySlotsGameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySlotsGameResp) ProtoMessage() {}

func (x *PlaySlotsGameResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySlotsGameResp.ProtoReflect.Descriptor instead.
func (*PlaySlotsGameResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{384}
}

func (x *PlaySlotsGameResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlaySlotsGameResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlaySlotsGameResp) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PlaySlotsGameResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// 游戏结果接口(下游返回 需要计算钱包余额) 开彩
type PlayGameResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode              string  `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                                //游戏code编码
	GameProviderSubtypeId int64   `protobuf:"varint,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"`     //厂商游戏类型id
	TransactionId         string  `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 注单号 对应三方拉单transaction_id
	RoundId               string  `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                   //回合id
	WinAmount             float64 `protobuf:"fixed64,5,opt,name=winAmount,proto3" json:"winAmount,omitempty"`                            //下注输赢金额
	Amount                float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`                                  //下注金额
	Uid                   int64   `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`                                         //用户id
	Username              string  `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`                                //用户名称
	PlatCode              string  `protobuf:"bytes,9,opt,name=platCode,proto3" json:"platCode,omitempty"`                                //平台编码
	RoomRate              int64   `protobuf:"varint,10,opt,name=roomRate,proto3" json:"roomRate,omitempty"`                              //房费
	Ranking               int64   `protobuf:"varint,11,opt,name=ranking,proto3" json:"ranking,omitempty"`                                //排名
}

func (x *PlayGameResultReq) Reset() {
	*x = PlayGameResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameResultReq) ProtoMessage() {}

func (x *PlayGameResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameResultReq.ProtoReflect.Descriptor instead.
func (*PlayGameResultReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{385}
}

func (x *PlayGameResultReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *PlayGameResultReq) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *PlayGameResultReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PlayGameResultReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *PlayGameResultReq) GetWinAmount() float64 {
	if x != nil {
		return x.WinAmount
	}
	return 0
}

func (x *PlayGameResultReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlayGameResultReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayGameResultReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlayGameResultReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

func (x *PlayGameResultReq) GetRoomRate() int64 {
	if x != nil {
		return x.RoomRate
	}
	return 0
}

func (x *PlayGameResultReq) GetRanking() int64 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

type PlayGameResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Money float64 `protobuf:"fixed64,3,opt,name=money,proto3" json:"money,omitempty"` //用户钱包余额
}

func (x *PlayGameResultResp) Reset() {
	*x = PlayGameResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameResultResp) ProtoMessage() {}

func (x *PlayGameResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameResultResp.ProtoReflect.Descriptor instead.
func (*PlayGameResultResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{386}
}

func (x *PlayGameResultResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlayGameResultResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlayGameResultResp) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

// 获取游戏历史接口
type PlayGameListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current  int32                `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"` //当前页码
	Data     *PlayGameListDataReq `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Size     int32                `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`        //每页显示的记录数
	Uid      int64                `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`          //用户id
	Username string               `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"` //用户名称
}

func (x *PlayGameListReq) Reset() {
	*x = PlayGameListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameListReq) ProtoMessage() {}

func (x *PlayGameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameListReq.ProtoReflect.Descriptor instead.
func (*PlayGameListReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{387}
}

func (x *PlayGameListReq) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PlayGameListReq) GetData() *PlayGameListDataReq {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PlayGameListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PlayGameListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayGameListReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PlayGameListDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode              string `protobuf:"bytes,1,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                                    //游戏code编码
	GameProviderSubtypeId int64  `protobuf:"varint,2,opt,name=gameProviderSubtypeId,proto3" json:"gameProviderSubtypeId,omitempty"`         //厂商游戏类型id
	TransactionId         string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`     // 注单号 对应三方拉单transaction_id
	RoundId               string `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                       // 回合id
	StartTimestamp        int64  `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"` //开始时间戳
	EndTimestamp          int64  `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`       //截止时间戳
	PlatCode              string `protobuf:"bytes,7,opt,name=platCode,proto3" json:"platCode,omitempty"`                                    //平台编码
}

func (x *PlayGameListDataReq) Reset() {
	*x = PlayGameListDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameListDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameListDataReq) ProtoMessage() {}

func (x *PlayGameListDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameListDataReq.ProtoReflect.Descriptor instead.
func (*PlayGameListDataReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{388}
}

func (x *PlayGameListDataReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *PlayGameListDataReq) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *PlayGameListDataReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PlayGameListDataReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *PlayGameListDataReq) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *PlayGameListDataReq) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *PlayGameListDataReq) GetPlatCode() string {
	if x != nil {
		return x.PlatCode
	}
	return ""
}

type PlayGameListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *PlayGameListData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PlayGameListResp) Reset() {
	*x = PlayGameListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameListResp) ProtoMessage() {}

func (x *PlayGameListResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameListResp.ProtoReflect.Descriptor instead.
func (*PlayGameListResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{389}
}

func (x *PlayGameListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlayGameListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PlayGameListResp) GetData() *PlayGameListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlayGameListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current int32                 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Size    int32                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total   int64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Pages   int64                 `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`
	List    []*PlayGameSingleResp `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PlayGameListData) Reset() {
	*x = PlayGameListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameListData) ProtoMessage() {}

func (x *PlayGameListData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameListData.ProtoReflect.Descriptor instead.
func (*PlayGameListData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{390}
}

func (x *PlayGameListData) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PlayGameListData) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PlayGameListData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PlayGameListData) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *PlayGameListData) GetList() []*PlayGameSingleResp {
	if x != nil {
		return x.List
	}
	return nil
}

type PlayGameSingleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money                 float64 `protobuf:"fixed64,1,opt,name=money,proto3" json:"money,omitempty"`                                                                  // 用户钱包余额
	RoundId               string  `protobuf:"bytes,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                 // 回合id
	TransactionId         string  `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                               // 注单号 对应三方拉单transaction_id
	XbStatus              int64   `protobuf:"varint,4,opt,name=xb_status,json=xbStatus,proto3" json:"xb_status,omitempty"`                                             // 注单状态 1:待开彩  2:完成  3: 退款
	XbUid                 int64   `protobuf:"varint,5,opt,name=xb_uid,json=xbUid,proto3" json:"xb_uid,omitempty"`                                                      // 对应user表id
	XbUsername            string  `protobuf:"bytes,6,opt,name=xb_username,json=xbUsername,proto3" json:"xb_username,omitempty"`                                        // 对应user表username
	MerchantId            int64   `protobuf:"varint,7,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`                                       // 商户id
	XbProfit              float64 `protobuf:"fixed64,8,opt,name=xb_profit,json=xbProfit,proto3" json:"xb_profit,omitempty"`                                            // 盈亏金额
	Stake                 float64 `protobuf:"fixed64,9,opt,name=stake,proto3" json:"stake,omitempty"`                                                                  // 投注
	ValidStake            float64 `protobuf:"fixed64,10,opt,name=valid_stake,json=validStake,proto3" json:"valid_stake,omitempty"`                                     // 有效投注金额
	Payout                float64 `protobuf:"fixed64,11,opt,name=payout,proto3" json:"payout,omitempty"`                                                               // 派彩
	CoinRefund            float64 `protobuf:"fixed64,12,opt,name=coin_refund,json=coinRefund,proto3" json:"coin_refund,omitempty"`                                     // 退款金额
	CoinBefore            float64 `protobuf:"fixed64,13,opt,name=coin_before,json=coinBefore,proto3" json:"coin_before,omitempty"`                                     // 投注前金额
	GameProviderSubtypeId int64   `protobuf:"varint,14,opt,name=game_provider_subtype_id,json=gameProviderSubtypeId,proto3" json:"game_provider_subtype_id,omitempty"` // 游戏id对应game_provider_subtype表id
	GameListId            int64   `protobuf:"varint,15,opt,name=game_list_id,json=gameListId,proto3" json:"game_list_id,omitempty"`                                    // 游戏id对应game_list表id game_id
	GamePagcorId          int64   `protobuf:"varint,16,opt,name=game_pagcor_id,json=gamePagcorId,proto3" json:"game_pagcor_id,omitempty"`                              // pagcor分组id
	GameProviderId        int64   `protobuf:"varint,17,opt,name=game_provider_id,json=gameProviderId,proto3" json:"game_provider_id,omitempty"`                        // 游戏供应商id
	AmountType            int64   `protobuf:"varint,18,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`                                      // 投注方式 1:现金，2:奖金 3:免费旋转 4:活动免费旋转
	DtStarted             int64   `protobuf:"varint,19,opt,name=dt_started,json=dtStarted,proto3" json:"dt_started,omitempty"`                                         // 游戏开始时间
	DtCompleted           int64   `protobuf:"varint,20,opt,name=dt_completed,json=dtCompleted,proto3" json:"dt_completed,omitempty"`                                   // 游戏结束时间
	WinTransactionId      string  `protobuf:"bytes,21,opt,name=win_transaction_id,json=winTransactionId,proto3" json:"win_transaction_id,omitempty"`                   // 开奖交易单号
	CreateTimeStr         string  `protobuf:"bytes,22,opt,name=create_time_str,json=createTimeStr,proto3" json:"create_time_str,omitempty"`                            // 投注时间
	CreatedAt             int64   `protobuf:"varint,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                         // 创建时间
	UpdatedAt             int64   `protobuf:"varint,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                         // 更新时间
	GameTypeId            int64   `protobuf:"varint,25,opt,name=game_type_id,json=gameTypeId,proto3" json:"game_type_id,omitempty"`                                    // 游戏分组id
}

func (x *PlayGameSingleResp) Reset() {
	*x = PlayGameSingleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayGameSingleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayGameSingleResp) ProtoMessage() {}

func (x *PlayGameSingleResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayGameSingleResp.ProtoReflect.Descriptor instead.
func (*PlayGameSingleResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{391}
}

func (x *PlayGameSingleResp) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PlayGameSingleResp) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *PlayGameSingleResp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PlayGameSingleResp) GetXbStatus() int64 {
	if x != nil {
		return x.XbStatus
	}
	return 0
}

func (x *PlayGameSingleResp) GetXbUid() int64 {
	if x != nil {
		return x.XbUid
	}
	return 0
}

func (x *PlayGameSingleResp) GetXbUsername() string {
	if x != nil {
		return x.XbUsername
	}
	return ""
}

func (x *PlayGameSingleResp) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *PlayGameSingleResp) GetXbProfit() float64 {
	if x != nil {
		return x.XbProfit
	}
	return 0
}

func (x *PlayGameSingleResp) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *PlayGameSingleResp) GetValidStake() float64 {
	if x != nil {
		return x.ValidStake
	}
	return 0
}

func (x *PlayGameSingleResp) GetPayout() float64 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *PlayGameSingleResp) GetCoinRefund() float64 {
	if x != nil {
		return x.CoinRefund
	}
	return 0
}

func (x *PlayGameSingleResp) GetCoinBefore() float64 {
	if x != nil {
		return x.CoinBefore
	}
	return 0
}

func (x *PlayGameSingleResp) GetGameProviderSubtypeId() int64 {
	if x != nil {
		return x.GameProviderSubtypeId
	}
	return 0
}

func (x *PlayGameSingleResp) GetGameListId() int64 {
	if x != nil {
		return x.GameListId
	}
	return 0
}

func (x *PlayGameSingleResp) GetGamePagcorId() int64 {
	if x != nil {
		return x.GamePagcorId
	}
	return 0
}

func (x *PlayGameSingleResp) GetGameProviderId() int64 {
	if x != nil {
		return x.GameProviderId
	}
	return 0
}

func (x *PlayGameSingleResp) GetAmountType() int64 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *PlayGameSingleResp) GetDtStarted() int64 {
	if x != nil {
		return x.DtStarted
	}
	return 0
}

func (x *PlayGameSingleResp) GetDtCompleted() int64 {
	if x != nil {
		return x.DtCompleted
	}
	return 0
}

func (x *PlayGameSingleResp) GetWinTransactionId() string {
	if x != nil {
		return x.WinTransactionId
	}
	return ""
}

func (x *PlayGameSingleResp) GetCreateTimeStr() string {
	if x != nil {
		return x.CreateTimeStr
	}
	return ""
}

func (x *PlayGameSingleResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PlayGameSingleResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PlayGameSingleResp) GetGameTypeId() int64 {
	if x != nil {
		return x.GameTypeId
	}
	return 0
}

type GameListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sign      bool    `protobuf:"varint,1,opt,name=sign,proto3" json:"sign,omitempty"`
	GameTypes []int64 `protobuf:"varint,2,rep,packed,name=gameTypes,proto3" json:"gameTypes,omitempty"`
}

func (x *GameListReq) Reset() {
	*x = GameListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListReq) ProtoMessage() {}

func (x *GameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListReq.ProtoReflect.Descriptor instead.
func (*GameListReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{392}
}

func (x *GameListReq) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *GameListReq) GetGameTypes() []int64 {
	if x != nil {
		return x.GameTypes
	}
	return nil
}

type GameListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	List []*GameListDataResp `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GameListResp) Reset() {
	*x = GameListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListResp) ProtoMessage() {}

func (x *GameListResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListResp.ProtoReflect.Descriptor instead.
func (*GameListResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{393}
}

func (x *GameListResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GameListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GameListResp) GetList() []*GameListDataResp {
	if x != nil {
		return x.List
	}
	return nil
}

type GameListDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon           string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	GameCount      int64  `protobuf:"varint,4,opt,name=gameCount,proto3" json:"gameCount,omitempty"`
	Status         int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Sort           int64  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Maintenance    string `protobuf:"bytes,7,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
	GamePagcorId   int64  `protobuf:"varint,8,opt,name=gamePagcorId,proto3" json:"gamePagcorId,omitempty"`
	GameTypeId     int64  `protobuf:"varint,9,opt,name=gameTypeId,proto3" json:"gameTypeId,omitempty"`
	GameProviderId int64  `protobuf:"varint,10,opt,name=gameProviderId,proto3" json:"gameProviderId,omitempty"`
	ProviderIcon   string `protobuf:"bytes,11,opt,name=providerIcon,proto3" json:"providerIcon,omitempty"`
}

func (x *GameListDataResp) Reset() {
	*x = GameListDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameListDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListDataResp) ProtoMessage() {}

func (x *GameListDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListDataResp.ProtoReflect.Descriptor instead.
func (*GameListDataResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{394}
}

func (x *GameListDataResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameListDataResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameListDataResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GameListDataResp) GetGameCount() int64 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *GameListDataResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GameListDataResp) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GameListDataResp) GetMaintenance() string {
	if x != nil {
		return x.Maintenance
	}
	return ""
}

func (x *GameListDataResp) GetGamePagcorId() int64 {
	if x != nil {
		return x.GamePagcorId
	}
	return 0
}

func (x *GameListDataResp) GetGameTypeId() int64 {
	if x != nil {
		return x.GameTypeId
	}
	return 0
}

func (x *GameListDataResp) GetGameProviderId() int64 {
	if x != nil {
		return x.GameProviderId
	}
	return 0
}

func (x *GameListDataResp) GetProviderIcon() string {
	if x != nil {
		return x.ProviderIcon
	}
	return ""
}

// 扑鱼平台登录获取token 账号鉴权
type ElectronAuthorizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`             //平台id
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //系统时间
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`         //平台账号校验token
	GameId    string `protobuf:"bytes,4,opt,name=gameId,proto3" json:"gameId,omitempty"`       //平台分配的游戏ID
	ExtraInfo string `protobuf:"bytes,5,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"` //平台自定义数据
}

func (x *ElectronAuthorizeReq) Reset() {
	*x = ElectronAuthorizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronAuthorizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronAuthorizeReq) ProtoMessage() {}

func (x *ElectronAuthorizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronAuthorizeReq.ProtoReflect.Descriptor instead.
func (*ElectronAuthorizeReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{395}
}

func (x *ElectronAuthorizeReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronAuthorizeReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ElectronAuthorizeReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ElectronAuthorizeReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronAuthorizeReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronAuthorizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *AuthorizeData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ElectronAuthorizeResp) Reset() {
	*x = ElectronAuthorizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronAuthorizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronAuthorizeResp) ProtoMessage() {}

func (x *ElectronAuthorizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronAuthorizeResp.ProtoReflect.Descriptor instead.
func (*ElectronAuthorizeResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{396}
}

func (x *ElectronAuthorizeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronAuthorizeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ElectronAuthorizeResp) GetData() *AuthorizeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuthorizeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nick        string `protobuf:"bytes,1,opt,name=nick,proto3" json:"nick,omitempty"`               //平台用户昵称
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`               //平台用户唯一ID
	Icon        string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`               //平台用户头像
	AccessToken string `protobuf:"bytes,4,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台用户登陆后，处理业务token
	Balance     string `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`         //平台用户代币余额
}

func (x *AuthorizeData) Reset() {
	*x = AuthorizeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeData) ProtoMessage() {}

func (x *AuthorizeData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeData.ProtoReflect.Descriptor instead.
func (*AuthorizeData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{397}
}

func (x *AuthorizeData) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *AuthorizeData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AuthorizeData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AuthorizeData) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AuthorizeData) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// 提取代币到游戏
type ElectronWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                 //平台id
	OrderId     string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`         //游戏订单ID
	Coin        string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`               //提取的平台代币 (数值，支持到int64)
	Timestamp   string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`     //系统时间
	AccessToken string `protobuf:"bytes,5,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台账号校验token
	GameId      string `protobuf:"bytes,6,opt,name=gameId,proto3" json:"gameId,omitempty"`           //平台上创建的游戏ID
	Uin         string `protobuf:"bytes,7,opt,name=uin,proto3" json:"uin,omitempty"`                 //游戏账号ID
	ExtraInfo   string `protobuf:"bytes,8,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`     //平台自定义数据
}

func (x *ElectronWithdrawReq) Reset() {
	*x = ElectronWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronWithdrawReq) ProtoMessage() {}

func (x *ElectronWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronWithdrawReq.ProtoReflect.Descriptor instead.
func (*ElectronWithdrawReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{398}
}

func (x *ElectronWithdrawReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronWithdrawReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ElectronWithdrawReq) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *ElectronWithdrawReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ElectronWithdrawReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ElectronWithdrawReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronWithdrawReq) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *ElectronWithdrawReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ElectronWithdrawData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ElectronWithdrawResp) Reset() {
	*x = ElectronWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronWithdrawResp) ProtoMessage() {}

func (x *ElectronWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronWithdrawResp.ProtoReflect.Descriptor instead.
func (*ElectronWithdrawResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{399}
}

func (x *ElectronWithdrawResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronWithdrawResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ElectronWithdrawResp) GetData() *ElectronWithdrawData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ElectronWithdrawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`             //平台id（由平台分配）
	OrderId   string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`     //游戏订单ID
	PlatOrder string `protobuf:"bytes,3,opt,name=platOrder,proto3" json:"platOrder,omitempty"` //平台订单ID
	Coin      int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`          //提取的平台代币
	Balance   string `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`     //用户平台代币余额
}

func (x *ElectronWithdrawData) Reset() {
	*x = ElectronWithdrawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronWithdrawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronWithdrawData) ProtoMessage() {}

func (x *ElectronWithdrawData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronWithdrawData.ProtoReflect.Descriptor instead.
func (*ElectronWithdrawData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{400}
}

func (x *ElectronWithdrawData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronWithdrawData) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ElectronWithdrawData) GetPlatOrder() string {
	if x != nil {
		return x.PlatOrder
	}
	return ""
}

func (x *ElectronWithdrawData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *ElectronWithdrawData) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// 存入代币到平台
type ElectronDepositReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                 //平台id
	OrderId     string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`         //游戏订单ID
	Coin        string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`               //提取的平台代币 (数值，支持到int64)
	Timestamp   string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`     //系统时间
	AccessToken string `protobuf:"bytes,5,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台账号校验token
	GameId      string `protobuf:"bytes,6,opt,name=gameId,proto3" json:"gameId,omitempty"`           //平台上创建的游戏ID
	Uin         string `protobuf:"bytes,7,opt,name=uin,proto3" json:"uin,omitempty"`                 //游戏账号ID
	ExtraInfo   string `protobuf:"bytes,8,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`     //平台自定义数据
}

func (x *ElectronDepositReq) Reset() {
	*x = ElectronDepositReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronDepositReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronDepositReq) ProtoMessage() {}

func (x *ElectronDepositReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronDepositReq.ProtoReflect.Descriptor instead.
func (*ElectronDepositReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{401}
}

func (x *ElectronDepositReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronDepositReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ElectronDepositReq) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *ElectronDepositReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ElectronDepositReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ElectronDepositReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronDepositReq) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *ElectronDepositReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronDepositResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *DepositData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ElectronDepositResp) Reset() {
	*x = ElectronDepositResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronDepositResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronDepositResp) ProtoMessage() {}

func (x *ElectronDepositResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronDepositResp.ProtoReflect.Descriptor instead.
func (*ElectronDepositResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{402}
}

func (x *ElectronDepositResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronDepositResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ElectronDepositResp) GetData() *DepositData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DepositData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`             //平台id（由平台分配）
	OrderId   string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`     //游戏订单ID
	PlatOrder string `protobuf:"bytes,3,opt,name=platOrder,proto3" json:"platOrder,omitempty"` //平台订单ID
	Coin      int64  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`          //提取的平台代币
	Balance   string `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`     //用户平台代币余额
}

func (x *DepositData) Reset() {
	*x = DepositData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositData) ProtoMessage() {}

func (x *DepositData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositData.ProtoReflect.Descriptor instead.
func (*DepositData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{403}
}

func (x *DepositData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DepositData) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *DepositData) GetPlatOrder() string {
	if x != nil {
		return x.PlatOrder
	}
	return ""
}

func (x *DepositData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DepositData) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// 订单查询
type ElectronQueryOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                 //平台id
	OrderId     string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`         //游戏订单ID
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台账号校验token
	GameId      string `protobuf:"bytes,4,opt,name=gameId,proto3" json:"gameId,omitempty"`           //平台上创建的游戏ID
	ExtraInfo   string `protobuf:"bytes,5,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`     //平台自定义数据
}

func (x *ElectronQueryOrderReq) Reset() {
	*x = ElectronQueryOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronQueryOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronQueryOrderReq) ProtoMessage() {}

func (x *ElectronQueryOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronQueryOrderReq.ProtoReflect.Descriptor instead.
func (*ElectronQueryOrderReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{404}
}

func (x *ElectronQueryOrderReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronQueryOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ElectronQueryOrderReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ElectronQueryOrderReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronQueryOrderReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronQueryOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *QueryOrderData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ElectronQueryOrderResp) Reset() {
	*x = ElectronQueryOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronQueryOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronQueryOrderResp) ProtoMessage() {}

func (x *ElectronQueryOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronQueryOrderResp.ProtoReflect.Descriptor instead.
func (*ElectronQueryOrderResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{405}
}

func (x *ElectronQueryOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronQueryOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ElectronQueryOrderResp) GetData() *QueryOrderData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryOrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`     //游戏订单ID
	PlatOrder string `protobuf:"bytes,2,opt,name=platOrder,proto3" json:"platOrder,omitempty"` //平台订单ID
	Coin      int64  `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`          //提取的平台代币
	Status    int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`      //1:订单成功 2：订单失败
}

func (x *QueryOrderData) Reset() {
	*x = QueryOrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderData) ProtoMessage() {}

func (x *QueryOrderData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderData.ProtoReflect.Descriptor instead.
func (*QueryOrderData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{406}
}

func (x *QueryOrderData) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *QueryOrderData) GetPlatOrder() string {
	if x != nil {
		return x.PlatOrder
	}
	return ""
}

func (x *QueryOrderData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *QueryOrderData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 查询用户信息
type ElectronUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                 //平台id
	Timestamp   string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`     //系统时间
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台账号校验token
	GameId      string `protobuf:"bytes,4,opt,name=gameId,proto3" json:"gameId,omitempty"`           //平台上创建的游戏ID
	ExtraInfo   string `protobuf:"bytes,5,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`     //平台自定义数据
}

func (x *ElectronUserInfoReq) Reset() {
	*x = ElectronUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronUserInfoReq) ProtoMessage() {}

func (x *ElectronUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronUserInfoReq.ProtoReflect.Descriptor instead.
func (*ElectronUserInfoReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{407}
}

func (x *ElectronUserInfoReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronUserInfoReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ElectronUserInfoReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ElectronUserInfoReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronUserInfoReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *UserInfoData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ElectronUserInfoResp) Reset() {
	*x = ElectronUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronUserInfoResp) ProtoMessage() {}

func (x *ElectronUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronUserInfoResp.ProtoReflect.Descriptor instead.
func (*ElectronUserInfoResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{408}
}

func (x *ElectronUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ElectronUserInfoResp) GetData() *UserInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nick    string `protobuf:"bytes,1,opt,name=nick,proto3" json:"nick,omitempty"`       //用户昵称
	Icon    string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`       //用户头像
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"` //用户平台代币余额
}

func (x *UserInfoData) Reset() {
	*x = UserInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoData) ProtoMessage() {}

func (x *UserInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoData.ProtoReflect.Descriptor instead.
func (*UserInfoData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{409}
}

func (x *UserInfoData) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UserInfoData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserInfoData) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// 用户下线通知
type ElectronUserLogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                 //平台id
	Timestamp   string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`     //系统时间
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台账号校验token
	GameId      string `protobuf:"bytes,4,opt,name=gameId,proto3" json:"gameId,omitempty"`           //平台上创建的游戏ID
	Consume     string `protobuf:"bytes,5,opt,name=consume,proto3" json:"consume,omitempty"`         //消耗
	Output      string `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`           //产出
	ExtraInfo   string `protobuf:"bytes,7,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`     //平台自定义数据
}

func (x *ElectronUserLogoutReq) Reset() {
	*x = ElectronUserLogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronUserLogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronUserLogoutReq) ProtoMessage() {}

func (x *ElectronUserLogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronUserLogoutReq.ProtoReflect.Descriptor instead.
func (*ElectronUserLogoutReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{410}
}

func (x *ElectronUserLogoutReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronUserLogoutReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ElectronUserLogoutReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ElectronUserLogoutReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronUserLogoutReq) GetConsume() string {
	if x != nil {
		return x.Consume
	}
	return ""
}

func (x *ElectronUserLogoutReq) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ElectronUserLogoutReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronUserLogoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ElectronUserLogoutResp) Reset() {
	*x = ElectronUserLogoutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronUserLogoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronUserLogoutResp) ProtoMessage() {}

func (x *ElectronUserLogoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronUserLogoutResp.ProtoReflect.Descriptor instead.
func (*ElectronUserLogoutResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{411}
}

func (x *ElectronUserLogoutResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronUserLogoutResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户游戏广播
type ElectronUserBroadcastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                 //平台id
	Timestamp   string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`     //系统时间
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"` //平台账号校验token
	GameId      string `protobuf:"bytes,4,opt,name=gameId,proto3" json:"gameId,omitempty"`           //平台上创建的游戏ID
	Gun         string `protobuf:"bytes,5,opt,name=gun,proto3" json:"gun,omitempty"`                 //炮倍率
	Coin        string `protobuf:"bytes,6,opt,name=coin,proto3" json:"coin,omitempty"`               //获利金币
	ExtraInfo   string `protobuf:"bytes,7,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty"`     //平台自定义数据
}

func (x *ElectronUserBroadcastReq) Reset() {
	*x = ElectronUserBroadcastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronUserBroadcastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronUserBroadcastReq) ProtoMessage() {}

func (x *ElectronUserBroadcastReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronUserBroadcastReq.ProtoReflect.Descriptor instead.
func (*ElectronUserBroadcastReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{412}
}

func (x *ElectronUserBroadcastReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ElectronUserBroadcastReq) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ElectronUserBroadcastReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ElectronUserBroadcastReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ElectronUserBroadcastReq) GetGun() string {
	if x != nil {
		return x.Gun
	}
	return ""
}

func (x *ElectronUserBroadcastReq) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *ElectronUserBroadcastReq) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

type ElectronUserBroadcastResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ElectronUserBroadcastResp) Reset() {
	*x = ElectronUserBroadcastResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectronUserBroadcastResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectronUserBroadcastResp) ProtoMessage() {}

func (x *ElectronUserBroadcastResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectronUserBroadcastResp.ProtoReflect.Descriptor instead.
func (*ElectronUserBroadcastResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{413}
}

func (x *ElectronUserBroadcastResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ElectronUserBroadcastResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 游戏结果接口(下游返回 需要计算钱包余额) 开彩
type CompetitionRankingRewardsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomFee int64 `protobuf:"varint,1,opt,name=roomFee,proto3" json:"roomFee,omitempty"` //房费
	Ranking int64 `protobuf:"varint,2,opt,name=ranking,proto3" json:"ranking,omitempty"` //排名
}

func (x *CompetitionRankingRewardsReq) Reset() {
	*x = CompetitionRankingRewardsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionRankingRewardsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionRankingRewardsReq) ProtoMessage() {}

func (x *CompetitionRankingRewardsReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionRankingRewardsReq.ProtoReflect.Descriptor instead.
func (*CompetitionRankingRewardsReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{414}
}

func (x *CompetitionRankingRewardsReq) GetRoomFee() int64 {
	if x != nil {
		return x.RoomFee
	}
	return 0
}

func (x *CompetitionRankingRewardsReq) GetRanking() int64 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

type CompetitionRankingRewardsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg          string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RewardAmount int64  `protobuf:"varint,3,opt,name=rewardAmount,proto3" json:"rewardAmount,omitempty"` //积分
	GoldCoins    int64  `protobuf:"varint,4,opt,name=goldCoins,proto3" json:"goldCoins,omitempty"`       //金币
}

func (x *CompetitionRankingRewardsResp) Reset() {
	*x = CompetitionRankingRewardsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionRankingRewardsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionRankingRewardsResp) ProtoMessage() {}

func (x *CompetitionRankingRewardsResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionRankingRewardsResp.ProtoReflect.Descriptor instead.
func (*CompetitionRankingRewardsResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{415}
}

func (x *CompetitionRankingRewardsResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CompetitionRankingRewardsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CompetitionRankingRewardsResp) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *CompetitionRankingRewardsResp) GetGoldCoins() int64 {
	if x != nil {
		return x.GoldCoins
	}
	return 0
}

// 发生emqx测试消息
type SendEMQXTestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info          string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	ConnectThemes string `protobuf:"bytes,2,opt,name=connectThemes,proto3" json:"connectThemes,omitempty"` //连接主题
	Themes        string `protobuf:"bytes,3,opt,name=themes,proto3" json:"themes,omitempty"`               //发送主题
	Qos           int64  `protobuf:"varint,4,opt,name=qos,proto3" json:"qos,omitempty"`                    //qos
}

func (x *SendEMQXTestReq) Reset() {
	*x = SendEMQXTestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEMQXTestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEMQXTestReq) ProtoMessage() {}

func (x *SendEMQXTestReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEMQXTestReq.ProtoReflect.Descriptor instead.
func (*SendEMQXTestReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{416}
}

func (x *SendEMQXTestReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *SendEMQXTestReq) GetConnectThemes() string {
	if x != nil {
		return x.ConnectThemes
	}
	return ""
}

func (x *SendEMQXTestReq) GetThemes() string {
	if x != nil {
		return x.Themes
	}
	return ""
}

func (x *SendEMQXTestReq) GetQos() int64 {
	if x != nil {
		return x.Qos
	}
	return 0
}

type SendEMQXTestResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SendEMQXTestResp) Reset() {
	*x = SendEMQXTestResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEMQXTestResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEMQXTestResp) ProtoMessage() {}

func (x *SendEMQXTestResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEMQXTestResp.ProtoReflect.Descriptor instead.
func (*SendEMQXTestResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{417}
}

func (x *SendEMQXTestResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendEMQXTestResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取余额请求结构
type EgAfbGetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method   string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`     // 方法
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`           // API Key
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"` // 用户名
	GameCode string `protobuf:"bytes,4,opt,name=gameCode,proto3" json:"gameCode,omitempty"` // 游戏代码
}

func (x *EgAfbGetBalanceReq) Reset() {
	*x = EgAfbGetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbGetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbGetBalanceReq) ProtoMessage() {}

func (x *EgAfbGetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbGetBalanceReq.ProtoReflect.Descriptor instead.
func (*EgAfbGetBalanceReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{418}
}

func (x *EgAfbGetBalanceReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbGetBalanceReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EgAfbGetBalanceReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbGetBalanceReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

// 获取余额响应结构
type EgAfbGetBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int64   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                  // 状态码
	Message        string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // 提示信息
	Balance        float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`               // 余额
	SpecialBalance float64 `protobuf:"fixed64,4,opt,name=specialBalance,proto3" json:"specialBalance,omitempty"` // 特殊余额
	Currency       string  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`               // 币种
}

func (x *EgAfbGetBalanceResp) Reset() {
	*x = EgAfbGetBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbGetBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbGetBalanceResp) ProtoMessage() {}

func (x *EgAfbGetBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbGetBalanceResp.ProtoReflect.Descriptor instead.
func (*EgAfbGetBalanceResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{419}
}

func (x *EgAfbGetBalanceResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbGetBalanceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EgAfbGetBalanceResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EgAfbGetBalanceResp) GetSpecialBalance() float64 {
	if x != nil {
		return x.SpecialBalance
	}
	return 0
}

func (x *EgAfbGetBalanceResp) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// 下注请求结构
type EgAfbBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method                    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`                                        // bet
	Key                       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                              // API Key
	Username                  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                    // User Name
	Amount                    string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`                                        // Amount of bet
	Currency                  string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                    // Currency Code
	SessionId                 string `protobuf:"bytes,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                                  // Session ID
	TransactionId             string `protobuf:"bytes,7,opt,name=transactionId,proto3" json:"transactionId,omitempty"`                          // Transaction ID
	ReferenceId               string `protobuf:"bytes,8,opt,name=referenceId,proto3" json:"referenceId,omitempty"`                              // Reference ID
	GameCode                  string `protobuf:"bytes,9,opt,name=gameCode,proto3" json:"gameCode,omitempty"`                                    // Game Code
	GameName                  string `protobuf:"bytes,10,opt,name=gameName,proto3" json:"gameName,omitempty"`                                   // Game Name
	GameType                  string `protobuf:"bytes,11,opt,name=gameType,proto3" json:"gameType,omitempty"`                                   // Game Type
	Ip                        string `protobuf:"bytes,12,opt,name=ip,proto3" json:"ip,omitempty"`                                               // Customer IP Address
	LineCount                 string `protobuf:"bytes,13,opt,name=lineCount,proto3" json:"lineCount,omitempty"`                                 // Game line
	LineBet                   string `protobuf:"bytes,14,opt,name=lineBet,proto3" json:"lineBet,omitempty"`                                     // Game line bet
	Mode                      string `protobuf:"bytes,15,opt,name=mode,proto3" json:"mode,omitempty"`                                           // Bet Mode
	Business                  string `protobuf:"bytes,16,opt,name=business,proto3" json:"business,omitempty"`                                   // Business Mode: normal, buyFree, buyBonus, useCard, freeRoundBonus, activityBonus
	LastTime                  string `protobuf:"bytes,17,opt,name=lastTime,proto3" json:"lastTime,omitempty"`                                   // optional: true or false, slot game track status
	FreeRoundBonusCode        string `protobuf:"bytes,18,opt,name=freeRoundBonusCode,proto3" json:"freeRoundBonusCode,omitempty"`               // optional, Free round bonus code
	FreeRoundBonusTimes       string `protobuf:"bytes,19,opt,name=freeRoundBonusTimes,proto3" json:"freeRoundBonusTimes,omitempty"`             // optional, Free round bonus times
	FreeRoundBonusRemainTimes string `protobuf:"bytes,20,opt,name=freeRoundBonusRemainTimes,proto3" json:"freeRoundBonusRemainTimes,omitempty"` // optional, Remaining free round bonus times
}

func (x *EgAfbBetReq) Reset() {
	*x = EgAfbBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbBetReq) ProtoMessage() {}

func (x *EgAfbBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbBetReq.ProtoReflect.Descriptor instead.
func (*EgAfbBetReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{420}
}

func (x *EgAfbBetReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbBetReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EgAfbBetReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbBetReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EgAfbBetReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EgAfbBetReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EgAfbBetReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *EgAfbBetReq) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *EgAfbBetReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *EgAfbBetReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *EgAfbBetReq) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *EgAfbBetReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *EgAfbBetReq) GetLineCount() string {
	if x != nil {
		return x.LineCount
	}
	return ""
}

func (x *EgAfbBetReq) GetLineBet() string {
	if x != nil {
		return x.LineBet
	}
	return ""
}

func (x *EgAfbBetReq) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *EgAfbBetReq) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *EgAfbBetReq) GetLastTime() string {
	if x != nil {
		return x.LastTime
	}
	return ""
}

func (x *EgAfbBetReq) GetFreeRoundBonusCode() string {
	if x != nil {
		return x.FreeRoundBonusCode
	}
	return ""
}

func (x *EgAfbBetReq) GetFreeRoundBonusTimes() string {
	if x != nil {
		return x.FreeRoundBonusTimes
	}
	return ""
}

func (x *EgAfbBetReq) GetFreeRoundBonusRemainTimes() string {
	if x != nil {
		return x.FreeRoundBonusRemainTimes
	}
	return ""
}

// 下注响应结构
type EgAfbBetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                  // 0: Success, other: Error
	Message        string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // Error Description
	Balance        float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`               // Balance
	SpecialBalance float64 `protobuf:"fixed64,4,opt,name=specialBalance,proto3" json:"specialBalance,omitempty"` // Promotional balance for games
}

func (x *EgAfbBetResp) Reset() {
	*x = EgAfbBetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbBetResp) ProtoMessage() {}

func (x *EgAfbBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbBetResp.ProtoReflect.Descriptor instead.
func (*EgAfbBetResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{421}
}

func (x *EgAfbBetResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EgAfbBetResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EgAfbBetResp) GetSpecialBalance() float64 {
	if x != nil {
		return x.SpecialBalance
	}
	return 0
}

// 5.4 Bet Paid 投注支付请求结构
type EgAfbBetPaidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method                    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Key                       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Username                  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	BetAmount                 string `protobuf:"bytes,4,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	PaidAmount                string `protobuf:"bytes,5,opt,name=paidAmount,proto3" json:"paidAmount,omitempty"`
	Currency                  string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	SessionId                 string `protobuf:"bytes,7,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	TransactionId             string `protobuf:"bytes,8,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	ReferenceId               string `protobuf:"bytes,9,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
	GameCode                  string `protobuf:"bytes,10,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	GameName                  string `protobuf:"bytes,11,opt,name=gameName,proto3" json:"gameName,omitempty"`
	GameType                  string `protobuf:"bytes,12,opt,name=gameType,proto3" json:"gameType,omitempty"`
	Ip                        string `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	LineCount                 string `protobuf:"bytes,14,opt,name=lineCount,proto3" json:"lineCount,omitempty"`
	LineBet                   string `protobuf:"bytes,15,opt,name=lineBet,proto3" json:"lineBet,omitempty"`
	Mode                      string `protobuf:"bytes,16,opt,name=mode,proto3" json:"mode,omitempty"`
	Business                  string `protobuf:"bytes,17,opt,name=business,proto3" json:"business,omitempty"`
	LastTime                  string `protobuf:"bytes,18,opt,name=lastTime,proto3" json:"lastTime,omitempty"`
	FreeRoundBonusCode        string `protobuf:"bytes,19,opt,name=freeRoundBonusCode,proto3" json:"freeRoundBonusCode,omitempty"`
	FreeRoundBonusTimes       string `protobuf:"bytes,20,opt,name=freeRoundBonusTimes,proto3" json:"freeRoundBonusTimes,omitempty"`
	FreeRoundBonusRemainTimes string `protobuf:"bytes,21,opt,name=freeRoundBonusRemainTimes,proto3" json:"freeRoundBonusRemainTimes,omitempty"`
	RealBet                   string `protobuf:"bytes,22,opt,name=realBet,proto3" json:"realBet,omitempty"`
	RealPaid                  string `protobuf:"bytes,23,opt,name=realPaid,proto3" json:"realPaid,omitempty"`
}

func (x *EgAfbBetPaidReq) Reset() {
	*x = EgAfbBetPaidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbBetPaidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbBetPaidReq) ProtoMessage() {}

func (x *EgAfbBetPaidReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbBetPaidReq.ProtoReflect.Descriptor instead.
func (*EgAfbBetPaidReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{422}
}

func (x *EgAfbBetPaidReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetPaidAmount() string {
	if x != nil {
		return x.PaidAmount
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetLineCount() string {
	if x != nil {
		return x.LineCount
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetLineBet() string {
	if x != nil {
		return x.LineBet
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetLastTime() string {
	if x != nil {
		return x.LastTime
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetFreeRoundBonusCode() string {
	if x != nil {
		return x.FreeRoundBonusCode
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetFreeRoundBonusTimes() string {
	if x != nil {
		return x.FreeRoundBonusTimes
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetFreeRoundBonusRemainTimes() string {
	if x != nil {
		return x.FreeRoundBonusRemainTimes
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetRealBet() string {
	if x != nil {
		return x.RealBet
	}
	return ""
}

func (x *EgAfbBetPaidReq) GetRealPaid() string {
	if x != nil {
		return x.RealPaid
	}
	return ""
}

// 5.4 Bet Paid 投注支付响应结构
type EgAfbBetPaidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                  // 0 表示成功，其他为错误码
	Message        string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // 错误信息（可选）
	Balance        float32 `protobuf:"fixed32,3,opt,name=balance,proto3" json:"balance,omitempty"`               // 用户余额
	SpecialBalance float32 `protobuf:"fixed32,4,opt,name=specialBalance,proto3" json:"specialBalance,omitempty"` // 游戏促销余额（可选）
}

func (x *EgAfbBetPaidResp) Reset() {
	*x = EgAfbBetPaidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbBetPaidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbBetPaidResp) ProtoMessage() {}

func (x *EgAfbBetPaidResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbBetPaidResp.ProtoReflect.Descriptor instead.
func (*EgAfbBetPaidResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{423}
}

func (x *EgAfbBetPaidResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbBetPaidResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EgAfbBetPaidResp) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EgAfbBetPaidResp) GetSpecialBalance() float32 {
	if x != nil {
		return x.SpecialBalance
	}
	return 0
}

// Refund 请求结构体
type EgAfbRefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method        string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`               // 固定为 "refund"
	Key           string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                     // API Key
	Username      string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`           // 用户名
	Amount        string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`               // 金额
	Currency      string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`           // 货币代码
	SessionId     string `protobuf:"bytes,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`         // 会话 ID
	TransactionId string `protobuf:"bytes,7,opt,name=transactionId,proto3" json:"transactionId,omitempty"` // 交易 ID
	GameCode      string `protobuf:"bytes,8,opt,name=gameCode,proto3" json:"gameCode,omitempty"`           // 游戏代码
	GameName      string `protobuf:"bytes,9,opt,name=gameName,proto3" json:"gameName,omitempty"`           // 游戏名称
	GameType      string `protobuf:"bytes,10,opt,name=gameType,proto3" json:"gameType,omitempty"`          // 游戏类型
	Ip            string `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`                      // 用户 IP 地址
}

func (x *EgAfbRefundReq) Reset() {
	*x = EgAfbRefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbRefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbRefundReq) ProtoMessage() {}

func (x *EgAfbRefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbRefundReq.ProtoReflect.Descriptor instead.
func (*EgAfbRefundReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{424}
}

func (x *EgAfbRefundReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbRefundReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EgAfbRefundReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbRefundReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EgAfbRefundReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EgAfbRefundReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EgAfbRefundReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *EgAfbRefundReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *EgAfbRefundReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *EgAfbRefundReq) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *EgAfbRefundReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Refund 响应结构体
type EgAfbRefundResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`    // 0 表示成功，其他为错误码
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   // 错误信息（可选）
	Balance float32 `protobuf:"fixed32,3,opt,name=balance,proto3" json:"balance,omitempty"` // 当前余额
}

func (x *EgAfbRefundResp) Reset() {
	*x = EgAfbRefundResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbRefundResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbRefundResp) ProtoMessage() {}

func (x *EgAfbRefundResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbRefundResp.ProtoReflect.Descriptor instead.
func (*EgAfbRefundResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{425}
}

func (x *EgAfbRefundResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbRefundResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EgAfbRefundResp) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 游戏关闭通知
type EgAfbGameCloseNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method   string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`     // 固定为 "close"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"` // 用户名
	GameCode string `protobuf:"bytes,3,opt,name=gameCode,proto3" json:"gameCode,omitempty"` // 游戏代码
	GameName string `protobuf:"bytes,4,opt,name=gameName,proto3" json:"gameName,omitempty"` // 游戏名称
	Ip       string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`             // 客户端 IP 地址
}

func (x *EgAfbGameCloseNotifyReq) Reset() {
	*x = EgAfbGameCloseNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbGameCloseNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbGameCloseNotifyReq) ProtoMessage() {}

func (x *EgAfbGameCloseNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbGameCloseNotifyReq.ProtoReflect.Descriptor instead.
func (*EgAfbGameCloseNotifyReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{426}
}

func (x *EgAfbGameCloseNotifyReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbGameCloseNotifyReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbGameCloseNotifyReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *EgAfbGameCloseNotifyReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *EgAfbGameCloseNotifyReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type EgAfbGameCloseNotifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`  // 0 表示成功，其他为错误
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 错误信息
}

func (x *EgAfbGameCloseNotifyResp) Reset() {
	*x = EgAfbGameCloseNotifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbGameCloseNotifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbGameCloseNotifyResp) ProtoMessage() {}

func (x *EgAfbGameCloseNotifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbGameCloseNotifyResp.ProtoReflect.Descriptor instead.
func (*EgAfbGameCloseNotifyResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{427}
}

func (x *EgAfbGameCloseNotifyResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbGameCloseNotifyResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 奖金状态通知
type EgAfbBonusStatusNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method      string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`           // 固定为 "bonusStatusNotify"
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`       // 用户名
	GameCode    string `protobuf:"bytes,3,opt,name=gameCode,proto3" json:"gameCode,omitempty"`       // 游戏代码
	Action      string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`           // 进入或退出 ("in" or "out")
	Mode        string `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`               // 游戏模式（例如：bonus）
	ReferenceId string `protobuf:"bytes,6,opt,name=referenceId,proto3" json:"referenceId,omitempty"` // 参考 ID
}

func (x *EgAfbBonusStatusNotifyReq) Reset() {
	*x = EgAfbBonusStatusNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbBonusStatusNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbBonusStatusNotifyReq) ProtoMessage() {}

func (x *EgAfbBonusStatusNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbBonusStatusNotifyReq.ProtoReflect.Descriptor instead.
func (*EgAfbBonusStatusNotifyReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{428}
}

func (x *EgAfbBonusStatusNotifyReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbBonusStatusNotifyReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbBonusStatusNotifyReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *EgAfbBonusStatusNotifyReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *EgAfbBonusStatusNotifyReq) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *EgAfbBonusStatusNotifyReq) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type EgAfbBonusStatusNotifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`  // 0 表示成功，其他为错误
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 错误信息
}

func (x *EgAfbBonusStatusNotifyResp) Reset() {
	*x = EgAfbBonusStatusNotifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbBonusStatusNotifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbBonusStatusNotifyResp) ProtoMessage() {}

func (x *EgAfbBonusStatusNotifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbBonusStatusNotifyResp.ProtoReflect.Descriptor instead.
func (*EgAfbBonusStatusNotifyResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{429}
}

func (x *EgAfbBonusStatusNotifyResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbBonusStatusNotifyResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 5.3 Paid 支付请求结构
type EgAfbPaidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method        string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Key           string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Username      string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Amount        string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency      string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	SessionId     string `protobuf:"bytes,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	TransactionId string `protobuf:"bytes,7,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	GameCode      string `protobuf:"bytes,8,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	GameName      string `protobuf:"bytes,9,opt,name=gameName,proto3" json:"gameName,omitempty"`
	GameType      string `protobuf:"bytes,10,opt,name=gameType,proto3" json:"gameType,omitempty"`
	Ip            string `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`
	LastTime      string `protobuf:"bytes,12,opt,name=lastTime,proto3" json:"lastTime,omitempty"`
	RealBet       string `protobuf:"bytes,13,opt,name=realBet,proto3" json:"realBet,omitempty"`
	RealPaid      string `protobuf:"bytes,14,opt,name=realPaid,proto3" json:"realPaid,omitempty"`
}

func (x *EgAfbPaidReq) Reset() {
	*x = EgAfbPaidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbPaidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbPaidReq) ProtoMessage() {}

func (x *EgAfbPaidReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbPaidReq.ProtoReflect.Descriptor instead.
func (*EgAfbPaidReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{430}
}

func (x *EgAfbPaidReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EgAfbPaidReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EgAfbPaidReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EgAfbPaidReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EgAfbPaidReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EgAfbPaidReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EgAfbPaidReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *EgAfbPaidReq) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *EgAfbPaidReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *EgAfbPaidReq) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *EgAfbPaidReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *EgAfbPaidReq) GetLastTime() string {
	if x != nil {
		return x.LastTime
	}
	return ""
}

func (x *EgAfbPaidReq) GetRealBet() string {
	if x != nil {
		return x.RealBet
	}
	return ""
}

func (x *EgAfbPaidReq) GetRealPaid() string {
	if x != nil {
		return x.RealPaid
	}
	return ""
}

// 5.3 Paid 支付响应结构
type EgAfbPaidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                  // 0: Success, other: Error
	Message        string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // Error Description
	Balance        float32 `protobuf:"fixed32,3,opt,name=balance,proto3" json:"balance,omitempty"`               // Balance
	SpecialBalance float32 `protobuf:"fixed32,4,opt,name=specialBalance,proto3" json:"specialBalance,omitempty"` // Promotional balance for games
}

func (x *EgAfbPaidResp) Reset() {
	*x = EgAfbPaidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgAfbPaidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgAfbPaidResp) ProtoMessage() {}

func (x *EgAfbPaidResp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgAfbPaidResp.ProtoReflect.Descriptor instead.
func (*EgAfbPaidResp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{431}
}

func (x *EgAfbPaidResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EgAfbPaidResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EgAfbPaidResp) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EgAfbPaidResp) GetSpecialBalance() float32 {
	if x != nil {
		return x.SpecialBalance
	}
	return 0
}

var File_core_proto protoreflect.FileDescriptor

var file_core_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x51, 0x4a, 0x43, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x3c, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x73,
	0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65,
	0x74, 0x73, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x75, 0x72, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0a,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x64,
	0x73, 0x22, 0x32, 0x0a, 0x10, 0x52, 0x74, 0x67, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x2f,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x65, 0x78, 0x52, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x6e, 0x0a, 0x13, 0x41, 0x67, 0x51, 0x4a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x51, 0x4a, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x17, 0x0a, 0x05, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x42, 0x65, 0x74, 0x42,
	0x79, 0x42, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x62, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x74, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x42, 0x61,
	0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3a, 0x0a, 0x0e, 0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3d, 0x0a, 0x11,
	0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x15,
	0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x77, 0x69,
	0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x11, 0x43,
	0x71, 0x39, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x0d, 0x45, 0x76, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x10, 0x4a,
	0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b,
	0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x50, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x61, 0x62,
	0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x60, 0x0a, 0x13, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x14, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xa5, 0x02, 0x0a, 0x17, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77,
	0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x12, 0x41, 0x67, 0x49, 0x6e, 0x74,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x1a, 0x41, 0x67, 0x51,
	0x4a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x51, 0x4a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0e, 0x46, 0x62, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x10, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65,
	0x54, 0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa0,
	0x03, 0x0a, 0x12, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65,
	0x74, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x64, 0x64,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6d, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x6d,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69,
	0x73, 0x4d, 0x6d, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4d, 0x6d,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x73, 0x0a, 0x0f, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x78, 0x6e, 0x73,
	0x52, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x16, 0x41, 0x67, 0x51, 0x4a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x41, 0x63,
	0x6b, 0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x73, 0x41,
	0x63, 0x6b, 0x53, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x72, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x72, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x0a, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x82, 0x05, 0x0a, 0x0c, 0x48, 0x61,
	0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x70, 0x77, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6a,
	0x70, 0x77, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x70, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6a, 0x70, 0x63, 0x6f, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x74, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6a, 0x70, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6a, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x70, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6a, 0x70, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x70, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x70, 0x73, 0x65, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x70, 0x77, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6a, 0x70, 0x77, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x22, 0xd7,
	0x02, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x43, 0x71, 0x39, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x61, 0x62, 0x61, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x31, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5a, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6e, 0x6f, 0x77, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x72, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x37,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xad, 0x02, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6a, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x6a, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65,
	0x74, 0x61, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x61, 0x6d, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x61, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e,
	0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xb7, 0x03, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x45,
	0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x11, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x62, 0x0a, 0x14, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x42, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x94, 0x01, 0x0a, 0x08, 0x48, 0x61, 0x62, 0x61, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x48, 0x61, 0x62, 0x61,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x69, 0x74, 0x61, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x55, 0x0a, 0x19, 0x53, 0x61, 0x62, 0x61, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73,
	0x0a, 0x17, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x52, 0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x53, 0x61,
	0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c,
	0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x74, 0x78, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x53,
	0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x55, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x65, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x41,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x1c, 0x0a, 0x1a, 0x42, 0x65, 0x74,
	0x42, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x18, 0x43, 0x71, 0x39, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xac, 0x01, 0x0a, 0x08, 0x45, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x99, 0x03, 0x0a, 0x13, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xed, 0x01, 0x0a, 0x08,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x0b,
	0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x43, 0x71, 0x39, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x6f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xfd,
	0x03, 0x0a, 0x11, 0x4a, 0x69, 0x4c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x5f, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e,
	0x09, 0x0a, 0x14, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a,
	0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x75, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x57, 0x61, 0x67, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x18, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x66, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x75, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x3f, 0x0a, 0x13, 0x53, 0x61, 0x62, 0x61, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x9e, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x22, 0xbf, 0x03, 0x0a, 0x19, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x75, 0x72,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x50, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x57,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x0f, 0x50,
	0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x43, 0x71, 0x39,
	0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x45,
	0x76, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x10, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x54, 0x0a, 0x0f, 0x53, 0x61, 0x62, 0x61, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x05, 0x0a, 0x10, 0x52, 0x74, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x67, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x61, 0x78, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x49, 0x73, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x49, 0x73, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x18, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x50, 0x67, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x6a, 0x0a, 0x14, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61,
	0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x13, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x40, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x1b, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x0c,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x79, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xa4, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x4e, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x52, 0x74, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x69, 0x0a, 0x17, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x91, 0x02, 0x0a,
	0x18, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x72, 0x0a, 0x14, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x03, 0x0a, 0x0a, 0x4a, 0x69, 0x4c, 0x69, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x62, 0x0a, 0x18, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x0c, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x08, 0x50, 0x70, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x4a, 0x69, 0x4c,
	0x69, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0f, 0x50,
	0x70, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x05, 0x0a, 0x19,
	0x41, 0x67, 0x51, 0x4a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x67, 0x51, 0x4a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x66, 0x65, 0x72, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0d, 0x77, 0x61, 0x67, 0x65,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x57, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x72, 0x65, 0x73, 0x70,
	0x52, 0x0d, 0x77, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x72, 0x65, 0x73, 0x70, 0x22,
	0x5d, 0x0a, 0x07, 0x45, 0x76, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc2,
	0x02, 0x0a, 0x10, 0x48, 0x61, 0x62, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x67,
	0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x67, 0x61, 0x6d,
	0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x0b, 0x4a, 0x69, 0x4c, 0x69, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01,
	0x0a, 0x18, 0x4a, 0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x12, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x42, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x43, 0x71, 0x39, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a,
	0x09, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x57, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x21, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x64, 0x64, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x4f, 0x64, 0x64, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x64,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x64,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x49, 0x73, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x22, 0x56, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x0e, 0x43, 0x71, 0x39,
	0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x72, 0x65, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x06, 0x4a, 0x64, 0x62, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x7b, 0x0a, 0x16, 0x42, 0x65, 0x74, 0x42,
	0x79, 0x42, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x4a, 0x69, 0x4c, 0x69, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6e, 0x0a, 0x13, 0x50, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x77, 0x0a, 0x0b, 0x50, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x14,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xb1, 0x01, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x62, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x05, 0x0a, 0x0f, 0x52, 0x74, 0x67, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x67, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x78,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x78, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x22, 0x76, 0x0a, 0x06, 0x4f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77,
	0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xec, 0x01, 0x0a, 0x13, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x65, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x0d, 0x43, 0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x70, 0x12, 0x2c, 0x0a, 0x03,
	0x62, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x62, 0x65, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x4f,
	0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x27,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x71, 0x39, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6f, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x6b, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x50, 0x69,
	0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69,
	0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x18, 0x53, 0x61, 0x62, 0x61, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x1c, 0x0a, 0x08, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x46,
	0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x22, 0xc2, 0x01,
	0x0a, 0x18, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x50, 0x70, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x08,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x65, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xbb, 0x01, 0x0a, 0x17, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a,
	0x0a, 0x10, 0x45, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0a, 0x45,
	0x76, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a,
	0x0d, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x66, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x48, 0x61, 0x62, 0x61,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x22, 0x7f, 0x0a, 0x11, 0x50, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x37, 0x0a, 0x13, 0x45, 0x76,
	0x6f, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x16, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x52, 0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x0d, 0x50, 0x67, 0x43, 0x61, 0x73,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xba, 0x03,
	0x0a, 0x14, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x73,
	0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x43,
	0x71, 0x39, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x48, 0x61, 0x62, 0x61, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x66, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x07, 0x54, 0x70, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x13, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69,
	0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcd, 0x01, 0x0a, 0x09,
	0x50, 0x70, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x73, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x08, 0x0a, 0x07,
	0x4a, 0x64, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x57, 0x69,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x6b,
	0x65, 0x57, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x46, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x42, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x42, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x6d, 0x4f, 0x66, 0x42, 0x65, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x75, 0x6d, 0x4f, 0x66, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x6d,
	0x4f, 0x66, 0x57, 0x69, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x75,
	0x6d, 0x4f, 0x66, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a,
	0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x10, 0x41, 0x67,
	0x51, 0x4a, 0x43, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x41, 0x63, 0x6b, 0x53, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x73, 0x41, 0x63, 0x6b, 0x53,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x43, 0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69,
	0x0a, 0x19, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x57, 0x61,
	0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x72, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x0f, 0x45, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74,
	0x5f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x65, 0x74, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x22, 0x41, 0x0a, 0x0e, 0x45, 0x76, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x45, 0x76, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x50, 0x70,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xff, 0x05, 0x0a, 0x14,
	0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x6f, 0x0a,
	0x15, 0x48, 0x61, 0x62, 0x61, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x16, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c,
	0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x61, 0x62, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x60,
	0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x60, 0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c,
	0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x61, 0x0a, 0x12, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x19, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x22, 0xf1, 0x01,
	0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x65, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x9f, 0x02, 0x0a, 0x0f, 0x41, 0x67, 0x51, 0x4a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x75, 0x73, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x75, 0x73, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x86, 0x03, 0x0a, 0x13, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74,
	0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74,
	0x73, 0x6c, 0x69, 0x70, 0x52, 0x07, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x57,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x22, 0x24, 0x0a, 0x0c,
	0x45, 0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3e,
	0x0a, 0x0e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb3,
	0x02, 0x0a, 0x13, 0x45, 0x76, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x08,
	0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0xc1, 0x0c, 0x0a, 0x15, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x6c, 0x55, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x64,
	0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72,
	0x6f, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x73, 0x68,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x73, 0x68,
	0x4f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61,
	0x73, 0x68, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x52, 0x07, 0x62, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x73, 0x68,
	0x4f, 0x75, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x17, 0x48, 0x61, 0x62,
	0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x74, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x42, 0x61,
	0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62,
	0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x62, 0x61, 0x41, 0x6c, 0x74, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x74, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x41, 0x6c, 0x74, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a,
	0x0c, 0x50, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x62,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6c,
	0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78,
	0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73,
	0x22, 0x6f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x78, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x04, 0x74, 0x78, 0x6e,
	0x73, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x0c, 0x43,
	0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x62, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x62, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6b, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x50, 0x70,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb4, 0x01, 0x0a, 0x0e,
	0x50, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x54,
	0x78, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65,
	0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x54, 0x78, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x04,
	0x54, 0x78, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x0c,
	0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x42, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x65,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x73, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22,
	0x61, 0x0a, 0x19, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x8d, 0x04, 0x0a, 0x17, 0x48, 0x61, 0x62, 0x61,
	0x46, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x72, 0x65, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x72, 0x65, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48,
	0x61, 0x62, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x58, 0x0a, 0x0f, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x78, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74,
	0x54, 0x78, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x54, 0x78, 0x6e,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x43, 0x71, 0x39, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x2f, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x60, 0x0a, 0x18, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x14, 0x41, 0x67, 0x51, 0x4a, 0x43, 0x75, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x67, 0x51, 0x4a, 0x43, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x98, 0x03, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x4a,
	0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x67, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x67, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x67, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x40, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x22, 0x93, 0x04, 0x0a, 0x13, 0x41, 0x67, 0x51, 0x4a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x41, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x73, 0x41, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c,
	0x47, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x6c, 0x47, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6b,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6b, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x41, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x0f, 0x48,
	0x61, 0x62, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x22, 0xf4, 0x03, 0x0a, 0x06, 0x54, 0x70, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x0d, 0x53,
	0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a,
	0x10, 0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x14, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x18, 0x53, 0x61, 0x62,
	0x61, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x10, 0x53,
	0x61, 0x62, 0x61, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x6f, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x21, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x66,
	0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x15, 0x41, 0x67, 0x51, 0x4a, 0x67, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x03, 0x0a, 0x0d, 0x42,
	0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x57, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x72, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x6e, 0x72, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xbb, 0x01,
	0x0a, 0x15, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x65, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x13,
	0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x04, 0x0a, 0x0a, 0x48, 0x61, 0x62, 0x61, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x70, 0x77, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6a, 0x70, 0x77, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6a, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x70,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x70, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6a, 0x70, 0x63, 0x6f, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0,
	0x01, 0x0a, 0x0d, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x42, 0x61, 0x73, 0x65, 0x67, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x74, 0x12, 0x22, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x4f, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x66, 0x75,
	0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe1, 0x01,
	0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x04, 0x74, 0x78, 0x6e,
	0x73, 0x22, 0xad, 0x02, 0x0a, 0x18, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x04, 0x74, 0x78, 0x6e,
	0x73, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xa9, 0x05, 0x0a, 0x15, 0x41, 0x67, 0x51, 0x4a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x6f,
	0x65, 0x6e, 0x69, 0x78, 0x52, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x68, 0x6f, 0x65, 0x6e, 0x69, 0x78, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x70, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x43, 0x71, 0x39, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x22, 0xfc, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a, 0x75, 0x6d,
	0x70, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x12,
	0x62, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x12,
	0x62, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x76, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x21, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x66, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a,
	0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a,
	0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x03, 0x62,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x03, 0x62, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x73, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x73, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x73, 0x6c,
	0x22, 0xe0, 0x01, 0x0a, 0x2f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x6d, 0x61, 0x78, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x61, 0x75, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x70, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x62, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x64, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6f, 0x64, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x74, 0x63, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x74, 0x63, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x69, 0x22, 0x64, 0x0a, 0x0e, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x64,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d,
	0x69, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d,
	0x78, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x42, 0x65,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x0d, 0x62, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x42, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x84,
	0x01, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x22, 0x76,
	0x0a, 0x0e, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x6f, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x62, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0f,
	0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x22,
	0x7f, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x0f, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x13, 0x42,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x6f, 0x70, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x6f, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x62, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x0c, 0x46, 0x62,
	0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x0d, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x42, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6d, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x61, 0x6d, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x73, 0x61,
	0x6d, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x61, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x76,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6c,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x6c, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x61, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6d, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x62, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x74, 0x12, 0x2a,
	0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4f, 0x70, 0x73, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x77, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x77, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x77, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x77, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65,
	0x78, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x69, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6d, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x6e, 0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x02, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x62,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6d, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x72, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x67, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x66, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x69, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x16, 0x46, 0x62, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x46, 0x62, 0x4e, 0x65,
	0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x17, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x46,
	0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x73, 0x52, 0x03, 0x73, 0x74, 0x73, 0x22, 0x65,
	0x0a, 0x0f, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x73, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x70, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x63, 0x77, 0x6c, 0x22, 0x86, 0x05, 0x0a, 0x12, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x72, 0x6a, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6a, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6a, 0x73, 0x12, 0x2d,
	0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x77, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x77, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x62, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x73, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x73, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x73, 0x74, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6d, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6d, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6d, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x75,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x62,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x63, 0x6f, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x61, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x76, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x73, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x77, 0x61, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x77, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6c, 0x61, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x6c, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x77, 0x61,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x77, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x78, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x73, 0x73, 0x12,
	0x2d, 0x0a, 0x03, 0x73, 0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x73, 0x52, 0x03, 0x73, 0x74, 0x73, 0x22, 0xe1,
	0x04, 0x0a, 0x15, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x62, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x6e, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x54, 0x65, 0x52, 0x02, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x73,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f,
	0x66, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6d, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x6d, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x72, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x67, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x70,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x6d, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x6d, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x6d, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6d, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x63, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x73, 0x63,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x62, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x02, 0x6d, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x4d, 0x63, 0x52, 0x02,
	0x6d, 0x63, 0x22, 0x67, 0x0a, 0x17, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x4d, 0x63, 0x12, 0x0c, 0x0a,
	0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x74, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x74, 0x64, 0x22, 0x39, 0x0a, 0x17, 0x46,
	0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4f, 0x70, 0x73, 0x54, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6e, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x63, 0x77, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x62, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x72, 0x6a, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6a, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x6a, 0x73, 0x22, 0x6b, 0x0a, 0x1b, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x85, 0x04, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x73, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x78, 0x6e, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x52,
	0x04, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe6, 0x03, 0x0a, 0x15,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x76,
	0x0a, 0x24, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x42,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x54, 0x75, 0x72, 0x62, 0x6f,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x19, 0x0a,
	0x07, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x15, 0x50, 0x69, 0x6e, 0x6e,
	0x61, 0x63, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x11, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61,
	0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x42, 0x65, 0x74, 0x4c, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa3, 0x01,
	0x0a, 0x11, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x66, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x66, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x0c, 0x48, 0x61, 0x62, 0x61, 0x42, 0x61, 0x73, 0x65, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x67,
	0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x66, 0x0a, 0x16, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x50, 0x69, 0x6e, 0x6e,
	0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x43,
	0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x47, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x47,
	0x49, 0x44, 0x22, 0x52, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x65, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x65, 0x54, 0x78, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x12, 0x53, 0x61, 0x62, 0x61, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x42, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x82, 0x03, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x45, 0x75,
	0x72, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0c,
	0x43, 0x71, 0x39, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x1b,
	0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x07, 0x0a, 0x16, 0x46, 0x62, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x6f,
	0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x73, 0x68, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61,
	0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x19, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x3a, 0x0a, 0x1a, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6e,
	0x69, 0x74, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x54, 0x75, 0x72, 0x62, 0x6f,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x12,
	0x41, 0x67, 0x51, 0x4a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x12, 0x42, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x75, 0x72, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x17, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x05, 0x0a, 0x0e, 0x52,
	0x74, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x75,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x15, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x16, 0x42, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x75, 0x72, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x45, 0x75, 0x72, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x16, 0x46, 0x62, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a,
	0x12, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a,
	0x0c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x6b, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x49, 0x44, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x74, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x42, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48,
	0x61, 0x62, 0x61, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x4f, 0x0a,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc3,
	0x01, 0x0a, 0x0b, 0x4a, 0x69, 0x4c, 0x69, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5e, 0x0a,
	0x14, 0x53, 0x61, 0x62, 0x61, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a,
	0x10, 0x41, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x64, 0x0a, 0x0e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e,
	0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x14, 0x66, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x1a, 0x46, 0x62, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x6c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x22, 0x1a, 0x0a,
	0x06, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x45, 0x6c,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x57, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb3,
	0x01, 0x0a, 0x11, 0x4a, 0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6a, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x62, 0x65, 0x74, 0x61, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x61,
	0x6d, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x61, 0x6d, 0x74,
	0x22, 0xd2, 0x07, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x64, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x6f, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x45, 0x6c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x45, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x48, 0x61, 0x62, 0x61, 0x41, 0x6c, 0x74, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x61, 0x6c, 0x74, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x74,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0b, 0x50, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x19, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c,
	0x61, 0x79, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65,
	0x54, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x64,
	0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6c, 0x6f,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x43, 0x71, 0x39, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xca, 0x07, 0x0a, 0x1a, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f,
	0x64, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x31, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x32, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x33, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x70, 0x33, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x22, 0x5c, 0x0a, 0x11, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xec, 0x01, 0x0a, 0x10, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x16, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x4e, 0x0a, 0x0e, 0x45, 0x76, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x48, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x49, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x0e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x35, 0x0a, 0x15, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcb, 0x0b, 0x0a, 0x13, 0x53, 0x61, 0x62,
	0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x64,
	0x64, 0x73, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x64, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x73, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x6d, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x6d, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0b, 0x42, 0x65, 0x74, 0x57, 0x69, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x0a, 0x48, 0x61, 0x62, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x64, 0x65, 0x62, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x16, 0x0a, 0x06, 0x4a, 0x64, 0x62,
	0x52, 0x65, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x78, 0x22, 0xd7, 0x02, 0x0a, 0x17, 0x4a, 0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x15,
	0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x6e, 0x61, 0x63, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5e, 0x0a, 0x18, 0x53, 0x61, 0x62,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x16, 0x41, 0x67, 0x51,
	0x4a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x51, 0x4a, 0x67, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x71, 0x39, 0x50, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x45, 0x76, 0x6f, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x17, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x73, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x76,
	0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69,
	0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x73, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x02,
	0x0a, 0x09, 0x43, 0x71, 0x39, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x42,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69,
	0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x22,
	0xa5, 0x05, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x61, 0x6d,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x57, 0x69, 0x6e, 0x4f, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x57, 0x69, 0x6e, 0x4f, 0x72, 0x4c, 0x6f, 0x73,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x15, 0x53, 0x61, 0x62, 0x61, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x42,
	0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x12, 0x46, 0x62,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a,
	0x10, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x06,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x54, 0x75,
	0x72, 0x62, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xe6, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x73, 0x61, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0f, 0x52, 0x73,
	0x61, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x5a, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x57, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x69, 0x77, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x61, 0x69, 0x77, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x4f, 0x76, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x4f, 0x76, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xfe,
	0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x76, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x50, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x50, 0x6c,
	0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x64,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xd4, 0x06, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x78, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x78, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x78, 0x62, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x78,
	0x62, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x62, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x78, 0x62, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x67,
	0x63, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x77, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0c, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x10,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x63,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x63, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x63, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x15, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x13,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x14, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x13, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x16, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a,
	0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x14, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x15,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3e, 0x0a, 0x16, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0xc8, 0x01, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x75, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x19, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x52, 0x0a,
	0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x22, 0x87, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x4d, 0x51, 0x58, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x71,
	0x6f, 0x73, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x4d, 0x51, 0x58, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x76, 0x0a, 0x12,
	0x45, 0x67, 0x41, 0x66, 0x62, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xf5, 0x04, 0x0a,
	0x0b, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x66, 0x72, 0x65, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd5, 0x05, 0x0a, 0x0f, 0x45, 0x67,
	0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66,
	0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66,
	0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x66, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x69,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x0e, 0x45,
	0x67, 0x41, 0x66, 0x62, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22,
	0x5d, 0x0a, 0x0f, 0x45, 0x67, 0x41, 0x66, 0x62, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x17, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x4c, 0x0a, 0x18, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x1a, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x82, 0x03, 0x0a, 0x0c, 0x45, 0x67, 0x41, 0x66, 0x62, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x50, 0x61, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x50, 0x61, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x45, 0x67, 0x41, 0x66, 0x62, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2a, 0x5d, 0x0a, 0x13, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x57,
	0x49, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x32, 0x97, 0x54, 0x0a, 0x04, 0x43,
	0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x16, 0x41, 0x67, 0x49, 0x6e, 0x74, 0x6c, 0x4c, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x41, 0x67, 0x49, 0x6e, 0x74, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x49, 0x6e, 0x74, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x41, 0x67, 0x51, 0x4a, 0x67, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x67, 0x51, 0x4a, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x51,
	0x4a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x41, 0x67, 0x51, 0x4a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67,
	0x51, 0x4a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x67, 0x51, 0x4a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x41, 0x67, 0x51,
	0x4a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x67, 0x51, 0x4a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x67, 0x51, 0x4a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x41, 0x67, 0x51, 0x4a, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x67, 0x51, 0x4a, 0x43, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x51, 0x4a,
	0x43, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5a, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5a, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74,
	0x42, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42,
	0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65,
	0x74, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x42,
	0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42,
	0x65, 0x74, 0x57, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65,
	0x74, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74,
	0x42, 0x79, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x42, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x42, 0x79,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x65, 0x74, 0x42, 0x79, 0x42, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x42, 0x0a, 0x0e, 0x43, 0x71, 0x39, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x71, 0x39, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x43, 0x71, 0x39, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x43, 0x71, 0x39, 0x42, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71,
	0x39, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x71, 0x39, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x71, 0x39, 0x45,
	0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x71, 0x39, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x71, 0x39, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x54, 0x61, 0x6b, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71,
	0x39, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x43,
	0x71, 0x39, 0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x71, 0x39, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x71, 0x39, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x43, 0x71, 0x39, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x71, 0x39, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x12,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x52, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x71, 0x39, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x71, 0x39, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x43, 0x71, 0x39, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x12, 0x12, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x50, 0x61, 0x79, 0x6f, 0x66,
	0x66, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x71, 0x39, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71, 0x39,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x71, 0x39,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x71,
	0x39, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x71, 0x39, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x45,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f,
	0x0a, 0x05, 0x62, 0x65, 0x74, 0x45, 0x6c, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x05, 0x77, 0x69, 0x6e, 0x45, 0x6c, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6c, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x6c, 0x42, 0x65, 0x74, 0x12,
	0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x76, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x76, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x45, 0x76, 0x6f, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x76, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x45, 0x76, 0x6f,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f,
	0x4d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x76, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x09, 0x45, 0x76, 0x6f, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x4d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x09, 0x45, 0x76, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x4d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x0e, 0x45, 0x76, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f,
	0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4e, 0x0a, 0x15, 0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5e, 0x0a, 0x17, 0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4f, 0x0a, 0x12, 0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x52, 0x0a, 0x13, 0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x73, 0x68, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x66, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x70, 0x0a, 0x1d, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4f, 0x66, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x66, 0x4a,
	0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x42,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a,
	0x0b, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x46, 0x62, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62,
	0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x62, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x62,
	0x4e, 0x65, 0x77, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e,
	0x6b, 0x79, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x38, 0x0a, 0x0d, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65,
	0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x46, 0x75,
	0x6e, 0x6b, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e,
	0x6b, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x75, 0x6e, 0x6b, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x42, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x6b, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10,
	0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x48, 0x61, 0x62, 0x61, 0x54,
	0x78, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e,
	0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61,
	0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x09,
	0x48, 0x61, 0x62, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x48, 0x61, 0x62, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x14, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x48,
	0x61, 0x62, 0x61, 0x41, 0x6c, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x41, 0x6c, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x62, 0x61, 0x46, 0x75,
	0x6e, 0x64, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0d, 0x52, 0x74, 0x67, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x74, 0x67, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x32, 0x0a, 0x0b, 0x52, 0x74, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x12,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0d, 0x52, 0x74, 0x67, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0c,
	0x52, 0x74, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x74, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2c, 0x0a, 0x0d, 0x74, 0x70, 0x67, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x70, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x70, 0x67, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a,
	0x09, 0x74, 0x70, 0x67, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x70, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x70, 0x67, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x70,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x70, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x70, 0x67, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x70, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x11, 0x74, 0x70, 0x67, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x70, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x0b, 0x4a, 0x64, 0x62, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a,
	0x64, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x64, 0x62,
	0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x6a, 0x69, 0x4c, 0x69, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x6a, 0x69, 0x4c, 0x69, 0x42, 0x65,
	0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x6a, 0x69, 0x4c, 0x69, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a,
	0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x6a, 0x69, 0x4c, 0x69,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a,
	0x14, 0x6a, 0x69, 0x4c, 0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c,
	0x69, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x69, 0x4c, 0x69,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0a, 0x4f, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x10, 0x4f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x6b, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x50, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x67, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x09, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x67, 0x43, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x67, 0x43, 0x61,
	0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3c, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x4e, 0x0a, 0x12, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x6e, 0x61, 0x63, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x42, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x16, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c,
	0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57,
	0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x18, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c,
	0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c,
	0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x1a, 0x50, 0x69, 0x6e, 0x6e, 0x61,
	0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65,
	0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x18, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63,
	0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x4f, 0x0a,
	0x17, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61,
	0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x51,
	0x0a, 0x19, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69,
	0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x51, 0x0a, 0x19, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x19,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0d, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x4c, 0x6f,
	0x67, 0x4f, 0x75, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x12, 0x0c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x09, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x78,
	0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x05, 0x50, 0x70, 0x42, 0x65, 0x74, 0x12,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x31, 0x0a, 0x08, 0x50, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x50, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x50, 0x70, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x57, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x50, 0x70, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x0a, 0x50, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x57, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x50, 0x70, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x70, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x62, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x61, 0x62,
	0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x61, 0x62, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a,
	0x11, 0x73, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x33,
	0x72, 0x64, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x65, 0x74, 0x33, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x73,
	0x61, 0x62, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x61, 0x62, 0x61, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x62, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x73,
	0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a,
	0x11, 0x73, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x61, 0x62, 0x61, 0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x61, 0x62, 0x61, 0x55, 0x6e,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61,
	0x62, 0x61, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x61, 0x62, 0x61, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x61, 0x62, 0x61, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a,
	0x11, 0x73, 0x61, 0x62, 0x61, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12, 0x73,
	0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61,
	0x79, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12,
	0x73, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c,
	0x61, 0x79, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a,
	0x0f, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x42, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x62, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c,
	0x74, 0x75, 0x72, 0x62, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x74,
	0x75, 0x72, 0x62, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75,
	0x72, 0x62, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a,
	0x0b, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2b, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31,
	0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x52, 0x73, 0x61, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x73, 0x61, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x73,
	0x61, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x31, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x4d, 0x51, 0x58, 0x54, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x4d, 0x51, 0x58, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x4d, 0x51, 0x58, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x46, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x67, 0x41, 0x66, 0x62, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x08,
	0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0c, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67,
	0x41, 0x66, 0x62, 0x42, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a,
	0x0a, 0x0b, 0x45, 0x67, 0x41, 0x66, 0x62, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x45, 0x67,
	0x41, 0x66, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5b, 0x0a, 0x16, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x09, 0x45, 0x67, 0x41, 0x66, 0x62, 0x50, 0x61, 0x69, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x67, 0x41, 0x66, 0x62, 0x50, 0x61, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_proto_rawDescOnce sync.Once
	file_core_proto_rawDescData = file_core_proto_rawDesc
)

func file_core_proto_rawDescGZIP() []byte {
	file_core_proto_rawDescOnce.Do(func() {
		file_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_proto_rawDescData)
	})
	return file_core_proto_rawDescData
}

var file_core_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_core_proto_msgTypes = make([]protoimpl.MessageInfo, 432)
var file_core_proto_goTypes = []interface{}{
	(LiveTransactionType)(0),                                // 0: core.LiveTransactionType
	(*AgQJCusTransRequest)(nil),                             // 1: core.AgQJCusTransRequest
	(*BetMakeError)(nil),                                    // 2: core.BetMakeError
	(*BetWinTransaction)(nil),                               // 3: core.BetWinTransaction
	(*Selections)(nil),                                      // 4: core.Selections
	(*RtgGetBalanceReq)(nil),                                // 5: core.RtgGetBalanceReq
	(*PinnacleCreditReq)(nil),                               // 6: core.PinnacleCreditReq
	(*ResulttexRes)(nil),                                    // 7: core.ResulttexRes
	(*AgQJBalanceResponse)(nil),                             // 8: core.AgQJBalanceResponse
	(*IDReq)(nil),                                           // 9: core.IDReq
	(*BetByBetDiscardResponse)(nil),                         // 10: core.BetByBetDiscardResponse
	(*HabaQueryReq)(nil),                                    // 11: core.HabaQueryReq
	(*SabaSettleResp)(nil),                                  // 12: core.SabaSettleResp
	(*SabaSettleentResp)(nil),                               // 13: core.SabaSettleentResp
	(*SabaGetTicketInfoResp)(nil),                           // 14: core.SabaGetTicketInfoResp
	(*Cq9PlayerCheckRes)(nil),                               // 15: core.Cq9PlayerCheckRes
	(*Cq9RecordRes)(nil),                                    // 16: core.Cq9RecordRes
	(*EvoBalanceReq)(nil),                                   // 17: core.EvoBalanceReq
	(*JiLiCancelBetReq)(nil),                                // 18: core.JiLiCancelBetReq
	(*PachinkoBalanceResponse)(nil),                         // 19: core.PachinkoBalanceResponse
	(*PpResultResp)(nil),                                    // 20: core.PpResultResp
	(*SabaCancelBetReq)(nil),                                // 21: core.SabaCancelBetReq
	(*SabaCancelBetentReq)(nil),                             // 22: core.SabaCancelBetentReq
	(*SabaCancelBetentResp)(nil),                            // 23: core.SabaCancelBetentResp
	(*SabaCancelBetentMessage)(nil),                         // 24: core.SabaCancelBetentMessage
	(*AgIntlEventRequest)(nil),                              // 25: core.AgIntlEventRequest
	(*AgQJPlayerTransferResponse)(nil),                      // 26: core.AgQJPlayerTransferResponse
	(*Cq9RefundReq)(nil),                                    // 27: core.Cq9RefundReq
	(*FbsportsWallet)(nil),                                  // 28: core.FbsportsWallet
	(*SabaPlaceBetResp)(nil),                                // 29: core.SabaPlaceBetResp
	(*SabaConfirmBetTxns)(nil),                              // 30: core.SabaConfirmBetTxns
	(*UnSettleMessage)(nil),                                 // 31: core.UnSettleMessage
	(*AgQJPlayerTransferBody)(nil),                          // 32: core.AgQJPlayerTransferBody
	(*BaseIDResp)(nil),                                      // 33: core.BaseIDResp
	(*HabaFundinfo)(nil),                                    // 34: core.HabaFundinfo
	(*PachinkoRequest)(nil),                                 // 35: core.PachinkoRequest
	(*BaseResp)(nil),                                        // 36: core.BaseResp
	(*Cq9TransactionBalanceRes)(nil),                        // 37: core.Cq9TransactionBalanceRes
	(*HabaEmpty)(nil),                                       // 38: core.HabaEmpty
	(*HealthZResp)(nil),                                     // 39: core.HealthZResp
	(*Cq9RollinRes)(nil),                                    // 40: core.Cq9RollinRes
	(*ObCancelTransferReq)(nil),                             // 41: core.ObCancelTransferReq
	(*AuthRes)(nil),                                         // 42: core.AuthRes
	(*BetResultReq)(nil),                                    // 43: core.BetResultReq
	(*PageInfoReq)(nil),                                     // 44: core.PageInfoReq
	(*BetByBets)(nil),                                       // 45: core.BetByBets
	(*ElGetUserResp)(nil),                                   // 46: core.ElGetUserResp
	(*SabaConfirmBetReq)(nil),                               // 47: core.SabaConfirmBetReq
	(*SabaConfirmBet3RdReq)(nil),                            // 48: core.SabaConfirmBet3rdReq
	(*BetByBetWinResponse)(nil),                             // 49: core.BetByBetWinResponse
	(*Cq9CreditReq)(nil),                                    // 50: core.Cq9CreditReq
	(*HabaAuth)(nil),                                        // 51: core.HabaAuth
	(*HabaFunds)(nil),                                       // 52: core.HabaFunds
	(*SabaCheckMemberOnlineResp)(nil),                       // 53: core.SabaCheckMemberOnlineResp
	(*PinnacleCreditRspAction)(nil),                         // 54: core.PinnacleCreditRspAction
	(*SabaPlaceBetParlayResp)(nil),                          // 55: core.SabaPlaceBetParlayResp
	(*SabaPlace3RdParlayResp)(nil),                          // 56: core.SabaPlace3rdParlayResp
	(*SabaPlaceBetentResp)(nil),                             // 57: core.SabaPlaceBetentResp
	(*PlaceBetentTicketListResp)(nil),                       // 58: core.PlaceBetentTicketListResp
	(*Place3RdParlayTxnsResp)(nil),                          // 59: core.Place3rdParlayTxnsResp
	(*AgIntelEventItem)(nil),                                // 60: core.AgIntelEventItem
	(*BetByBetSettlementResponse)(nil),                      // 61: core.BetByBetSettlementResponse
	(*Cq9TransactionBalanceReq)(nil),                        // 62: core.Cq9TransactionBalanceReq
	(*ElBetReq)(nil),                                        // 63: core.ElBetReq
	(*FbsportsOrderPayReq)(nil),                             // 64: core.FbsportsOrderPayReq
	(*BonusReq)(nil),                                        // 65: core.BonusReq
	(*CSessionReq)(nil),                                     // 66: core.CSessionReq
	(*Cq9TakeAllReq)(nil),                                   // 67: core.Cq9TakeAllReq
	(*EvoCheckReq)(nil),                                     // 68: core.EvoCheckReq
	(*JiLiSessionBetReq)(nil),                               // 69: core.JiLiSessionBetReq
	(*PgCashTransferOutReq)(nil),                            // 70: core.PgCashTransferOutReq
	(*SabaHealthCheckResp)(nil),                             // 71: core.SabaHealthCheckResp
	(*PlaceBetParlayDetail)(nil),                            // 72: core.PlaceBetParlayDetail
	(*BetByBetRefundTransaction)(nil),                       // 73: core.BetByBetRefundTransaction
	(*PpPromoWinResp)(nil),                                  // 74: core.PpPromoWinResp
	(*PpAdjustmentReq)(nil),                                 // 75: core.PpAdjustmentReq
	(*Cq9EndRoundRes)(nil),                                  // 76: core.Cq9EndRoundRes
	(*EvoChannel)(nil),                                      // 77: core.EvoChannel
	(*PinnacleDebitReq)(nil),                                // 78: core.PinnacleDebitReq
	(*SabaUnsettleReq)(nil),                                 // 79: core.SabaUnsettleReq
	(*Cq9RecordReq)(nil),                                    // 80: core.Cq9RecordReq
	(*RtgSettlementReq)(nil),                                // 81: core.RtgSettlementReq
	(*PgVerifySessionReq)(nil),                              // 82: core.PgVerifySessionReq
	(*PinnacleQueryRspResult)(nil),                          // 83: core.PinnacleQueryRspResult
	(*BetLostError)(nil),                                    // 84: core.BetLostError
	(*HabaPlayerDetailResp)(nil),                            // 85: core.HabaPlayerDetailResp
	(*PinnacleDebitAction)(nil),                             // 86: core.PinnacleDebitAction
	(*PinnacleQueryRspTransaction)(nil),                     // 87: core.PinnacleQueryRspTransaction
	(*RollbackResp)(nil),                                    // 88: core.RollbackResp
	(*Empty)(nil),                                           // 89: core.Empty
	(*BoomingCallbackResp)(nil),                             // 90: core.BoomingCallbackResp
	(*CrownGenericResponse)(nil),                            // 91: core.CrownGenericResponse
	(*FunkyBetSettleReq)(nil),                               // 92: core.FunkyBetSettleReq
	(*RtgResp)(nil),                                         // 93: core.RtgResp
	(*PinnacleDebitRsp)(nil),                                // 94: core.PinnacleDebitRsp
	(*SabaConfirmBetParlayReq)(nil),                         // 95: core.SabaConfirmBetParlayReq
	(*BetByBetRollbackResponse)(nil),                        // 96: core.BetByBetRollbackResponse
	(*FbsportsOrderPayResp)(nil),                            // 97: core.FbsportsOrderPayResp
	(*JiLiBetReq)(nil),                                      // 98: core.JiLiBetReq
	(*PinnacleGetbalanceResult)(nil),                        // 99: core.PinnacleGetbalanceResult
	(*BetRefundReq)(nil),                                    // 100: core.BetRefundReq
	(*PpBetReq)(nil),                                        // 101: core.PpBetReq
	(*CreditReq)(nil),                                       // 102: core.CreditReq
	(*JiLiAuthResp)(nil),                                    // 103: core.JiLiAuthResp
	(*PpJackpotWinReq)(nil),                                 // 104: core.PpJackpotWinReq
	(*TurboProfileReq)(nil),                                 // 105: core.TurboProfileReq
	(*AgQJPlayerTransferRequest)(nil),                       // 106: core.AgQJPlayerTransferRequest
	(*CrownGenericData)(nil),                                // 107: core.CrownGenericData
	(*EvoGame)(nil),                                         // 108: core.EvoGame
	(*HabaQueryrequest)(nil),                                // 109: core.HabaQueryrequest
	(*JiLiAuthReq)(nil),                                     // 110: core.JiLiAuthReq
	(*JiLiCancelSessionBetResp)(nil),                        // 111: core.JiLiCancelSessionBetResp
	(*PinnaclePingRsp)(nil),                                 // 112: core.PinnaclePingRsp
	(*BetByPingRequest)(nil),                                // 113: core.BetByPingRequest
	(*Cq9DebitReq)(nil),                                     // 114: core.Cq9DebitReq
	(*FunkyResp)(nil),                                       // 115: core.FunkyResp
	(*PinnacleWageringRspActions)(nil),                      // 116: core.PinnacleWageringRspActions
	(*LogOutRes)(nil),                                       // 117: core.LogOutRes
	(*PlaceConfirmBetParlayTicketDetail)(nil),               // 118: core.PlaceConfirmBetParlayTicketDetail
	(*BetLostSelections)(nil),                               // 119: core.BetLostSelections
	(*Cq9EndRoundReq)(nil),                                  // 120: core.Cq9EndRoundReq
	(*JdbRsp)(nil),                                          // 121: core.JdbRsp
	(*BetByBetDiscardRequest)(nil),                          // 122: core.BetByBetDiscardRequest
	(*JiLiSessionBetResp)(nil),                              // 123: core.JiLiSessionBetResp
	(*PgVerifySessionResp)(nil),                             // 124: core.PgVerifySessionResp
	(*PpRefundReq)(nil),                                     // 125: core.PpRefundReq
	(*AdjustBalanceMessage)(nil),                            // 126: core.AdjustBalanceMessage
	(*BetRefundRequest)(nil),                                // 127: core.BetRefundRequest
	(*RtgCancelBetReq)(nil),                                 // 128: core.RtgCancelBetReq
	(*ObResp)(nil),                                          // 129: core.ObResp
	(*SettleTxns)(nil),                                      // 130: core.SettleTxns
	(*UnSettleTxns)(nil),                                    // 131: core.UnSettleTxns
	(*BetByBetLostRequest)(nil),                             // 132: core.BetByBetLostRequest
	(*Cq9RolloutRes)(nil),                                   // 133: core.Cq9RolloutRes
	(*FunkyPlaceBetReq)(nil),                                // 134: core.FunkyPlaceBetReq
	(*ObTransferReq)(nil),                                   // 135: core.ObTransferReq
	(*Cq9PlayerCheckReq)(nil),                               // 136: core.Cq9PlayerCheckReq
	(*EndingGetBalanceResp)(nil),                            // 137: core.EndingGetBalanceResp
	(*PachinkoTransferResponse)(nil),                        // 138: core.PachinkoTransferResponse
	(*PinnacleCreditReqAction)(nil),                         // 139: core.PinnacleCreditReqAction
	(*SabaCheckMemberOnlineReq)(nil),                        // 140: core.SabaCheckMemberOnlineReq
	(*UUIDsReq)(nil),                                        // 141: core.UUIDsReq
	(*BetByPingResponse)(nil),                               // 142: core.BetByPingResponse
	(*FbsportsBalanceReq)(nil),                              // 143: core.FbsportsBalanceReq
	(*HabaPlayerdetailresponse)(nil),                        // 144: core.HabaPlayerdetailresponse
	(*PpJackpotWinResp)(nil),                                // 145: core.PpJackpotWinResp
	(*DebitReq)(nil),                                        // 146: core.DebitReq
	(*BetByBetRollbackRequest)(nil),                         // 147: core.BetByBetRollbackRequest
	(*ElGetBalanceResp)(nil),                                // 148: core.ElGetBalanceResp
	(*EvoMainReq)(nil),                                      // 149: core.EvoMainReq
	(*FunkyRespData)(nil),                                   // 150: core.FunkyRespData
	(*HabaPlayerdetailrequest)(nil),                         // 151: core.HabaPlayerdetailrequest
	(*PachinkoValueData)(nil),                               // 152: core.PachinkoValueData
	(*EvoGameDetailsTable)(nil),                             // 153: core.EvoGameDetailsTable
	(*PinnacleDebitRspAction)(nil),                          // 154: core.PinnacleDebitRspAction
	(*PgCashGetResp)(nil),                                   // 155: core.PgCashGetResp
	(*LiveTransferResponse)(nil),                            // 156: core.LiveTransferResponse
	(*BetRefundTransaction)(nil),                            // 157: core.BetRefundTransaction
	(*Cq9TakeAllRes)(nil),                                   // 158: core.Cq9TakeAllRes
	(*EndingPlaceBetResp)(nil),                              // 159: core.EndingPlaceBetResp
	(*FunkyPlaceBetReqData)(nil),                            // 160: core.FunkyPlaceBetReqData
	(*HabaBonusdetails)(nil),                                // 161: core.HabaBonusdetails
	(*TpgResp)(nil),                                         // 162: core.TpgResp
	(*PinnacleWageringRsp)(nil),                             // 163: core.PinnacleWageringRsp
	(*PpBetResp)(nil),                                       // 164: core.PpBetResp
	(*JdbData)(nil),                                         // 165: core.JdbData
	(*PlayerTicketResponse)(nil),                            // 166: core.PlayerTicketResponse
	(*AgQJCusTransBody)(nil),                                // 167: core.AgQJCusTransBody
	(*Cq9RolloutReq)(nil),                                   // 168: core.Cq9RolloutReq
	(*CrownGenericWagerdataresp)(nil),                       // 169: core.CrownGenericWagerdataresp
	(*EndingSettleReq)(nil),                                 // 170: core.EndingSettleReq
	(*EvoGameDetails)(nil),                                  // 171: core.EvoGameDetails
	(*EvoResp)(nil),                                         // 172: core.EvoResp
	(*PgCashGetReq)(nil),                                    // 173: core.PgCashGetReq
	(*PinnacleDebitTransaction)(nil),                        // 174: core.PinnacleDebitTransaction
	(*PpPromoWinReq)(nil),                                   // 175: core.PpPromoWinReq
	(*LivePostTransferItem)(nil),                            // 176: core.LivePostTransferItem
	(*HabaTournamentdetails)(nil),                           // 177: core.HabaTournamentdetails
	(*PinnacleDebitRspResult)(nil),                          // 178: core.PinnacleDebitRspResult
	(*SabaConfirmBetResp)(nil),                              // 179: core.SabaConfirmBetResp
	(*SabaConfirmBet3RdResp)(nil),                           // 180: core.SabaConfirmBet3rdResp
	(*SabaPlaceBetParlayReq)(nil),                           // 181: core.SabaPlaceBetParlayReq
	(*SabaPlace3RdParlayReq)(nil),                           // 182: core.SabaPlace3rdParlayReq
	(*SabaPlaceBetentReq)(nil),                              // 183: core.SabaPlaceBetentReq
	(*SabaPlaceBetentMessageReq)(nil),                       // 184: core.SabaPlaceBetentMessageReq
	(*SabaPlaceBetentListMessage)(nil),                      // 185: core.SabaPlaceBetentListMessage
	(*RollbackReq)(nil),                                     // 186: core.RollbackReq
	(*AgQJBalanceBody)(nil),                                 // 187: core.AgQJBalanceBody
	(*BetByBetMakeRequest)(nil),                             // 188: core.BetByBetMakeRequest
	(*ElGetUserReq)(nil),                                    // 189: core.ElGetUserReq
	(*HabaFundtransferresponse)(nil),                        // 190: core.HabaFundtransferresponse
	(*BetRes)(nil),                                          // 191: core.BetRes
	(*BaseUUIDResp)(nil),                                    // 192: core.BaseUUIDResp
	(*BetRefundError)(nil),                                  // 193: core.BetRefundError
	(*EvoPromoTransaction)(nil),                             // 194: core.EvoPromoTransaction
	(*FbsportsSyncOrdersReq)(nil),                           // 195: core.FbsportsSyncOrdersReq
	(*HabaPlayerEndSessionReq)(nil),                         // 196: core.HabaPlayerEndSessionReq
	(*HabaAltFundsReq)(nil),                                 // 197: core.HabaAltFundsReq
	(*PinnacleCreditReqTransaction)(nil),                    // 198: core.PinnacleCreditReqTransaction
	(*PpRefundResp)(nil),                                    // 199: core.PpRefundResp
	(*SettleentMessage)(nil),                                // 200: core.SettleentMessage
	(*SettleMessage)(nil),                                   // 201: core.SettleMessage
	(*PlaceBetParlayTxns)(nil),                              // 202: core.PlaceBetParlayTxns
	(*Cq9RollinReq)(nil),                                    // 203: core.Cq9RollinReq
	(*PpBonusWinReq)(nil),                                   // 204: core.PpBonusWinReq
	(*PpBonusWinResp)(nil),                                  // 205: core.PpBonusWinResp
	(*CancelBetTxnsMessage)(nil),                            // 206: core.CancelBetTxnsMessage
	(*PlaceConfirmBetParlayMessage)(nil),                    // 207: core.PlaceConfirmBetParlayMessage
	(*BetByBetslip)(nil),                                    // 208: core.BetByBetslip
	(*BetByBetSettlementRequest)(nil),                       // 209: core.BetByBetSettlementRequest
	(*Cq9PayoffReq)(nil),                                    // 210: core.Cq9PayoffReq
	(*HabaFundtransferrequest)(nil),                         // 211: core.HabaFundtransferrequest
	(*SabaGetBalanceMessage)(nil),                           // 212: core.SabaGetBalanceMessage
	(*SabaPlaceBetReq)(nil),                                 // 213: core.SabaPlaceBetReq
	(*CancelBetMessage)(nil),                                // 214: core.CancelBetMessage
	(*Cq9DebitRes)(nil),                                     // 215: core.Cq9DebitRes
	(*PinnaclePingReq)(nil),                                 // 216: core.PinnaclePingReq
	(*SabaGetBalanceResp)(nil),                              // 217: core.SabaGetBalanceResp
	(*AdjustBalanceBalanceInfo)(nil),                        // 218: core.AdjustBalanceBalanceInfo
	(*AgQJCusTransResponse)(nil),                            // 219: core.AgQJCusTransResponse
	(*BoomingCallbackReq)(nil),                              // 220: core.BoomingCallbackReq
	(*AuthReq)(nil),                                         // 221: core.AuthReq
	(*AgQJPlayerTransfers)(nil),                             // 222: core.AgQJPlayerTransfers
	(*HabaGamedetails)(nil),                                 // 223: core.HabaGamedetails
	(*TpgReq)(nil),                                          // 224: core.TpgReq
	(*SabaSettleReq)(nil),                                   // 225: core.SabaSettleReq
	(*SabaSettleentReq)(nil),                                // 226: core.SabaSettleentReq
	(*SabaGetTicketInfoReq)(nil),                            // 227: core.SabaGetTicketInfoReq
	(*SabaGetTicketInfoMessage)(nil),                        // 228: core.SabaGetTicketInfoMessage
	(*SabaUnsettleResp)(nil),                                // 229: core.SabaUnsettleResp
	(*BetRefundResponse)(nil),                               // 230: core.BetRefundResponse
	(*EvoPromoPayoutReq)(nil),                               // 231: core.EvoPromoPayoutReq
	(*LogOutReq)(nil),                                       // 232: core.LogOutReq
	(*LivePostTransferData)(nil),                            // 233: core.LivePostTransferData
	(*AgQJgetBalanceRequest)(nil),                           // 234: core.AgQJgetBalanceRequest
	(*BetWinRequest)(nil),                                   // 235: core.BetWinRequest
	(*BetByBetRefundRequest)(nil),                           // 236: core.BetByBetRefundRequest
	(*FbsportsBalanceResp)(nil),                             // 237: core.FbsportsBalanceResp
	(*HabaRefund)(nil),                                      // 238: core.HabaRefund
	(*HabaFundTxReq)(nil),                                   // 239: core.HabaFundTxReq
	(*GetBalanceRes)(nil),                                   // 240: core.GetBalanceRes
	(*SabaConfirmBetMessage)(nil),                           // 241: core.SabaConfirmBetMessage
	(*SabaConfirmBet3RdMessage)(nil),                        // 242: core.SabaConfirmBet3rdMessage
	(*SabaConfirmBet3RdTxns)(nil),                           // 243: core.SabaConfirmBet3rdTxns
	(*AgQJgameResultRequest)(nil),                           // 244: core.AgQJgameResultRequest
	(*Cq9CreditRes)(nil),                                    // 245: core.Cq9CreditRes
	(*FbsportsHealthReq)(nil),                               // 246: core.FbsportsHealthReq
	(*BatchBetMatchMarketOfJumpLineReq)(nil),                // 247: core.BatchBetMatchMarketOfJumpLineReq
	(*BetMatchMarket)(nil),                                  // 248: core.BetMatchMarket
	(*BatchBetMatchMarketOfJumpLineResp)(nil),               // 249: core.BatchBetMatchMarketOfJumpLineResp
	(*BatchBetMatchMarketOfJumpLineData)(nil),               // 250: core.BatchBetMatchMarketOfJumpLineData
	(*BatchBetMatchMarketOfJumpLineDataBetMatchMarket)(nil), // 251: core.BatchBetMatchMarketOfJumpLineDataBetMatchMarket
	(*BetOption)(nil),                                       // 252: core.BetOption
	(*BetCombination)(nil),                                  // 253: core.BetCombination
	(*BetSinglePassReq)(nil),                                // 254: core.BetSinglePassReq
	(*BetSinglePassList)(nil),                               // 255: core.BetSinglePassList
	(*BetSinglePassListOption)(nil),                         // 256: core.BetSinglePassListOption
	(*BetSinglePassResp)(nil),                               // 257: core.BetSinglePassResp
	(*BetMatchOrder)(nil),                                   // 258: core.BetMatchOrder
	(*BetMatchOption)(nil),                                  // 259: core.BetMatchOption
	(*BetMultipleReq)(nil),                                  // 260: core.BetMultipleReq
	(*BetMultipleData)(nil),                                 // 261: core.BetMultipleData
	(*BetOptionList)(nil),                                   // 262: core.BetOptionList
	(*BetMultipleResp)(nil),                                 // 263: core.BetMultipleResp
	(*BetOptionMatchOrder)(nil),                             // 264: core.BetOptionMatchOrder
	(*BetOptionMatchOrderOption)(nil),                       // 265: core.BetOptionMatchOrderOption
	(*FbBetListReq)(nil),                                    // 266: core.FbBetListReq
	(*FbBetListResp)(nil),                                   // 267: core.FbBetListResp
	(*FbBetListData)(nil),                                   // 268: core.FbBetListData
	(*FbBetListRecord)(nil),                                 // 269: core.FbBetListRecord
	(*FbBetListRecordOps)(nil),                              // 270: core.FbBetListRecordOps
	(*FbBetListRecordOpsTeam)(nil),                          // 271: core.FbBetListRecordOpsTeam
	(*FbNewBetListReq)(nil),                                 // 272: core.FbNewBetListReq
	(*FbNewBetListResp)(nil),                                // 273: core.FbNewBetListResp
	(*FbNewBetListData)(nil),                                // 274: core.FbNewBetListData
	(*FbNewBetListSts)(nil),                                 // 275: core.FbNewBetListSts
	(*FbNewBetListRecord)(nil),                              // 276: core.FbNewBetListRecord
	(*FbNewBetListRecordOps)(nil),                           // 277: core.FbNewBetListRecordOps
	(*FbNewBetListRecordOpsMc)(nil),                         // 278: core.FbNewBetListRecordOpsMc
	(*FbNewBetListRecordOpsTe)(nil),                         // 279: core.FbNewBetListRecordOpsTe
	(*FbNewBetListRecordSts)(nil),                           // 280: core.FbNewBetListRecordSts
	(*GetStakeOrderStatusReq)(nil),                          // 281: core.GetStakeOrderStatusReq
	(*GetStakeOrderStatusResp)(nil),                         // 282: core.GetStakeOrderStatusResp
	(*GetStakeOrderStatusOrderData)(nil),                    // 283: core.GetStakeOrderStatusOrderData
	(*HabaPlayerendsessionrequest)(nil),                     // 284: core.HabaPlayerendsessionrequest
	(*PlaceBetParlayMessage)(nil),                           // 285: core.PlaceBetParlayMessage
	(*Place3RdParlayMessage)(nil),                           // 286: core.Place3rdParlayMessage
	(*Place3RdParlayTicketListMessage)(nil),                 // 287: core.Place3rdParlayTicketListMessage
	(*Place3RdParlayTicketListExtraMessage)(nil),            // 288: core.Place3rdParlayTicketListExtraMessage
	(*TurboBodyReq)(nil),                                    // 289: core.TurboBodyReq
	(*UUIDReq)(nil),                                         // 290: core.UUIDReq
	(*PinnacleGetbalanceReq)(nil),                           // 291: core.PinnacleGetbalanceReq
	(*PinnacleCreditRsp)(nil),                               // 292: core.PinnacleCreditRsp
	(*BetLostResponse)(nil),                                 // 293: core.BetLostResponse
	(*FunkyCancelBetReq)(nil),                               // 294: core.FunkyCancelBetReq
	(*HabaBasegame)(nil),                                    // 295: core.HabaBasegame
	(*PachinkoBalanceRequest)(nil),                          // 296: core.PachinkoBalanceRequest
	(*PinnacleWageringReq)(nil),                             // 297: core.PinnacleWageringReq
	(*CrownGenericRequest)(nil),                             // 298: core.CrownGenericRequest
	(*PlaceBetParlayTxnsResp)(nil),                          // 299: core.PlaceBetParlayTxnsResp
	(*SabaHealthCheckReq)(nil),                              // 300: core.SabaHealthCheckReq
	(*LivePostTransfer)(nil),                                // 301: core.LivePostTransfer
	(*BetByTransaction)(nil),                                // 302: core.BetByTransaction
	(*Cq9RefundRes)(nil),                                    // 303: core.Cq9RefundRes
	(*FbsportsSyncTransactionResp)(nil),                     // 304: core.FbsportsSyncTransactionResp
	(*FbsportsSyncCashOutReq)(nil),                          // 305: core.FbsportsSyncCashOutReq
	(*PinnacleWageringRspResult)(nil),                       // 306: core.PinnacleWageringRspResult
	(*GetBalanceReq)(nil),                                   // 307: core.GetBalanceReq
	(*TurboSettleResp)(nil),                                 // 308: core.TurboSettleResp
	(*AgQJgameResultBody)(nil),                              // 309: core.AgQJgameResultBody
	(*BetLostTransaction)(nil),                              // 310: core.BetLostTransaction
	(*FbsportsSyncCashOutResp)(nil),                         // 311: core.FbsportsSyncCashOutResp
	(*RtgPlaceBetReq)(nil),                                  // 312: core.RtgPlaceBetReq
	(*PgCashTransferOutResp)(nil),                           // 313: core.PgCashTransferOutResp
	(*BetRollbackTransaction)(nil),                          // 314: core.BetRollbackTransaction
	(*FbsportsSyncOrdersResp)(nil),                          // 315: core.FbsportsSyncOrdersResp
	(*FunkyGetBalanceReq)(nil),                              // 316: core.FunkyGetBalanceReq
	(*BetResultRes)(nil),                                    // 317: core.BetResultRes
	(*DebitResp)(nil),                                       // 318: core.DebitResp
	(*HabaPlayerDetailReq)(nil),                             // 319: core.HabaPlayerDetailReq
	(*JiLiBetResp)(nil),                                     // 320: core.JiLiBetResp
	(*SabaCancelBetResp)(nil),                               // 321: core.SabaCancelBetResp
	(*SabaAdjustBalanceReq)(nil),                            // 322: core.SabaAdjustBalanceReq
	(*AgIntelEventData)(nil),                                // 323: core.AgIntelEventData
	(*HabaFundTxResp)(nil),                                  // 324: core.HabaFundTxResp
	(*HealthCheckMessage)(nil),                              // 325: core.HealthCheckMessage
	(*FbsportsSyncTransactionReq)(nil),                      // 326: core.FbsportsSyncTransactionReq
	(*CreditResp)(nil),                                      // 327: core.CreditResp
	(*IDsReq)(nil),                                          // 328: core.IDsReq
	(*ElWinReq)(nil),                                        // 329: core.ElWinReq
	(*JiLiCancelBetResp)(nil),                               // 330: core.JiLiCancelBetResp
	(*BonusRes)(nil),                                        // 331: core.BonusRes
	(*ResultexReq)(nil),                                     // 332: core.ResultexReq
	(*PlaceBetParlayTicketDetail)(nil),                      // 333: core.PlaceBetParlayTicketDetail
	(*ElCancelReq)(nil),                                     // 334: core.ElCancelReq
	(*EndingPlaceBetReq)(nil),                               // 335: core.EndingPlaceBetReq
	(*HabaAltfundsrequest)(nil),                             // 336: core.HabaAltfundsrequest
	(*PinnacleQueryReq)(nil),                                // 337: core.PinnacleQueryReq
	(*PpResultReq)(nil),                                     // 338: core.PpResultReq
	(*PlaceConfirmBetParlayTxns)(nil),                       // 339: core.PlaceConfirmBetParlayTxns
	(*Cq9BetRes)(nil),                                       // 340: core.Cq9BetRes
	(*FbsportsOrderSyncDetailReq)(nil),                      // 341: core.FbsportsOrderSyncDetailReq
	(*SabaGetBalanceReq)(nil),                               // 342: core.SabaGetBalanceReq
	(*TurboProfileResp)(nil),                                // 343: core.TurboProfileResp
	(*BetByBetRefundResponse)(nil),                          // 344: core.BetByBetRefundResponse
	(*EvoTransaction)(nil),                                  // 345: core.EvoTransaction
	(*PachinkoBalanceValue)(nil),                            // 346: core.PachinkoBalanceValue
	(*PinnacleQueryRsp)(nil),                                // 347: core.PinnacleQueryRsp
	(*BetRefundRes)(nil),                                    // 348: core.BetRefundRes
	(*TurboPlaceResp)(nil),                                  // 349: core.TurboPlaceResp
	(*EndingGetBalanceReq)(nil),                             // 350: core.EndingGetBalanceReq
	(*PinnaclePingRspResult)(nil),                           // 351: core.PinnaclePingRspResult
	(*SabaPlaceBetMessage)(nil),                             // 352: core.SabaPlaceBetMessage
	(*BetWinError)(nil),                                     // 353: core.BetWinError
	(*EndingSettleResp)(nil),                                // 354: core.EndingSettleResp
	(*HabaStatus)(nil),                                      // 355: core.HabaStatus
	(*JdbReq)(nil),                                          // 356: core.JdbReq
	(*JiLiCancelSessionBetReq)(nil),                         // 357: core.JiLiCancelSessionBetReq
	(*PinnacleGetbalanceRsp)(nil),                           // 358: core.PinnacleGetbalanceRsp
	(*SabaConfirmBetParlayResp)(nil),                        // 359: core.SabaConfirmBetParlayResp
	(*AgQJgameResultResponse)(nil),                          // 360: core.AgQJgameResultResponse
	(*Cq9PayoffRes)(nil),                                    // 361: core.Cq9PayoffRes
	(*EvoJackpot)(nil),                                      // 362: core.EvoJackpot
	(*PinnacleCreditRspResult)(nil),                         // 363: core.PinnacleCreditRspResult
	(*Cq9BetReq)(nil),                                       // 364: core.Cq9BetReq
	(*FunkyBetSettleReqData)(nil),                           // 365: core.FunkyBetSettleReqData
	(*Details)(nil),                                         // 366: core.Details
	(*SabaAdjustBalanceResp)(nil),                           // 367: core.SabaAdjustBalanceResp
	(*BetByBetMakeResponse)(nil),                            // 368: core.BetByBetMakeResponse
	(*FbsportsHealthResp)(nil),                              // 369: core.FbsportsHealthResp
	(*FunkyCheckBetReq)(nil),                                // 370: core.FunkyCheckBetReq
	(*BetReq)(nil),                                          // 371: core.BetReq
	(*TurboCancelResp)(nil),                                 // 372: core.TurboCancelResp
	(*Data)(nil),                                            // 373: core.Data
	(*RsaGenerateReq)(nil),                                  // 374: core.RsaGenerateReq
	(*RsaGenerateResp)(nil),                                 // 375: core.RsaGenerateResp
	(*PlatLoginReq)(nil),                                    // 376: core.PlatLoginReq
	(*PlatLoginResp)(nil),                                   // 377: core.PlatLoginResp
	(*InitGameReq)(nil),                                     // 378: core.InitGameReq
	(*InitGameResp)(nil),                                    // 379: core.InitGameResp
	(*PlayGameReq)(nil),                                     // 380: core.PlayGameReq
	(*PlayGameResp)(nil),                                    // 381: core.PlayGameResp
	(*OverGameResultReq)(nil),                               // 382: core.OverGameResultReq
	(*OverGameResultResp)(nil),                              // 383: core.OverGameResultResp
	(*PlaySlotsGameReq)(nil),                                // 384: core.PlaySlotsGameReq
	(*PlaySlotsGameResp)(nil),                               // 385: core.PlaySlotsGameResp
	(*PlayGameResultReq)(nil),                               // 386: core.PlayGameResultReq
	(*PlayGameResultResp)(nil),                              // 387: core.PlayGameResultResp
	(*PlayGameListReq)(nil),                                 // 388: core.PlayGameListReq
	(*PlayGameListDataReq)(nil),                             // 389: core.PlayGameListDataReq
	(*PlayGameListResp)(nil),                                // 390: core.PlayGameListResp
	(*PlayGameListData)(nil),                                // 391: core.PlayGameListData
	(*PlayGameSingleResp)(nil),                              // 392: core.PlayGameSingleResp
	(*GameListReq)(nil),                                     // 393: core.GameListReq
	(*GameListResp)(nil),                                    // 394: core.GameListResp
	(*GameListDataResp)(nil),                                // 395: core.GameListDataResp
	(*ElectronAuthorizeReq)(nil),                            // 396: core.ElectronAuthorizeReq
	(*ElectronAuthorizeResp)(nil),                           // 397: core.ElectronAuthorizeResp
	(*AuthorizeData)(nil),                                   // 398: core.AuthorizeData
	(*ElectronWithdrawReq)(nil),                             // 399: core.ElectronWithdrawReq
	(*ElectronWithdrawResp)(nil),                            // 400: core.ElectronWithdrawResp
	(*ElectronWithdrawData)(nil),                            // 401: core.ElectronWithdrawData
	(*ElectronDepositReq)(nil),                              // 402: core.ElectronDepositReq
	(*ElectronDepositResp)(nil),                             // 403: core.ElectronDepositResp
	(*DepositData)(nil),                                     // 404: core.DepositData
	(*ElectronQueryOrderReq)(nil),                           // 405: core.ElectronQueryOrderReq
	(*ElectronQueryOrderResp)(nil),                          // 406: core.ElectronQueryOrderResp
	(*QueryOrderData)(nil),                                  // 407: core.QueryOrderData
	(*ElectronUserInfoReq)(nil),                             // 408: core.ElectronUserInfoReq
	(*ElectronUserInfoResp)(nil),                            // 409: core.ElectronUserInfoResp
	(*UserInfoData)(nil),                                    // 410: core.UserInfoData
	(*ElectronUserLogoutReq)(nil),                           // 411: core.ElectronUserLogoutReq
	(*ElectronUserLogoutResp)(nil),                          // 412: core.ElectronUserLogoutResp
	(*ElectronUserBroadcastReq)(nil),                        // 413: core.ElectronUserBroadcastReq
	(*ElectronUserBroadcastResp)(nil),                       // 414: core.ElectronUserBroadcastResp
	(*CompetitionRankingRewardsReq)(nil),                    // 415: core.CompetitionRankingRewardsReq
	(*CompetitionRankingRewardsResp)(nil),                   // 416: core.CompetitionRankingRewardsResp
	(*SendEMQXTestReq)(nil),                                 // 417: core.SendEMQXTestReq
	(*SendEMQXTestResp)(nil),                                // 418: core.SendEMQXTestResp
	(*EgAfbGetBalanceReq)(nil),                              // 419: core.EgAfbGetBalanceReq
	(*EgAfbGetBalanceResp)(nil),                             // 420: core.EgAfbGetBalanceResp
	(*EgAfbBetReq)(nil),                                     // 421: core.EgAfbBetReq
	(*EgAfbBetResp)(nil),                                    // 422: core.EgAfbBetResp
	(*EgAfbBetPaidReq)(nil),                                 // 423: core.EgAfbBetPaidReq
	(*EgAfbBetPaidResp)(nil),                                // 424: core.EgAfbBetPaidResp
	(*EgAfbRefundReq)(nil),                                  // 425: core.EgAfbRefundReq
	(*EgAfbRefundResp)(nil),                                 // 426: core.EgAfbRefundResp
	(*EgAfbGameCloseNotifyReq)(nil),                         // 427: core.EgAfbGameCloseNotifyReq
	(*EgAfbGameCloseNotifyResp)(nil),                        // 428: core.EgAfbGameCloseNotifyResp
	(*EgAfbBonusStatusNotifyReq)(nil),                       // 429: core.EgAfbBonusStatusNotifyReq
	(*EgAfbBonusStatusNotifyResp)(nil),                      // 430: core.EgAfbBonusStatusNotifyResp
	(*EgAfbPaidReq)(nil),                                    // 431: core.EgAfbPaidReq
	(*EgAfbPaidResp)(nil),                                   // 432: core.EgAfbPaidResp
}
var file_core_proto_depIdxs = []int32{
	139, // 0: core.PinnacleCreditReq.Action:type_name -> core.PinnacleCreditReqAction
	187, // 1: core.AgQJBalanceResponse.body:type_name -> core.AgQJBalanceBody
	295, // 2: core.HabaQueryReq.basegame:type_name -> core.HabaBasegame
	51,  // 3: core.HabaQueryReq.auth:type_name -> core.HabaAuth
	109, // 4: core.HabaQueryReq.queryrequest:type_name -> core.HabaQueryrequest
	108, // 5: core.EvoBalanceReq.game:type_name -> core.EvoGame
	346, // 6: core.PachinkoBalanceResponse.Value:type_name -> core.PachinkoBalanceValue
	214, // 7: core.SabaCancelBetReq.message:type_name -> core.CancelBetMessage
	24,  // 8: core.SabaCancelBetentReq.message:type_name -> core.SabaCancelBetentMessage
	323, // 9: core.AgIntlEventRequest.Data:type_name -> core.AgIntelEventData
	32,  // 10: core.AgQJPlayerTransferResponse.body:type_name -> core.AgQJPlayerTransferBody
	131, // 11: core.UnSettleMessage.txns:type_name -> core.UnSettleTxns
	366, // 12: core.ObCancelTransferReq.originalDetails:type_name -> core.Details
	241, // 13: core.SabaConfirmBetReq.message:type_name -> core.SabaConfirmBetMessage
	242, // 14: core.SabaConfirmBet3rdReq.message:type_name -> core.SabaConfirmBet3rdMessage
	34,  // 15: core.HabaFunds.fundinfo:type_name -> core.HabaFundinfo
	238, // 16: core.HabaFunds.refund:type_name -> core.HabaRefund
	299, // 17: core.SabaPlaceBetParlayResp.txns:type_name -> core.PlaceBetParlayTxnsResp
	59,  // 18: core.SabaPlace3rdParlayResp.txns:type_name -> core.Place3rdParlayTxnsResp
	58,  // 19: core.SabaPlaceBetentResp.ticketList:type_name -> core.PlaceBetentTicketListResp
	77,  // 20: core.EvoCheckReq.channel:type_name -> core.EvoChannel
	86,  // 21: core.PinnacleDebitReq.Action:type_name -> core.PinnacleDebitAction
	31,  // 22: core.SabaUnsettleReq.message:type_name -> core.UnSettleMessage
	87,  // 23: core.PinnacleQueryRspResult.Transaction:type_name -> core.PinnacleQueryRspTransaction
	144, // 24: core.HabaPlayerDetailResp.playerdetailresponse:type_name -> core.HabaPlayerdetailresponse
	174, // 25: core.PinnacleDebitAction.Transaction:type_name -> core.PinnacleDebitTransaction
	107, // 26: core.CrownGenericResponse.data:type_name -> core.CrownGenericData
	365, // 27: core.FunkyBetSettleReq.betResultReq:type_name -> core.FunkyBetSettleReqData
	178, // 28: core.PinnacleDebitRsp.Result:type_name -> core.PinnacleDebitRspResult
	207, // 29: core.SabaConfirmBetParlayReq.message:type_name -> core.PlaceConfirmBetParlayMessage
	373, // 30: core.CreditReq.data:type_name -> core.Data
	222, // 31: core.AgQJPlayerTransferRequest.tranfers:type_name -> core.AgQJPlayerTransfers
	169, // 32: core.CrownGenericData.wagerdataresp:type_name -> core.CrownGenericWagerdataresp
	171, // 33: core.EvoGame.details:type_name -> core.EvoGameDetails
	351, // 34: core.PinnaclePingRsp.Result:type_name -> core.PinnaclePingRspResult
	150, // 35: core.FunkyResp.data:type_name -> core.FunkyRespData
	218, // 36: core.AdjustBalanceMessage.BalanceInfo:type_name -> core.AdjustBalanceBalanceInfo
	157, // 37: core.BetRefundRequest.transaction:type_name -> core.BetRefundTransaction
	310, // 38: core.BetByBetLostRequest.transaction:type_name -> core.BetLostTransaction
	119, // 39: core.BetByBetLostRequest.selections:type_name -> core.BetLostSelections
	160, // 40: core.FunkyPlaceBetReq.bet:type_name -> core.FunkyPlaceBetReqData
	366, // 41: core.ObTransferReq.details:type_name -> core.Details
	152, // 42: core.PachinkoTransferResponse.Value:type_name -> core.PachinkoValueData
	198, // 43: core.PinnacleCreditReqAction.Transaction:type_name -> core.PinnacleCreditReqTransaction
	355, // 44: core.HabaPlayerdetailresponse.status:type_name -> core.HabaStatus
	314, // 45: core.BetByBetRollbackRequest.transaction:type_name -> core.BetRollbackTransaction
	108, // 46: core.EvoMainReq.game:type_name -> core.EvoGame
	345, // 47: core.EvoMainReq.transaction:type_name -> core.EvoTransaction
	306, // 48: core.PinnacleWageringRsp.Result:type_name -> core.PinnacleWageringRspResult
	153, // 49: core.EvoGameDetails.table:type_name -> core.EvoGameDetailsTable
	0,   // 50: core.LivePostTransferItem.transactionType:type_name -> core.LiveTransactionType
	154, // 51: core.PinnacleDebitRspResult.Action:type_name -> core.PinnacleDebitRspAction
	285, // 52: core.SabaPlaceBetParlayReq.message:type_name -> core.PlaceBetParlayMessage
	286, // 53: core.SabaPlace3rdParlayReq.message:type_name -> core.Place3rdParlayMessage
	184, // 54: core.SabaPlaceBetentReq.message:type_name -> core.SabaPlaceBetentMessageReq
	185, // 55: core.SabaPlaceBetentMessageReq.ticketList:type_name -> core.SabaPlaceBetentListMessage
	302, // 56: core.BetByBetMakeRequest.transaction:type_name -> core.BetByTransaction
	208, // 57: core.BetByBetMakeRequest.betslip:type_name -> core.BetByBetslip
	355, // 58: core.HabaFundtransferresponse.status:type_name -> core.HabaStatus
	362, // 59: core.EvoPromoTransaction.jackpots:type_name -> core.EvoJackpot
	341, // 60: core.FbsportsSyncOrdersReq.betList:type_name -> core.FbsportsOrderSyncDetailReq
	295, // 61: core.HabaPlayerEndSessionReq.basegame:type_name -> core.HabaBasegame
	51,  // 62: core.HabaPlayerEndSessionReq.auth:type_name -> core.HabaAuth
	284, // 63: core.HabaPlayerEndSessionReq.playerendsessionrequest:type_name -> core.HabaPlayerendsessionrequest
	51,  // 64: core.HabaAltFundsReq.auth:type_name -> core.HabaAuth
	336, // 65: core.HabaAltFundsReq.altfundsrequest:type_name -> core.HabaAltfundsrequest
	130, // 66: core.SettleMessage.txns:type_name -> core.SettleTxns
	72,  // 67: core.PlaceBetParlayTxns.Detail:type_name -> core.PlaceBetParlayDetail
	339, // 68: core.PlaceConfirmBetParlayMessage.Txns:type_name -> core.PlaceConfirmBetParlayTxns
	118, // 69: core.PlaceConfirmBetParlayMessage.TicketDetail:type_name -> core.PlaceConfirmBetParlayTicketDetail
	45,  // 70: core.BetByBetslip.bets:type_name -> core.BetByBets
	52,  // 71: core.HabaFundtransferrequest.funds:type_name -> core.HabaFunds
	223, // 72: core.HabaFundtransferrequest.gamedetails:type_name -> core.HabaGamedetails
	161, // 73: core.HabaFundtransferrequest.bonusdetails:type_name -> core.HabaBonusdetails
	352, // 74: core.SabaPlaceBetReq.message:type_name -> core.SabaPlaceBetMessage
	206, // 75: core.CancelBetMessage.Txns:type_name -> core.CancelBetTxnsMessage
	167, // 76: core.AgQJCusTransResponse.body:type_name -> core.AgQJCusTransBody
	201, // 77: core.SabaSettleReq.message:type_name -> core.SettleMessage
	200, // 78: core.SabaSettleentReq.message:type_name -> core.SettleentMessage
	228, // 79: core.SabaGetTicketInfoReq.message:type_name -> core.SabaGetTicketInfoMessage
	108, // 80: core.EvoPromoPayoutReq.game:type_name -> core.EvoGame
	194, // 81: core.EvoPromoPayoutReq.promoTransaction:type_name -> core.EvoPromoTransaction
	176, // 82: core.LivePostTransferData.Record:type_name -> core.LivePostTransferItem
	3,   // 83: core.BetWinRequest.transaction:type_name -> core.BetWinTransaction
	4,   // 84: core.BetWinRequest.selections:type_name -> core.Selections
	73,  // 85: core.BetByBetRefundRequest.transaction:type_name -> core.BetByBetRefundTransaction
	28,  // 86: core.FbsportsBalanceResp.data:type_name -> core.FbsportsWallet
	295, // 87: core.HabaFundTxReq.basegame:type_name -> core.HabaBasegame
	51,  // 88: core.HabaFundTxReq.auth:type_name -> core.HabaAuth
	211, // 89: core.HabaFundTxReq.fundtransferrequest:type_name -> core.HabaFundtransferrequest
	30,  // 90: core.SabaConfirmBetMessage.txns:type_name -> core.SabaConfirmBetTxns
	243, // 91: core.SabaConfirmBet3rdMessage.txns:type_name -> core.SabaConfirmBet3rdTxns
	248, // 92: core.BatchBetMatchMarketOfJumpLineReq.betMatchMarketList:type_name -> core.BetMatchMarket
	250, // 93: core.BatchBetMatchMarketOfJumpLineResp.data:type_name -> core.BatchBetMatchMarketOfJumpLineData
	251, // 94: core.BatchBetMatchMarketOfJumpLineData.bms:type_name -> core.BatchBetMatchMarketOfJumpLineDataBetMatchMarket
	253, // 95: core.BatchBetMatchMarketOfJumpLineData.sos:type_name -> core.BetCombination
	252, // 96: core.BatchBetMatchMarketOfJumpLineDataBetMatchMarket.op:type_name -> core.BetOption
	255, // 97: core.BetSinglePassReq.singleBetList:type_name -> core.BetSinglePassList
	256, // 98: core.BetSinglePassList.betOptionList:type_name -> core.BetSinglePassListOption
	258, // 99: core.BetSinglePassResp.data:type_name -> core.BetMatchOrder
	259, // 100: core.BetMatchOrder.ops:type_name -> core.BetMatchOption
	261, // 101: core.BetMultipleReq.betMultipleData:type_name -> core.BetMultipleData
	262, // 102: core.BetMultipleReq.betOptionList:type_name -> core.BetOptionList
	264, // 103: core.BetMultipleResp.data:type_name -> core.BetOptionMatchOrder
	265, // 104: core.BetOptionMatchOrder.ops:type_name -> core.BetOptionMatchOrderOption
	268, // 105: core.FbBetListResp.data:type_name -> core.FbBetListData
	269, // 106: core.FbBetListData.records:type_name -> core.FbBetListRecord
	270, // 107: core.FbBetListRecord.ops:type_name -> core.FbBetListRecordOps
	271, // 108: core.FbBetListRecordOps.te:type_name -> core.FbBetListRecordOpsTeam
	274, // 109: core.FbNewBetListResp.data:type_name -> core.FbNewBetListData
	276, // 110: core.FbNewBetListData.records:type_name -> core.FbNewBetListRecord
	275, // 111: core.FbNewBetListData.sts:type_name -> core.FbNewBetListSts
	277, // 112: core.FbNewBetListRecord.ops:type_name -> core.FbNewBetListRecordOps
	280, // 113: core.FbNewBetListRecord.sts:type_name -> core.FbNewBetListRecordSts
	279, // 114: core.FbNewBetListRecordOps.te:type_name -> core.FbNewBetListRecordOpsTe
	278, // 115: core.FbNewBetListRecordOps.mc:type_name -> core.FbNewBetListRecordOpsMc
	283, // 116: core.GetStakeOrderStatusResp.data:type_name -> core.GetStakeOrderStatusOrderData
	202, // 117: core.PlaceBetParlayMessage.Txns:type_name -> core.PlaceBetParlayTxns
	333, // 118: core.PlaceBetParlayMessage.TicketDetail:type_name -> core.PlaceBetParlayTicketDetail
	287, // 119: core.Place3rdParlayMessage.ticketList:type_name -> core.Place3rdParlayTicketListMessage
	288, // 120: core.Place3rdParlayTicketListMessage.message:type_name -> core.Place3rdParlayTicketListExtraMessage
	363, // 121: core.PinnacleCreditRsp.Result:type_name -> core.PinnacleCreditRspResult
	325, // 122: core.SabaHealthCheckReq.message:type_name -> core.HealthCheckMessage
	233, // 123: core.LivePostTransfer.Data:type_name -> core.LivePostTransferData
	116, // 124: core.PinnacleWageringRspResult.Actions:type_name -> core.PinnacleWageringRspActions
	295, // 125: core.HabaPlayerDetailReq.basegame:type_name -> core.HabaBasegame
	51,  // 126: core.HabaPlayerDetailReq.auth:type_name -> core.HabaAuth
	151, // 127: core.HabaPlayerDetailReq.playerdetailrequest:type_name -> core.HabaPlayerdetailrequest
	126, // 128: core.SabaAdjustBalanceReq.message:type_name -> core.AdjustBalanceMessage
	60,  // 129: core.AgIntelEventData.Record:type_name -> core.AgIntelEventItem
	190, // 130: core.HabaFundTxResp.fundtransferresponse:type_name -> core.HabaFundtransferresponse
	64,  // 131: core.FbsportsSyncTransactionReq.order_pay_req_list:type_name -> core.FbsportsOrderPayReq
	177, // 132: core.HabaAltfundsrequest.tournamentdetails:type_name -> core.HabaTournamentdetails
	212, // 133: core.SabaGetBalanceReq.message:type_name -> core.SabaGetBalanceMessage
	83,  // 134: core.PinnacleQueryRsp.Result:type_name -> core.PinnacleQueryRspResult
	99,  // 135: core.PinnacleGetbalanceRsp.Result:type_name -> core.PinnacleGetbalanceResult
	309, // 136: core.AgQJgameResultResponse.body:type_name -> core.AgQJgameResultBody
	54,  // 137: core.PinnacleCreditRspResult.Action:type_name -> core.PinnacleCreditRspAction
	389, // 138: core.PlayGameListReq.data:type_name -> core.PlayGameListDataReq
	391, // 139: core.PlayGameListResp.data:type_name -> core.PlayGameListData
	392, // 140: core.PlayGameListData.list:type_name -> core.PlayGameSingleResp
	395, // 141: core.GameListResp.list:type_name -> core.GameListDataResp
	398, // 142: core.ElectronAuthorizeResp.data:type_name -> core.AuthorizeData
	401, // 143: core.ElectronWithdrawResp.data:type_name -> core.ElectronWithdrawData
	404, // 144: core.ElectronDepositResp.data:type_name -> core.DepositData
	407, // 145: core.ElectronQueryOrderResp.data:type_name -> core.QueryOrderData
	410, // 146: core.ElectronUserInfoResp.data:type_name -> core.UserInfoData
	301, // 147: core.Core.AgIntlLivePostTransfer:input_type -> core.LivePostTransfer
	25,  // 148: core.Core.AgIntlEvent:input_type -> core.AgIntlEventRequest
	234, // 149: core.Core.AgQJgetBalance:input_type -> core.AgQJgetBalanceRequest
	106, // 150: core.Core.AgQJplayerTransfer:input_type -> core.AgQJPlayerTransferRequest
	244, // 151: core.Core.AgQJgameResult:input_type -> core.AgQJgameResultRequest
	1,   // 152: core.Core.AgQJgetCusTrans:input_type -> core.AgQJCusTransRequest
	89,  // 153: core.Core.initDatabase:input_type -> core.Empty
	89,  // 154: core.Core.healthZ:input_type -> core.Empty
	113, // 155: core.Core.BetByPing:input_type -> core.BetByPingRequest
	188, // 156: core.Core.BetByBetMake:input_type -> core.BetByBetMakeRequest
	209, // 157: core.Core.BetByBetSettlement:input_type -> core.BetByBetSettlementRequest
	235, // 158: core.Core.BetByBetWin:input_type -> core.BetWinRequest
	132, // 159: core.Core.BetByBetLost:input_type -> core.BetByBetLostRequest
	122, // 160: core.Core.BetByBetDiscard:input_type -> core.BetByBetDiscardRequest
	236, // 161: core.Core.BetByBetRefund:input_type -> core.BetByBetRefundRequest
	147, // 162: core.Core.BetByBetRollback:input_type -> core.BetByBetRollbackRequest
	220, // 163: core.Core.BoomingCallback:input_type -> core.BoomingCallbackReq
	136, // 164: core.Core.Cq9PlayerCheck:input_type -> core.Cq9PlayerCheckReq
	62,  // 165: core.Core.Cq9TransactionBalance:input_type -> core.Cq9TransactionBalanceReq
	364, // 166: core.Core.Cq9Bet:input_type -> core.Cq9BetReq
	120, // 167: core.Core.Cq9EndRound:input_type -> core.Cq9EndRoundReq
	67,  // 168: core.Core.Cq9TakeAll:input_type -> core.Cq9TakeAllReq
	114, // 169: core.Core.Cq9Debit:input_type -> core.Cq9DebitReq
	50,  // 170: core.Core.Cq9Credit:input_type -> core.Cq9CreditReq
	203, // 171: core.Core.Cq9Rollin:input_type -> core.Cq9RollinReq
	168, // 172: core.Core.Cq9Rollout:input_type -> core.Cq9RolloutReq
	210, // 173: core.Core.Cq9Payoff:input_type -> core.Cq9PayoffReq
	80,  // 174: core.Core.Cq9Record:input_type -> core.Cq9RecordReq
	27,  // 175: core.Core.Cq9Refund:input_type -> core.Cq9RefundReq
	298, // 176: core.Core.CrownGenericBet:input_type -> core.CrownGenericRequest
	189, // 177: core.Core.getElUserInfo:input_type -> core.ElGetUserReq
	189, // 178: core.Core.getElBalance:input_type -> core.ElGetUserReq
	63,  // 179: core.Core.betEl:input_type -> core.ElBetReq
	329, // 180: core.Core.winEl:input_type -> core.ElWinReq
	334, // 181: core.Core.cancelElBet:input_type -> core.ElCancelReq
	350, // 182: core.Core.endingGetBalance:input_type -> core.EndingGetBalanceReq
	335, // 183: core.Core.endingPlaceBet:input_type -> core.EndingPlaceBetReq
	170, // 184: core.Core.endingSettle:input_type -> core.EndingSettleReq
	68,  // 185: core.Core.EvoCheck:input_type -> core.EvoCheckReq
	17,  // 186: core.Core.EvoBalance:input_type -> core.EvoBalanceReq
	149, // 187: core.Core.EvoDebit:input_type -> core.EvoMainReq
	149, // 188: core.Core.EvoCredit:input_type -> core.EvoMainReq
	149, // 189: core.Core.EvoCancel:input_type -> core.EvoMainReq
	231, // 190: core.Core.EvoPromoPayout:input_type -> core.EvoPromoPayoutReq
	143, // 191: core.Core.fbsportsBalance:input_type -> core.FbsportsBalanceReq
	64,  // 192: core.Core.fbsportsOrderPay:input_type -> core.FbsportsOrderPayReq
	64,  // 193: core.Core.fbsportsCheckOrderPay:input_type -> core.FbsportsOrderPayReq
	326, // 194: core.Core.fbsportsSyncTransaction:input_type -> core.FbsportsSyncTransactionReq
	195, // 195: core.Core.fbsportsSyncOrders:input_type -> core.FbsportsSyncOrdersReq
	305, // 196: core.Core.fbsportsSyncCashOut:input_type -> core.FbsportsSyncCashOutReq
	246, // 197: core.Core.fbsportsHealth:input_type -> core.FbsportsHealthReq
	247, // 198: core.Core.batchBetMatchMarketOfJumpLine:input_type -> core.BatchBetMatchMarketOfJumpLineReq
	254, // 199: core.Core.BetSinglePass:input_type -> core.BetSinglePassReq
	260, // 200: core.Core.BetMultiple:input_type -> core.BetMultipleReq
	266, // 201: core.Core.FbBetList:input_type -> core.FbBetListReq
	272, // 202: core.Core.FbNewBetList:input_type -> core.FbNewBetListReq
	281, // 203: core.Core.GetStakeOrderStatus:input_type -> core.GetStakeOrderStatusReq
	316, // 204: core.Core.FunkyGetBalance:input_type -> core.FunkyGetBalanceReq
	134, // 205: core.Core.FunkyPlaceBet:input_type -> core.FunkyPlaceBetReq
	92,  // 206: core.Core.FunkyBetSettle:input_type -> core.FunkyBetSettleReq
	294, // 207: core.Core.FunkyCancelBet:input_type -> core.FunkyCancelBetReq
	370, // 208: core.Core.FunkyCheckBet:input_type -> core.FunkyCheckBetReq
	319, // 209: core.Core.HabaPlayerDetail:input_type -> core.HabaPlayerDetailReq
	239, // 210: core.Core.HabaTx:input_type -> core.HabaFundTxReq
	11,  // 211: core.Core.HabaQuery:input_type -> core.HabaQueryReq
	196, // 212: core.Core.HabaPlayerEndSession:input_type -> core.HabaPlayerEndSessionReq
	197, // 213: core.Core.HabaAltFunds:input_type -> core.HabaAltFundsReq
	5,   // 214: core.Core.RtgGetBalance:input_type -> core.RtgGetBalanceReq
	312, // 215: core.Core.RtgPlaceBet:input_type -> core.RtgPlaceBetReq
	81,  // 216: core.Core.RtgSettlement:input_type -> core.RtgSettlementReq
	128, // 217: core.Core.RtgCancelBet:input_type -> core.RtgCancelBetReq
	224, // 218: core.Core.tpgGetBalance:input_type -> core.TpgReq
	224, // 219: core.Core.tpgDeduction:input_type -> core.TpgReq
	224, // 220: core.Core.tpgPayout:input_type -> core.TpgReq
	224, // 221: core.Core.tpgRollback:input_type -> core.TpgReq
	224, // 222: core.Core.tpgDeductAndPayout:input_type -> core.TpgReq
	224, // 223: core.Core.tpgBatchDeduction:input_type -> core.TpgReq
	356, // 224: core.Core.JdbCallback:input_type -> core.JdbReq
	110, // 225: core.Core.jiLiAuth:input_type -> core.JiLiAuthReq
	98,  // 226: core.Core.jiLiBet:input_type -> core.JiLiBetReq
	18,  // 227: core.Core.jiLiCancelBet:input_type -> core.JiLiCancelBetReq
	69,  // 228: core.Core.jiLiSessionBet:input_type -> core.JiLiSessionBetReq
	357, // 229: core.Core.jiLiCancelSessionBet:input_type -> core.JiLiCancelSessionBetReq
	135, // 230: core.Core.ObTransfer:input_type -> core.ObTransferReq
	41,  // 231: core.Core.ObCancelTransfer:input_type -> core.ObCancelTransferReq
	35,  // 232: core.Core.PachinkoMoneyTransfer:input_type -> core.PachinkoRequest
	296, // 233: core.Core.PachinkoGetBalance:input_type -> core.PachinkoBalanceRequest
	82,  // 234: core.Core.PgVerifySession:input_type -> core.PgVerifySessionReq
	173, // 235: core.Core.PgCashGet:input_type -> core.PgCashGetReq
	70,  // 236: core.Core.PgCashTransferOut:input_type -> core.PgCashTransferOutReq
	216, // 237: core.Core.PinnaclePing:input_type -> core.PinnaclePingReq
	291, // 238: core.Core.PinnacleGetbalance:input_type -> core.PinnacleGetbalanceReq
	78,  // 239: core.Core.PinnacleDebit:input_type -> core.PinnacleDebitReq
	6,   // 240: core.Core.PinnacleCredit:input_type -> core.PinnacleCreditReq
	337, // 241: core.Core.PinnacleQuery:input_type -> core.PinnacleQueryReq
	297, // 242: core.Core.PinnacleWageringBetted:input_type -> core.PinnacleWageringReq
	297, // 243: core.Core.PinnacleWageringAccepted:input_type -> core.PinnacleWageringReq
	297, // 244: core.Core.PinnacleWageringRollbacked:input_type -> core.PinnacleWageringReq
	297, // 245: core.Core.PinnacleWageringRejected:input_type -> core.PinnacleWageringReq
	297, // 246: core.Core.PinnacleWageringSettled:input_type -> core.PinnacleWageringReq
	297, // 247: core.Core.PinnacleWageringCancelled:input_type -> core.PinnacleWageringReq
	297, // 248: core.Core.PinnacleWageringUnsettled:input_type -> core.PinnacleWageringReq
	221, // 249: core.Core.Auth:input_type -> core.AuthReq
	232, // 250: core.Core.LogOut:input_type -> core.LogOutReq
	371, // 251: core.Core.Bet:input_type -> core.BetReq
	43,  // 252: core.Core.BetResult:input_type -> core.BetResultReq
	100, // 253: core.Core.BetRefund:input_type -> core.BetRefundReq
	65,  // 254: core.Core.Bonus:input_type -> core.BonusReq
	307, // 255: core.Core.GetBalance:input_type -> core.GetBalanceReq
	332, // 256: core.Core.Resultex:input_type -> core.ResultexReq
	101, // 257: core.Core.PpBet:input_type -> core.PpBetReq
	125, // 258: core.Core.PpRefund:input_type -> core.PpRefundReq
	338, // 259: core.Core.PpResult:input_type -> core.PpResultReq
	204, // 260: core.Core.PpBonusWin:input_type -> core.PpBonusWinReq
	104, // 261: core.Core.PpJackpotWin:input_type -> core.PpJackpotWinReq
	175, // 262: core.Core.PpPromoWin:input_type -> core.PpPromoWinReq
	75,  // 263: core.Core.PpAdjustment:input_type -> core.PpAdjustmentReq
	342, // 264: core.Core.sabaGetBalance:input_type -> core.SabaGetBalanceReq
	213, // 265: core.Core.sabaPlaceBet:input_type -> core.SabaPlaceBetReq
	47,  // 266: core.Core.sabaConfirmBet:input_type -> core.SabaConfirmBetReq
	48,  // 267: core.Core.sabaConfirmBet3rd:input_type -> core.SabaConfirmBet3rdReq
	140, // 268: core.Core.sabaCheckMemberOnline:input_type -> core.SabaCheckMemberOnlineReq
	21,  // 269: core.Core.sabaCancelBet:input_type -> core.SabaCancelBetReq
	22,  // 270: core.Core.sabaCancelBetent:input_type -> core.SabaCancelBetentReq
	225, // 271: core.Core.sabaSettle:input_type -> core.SabaSettleReq
	226, // 272: core.Core.sabaSettleent:input_type -> core.SabaSettleentReq
	227, // 273: core.Core.sabaGetTicketInfo:input_type -> core.SabaGetTicketInfoReq
	225, // 274: core.Core.sabaResettle:input_type -> core.SabaSettleReq
	79,  // 275: core.Core.sabaUnsettle:input_type -> core.SabaUnsettleReq
	300, // 276: core.Core.sabaHealthCheck:input_type -> core.SabaHealthCheckReq
	322, // 277: core.Core.sabaAdjustBalance:input_type -> core.SabaAdjustBalanceReq
	181, // 278: core.Core.sabaPlaceBetParlay:input_type -> core.SabaPlaceBetParlayReq
	182, // 279: core.Core.sabaPlace3rdParlay:input_type -> core.SabaPlace3rdParlayReq
	183, // 280: core.Core.SabaPlaceBetent:input_type -> core.SabaPlaceBetentReq
	95,  // 281: core.Core.sabaConfirmBetParlay:input_type -> core.SabaConfirmBetParlayReq
	105, // 282: core.Core.turboProfile:input_type -> core.TurboProfileReq
	289, // 283: core.Core.turboPlace:input_type -> core.TurboBodyReq
	289, // 284: core.Core.turboSettle:input_type -> core.TurboBodyReq
	289, // 285: core.Core.turboCancel:input_type -> core.TurboBodyReq
	146, // 286: core.Core.Debit:input_type -> core.DebitReq
	102, // 287: core.Core.Credit:input_type -> core.CreditReq
	186, // 288: core.Core.Rollback:input_type -> core.RollbackReq
	374, // 289: core.Core.RsaGenerate:input_type -> core.RsaGenerateReq
	376, // 290: core.Core.platLogin:input_type -> core.PlatLoginReq
	378, // 291: core.Core.initGame:input_type -> core.InitGameReq
	380, // 292: core.Core.playGame:input_type -> core.PlayGameReq
	384, // 293: core.Core.playSlotsGame:input_type -> core.PlaySlotsGameReq
	386, // 294: core.Core.playGameResult:input_type -> core.PlayGameResultReq
	388, // 295: core.Core.playGameList:input_type -> core.PlayGameListReq
	393, // 296: core.Core.GameList:input_type -> core.GameListReq
	382, // 297: core.Core.OverGameResult:input_type -> core.OverGameResultReq
	417, // 298: core.Core.SendEMQXTest:input_type -> core.SendEMQXTestReq
	396, // 299: core.Core.ElectronAuthorize:input_type -> core.ElectronAuthorizeReq
	399, // 300: core.Core.ElectronWithdraw:input_type -> core.ElectronWithdrawReq
	402, // 301: core.Core.ElectronDeposit:input_type -> core.ElectronDepositReq
	405, // 302: core.Core.ElectronQueryOrder:input_type -> core.ElectronQueryOrderReq
	408, // 303: core.Core.ElectronUserInfo:input_type -> core.ElectronUserInfoReq
	411, // 304: core.Core.ElectronUserLogout:input_type -> core.ElectronUserLogoutReq
	413, // 305: core.Core.ElectronUserBroadcast:input_type -> core.ElectronUserBroadcastReq
	415, // 306: core.Core.CompetitionRankingRewards:input_type -> core.CompetitionRankingRewardsReq
	419, // 307: core.Core.EgAfbGetBalance:input_type -> core.EgAfbGetBalanceReq
	421, // 308: core.Core.EgAfbBet:input_type -> core.EgAfbBetReq
	423, // 309: core.Core.EgAfbBetPaid:input_type -> core.EgAfbBetPaidReq
	425, // 310: core.Core.EgAfbRefund:input_type -> core.EgAfbRefundReq
	427, // 311: core.Core.EgAfbGameCloseNotify:input_type -> core.EgAfbGameCloseNotifyReq
	429, // 312: core.Core.EgAfbBonusStatusNotify:input_type -> core.EgAfbBonusStatusNotifyReq
	431, // 313: core.Core.EgAfbPaid:input_type -> core.EgAfbPaidReq
	156, // 314: core.Core.AgIntlLivePostTransfer:output_type -> core.LiveTransferResponse
	156, // 315: core.Core.AgIntlEvent:output_type -> core.LiveTransferResponse
	8,   // 316: core.Core.AgQJgetBalance:output_type -> core.AgQJBalanceResponse
	26,  // 317: core.Core.AgQJplayerTransfer:output_type -> core.AgQJPlayerTransferResponse
	360, // 318: core.Core.AgQJgameResult:output_type -> core.AgQJgameResultResponse
	219, // 319: core.Core.AgQJgetCusTrans:output_type -> core.AgQJCusTransResponse
	36,  // 320: core.Core.initDatabase:output_type -> core.BaseResp
	39,  // 321: core.Core.healthZ:output_type -> core.HealthZResp
	142, // 322: core.Core.BetByPing:output_type -> core.BetByPingResponse
	368, // 323: core.Core.BetByBetMake:output_type -> core.BetByBetMakeResponse
	61,  // 324: core.Core.BetByBetSettlement:output_type -> core.BetByBetSettlementResponse
	49,  // 325: core.Core.BetByBetWin:output_type -> core.BetByBetWinResponse
	293, // 326: core.Core.BetByBetLost:output_type -> core.BetLostResponse
	10,  // 327: core.Core.BetByBetDiscard:output_type -> core.BetByBetDiscardResponse
	344, // 328: core.Core.BetByBetRefund:output_type -> core.BetByBetRefundResponse
	96,  // 329: core.Core.BetByBetRollback:output_type -> core.BetByBetRollbackResponse
	90,  // 330: core.Core.BoomingCallback:output_type -> core.BoomingCallbackResp
	15,  // 331: core.Core.Cq9PlayerCheck:output_type -> core.Cq9PlayerCheckRes
	37,  // 332: core.Core.Cq9TransactionBalance:output_type -> core.Cq9TransactionBalanceRes
	340, // 333: core.Core.Cq9Bet:output_type -> core.Cq9BetRes
	76,  // 334: core.Core.Cq9EndRound:output_type -> core.Cq9EndRoundRes
	158, // 335: core.Core.Cq9TakeAll:output_type -> core.Cq9TakeAllRes
	215, // 336: core.Core.Cq9Debit:output_type -> core.Cq9DebitRes
	245, // 337: core.Core.Cq9Credit:output_type -> core.Cq9CreditRes
	40,  // 338: core.Core.Cq9Rollin:output_type -> core.Cq9RollinRes
	133, // 339: core.Core.Cq9Rollout:output_type -> core.Cq9RolloutRes
	361, // 340: core.Core.Cq9Payoff:output_type -> core.Cq9PayoffRes
	16,  // 341: core.Core.Cq9Record:output_type -> core.Cq9RecordRes
	303, // 342: core.Core.Cq9Refund:output_type -> core.Cq9RefundRes
	91,  // 343: core.Core.CrownGenericBet:output_type -> core.CrownGenericResponse
	46,  // 344: core.Core.getElUserInfo:output_type -> core.ElGetUserResp
	148, // 345: core.Core.getElBalance:output_type -> core.ElGetBalanceResp
	148, // 346: core.Core.betEl:output_type -> core.ElGetBalanceResp
	148, // 347: core.Core.winEl:output_type -> core.ElGetBalanceResp
	148, // 348: core.Core.cancelElBet:output_type -> core.ElGetBalanceResp
	137, // 349: core.Core.endingGetBalance:output_type -> core.EndingGetBalanceResp
	159, // 350: core.Core.endingPlaceBet:output_type -> core.EndingPlaceBetResp
	354, // 351: core.Core.endingSettle:output_type -> core.EndingSettleResp
	172, // 352: core.Core.EvoCheck:output_type -> core.EvoResp
	172, // 353: core.Core.EvoBalance:output_type -> core.EvoResp
	172, // 354: core.Core.EvoDebit:output_type -> core.EvoResp
	172, // 355: core.Core.EvoCredit:output_type -> core.EvoResp
	172, // 356: core.Core.EvoCancel:output_type -> core.EvoResp
	172, // 357: core.Core.EvoPromoPayout:output_type -> core.EvoResp
	237, // 358: core.Core.fbsportsBalance:output_type -> core.FbsportsBalanceResp
	97,  // 359: core.Core.fbsportsOrderPay:output_type -> core.FbsportsOrderPayResp
	97,  // 360: core.Core.fbsportsCheckOrderPay:output_type -> core.FbsportsOrderPayResp
	304, // 361: core.Core.fbsportsSyncTransaction:output_type -> core.FbsportsSyncTransactionResp
	315, // 362: core.Core.fbsportsSyncOrders:output_type -> core.FbsportsSyncOrdersResp
	311, // 363: core.Core.fbsportsSyncCashOut:output_type -> core.FbsportsSyncCashOutResp
	369, // 364: core.Core.fbsportsHealth:output_type -> core.FbsportsHealthResp
	249, // 365: core.Core.batchBetMatchMarketOfJumpLine:output_type -> core.BatchBetMatchMarketOfJumpLineResp
	257, // 366: core.Core.BetSinglePass:output_type -> core.BetSinglePassResp
	263, // 367: core.Core.BetMultiple:output_type -> core.BetMultipleResp
	267, // 368: core.Core.FbBetList:output_type -> core.FbBetListResp
	273, // 369: core.Core.FbNewBetList:output_type -> core.FbNewBetListResp
	282, // 370: core.Core.GetStakeOrderStatus:output_type -> core.GetStakeOrderStatusResp
	115, // 371: core.Core.FunkyGetBalance:output_type -> core.FunkyResp
	115, // 372: core.Core.FunkyPlaceBet:output_type -> core.FunkyResp
	115, // 373: core.Core.FunkyBetSettle:output_type -> core.FunkyResp
	115, // 374: core.Core.FunkyCancelBet:output_type -> core.FunkyResp
	115, // 375: core.Core.FunkyCheckBet:output_type -> core.FunkyResp
	85,  // 376: core.Core.HabaPlayerDetail:output_type -> core.HabaPlayerDetailResp
	324, // 377: core.Core.HabaTx:output_type -> core.HabaFundTxResp
	324, // 378: core.Core.HabaQuery:output_type -> core.HabaFundTxResp
	38,  // 379: core.Core.HabaPlayerEndSession:output_type -> core.HabaEmpty
	324, // 380: core.Core.HabaAltFunds:output_type -> core.HabaFundTxResp
	93,  // 381: core.Core.RtgGetBalance:output_type -> core.RtgResp
	93,  // 382: core.Core.RtgPlaceBet:output_type -> core.RtgResp
	93,  // 383: core.Core.RtgSettlement:output_type -> core.RtgResp
	93,  // 384: core.Core.RtgCancelBet:output_type -> core.RtgResp
	162, // 385: core.Core.tpgGetBalance:output_type -> core.TpgResp
	162, // 386: core.Core.tpgDeduction:output_type -> core.TpgResp
	162, // 387: core.Core.tpgPayout:output_type -> core.TpgResp
	162, // 388: core.Core.tpgRollback:output_type -> core.TpgResp
	162, // 389: core.Core.tpgDeductAndPayout:output_type -> core.TpgResp
	162, // 390: core.Core.tpgBatchDeduction:output_type -> core.TpgResp
	121, // 391: core.Core.JdbCallback:output_type -> core.JdbRsp
	103, // 392: core.Core.jiLiAuth:output_type -> core.JiLiAuthResp
	320, // 393: core.Core.jiLiBet:output_type -> core.JiLiBetResp
	330, // 394: core.Core.jiLiCancelBet:output_type -> core.JiLiCancelBetResp
	123, // 395: core.Core.jiLiSessionBet:output_type -> core.JiLiSessionBetResp
	111, // 396: core.Core.jiLiCancelSessionBet:output_type -> core.JiLiCancelSessionBetResp
	129, // 397: core.Core.ObTransfer:output_type -> core.ObResp
	129, // 398: core.Core.ObCancelTransfer:output_type -> core.ObResp
	138, // 399: core.Core.PachinkoMoneyTransfer:output_type -> core.PachinkoTransferResponse
	19,  // 400: core.Core.PachinkoGetBalance:output_type -> core.PachinkoBalanceResponse
	124, // 401: core.Core.PgVerifySession:output_type -> core.PgVerifySessionResp
	155, // 402: core.Core.PgCashGet:output_type -> core.PgCashGetResp
	313, // 403: core.Core.PgCashTransferOut:output_type -> core.PgCashTransferOutResp
	112, // 404: core.Core.PinnaclePing:output_type -> core.PinnaclePingRsp
	358, // 405: core.Core.PinnacleGetbalance:output_type -> core.PinnacleGetbalanceRsp
	94,  // 406: core.Core.PinnacleDebit:output_type -> core.PinnacleDebitRsp
	292, // 407: core.Core.PinnacleCredit:output_type -> core.PinnacleCreditRsp
	347, // 408: core.Core.PinnacleQuery:output_type -> core.PinnacleQueryRsp
	163, // 409: core.Core.PinnacleWageringBetted:output_type -> core.PinnacleWageringRsp
	163, // 410: core.Core.PinnacleWageringAccepted:output_type -> core.PinnacleWageringRsp
	163, // 411: core.Core.PinnacleWageringRollbacked:output_type -> core.PinnacleWageringRsp
	163, // 412: core.Core.PinnacleWageringRejected:output_type -> core.PinnacleWageringRsp
	163, // 413: core.Core.PinnacleWageringSettled:output_type -> core.PinnacleWageringRsp
	163, // 414: core.Core.PinnacleWageringCancelled:output_type -> core.PinnacleWageringRsp
	163, // 415: core.Core.PinnacleWageringUnsettled:output_type -> core.PinnacleWageringRsp
	42,  // 416: core.Core.Auth:output_type -> core.AuthRes
	117, // 417: core.Core.LogOut:output_type -> core.LogOutRes
	191, // 418: core.Core.Bet:output_type -> core.BetRes
	317, // 419: core.Core.BetResult:output_type -> core.BetResultRes
	348, // 420: core.Core.BetRefund:output_type -> core.BetRefundRes
	331, // 421: core.Core.Bonus:output_type -> core.BonusRes
	240, // 422: core.Core.GetBalance:output_type -> core.GetBalanceRes
	332, // 423: core.Core.Resultex:output_type -> core.ResultexReq
	164, // 424: core.Core.PpBet:output_type -> core.PpBetResp
	199, // 425: core.Core.PpRefund:output_type -> core.PpRefundResp
	20,  // 426: core.Core.PpResult:output_type -> core.PpResultResp
	205, // 427: core.Core.PpBonusWin:output_type -> core.PpBonusWinResp
	145, // 428: core.Core.PpJackpotWin:output_type -> core.PpJackpotWinResp
	74,  // 429: core.Core.PpPromoWin:output_type -> core.PpPromoWinResp
	205, // 430: core.Core.PpAdjustment:output_type -> core.PpBonusWinResp
	217, // 431: core.Core.sabaGetBalance:output_type -> core.SabaGetBalanceResp
	29,  // 432: core.Core.sabaPlaceBet:output_type -> core.SabaPlaceBetResp
	179, // 433: core.Core.sabaConfirmBet:output_type -> core.SabaConfirmBetResp
	180, // 434: core.Core.sabaConfirmBet3rd:output_type -> core.SabaConfirmBet3rdResp
	53,  // 435: core.Core.sabaCheckMemberOnline:output_type -> core.SabaCheckMemberOnlineResp
	321, // 436: core.Core.sabaCancelBet:output_type -> core.SabaCancelBetResp
	23,  // 437: core.Core.sabaCancelBetent:output_type -> core.SabaCancelBetentResp
	12,  // 438: core.Core.sabaSettle:output_type -> core.SabaSettleResp
	13,  // 439: core.Core.sabaSettleent:output_type -> core.SabaSettleentResp
	14,  // 440: core.Core.sabaGetTicketInfo:output_type -> core.SabaGetTicketInfoResp
	12,  // 441: core.Core.sabaResettle:output_type -> core.SabaSettleResp
	229, // 442: core.Core.sabaUnsettle:output_type -> core.SabaUnsettleResp
	71,  // 443: core.Core.sabaHealthCheck:output_type -> core.SabaHealthCheckResp
	367, // 444: core.Core.sabaAdjustBalance:output_type -> core.SabaAdjustBalanceResp
	55,  // 445: core.Core.sabaPlaceBetParlay:output_type -> core.SabaPlaceBetParlayResp
	56,  // 446: core.Core.sabaPlace3rdParlay:output_type -> core.SabaPlace3rdParlayResp
	57,  // 447: core.Core.SabaPlaceBetent:output_type -> core.SabaPlaceBetentResp
	359, // 448: core.Core.sabaConfirmBetParlay:output_type -> core.SabaConfirmBetParlayResp
	343, // 449: core.Core.turboProfile:output_type -> core.TurboProfileResp
	349, // 450: core.Core.turboPlace:output_type -> core.TurboPlaceResp
	308, // 451: core.Core.turboSettle:output_type -> core.TurboSettleResp
	372, // 452: core.Core.turboCancel:output_type -> core.TurboCancelResp
	318, // 453: core.Core.Debit:output_type -> core.DebitResp
	327, // 454: core.Core.Credit:output_type -> core.CreditResp
	88,  // 455: core.Core.Rollback:output_type -> core.RollbackResp
	375, // 456: core.Core.RsaGenerate:output_type -> core.RsaGenerateResp
	377, // 457: core.Core.platLogin:output_type -> core.PlatLoginResp
	379, // 458: core.Core.initGame:output_type -> core.InitGameResp
	381, // 459: core.Core.playGame:output_type -> core.PlayGameResp
	385, // 460: core.Core.playSlotsGame:output_type -> core.PlaySlotsGameResp
	387, // 461: core.Core.playGameResult:output_type -> core.PlayGameResultResp
	390, // 462: core.Core.playGameList:output_type -> core.PlayGameListResp
	394, // 463: core.Core.GameList:output_type -> core.GameListResp
	383, // 464: core.Core.OverGameResult:output_type -> core.OverGameResultResp
	418, // 465: core.Core.SendEMQXTest:output_type -> core.SendEMQXTestResp
	397, // 466: core.Core.ElectronAuthorize:output_type -> core.ElectronAuthorizeResp
	400, // 467: core.Core.ElectronWithdraw:output_type -> core.ElectronWithdrawResp
	403, // 468: core.Core.ElectronDeposit:output_type -> core.ElectronDepositResp
	406, // 469: core.Core.ElectronQueryOrder:output_type -> core.ElectronQueryOrderResp
	409, // 470: core.Core.ElectronUserInfo:output_type -> core.ElectronUserInfoResp
	412, // 471: core.Core.ElectronUserLogout:output_type -> core.ElectronUserLogoutResp
	414, // 472: core.Core.ElectronUserBroadcast:output_type -> core.ElectronUserBroadcastResp
	416, // 473: core.Core.CompetitionRankingRewards:output_type -> core.CompetitionRankingRewardsResp
	420, // 474: core.Core.EgAfbGetBalance:output_type -> core.EgAfbGetBalanceResp
	422, // 475: core.Core.EgAfbBet:output_type -> core.EgAfbBetResp
	424, // 476: core.Core.EgAfbBetPaid:output_type -> core.EgAfbBetPaidResp
	426, // 477: core.Core.EgAfbRefund:output_type -> core.EgAfbRefundResp
	428, // 478: core.Core.EgAfbGameCloseNotify:output_type -> core.EgAfbGameCloseNotifyResp
	430, // 479: core.Core.EgAfbBonusStatusNotify:output_type -> core.EgAfbBonusStatusNotifyResp
	432, // 480: core.Core.EgAfbPaid:output_type -> core.EgAfbPaidResp
	314, // [314:481] is the sub-list for method output_type
	147, // [147:314] is the sub-list for method input_type
	147, // [147:147] is the sub-list for extension type_name
	147, // [147:147] is the sub-list for extension extendee
	0,   // [0:147] is the sub-list for field type_name
}

func init() { file_core_proto_init() }
func file_core_proto_init() {
	if File_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJCusTransRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMakeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetWinTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtgGetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleCreditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResulttexRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetDiscardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaSettleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaSettleentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaGetTicketInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9PlayerCheckRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiCancelBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PachinkoBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCancelBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCancelBetentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCancelBetentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCancelBetentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgIntlEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJPlayerTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBetTxns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSettleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJPlayerTransferBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaFundinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PachinkoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9TransactionBalanceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthZResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RollinRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObCancelTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElGetUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBet3RdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetWinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9CreditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaFunds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCheckMemberOnlineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleCreditRspAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetParlayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlace3RdParlayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetentTicketListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place3RdParlayTxnsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgIntelEventItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetSettlementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9TransactionBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsOrderPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9TakeAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiSessionBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgCashTransferOutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaHealthCheckResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetParlayDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetRefundTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpPromoWinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpAdjustmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9EndRoundRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleDebitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaUnsettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtgSettlementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgVerifySessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleQueryRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetLostError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaPlayerDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleDebitAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleQueryRspTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoomingCallbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrownGenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyBetSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleDebitRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBetParlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetRollbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsOrderPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleGetbalanceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiAuthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpJackpotWinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurboProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJPlayerTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrownGenericData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaQueryrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiAuthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiCancelSessionBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnaclePingRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9DebitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleWageringRspActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogOutRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceConfirmBetParlayTicketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetLostSelections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9EndRoundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JdbRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetDiscardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiSessionBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgVerifySessionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpRefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustBalanceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtgCancelBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleTxns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSettleTxns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetLostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RolloutRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyPlaceBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9PlayerCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndingGetBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PachinkoTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleCreditReqAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCheckMemberOnlineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaPlayerdetailresponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpJackpotWinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetRollbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElGetBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoMainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaPlayerdetailrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PachinkoValueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoGameDetailsTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleDebitRspAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgCashGetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRefundTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9TakeAllRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndingPlaceBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyPlaceBetReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaBonusdetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleWageringRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JdbData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJCusTransBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RolloutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrownGenericWagerdataresp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndingSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoGameDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgCashGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleDebitTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpPromoWinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivePostTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaTournamentdetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleDebitRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBet3RdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetParlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlace3RdParlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetentMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetentListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJBalanceBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetMakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElGetUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaFundtransferresponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUUIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRefundError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoPromoTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsSyncOrdersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaPlayerEndSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaAltFundsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleCreditReqTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpRefundResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetParlayTxns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RollinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpBonusWinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpBonusWinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBetTxnsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceConfirmBetParlayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetslip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetSettlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9PayoffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaFundtransferrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaGetBalanceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9DebitRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnaclePingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaGetBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustBalanceBalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJCusTransResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoomingCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJPlayerTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaGamedetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaSettleentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaGetTicketInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaGetTicketInfoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaUnsettleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoPromoPayoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogOutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivePostTransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJgetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetWinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaRefund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaFundTxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBet3RdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBet3RdTxns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJgameResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9CreditRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsHealthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBetMatchMarketOfJumpLineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMatchMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBetMatchMarketOfJumpLineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBetMatchMarketOfJumpLineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBetMatchMarketOfJumpLineDataBetMatchMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetCombination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSinglePassReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSinglePassList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSinglePassListOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSinglePassResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMatchOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMatchOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMultipleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMultipleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetOptionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetMultipleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetOptionMatchOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetOptionMatchOrderOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbBetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbBetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbBetListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbBetListRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbBetListRecordOps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbBetListRecordOpsTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListSts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListRecordOps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListRecordOpsMc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListRecordOpsTe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbNewBetListRecordSts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeOrderStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeOrderStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeOrderStatusOrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaPlayerendsessionrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetParlayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place3RdParlayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place3RdParlayTicketListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place3RdParlayTicketListExtraMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurboBodyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleGetbalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleCreditRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetLostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyCancelBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaBasegame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PachinkoBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleWageringReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrownGenericRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetParlayTxnsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaHealthCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivePostTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9RefundRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsSyncTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsSyncCashOutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleWageringRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurboSettleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJgameResultBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetLostTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsSyncCashOutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtgPlaceBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgCashTransferOutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRollbackTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsSyncOrdersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyGetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetResultRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaPlayerDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaCancelBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaAdjustBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgIntelEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaFundTxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsSyncTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElWinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiCancelBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetParlayTicketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndingPlaceBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaAltfundsrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PpResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceConfirmBetParlayTxns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9BetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsOrderSyncDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaGetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurboProfileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PachinkoBalanceValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleQueryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRefundRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurboPlaceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndingGetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnaclePingRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaPlaceBetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetWinError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndingSettleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HabaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JdbReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiLiCancelSessionBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleGetbalanceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaConfirmBetParlayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgQJgameResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9PayoffRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvoJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnacleCreditRspResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cq9BetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyBetSettleReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SabaAdjustBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetByBetMakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbsportsHealthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunkyCheckBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurboCancelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsaGenerateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsaGenerateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitGameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverGameResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverGameResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySlotsGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySlotsGameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameListDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayGameSingleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameListDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronAuthorizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronAuthorizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronWithdrawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronDepositReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronDepositResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronQueryOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronQueryOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronUserLogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronUserLogoutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronUserBroadcastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectronUserBroadcastResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionRankingRewardsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionRankingRewardsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEMQXTestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEMQXTestResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbGetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbGetBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbBetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbBetPaidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbBetPaidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbRefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbRefundResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbGameCloseNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbGameCloseNotifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbBonusStatusNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbBonusStatusNotifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbPaidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgAfbPaidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   432,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_proto_goTypes,
		DependencyIndexes: file_core_proto_depIdxs,
		EnumInfos:         file_core_proto_enumTypes,
		MessageInfos:      file_core_proto_msgTypes,
	}.Build()
	File_core_proto = out.File
	file_core_proto_rawDesc = nil
	file_core_proto_goTypes = nil
	file_core_proto_depIdxs = nil
}
