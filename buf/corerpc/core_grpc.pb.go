// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Core_AgIntlLivePostTransfer_FullMethodName        = "/core.Core/AgIntlLivePostTransfer"
	Core_AgIntlEvent_FullMethodName                   = "/core.Core/AgIntlEvent"
	Core_AgQJgetBalance_FullMethodName                = "/core.Core/AgQJgetBalance"
	Core_AgQJplayerTransfer_FullMethodName            = "/core.Core/AgQJplayerTransfer"
	Core_AgQJgameResult_FullMethodName                = "/core.Core/AgQJgameResult"
	Core_AgQJgetCusTrans_FullMethodName               = "/core.Core/AgQJgetCusTrans"
	Core_InitDatabase_FullMethodName                  = "/core.Core/initDatabase"
	Core_HealthZ_FullMethodName                       = "/core.Core/healthZ"
	Core_BetByPing_FullMethodName                     = "/core.Core/BetByPing"
	Core_BetByBetMake_FullMethodName                  = "/core.Core/BetByBetMake"
	Core_BetByBetSettlement_FullMethodName            = "/core.Core/BetByBetSettlement"
	Core_BetByBetWin_FullMethodName                   = "/core.Core/BetByBetWin"
	Core_BetByBetLost_FullMethodName                  = "/core.Core/BetByBetLost"
	Core_BetByBetDiscard_FullMethodName               = "/core.Core/BetByBetDiscard"
	Core_BetByBetRefund_FullMethodName                = "/core.Core/BetByBetRefund"
	Core_BetByBetRollback_FullMethodName              = "/core.Core/BetByBetRollback"
	Core_BoomingCallback_FullMethodName               = "/core.Core/BoomingCallback"
	Core_Cq9PlayerCheck_FullMethodName                = "/core.Core/Cq9PlayerCheck"
	Core_Cq9TransactionBalance_FullMethodName         = "/core.Core/Cq9TransactionBalance"
	Core_Cq9Bet_FullMethodName                        = "/core.Core/Cq9Bet"
	Core_Cq9EndRound_FullMethodName                   = "/core.Core/Cq9EndRound"
	Core_Cq9TakeAll_FullMethodName                    = "/core.Core/Cq9TakeAll"
	Core_Cq9Debit_FullMethodName                      = "/core.Core/Cq9Debit"
	Core_Cq9Credit_FullMethodName                     = "/core.Core/Cq9Credit"
	Core_Cq9Rollin_FullMethodName                     = "/core.Core/Cq9Rollin"
	Core_Cq9Rollout_FullMethodName                    = "/core.Core/Cq9Rollout"
	Core_Cq9Payoff_FullMethodName                     = "/core.Core/Cq9Payoff"
	Core_Cq9Record_FullMethodName                     = "/core.Core/Cq9Record"
	Core_Cq9Refund_FullMethodName                     = "/core.Core/Cq9Refund"
	Core_CrownGenericBet_FullMethodName               = "/core.Core/CrownGenericBet"
	Core_GetElUserInfo_FullMethodName                 = "/core.Core/getElUserInfo"
	Core_GetElBalance_FullMethodName                  = "/core.Core/getElBalance"
	Core_BetEl_FullMethodName                         = "/core.Core/betEl"
	Core_WinEl_FullMethodName                         = "/core.Core/winEl"
	Core_CancelElBet_FullMethodName                   = "/core.Core/cancelElBet"
	Core_EndingGetBalance_FullMethodName              = "/core.Core/endingGetBalance"
	Core_EndingPlaceBet_FullMethodName                = "/core.Core/endingPlaceBet"
	Core_EndingSettle_FullMethodName                  = "/core.Core/endingSettle"
	Core_EvoCheck_FullMethodName                      = "/core.Core/EvoCheck"
	Core_EvoBalance_FullMethodName                    = "/core.Core/EvoBalance"
	Core_EvoDebit_FullMethodName                      = "/core.Core/EvoDebit"
	Core_EvoCredit_FullMethodName                     = "/core.Core/EvoCredit"
	Core_EvoCancel_FullMethodName                     = "/core.Core/EvoCancel"
	Core_EvoPromoPayout_FullMethodName                = "/core.Core/EvoPromoPayout"
	Core_FbsportsBalance_FullMethodName               = "/core.Core/fbsportsBalance"
	Core_FbsportsOrderPay_FullMethodName              = "/core.Core/fbsportsOrderPay"
	Core_FbsportsCheckOrderPay_FullMethodName         = "/core.Core/fbsportsCheckOrderPay"
	Core_FbsportsSyncTransaction_FullMethodName       = "/core.Core/fbsportsSyncTransaction"
	Core_FbsportsSyncOrders_FullMethodName            = "/core.Core/fbsportsSyncOrders"
	Core_FbsportsSyncCashOut_FullMethodName           = "/core.Core/fbsportsSyncCashOut"
	Core_FbsportsHealth_FullMethodName                = "/core.Core/fbsportsHealth"
	Core_BatchBetMatchMarketOfJumpLine_FullMethodName = "/core.Core/batchBetMatchMarketOfJumpLine"
	Core_BetSinglePass_FullMethodName                 = "/core.Core/BetSinglePass"
	Core_BetMultiple_FullMethodName                   = "/core.Core/BetMultiple"
	Core_FbBetList_FullMethodName                     = "/core.Core/FbBetList"
	Core_FbNewBetList_FullMethodName                  = "/core.Core/FbNewBetList"
	Core_GetStakeOrderStatus_FullMethodName           = "/core.Core/GetStakeOrderStatus"
	Core_FunkyGetBalance_FullMethodName               = "/core.Core/FunkyGetBalance"
	Core_FunkyPlaceBet_FullMethodName                 = "/core.Core/FunkyPlaceBet"
	Core_FunkyBetSettle_FullMethodName                = "/core.Core/FunkyBetSettle"
	Core_FunkyCancelBet_FullMethodName                = "/core.Core/FunkyCancelBet"
	Core_FunkyCheckBet_FullMethodName                 = "/core.Core/FunkyCheckBet"
	Core_HabaPlayerDetail_FullMethodName              = "/core.Core/HabaPlayerDetail"
	Core_HabaTx_FullMethodName                        = "/core.Core/HabaTx"
	Core_HabaQuery_FullMethodName                     = "/core.Core/HabaQuery"
	Core_HabaPlayerEndSession_FullMethodName          = "/core.Core/HabaPlayerEndSession"
	Core_HabaAltFunds_FullMethodName                  = "/core.Core/HabaAltFunds"
	Core_RtgGetBalance_FullMethodName                 = "/core.Core/RtgGetBalance"
	Core_RtgPlaceBet_FullMethodName                   = "/core.Core/RtgPlaceBet"
	Core_RtgSettlement_FullMethodName                 = "/core.Core/RtgSettlement"
	Core_RtgCancelBet_FullMethodName                  = "/core.Core/RtgCancelBet"
	Core_TpgGetBalance_FullMethodName                 = "/core.Core/tpgGetBalance"
	Core_TpgDeduction_FullMethodName                  = "/core.Core/tpgDeduction"
	Core_TpgPayout_FullMethodName                     = "/core.Core/tpgPayout"
	Core_TpgRollback_FullMethodName                   = "/core.Core/tpgRollback"
	Core_TpgDeductAndPayout_FullMethodName            = "/core.Core/tpgDeductAndPayout"
	Core_TpgBatchDeduction_FullMethodName             = "/core.Core/tpgBatchDeduction"
	Core_JdbCallback_FullMethodName                   = "/core.Core/JdbCallback"
	Core_JiLiAuth_FullMethodName                      = "/core.Core/jiLiAuth"
	Core_JiLiBet_FullMethodName                       = "/core.Core/jiLiBet"
	Core_JiLiCancelBet_FullMethodName                 = "/core.Core/jiLiCancelBet"
	Core_JiLiSessionBet_FullMethodName                = "/core.Core/jiLiSessionBet"
	Core_JiLiCancelSessionBet_FullMethodName          = "/core.Core/jiLiCancelSessionBet"
	Core_ObTransfer_FullMethodName                    = "/core.Core/ObTransfer"
	Core_ObCancelTransfer_FullMethodName              = "/core.Core/ObCancelTransfer"
	Core_PachinkoMoneyTransfer_FullMethodName         = "/core.Core/PachinkoMoneyTransfer"
	Core_PachinkoGetBalance_FullMethodName            = "/core.Core/PachinkoGetBalance"
	Core_PgVerifySession_FullMethodName               = "/core.Core/PgVerifySession"
	Core_PgCashGet_FullMethodName                     = "/core.Core/PgCashGet"
	Core_PgCashTransferOut_FullMethodName             = "/core.Core/PgCashTransferOut"
	Core_PinnaclePing_FullMethodName                  = "/core.Core/PinnaclePing"
	Core_PinnacleGetbalance_FullMethodName            = "/core.Core/PinnacleGetbalance"
	Core_PinnacleDebit_FullMethodName                 = "/core.Core/PinnacleDebit"
	Core_PinnacleCredit_FullMethodName                = "/core.Core/PinnacleCredit"
	Core_PinnacleQuery_FullMethodName                 = "/core.Core/PinnacleQuery"
	Core_PinnacleWageringBetted_FullMethodName        = "/core.Core/PinnacleWageringBetted"
	Core_PinnacleWageringAccepted_FullMethodName      = "/core.Core/PinnacleWageringAccepted"
	Core_PinnacleWageringRollbacked_FullMethodName    = "/core.Core/PinnacleWageringRollbacked"
	Core_PinnacleWageringRejected_FullMethodName      = "/core.Core/PinnacleWageringRejected"
	Core_PinnacleWageringSettled_FullMethodName       = "/core.Core/PinnacleWageringSettled"
	Core_PinnacleWageringCancelled_FullMethodName     = "/core.Core/PinnacleWageringCancelled"
	Core_PinnacleWageringUnsettled_FullMethodName     = "/core.Core/PinnacleWageringUnsettled"
	Core_Auth_FullMethodName                          = "/core.Core/Auth"
	Core_LogOut_FullMethodName                        = "/core.Core/LogOut"
	Core_Bet_FullMethodName                           = "/core.Core/Bet"
	Core_BetResult_FullMethodName                     = "/core.Core/BetResult"
	Core_BetRefund_FullMethodName                     = "/core.Core/BetRefund"
	Core_Bonus_FullMethodName                         = "/core.Core/Bonus"
	Core_GetBalance_FullMethodName                    = "/core.Core/GetBalance"
	Core_Resultex_FullMethodName                      = "/core.Core/Resultex"
	Core_PpBet_FullMethodName                         = "/core.Core/PpBet"
	Core_PpRefund_FullMethodName                      = "/core.Core/PpRefund"
	Core_PpResult_FullMethodName                      = "/core.Core/PpResult"
	Core_PpBonusWin_FullMethodName                    = "/core.Core/PpBonusWin"
	Core_PpJackpotWin_FullMethodName                  = "/core.Core/PpJackpotWin"
	Core_PpPromoWin_FullMethodName                    = "/core.Core/PpPromoWin"
	Core_PpAdjustment_FullMethodName                  = "/core.Core/PpAdjustment"
	Core_SabaGetBalance_FullMethodName                = "/core.Core/sabaGetBalance"
	Core_SabaPlaceBet_FullMethodName                  = "/core.Core/sabaPlaceBet"
	Core_SabaConfirmBet_FullMethodName                = "/core.Core/sabaConfirmBet"
	Core_SabaConfirmBet3Rd_FullMethodName             = "/core.Core/sabaConfirmBet3rd"
	Core_SabaCheckMemberOnline_FullMethodName         = "/core.Core/sabaCheckMemberOnline"
	Core_SabaCancelBet_FullMethodName                 = "/core.Core/sabaCancelBet"
	Core_SabaCancelBetent_FullMethodName              = "/core.Core/sabaCancelBetent"
	Core_SabaSettle_FullMethodName                    = "/core.Core/sabaSettle"
	Core_SabaSettleent_FullMethodName                 = "/core.Core/sabaSettleent"
	Core_SabaGetTicketInfo_FullMethodName             = "/core.Core/sabaGetTicketInfo"
	Core_SabaResettle_FullMethodName                  = "/core.Core/sabaResettle"
	Core_SabaUnsettle_FullMethodName                  = "/core.Core/sabaUnsettle"
	Core_SabaHealthCheck_FullMethodName               = "/core.Core/sabaHealthCheck"
	Core_SabaAdjustBalance_FullMethodName             = "/core.Core/sabaAdjustBalance"
	Core_SabaPlaceBetParlay_FullMethodName            = "/core.Core/sabaPlaceBetParlay"
	Core_SabaPlace3RdParlay_FullMethodName            = "/core.Core/sabaPlace3rdParlay"
	Core_SabaPlaceBetent_FullMethodName               = "/core.Core/SabaPlaceBetent"
	Core_SabaConfirmBetParlay_FullMethodName          = "/core.Core/sabaConfirmBetParlay"
	Core_TurboProfile_FullMethodName                  = "/core.Core/turboProfile"
	Core_TurboPlace_FullMethodName                    = "/core.Core/turboPlace"
	Core_TurboSettle_FullMethodName                   = "/core.Core/turboSettle"
	Core_TurboCancel_FullMethodName                   = "/core.Core/turboCancel"
	Core_Debit_FullMethodName                         = "/core.Core/Debit"
	Core_Credit_FullMethodName                        = "/core.Core/Credit"
	Core_Rollback_FullMethodName                      = "/core.Core/Rollback"
	Core_RsaGenerate_FullMethodName                   = "/core.Core/RsaGenerate"
	Core_PlatLogin_FullMethodName                     = "/core.Core/platLogin"
	Core_InitGame_FullMethodName                      = "/core.Core/initGame"
	Core_PlayGame_FullMethodName                      = "/core.Core/playGame"
	Core_PlaySlotsGame_FullMethodName                 = "/core.Core/playSlotsGame"
	Core_PlayGameResult_FullMethodName                = "/core.Core/playGameResult"
	Core_PlayGameList_FullMethodName                  = "/core.Core/playGameList"
	Core_GameList_FullMethodName                      = "/core.Core/GameList"
	Core_OverGameResult_FullMethodName                = "/core.Core/OverGameResult"
	Core_SendEMQXTest_FullMethodName                  = "/core.Core/SendEMQXTest"
	Core_ElectronAuthorize_FullMethodName             = "/core.Core/ElectronAuthorize"
	Core_ElectronWithdraw_FullMethodName              = "/core.Core/ElectronWithdraw"
	Core_ElectronDeposit_FullMethodName               = "/core.Core/ElectronDeposit"
	Core_ElectronQueryOrder_FullMethodName            = "/core.Core/ElectronQueryOrder"
	Core_ElectronUserInfo_FullMethodName              = "/core.Core/ElectronUserInfo"
	Core_ElectronUserLogout_FullMethodName            = "/core.Core/ElectronUserLogout"
	Core_ElectronUserBroadcast_FullMethodName         = "/core.Core/ElectronUserBroadcast"
	Core_CompetitionRankingRewards_FullMethodName     = "/core.Core/CompetitionRankingRewards"
	Core_EgAfbGetBalance_FullMethodName               = "/core.Core/EgAfbGetBalance"
	Core_EgAfbBet_FullMethodName                      = "/core.Core/EgAfbBet"
)

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	// group: agintl
	AgIntlLivePostTransfer(ctx context.Context, in *LivePostTransfer, opts ...grpc.CallOption) (*LiveTransferResponse, error)
	// group: agintl
	AgIntlEvent(ctx context.Context, in *AgIntlEventRequest, opts ...grpc.CallOption) (*LiveTransferResponse, error)
	// group: agqj
	// application/json;charset=UTF-8
	AgQJgetBalance(ctx context.Context, in *AgQJgetBalanceRequest, opts ...grpc.CallOption) (*AgQJBalanceResponse, error)
	// group: agqj
	AgQJplayerTransfer(ctx context.Context, in *AgQJPlayerTransferRequest, opts ...grpc.CallOption) (*AgQJPlayerTransferResponse, error)
	// group: agqj
	AgQJgameResult(ctx context.Context, in *AgQJgameResultRequest, opts ...grpc.CallOption) (*AgQJgameResultResponse, error)
	// group: agqj
	AgQJgetCusTrans(ctx context.Context, in *AgQJCusTransRequest, opts ...grpc.CallOption) (*AgQJCusTransResponse, error)
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// group: base
	HealthZ(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthZResp, error)
	// 此方法用于验证合作伙伴平台提供的应用程序接口是否可用。
	// 在合作伙伴平台运行正常的情况下，Betby 将按照描述的格式返回响应 200
	// group: betby
	BetByPing(ctx context.Context, in *BetByPingRequest, opts ...grpc.CallOption) (*BetByPingResponse, error)
	// 该方法在玩家下注时使用。
	// 合作伙伴应处理以下请求，并提供描述格式的响应。
	// group: betby
	// lock:Transaction.Id:zero-platend-rpc-game-betby-make:2
	BetByBetMake(ctx context.Context, in *BetByBetMakeRequest, opts ...grpc.CallOption) (*BetByBetMakeResponse, error)
	// 该请求用于通知合作伙伴投注已结束。
	// 在 BET_WIN（LOST、REFUND）请求发出后，请求将延迟 30 天发出。在此期间，可以发送回滚请求。
	// group: betby
	BetByBetSettlement(ctx context.Context, in *BetByBetSettlementRequest, opts ...grpc.CallOption) (*BetByBetSettlementResponse, error)
	// 当玩家在投注计算完成后，应收到一定金额的余额时，Betby 会发出该请求。
	// 投注状态可以是赢钱、提现、半赢、半输、退款）。
	// 合作伙伴必须执行下面描述的响应。
	// group: betby
	// lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetWin(ctx context.Context, in *BetWinRequest, opts ...grpc.CallOption) (*BetByBetWinResponse, error)
	// 当玩家投注输掉时，Betby 会发出请求，交易金额始终为 0。
	// 合作伙伴必须按下文所述执行响应。
	// group: betby
	// lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetLost(ctx context.Context, in *BetByBetLostRequest, opts ...grpc.CallOption) (*BetLostResponse, error)
	//	该方法在投注过程失败时触发。
	//	目前，导致使用此方法的主要原因有两个：
	//	连接丢失或结果不理想（投注被风险管理系统拒绝或任何其他内部原因）。
	//	如果合作伙伴已经处理了投注交易，则投注金额应返回用户余额。
	//
	// NB. 有两种情况可能导致连接中断。
	// 1.BET_MAKE（投注）请求尚未转给合作伙伴。
	//  2. 合作伙伴的响应还没有传送到 Betby。
	//     在这两种情况下，Betby 都在等待合作伙伴的回复 200。
	//     请注意，在第一种情况下，无法在 BET_DISCARD 请求中找到交易 ID。
	//     在第一种情况下，由于合作伙伴没有收到 BET_MAKE 请求，因此无法在合作伙伴端找到 BET_DISCARD 请求中提供的交易 ID。
	//     group: betby
	//     lock:TransactionId:zero-platend-rpc-game-betby-make:2
	BetByBetDiscard(ctx context.Context, in *BetByBetDiscardRequest, opts ...grpc.CallOption) (*BetByBetDiscardResponse, error)
	// group: betby
	// 如果投注已取消，则使用此请求。合作伙伴必须执行下面所述的 "响应"。
	// lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetRefund(ctx context.Context, in *BetByBetRefundRequest, opts ...grpc.CallOption) (*BetByBetRefundResponse, error)
	//	该请求用于 Betby 进行投注回滚。回滚发生在投注最初以一种方式结算、
	//	但随后（可能是几分钟后，有时甚至是几天后）结果发生变化，投注以不同的方式结算。
	//	投注回滚意味着投注状态会变为之前的投注状态（未结），然后可以以相反的方式结算。
	//	要注意的是，当玩家之前获得的资金不再可用时、
	//	不再可用。在这种情况下有几种操作方法。
	//  1. 玩家的余额为负数。
	//  2. 余额显示为 0。合作伙伴系统向经理发出用户欠款警报。
	//     group: betby
	//     lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetRollback(ctx context.Context, in *BetByBetRollbackRequest, opts ...grpc.CallOption) (*BetByBetRollbackResponse, error)
	// group:booming
	BoomingCallback(ctx context.Context, in *BoomingCallbackReq, opts ...grpc.CallOption) (*BoomingCallbackResp, error)
	// group:Cq9
	Cq9PlayerCheck(ctx context.Context, in *Cq9PlayerCheckReq, opts ...grpc.CallOption) (*Cq9PlayerCheckRes, error)
	// group:Cq9
	Cq9TransactionBalance(ctx context.Context, in *Cq9TransactionBalanceReq, opts ...grpc.CallOption) (*Cq9TransactionBalanceRes, error)
	// group:Cq9
	Cq9Bet(ctx context.Context, in *Cq9BetReq, opts ...grpc.CallOption) (*Cq9BetRes, error)
	// group:Cq9
	Cq9EndRound(ctx context.Context, in *Cq9EndRoundReq, opts ...grpc.CallOption) (*Cq9EndRoundRes, error)
	// group:Cq9
	Cq9TakeAll(ctx context.Context, in *Cq9TakeAllReq, opts ...grpc.CallOption) (*Cq9TakeAllRes, error)
	// group:Cq9
	Cq9Debit(ctx context.Context, in *Cq9DebitReq, opts ...grpc.CallOption) (*Cq9DebitRes, error)
	// group:Cq9
	Cq9Credit(ctx context.Context, in *Cq9CreditReq, opts ...grpc.CallOption) (*Cq9CreditRes, error)
	// group:Cq9
	Cq9Rollin(ctx context.Context, in *Cq9RollinReq, opts ...grpc.CallOption) (*Cq9RollinRes, error)
	// group:Cq9
	Cq9Rollout(ctx context.Context, in *Cq9RolloutReq, opts ...grpc.CallOption) (*Cq9RolloutRes, error)
	// group:Cq9
	Cq9Payoff(ctx context.Context, in *Cq9PayoffReq, opts ...grpc.CallOption) (*Cq9PayoffRes, error)
	// group:Cq9
	Cq9Record(ctx context.Context, in *Cq9RecordReq, opts ...grpc.CallOption) (*Cq9RecordRes, error)
	// group:Cq9
	Cq9Refund(ctx context.Context, in *Cq9RefundReq, opts ...grpc.CallOption) (*Cq9RefundRes, error)
	// group: crown
	CrownGenericBet(ctx context.Context, in *CrownGenericRequest, opts ...grpc.CallOption) (*CrownGenericResponse, error)
	// group: elbet
	GetElUserInfo(ctx context.Context, in *ElGetUserReq, opts ...grpc.CallOption) (*ElGetUserResp, error)
	// group: elbet
	GetElBalance(ctx context.Context, in *ElGetUserReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error)
	// group: elbet
	BetEl(ctx context.Context, in *ElBetReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error)
	// group: elbet
	WinEl(ctx context.Context, in *ElWinReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error)
	// group: elbet
	CancelElBet(ctx context.Context, in *ElCancelReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error)
	// group: gameEnding
	EndingGetBalance(ctx context.Context, in *EndingGetBalanceReq, opts ...grpc.CallOption) (*EndingGetBalanceResp, error)
	// group: gameEnding
	EndingPlaceBet(ctx context.Context, in *EndingPlaceBetReq, opts ...grpc.CallOption) (*EndingPlaceBetResp, error)
	// group: gameEnding
	EndingSettle(ctx context.Context, in *EndingSettleReq, opts ...grpc.CallOption) (*EndingSettleResp, error)
	// group: gameEvo
	EvoCheck(ctx context.Context, in *EvoCheckReq, opts ...grpc.CallOption) (*EvoResp, error)
	// group: gameEvo
	EvoBalance(ctx context.Context, in *EvoBalanceReq, opts ...grpc.CallOption) (*EvoResp, error)
	// group: gameEvo
	// lock:UserId:zero-platend-rpc-game-evo:2
	EvoDebit(ctx context.Context, in *EvoMainReq, opts ...grpc.CallOption) (*EvoResp, error)
	// group: gameEvo
	// lock:UserId:zero-platend-rpc-game-evo:2
	EvoCredit(ctx context.Context, in *EvoMainReq, opts ...grpc.CallOption) (*EvoResp, error)
	// group: gameEvo
	// lock:UserId:zero-platend-rpc-game-evo:2
	EvoCancel(ctx context.Context, in *EvoMainReq, opts ...grpc.CallOption) (*EvoResp, error)
	// group: gameEvo
	EvoPromoPayout(ctx context.Context, in *EvoPromoPayoutReq, opts ...grpc.CallOption) (*EvoResp, error)
	// group: gameFbsports
	FbsportsBalance(ctx context.Context, in *FbsportsBalanceReq, opts ...grpc.CallOption) (*FbsportsBalanceResp, error)
	// group: gameFbsports
	FbsportsOrderPay(ctx context.Context, in *FbsportsOrderPayReq, opts ...grpc.CallOption) (*FbsportsOrderPayResp, error)
	// group: gameFbsports
	FbsportsCheckOrderPay(ctx context.Context, in *FbsportsOrderPayReq, opts ...grpc.CallOption) (*FbsportsOrderPayResp, error)
	// group: gameFbsports
	FbsportsSyncTransaction(ctx context.Context, in *FbsportsSyncTransactionReq, opts ...grpc.CallOption) (*FbsportsSyncTransactionResp, error)
	// group: gameFbsports
	FbsportsSyncOrders(ctx context.Context, in *FbsportsSyncOrdersReq, opts ...grpc.CallOption) (*FbsportsSyncOrdersResp, error)
	// group: gameFbsports
	FbsportsSyncCashOut(ctx context.Context, in *FbsportsSyncCashOutReq, opts ...grpc.CallOption) (*FbsportsSyncCashOutResp, error)
	// group: gameFbsports
	FbsportsHealth(ctx context.Context, in *FbsportsHealthReq, opts ...grpc.CallOption) (*FbsportsHealthResp, error)
	// group: gameFbsports
	BatchBetMatchMarketOfJumpLine(ctx context.Context, in *BatchBetMatchMarketOfJumpLineReq, opts ...grpc.CallOption) (*BatchBetMatchMarketOfJumpLineResp, error)
	// group: gameFbsports
	BetSinglePass(ctx context.Context, in *BetSinglePassReq, opts ...grpc.CallOption) (*BetSinglePassResp, error)
	// group: gameFbsports
	BetMultiple(ctx context.Context, in *BetMultipleReq, opts ...grpc.CallOption) (*BetMultipleResp, error)
	// group: gameFbsports
	FbBetList(ctx context.Context, in *FbBetListReq, opts ...grpc.CallOption) (*FbBetListResp, error)
	// group: gameFbsports
	FbNewBetList(ctx context.Context, in *FbNewBetListReq, opts ...grpc.CallOption) (*FbNewBetListResp, error)
	// group: gameFbsports
	GetStakeOrderStatus(ctx context.Context, in *GetStakeOrderStatusReq, opts ...grpc.CallOption) (*GetStakeOrderStatusResp, error)
	// group: gameFunky
	FunkyGetBalance(ctx context.Context, in *FunkyGetBalanceReq, opts ...grpc.CallOption) (*FunkyResp, error)
	// group: gameFunky
	FunkyPlaceBet(ctx context.Context, in *FunkyPlaceBetReq, opts ...grpc.CallOption) (*FunkyResp, error)
	// group: gameFunky
	FunkyBetSettle(ctx context.Context, in *FunkyBetSettleReq, opts ...grpc.CallOption) (*FunkyResp, error)
	// group: gameFunky
	FunkyCancelBet(ctx context.Context, in *FunkyCancelBetReq, opts ...grpc.CallOption) (*FunkyResp, error)
	// group: gameFunky
	FunkyCheckBet(ctx context.Context, in *FunkyCheckBetReq, opts ...grpc.CallOption) (*FunkyResp, error)
	// group: gameHaba
	HabaPlayerDetail(ctx context.Context, in *HabaPlayerDetailReq, opts ...grpc.CallOption) (*HabaPlayerDetailResp, error)
	// group: gameHaba
	HabaTx(ctx context.Context, in *HabaFundTxReq, opts ...grpc.CallOption) (*HabaFundTxResp, error)
	// group: gameHaba
	HabaQuery(ctx context.Context, in *HabaQueryReq, opts ...grpc.CallOption) (*HabaFundTxResp, error)
	// group: gameHaba
	HabaPlayerEndSession(ctx context.Context, in *HabaPlayerEndSessionReq, opts ...grpc.CallOption) (*HabaEmpty, error)
	// group: gameHaba
	HabaAltFunds(ctx context.Context, in *HabaAltFundsReq, opts ...grpc.CallOption) (*HabaFundTxResp, error)
	// group: gameRtg
	RtgGetBalance(ctx context.Context, in *RtgGetBalanceReq, opts ...grpc.CallOption) (*RtgResp, error)
	// group: gameRtg
	RtgPlaceBet(ctx context.Context, in *RtgPlaceBetReq, opts ...grpc.CallOption) (*RtgResp, error)
	// group: gameRtg
	RtgSettlement(ctx context.Context, in *RtgSettlementReq, opts ...grpc.CallOption) (*RtgResp, error)
	// group: gameRtg
	RtgCancelBet(ctx context.Context, in *RtgCancelBetReq, opts ...grpc.CallOption) (*RtgResp, error)
	// group: gameTpg
	TpgGetBalance(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error)
	// group: gameTpg
	TpgDeduction(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error)
	// group: gameTpg
	TpgPayout(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error)
	// group: gameTpg
	TpgRollback(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error)
	// group: gameTpg
	TpgDeductAndPayout(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error)
	// group: gameTpg
	TpgBatchDeduction(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error)
	// group: jdb
	JdbCallback(ctx context.Context, in *JdbReq, opts ...grpc.CallOption) (*JdbRsp, error)
	// jiLi management
	// group: jiLi
	JiLiAuth(ctx context.Context, in *JiLiAuthReq, opts ...grpc.CallOption) (*JiLiAuthResp, error)
	// group: jiLi
	JiLiBet(ctx context.Context, in *JiLiBetReq, opts ...grpc.CallOption) (*JiLiBetResp, error)
	// group: jiLi
	JiLiCancelBet(ctx context.Context, in *JiLiCancelBetReq, opts ...grpc.CallOption) (*JiLiCancelBetResp, error)
	// group: jiLi
	JiLiSessionBet(ctx context.Context, in *JiLiSessionBetReq, opts ...grpc.CallOption) (*JiLiSessionBetResp, error)
	// group: jiLi
	// lock:Username:zero-platend-rpc-dl:2
	JiLiCancelSessionBet(ctx context.Context, in *JiLiCancelSessionBetReq, opts ...grpc.CallOption) (*JiLiCancelSessionBetResp, error)
	// group: ob
	ObTransfer(ctx context.Context, in *ObTransferReq, opts ...grpc.CallOption) (*ObResp, error)
	// group: ob
	ObCancelTransfer(ctx context.Context, in *ObCancelTransferReq, opts ...grpc.CallOption) (*ObResp, error)
	// group: pachinko
	PachinkoMoneyTransfer(ctx context.Context, in *PachinkoRequest, opts ...grpc.CallOption) (*PachinkoTransferResponse, error)
	// group: pachinko
	PachinkoGetBalance(ctx context.Context, in *PachinkoBalanceRequest, opts ...grpc.CallOption) (*PachinkoBalanceResponse, error)
	// group: pg
	PgVerifySession(ctx context.Context, in *PgVerifySessionReq, opts ...grpc.CallOption) (*PgVerifySessionResp, error)
	// group: pg
	PgCashGet(ctx context.Context, in *PgCashGetReq, opts ...grpc.CallOption) (*PgCashGetResp, error)
	// group: pg
	PgCashTransferOut(ctx context.Context, in *PgCashTransferOutReq, opts ...grpc.CallOption) (*PgCashTransferOutResp, error)
	// group: pinnacle
	PinnaclePing(ctx context.Context, in *PinnaclePingReq, opts ...grpc.CallOption) (*PinnaclePingRsp, error)
	// group: pinnacle
	PinnacleGetbalance(ctx context.Context, in *PinnacleGetbalanceReq, opts ...grpc.CallOption) (*PinnacleGetbalanceRsp, error)
	// group: pinnacle
	PinnacleDebit(ctx context.Context, in *PinnacleDebitReq, opts ...grpc.CallOption) (*PinnacleDebitRsp, error)
	// group: pinnacle
	PinnacleCredit(ctx context.Context, in *PinnacleCreditReq, opts ...grpc.CallOption) (*PinnacleCreditRsp, error)
	// group: pinnacle
	PinnacleQuery(ctx context.Context, in *PinnacleQueryReq, opts ...grpc.CallOption) (*PinnacleQueryRsp, error)
	// group: pinnacle
	PinnacleWageringBetted(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringAccepted(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringRollbacked(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringRejected(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringSettled(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringCancelled(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringUnsettled(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error)
	// group: playStar
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error)
	// group: playStar
	LogOut(ctx context.Context, in *LogOutReq, opts ...grpc.CallOption) (*LogOutRes, error)
	// group: playStar
	Bet(ctx context.Context, in *BetReq, opts ...grpc.CallOption) (*BetRes, error)
	// group: playStar
	BetResult(ctx context.Context, in *BetResultReq, opts ...grpc.CallOption) (*BetResultRes, error)
	// group: playStar
	BetRefund(ctx context.Context, in *BetRefundReq, opts ...grpc.CallOption) (*BetRefundRes, error)
	// group: playStar
	Bonus(ctx context.Context, in *BonusReq, opts ...grpc.CallOption) (*BonusRes, error)
	// group: playStar
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error)
	// group: playStar
	Resultex(ctx context.Context, in *ResultexReq, opts ...grpc.CallOption) (*ResultexReq, error)
	// group: pp
	PpBet(ctx context.Context, in *PpBetReq, opts ...grpc.CallOption) (*PpBetResp, error)
	// group: pp
	PpRefund(ctx context.Context, in *PpRefundReq, opts ...grpc.CallOption) (*PpRefundResp, error)
	// group: pp
	PpResult(ctx context.Context, in *PpResultReq, opts ...grpc.CallOption) (*PpResultResp, error)
	// group: pp
	PpBonusWin(ctx context.Context, in *PpBonusWinReq, opts ...grpc.CallOption) (*PpBonusWinResp, error)
	// group: pp
	PpJackpotWin(ctx context.Context, in *PpJackpotWinReq, opts ...grpc.CallOption) (*PpJackpotWinResp, error)
	// group: pp
	PpPromoWin(ctx context.Context, in *PpPromoWinReq, opts ...grpc.CallOption) (*PpPromoWinResp, error)
	// group: pp
	PpAdjustment(ctx context.Context, in *PpAdjustmentReq, opts ...grpc.CallOption) (*PpBonusWinResp, error)
	// group:saba
	SabaGetBalance(ctx context.Context, in *SabaGetBalanceReq, opts ...grpc.CallOption) (*SabaGetBalanceResp, error)
	// group:saba
	SabaPlaceBet(ctx context.Context, in *SabaPlaceBetReq, opts ...grpc.CallOption) (*SabaPlaceBetResp, error)
	// group:saba
	SabaConfirmBet(ctx context.Context, in *SabaConfirmBetReq, opts ...grpc.CallOption) (*SabaConfirmBetResp, error)
	// group:saba
	SabaConfirmBet3Rd(ctx context.Context, in *SabaConfirmBet3RdReq, opts ...grpc.CallOption) (*SabaConfirmBet3RdResp, error)
	// group:saba
	SabaCheckMemberOnline(ctx context.Context, in *SabaCheckMemberOnlineReq, opts ...grpc.CallOption) (*SabaCheckMemberOnlineResp, error)
	// group:saba
	SabaCancelBet(ctx context.Context, in *SabaCancelBetReq, opts ...grpc.CallOption) (*SabaCancelBetResp, error)
	// group:saba
	SabaCancelBetent(ctx context.Context, in *SabaCancelBetentReq, opts ...grpc.CallOption) (*SabaCancelBetentResp, error)
	// group:saba
	SabaSettle(ctx context.Context, in *SabaSettleReq, opts ...grpc.CallOption) (*SabaSettleResp, error)
	// group:saba
	SabaSettleent(ctx context.Context, in *SabaSettleentReq, opts ...grpc.CallOption) (*SabaSettleentResp, error)
	// group:saba
	SabaGetTicketInfo(ctx context.Context, in *SabaGetTicketInfoReq, opts ...grpc.CallOption) (*SabaGetTicketInfoResp, error)
	// group:saba
	SabaResettle(ctx context.Context, in *SabaSettleReq, opts ...grpc.CallOption) (*SabaSettleResp, error)
	// group:saba
	SabaUnsettle(ctx context.Context, in *SabaUnsettleReq, opts ...grpc.CallOption) (*SabaUnsettleResp, error)
	// group:saba
	SabaHealthCheck(ctx context.Context, in *SabaHealthCheckReq, opts ...grpc.CallOption) (*SabaHealthCheckResp, error)
	SabaAdjustBalance(ctx context.Context, in *SabaAdjustBalanceReq, opts ...grpc.CallOption) (*SabaAdjustBalanceResp, error)
	// group:saba
	SabaPlaceBetParlay(ctx context.Context, in *SabaPlaceBetParlayReq, opts ...grpc.CallOption) (*SabaPlaceBetParlayResp, error)
	// group:saba
	SabaPlace3RdParlay(ctx context.Context, in *SabaPlace3RdParlayReq, opts ...grpc.CallOption) (*SabaPlace3RdParlayResp, error)
	// group:saba
	SabaPlaceBetent(ctx context.Context, in *SabaPlaceBetentReq, opts ...grpc.CallOption) (*SabaPlaceBetentResp, error)
	// group:saba
	SabaConfirmBetParlay(ctx context.Context, in *SabaConfirmBetParlayReq, opts ...grpc.CallOption) (*SabaConfirmBetParlayResp, error)
	// turbo management
	// group: turbo
	TurboProfile(ctx context.Context, in *TurboProfileReq, opts ...grpc.CallOption) (*TurboProfileResp, error)
	// group: turbo
	TurboPlace(ctx context.Context, in *TurboBodyReq, opts ...grpc.CallOption) (*TurboPlaceResp, error)
	// group: turbo
	TurboSettle(ctx context.Context, in *TurboBodyReq, opts ...grpc.CallOption) (*TurboSettleResp, error)
	// group: turbo
	TurboCancel(ctx context.Context, in *TurboBodyReq, opts ...grpc.CallOption) (*TurboCancelResp, error)
	// group: we
	Debit(ctx context.Context, in *DebitReq, opts ...grpc.CallOption) (*DebitResp, error)
	// group: we
	Credit(ctx context.Context, in *CreditReq, opts ...grpc.CallOption) (*CreditResp, error)
	// group: we
	Rollback(ctx context.Context, in *RollbackReq, opts ...grpc.CallOption) (*RollbackResp, error)
	// group: playGame
	RsaGenerate(ctx context.Context, in *RsaGenerateReq, opts ...grpc.CallOption) (*RsaGenerateResp, error)
	// group: playGame
	PlatLogin(ctx context.Context, in *PlatLoginReq, opts ...grpc.CallOption) (*PlatLoginResp, error)
	// group: playGame
	InitGame(ctx context.Context, in *InitGameReq, opts ...grpc.CallOption) (*InitGameResp, error)
	// group: playGame 下单不立刻出结果的游戏
	PlayGame(ctx context.Context, in *PlayGameReq, opts ...grpc.CallOption) (*PlayGameResp, error)
	// group: playGame Slots 类型的游戏
	PlaySlotsGame(ctx context.Context, in *PlaySlotsGameReq, opts ...grpc.CallOption) (*PlaySlotsGameResp, error)
	// group: playGame
	PlayGameResult(ctx context.Context, in *PlayGameResultReq, opts ...grpc.CallOption) (*PlayGameResultResp, error)
	// group: playGame
	PlayGameList(ctx context.Context, in *PlayGameListReq, opts ...grpc.CallOption) (*PlayGameListResp, error)
	// group: playGame
	GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListResp, error)
	// group: playGame
	OverGameResult(ctx context.Context, in *OverGameResultReq, opts ...grpc.CallOption) (*OverGameResultResp, error)
	// group: playGame
	SendEMQXTest(ctx context.Context, in *SendEMQXTestReq, opts ...grpc.CallOption) (*SendEMQXTestResp, error)
	// Catching fish
	ElectronAuthorize(ctx context.Context, in *ElectronAuthorizeReq, opts ...grpc.CallOption) (*ElectronAuthorizeResp, error)
	ElectronWithdraw(ctx context.Context, in *ElectronWithdrawReq, opts ...grpc.CallOption) (*ElectronWithdrawResp, error)
	ElectronDeposit(ctx context.Context, in *ElectronDepositReq, opts ...grpc.CallOption) (*ElectronDepositResp, error)
	ElectronQueryOrder(ctx context.Context, in *ElectronQueryOrderReq, opts ...grpc.CallOption) (*ElectronQueryOrderResp, error)
	ElectronUserInfo(ctx context.Context, in *ElectronUserInfoReq, opts ...grpc.CallOption) (*ElectronUserInfoResp, error)
	ElectronUserLogout(ctx context.Context, in *ElectronUserLogoutReq, opts ...grpc.CallOption) (*ElectronUserLogoutResp, error)
	ElectronUserBroadcast(ctx context.Context, in *ElectronUserBroadcastReq, opts ...grpc.CallOption) (*ElectronUserBroadcastResp, error)
	CompetitionRankingRewards(ctx context.Context, in *CompetitionRankingRewardsReq, opts ...grpc.CallOption) (*CompetitionRankingRewardsResp, error)
	// eg
	EgAfbGetBalance(ctx context.Context, in *EgAfbGetBalanceReq, opts ...grpc.CallOption) (*EgAfbGetBalanceResp, error)
	EgAfbBet(ctx context.Context, in *EgAfbBetReq, opts ...grpc.CallOption) (*EgAfbBetResp, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) AgIntlLivePostTransfer(ctx context.Context, in *LivePostTransfer, opts ...grpc.CallOption) (*LiveTransferResponse, error) {
	out := new(LiveTransferResponse)
	err := c.cc.Invoke(ctx, Core_AgIntlLivePostTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AgIntlEvent(ctx context.Context, in *AgIntlEventRequest, opts ...grpc.CallOption) (*LiveTransferResponse, error) {
	out := new(LiveTransferResponse)
	err := c.cc.Invoke(ctx, Core_AgIntlEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AgQJgetBalance(ctx context.Context, in *AgQJgetBalanceRequest, opts ...grpc.CallOption) (*AgQJBalanceResponse, error) {
	out := new(AgQJBalanceResponse)
	err := c.cc.Invoke(ctx, Core_AgQJgetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AgQJplayerTransfer(ctx context.Context, in *AgQJPlayerTransferRequest, opts ...grpc.CallOption) (*AgQJPlayerTransferResponse, error) {
	out := new(AgQJPlayerTransferResponse)
	err := c.cc.Invoke(ctx, Core_AgQJplayerTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AgQJgameResult(ctx context.Context, in *AgQJgameResultRequest, opts ...grpc.CallOption) (*AgQJgameResultResponse, error) {
	out := new(AgQJgameResultResponse)
	err := c.cc.Invoke(ctx, Core_AgQJgameResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) AgQJgetCusTrans(ctx context.Context, in *AgQJCusTransRequest, opts ...grpc.CallOption) (*AgQJCusTransResponse, error) {
	out := new(AgQJCusTransResponse)
	err := c.cc.Invoke(ctx, Core_AgQJgetCusTrans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Core_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) HealthZ(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthZResp, error) {
	out := new(HealthZResp)
	err := c.cc.Invoke(ctx, Core_HealthZ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByPing(ctx context.Context, in *BetByPingRequest, opts ...grpc.CallOption) (*BetByPingResponse, error) {
	out := new(BetByPingResponse)
	err := c.cc.Invoke(ctx, Core_BetByPing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetMake(ctx context.Context, in *BetByBetMakeRequest, opts ...grpc.CallOption) (*BetByBetMakeResponse, error) {
	out := new(BetByBetMakeResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetMake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetSettlement(ctx context.Context, in *BetByBetSettlementRequest, opts ...grpc.CallOption) (*BetByBetSettlementResponse, error) {
	out := new(BetByBetSettlementResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetSettlement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetWin(ctx context.Context, in *BetWinRequest, opts ...grpc.CallOption) (*BetByBetWinResponse, error) {
	out := new(BetByBetWinResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetWin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetLost(ctx context.Context, in *BetByBetLostRequest, opts ...grpc.CallOption) (*BetLostResponse, error) {
	out := new(BetLostResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetLost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetDiscard(ctx context.Context, in *BetByBetDiscardRequest, opts ...grpc.CallOption) (*BetByBetDiscardResponse, error) {
	out := new(BetByBetDiscardResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetDiscard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetRefund(ctx context.Context, in *BetByBetRefundRequest, opts ...grpc.CallOption) (*BetByBetRefundResponse, error) {
	out := new(BetByBetRefundResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetByBetRollback(ctx context.Context, in *BetByBetRollbackRequest, opts ...grpc.CallOption) (*BetByBetRollbackResponse, error) {
	out := new(BetByBetRollbackResponse)
	err := c.cc.Invoke(ctx, Core_BetByBetRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BoomingCallback(ctx context.Context, in *BoomingCallbackReq, opts ...grpc.CallOption) (*BoomingCallbackResp, error) {
	out := new(BoomingCallbackResp)
	err := c.cc.Invoke(ctx, Core_BoomingCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9PlayerCheck(ctx context.Context, in *Cq9PlayerCheckReq, opts ...grpc.CallOption) (*Cq9PlayerCheckRes, error) {
	out := new(Cq9PlayerCheckRes)
	err := c.cc.Invoke(ctx, Core_Cq9PlayerCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9TransactionBalance(ctx context.Context, in *Cq9TransactionBalanceReq, opts ...grpc.CallOption) (*Cq9TransactionBalanceRes, error) {
	out := new(Cq9TransactionBalanceRes)
	err := c.cc.Invoke(ctx, Core_Cq9TransactionBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Bet(ctx context.Context, in *Cq9BetReq, opts ...grpc.CallOption) (*Cq9BetRes, error) {
	out := new(Cq9BetRes)
	err := c.cc.Invoke(ctx, Core_Cq9Bet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9EndRound(ctx context.Context, in *Cq9EndRoundReq, opts ...grpc.CallOption) (*Cq9EndRoundRes, error) {
	out := new(Cq9EndRoundRes)
	err := c.cc.Invoke(ctx, Core_Cq9EndRound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9TakeAll(ctx context.Context, in *Cq9TakeAllReq, opts ...grpc.CallOption) (*Cq9TakeAllRes, error) {
	out := new(Cq9TakeAllRes)
	err := c.cc.Invoke(ctx, Core_Cq9TakeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Debit(ctx context.Context, in *Cq9DebitReq, opts ...grpc.CallOption) (*Cq9DebitRes, error) {
	out := new(Cq9DebitRes)
	err := c.cc.Invoke(ctx, Core_Cq9Debit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Credit(ctx context.Context, in *Cq9CreditReq, opts ...grpc.CallOption) (*Cq9CreditRes, error) {
	out := new(Cq9CreditRes)
	err := c.cc.Invoke(ctx, Core_Cq9Credit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Rollin(ctx context.Context, in *Cq9RollinReq, opts ...grpc.CallOption) (*Cq9RollinRes, error) {
	out := new(Cq9RollinRes)
	err := c.cc.Invoke(ctx, Core_Cq9Rollin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Rollout(ctx context.Context, in *Cq9RolloutReq, opts ...grpc.CallOption) (*Cq9RolloutRes, error) {
	out := new(Cq9RolloutRes)
	err := c.cc.Invoke(ctx, Core_Cq9Rollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Payoff(ctx context.Context, in *Cq9PayoffReq, opts ...grpc.CallOption) (*Cq9PayoffRes, error) {
	out := new(Cq9PayoffRes)
	err := c.cc.Invoke(ctx, Core_Cq9Payoff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Record(ctx context.Context, in *Cq9RecordReq, opts ...grpc.CallOption) (*Cq9RecordRes, error) {
	out := new(Cq9RecordRes)
	err := c.cc.Invoke(ctx, Core_Cq9Record_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Cq9Refund(ctx context.Context, in *Cq9RefundReq, opts ...grpc.CallOption) (*Cq9RefundRes, error) {
	out := new(Cq9RefundRes)
	err := c.cc.Invoke(ctx, Core_Cq9Refund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CrownGenericBet(ctx context.Context, in *CrownGenericRequest, opts ...grpc.CallOption) (*CrownGenericResponse, error) {
	out := new(CrownGenericResponse)
	err := c.cc.Invoke(ctx, Core_CrownGenericBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetElUserInfo(ctx context.Context, in *ElGetUserReq, opts ...grpc.CallOption) (*ElGetUserResp, error) {
	out := new(ElGetUserResp)
	err := c.cc.Invoke(ctx, Core_GetElUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetElBalance(ctx context.Context, in *ElGetUserReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error) {
	out := new(ElGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_GetElBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetEl(ctx context.Context, in *ElBetReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error) {
	out := new(ElGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_BetEl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) WinEl(ctx context.Context, in *ElWinReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error) {
	out := new(ElGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_WinEl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CancelElBet(ctx context.Context, in *ElCancelReq, opts ...grpc.CallOption) (*ElGetBalanceResp, error) {
	out := new(ElGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_CancelElBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EndingGetBalance(ctx context.Context, in *EndingGetBalanceReq, opts ...grpc.CallOption) (*EndingGetBalanceResp, error) {
	out := new(EndingGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_EndingGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EndingPlaceBet(ctx context.Context, in *EndingPlaceBetReq, opts ...grpc.CallOption) (*EndingPlaceBetResp, error) {
	out := new(EndingPlaceBetResp)
	err := c.cc.Invoke(ctx, Core_EndingPlaceBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EndingSettle(ctx context.Context, in *EndingSettleReq, opts ...grpc.CallOption) (*EndingSettleResp, error) {
	out := new(EndingSettleResp)
	err := c.cc.Invoke(ctx, Core_EndingSettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EvoCheck(ctx context.Context, in *EvoCheckReq, opts ...grpc.CallOption) (*EvoResp, error) {
	out := new(EvoResp)
	err := c.cc.Invoke(ctx, Core_EvoCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EvoBalance(ctx context.Context, in *EvoBalanceReq, opts ...grpc.CallOption) (*EvoResp, error) {
	out := new(EvoResp)
	err := c.cc.Invoke(ctx, Core_EvoBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EvoDebit(ctx context.Context, in *EvoMainReq, opts ...grpc.CallOption) (*EvoResp, error) {
	out := new(EvoResp)
	err := c.cc.Invoke(ctx, Core_EvoDebit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EvoCredit(ctx context.Context, in *EvoMainReq, opts ...grpc.CallOption) (*EvoResp, error) {
	out := new(EvoResp)
	err := c.cc.Invoke(ctx, Core_EvoCredit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EvoCancel(ctx context.Context, in *EvoMainReq, opts ...grpc.CallOption) (*EvoResp, error) {
	out := new(EvoResp)
	err := c.cc.Invoke(ctx, Core_EvoCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EvoPromoPayout(ctx context.Context, in *EvoPromoPayoutReq, opts ...grpc.CallOption) (*EvoResp, error) {
	out := new(EvoResp)
	err := c.cc.Invoke(ctx, Core_EvoPromoPayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsBalance(ctx context.Context, in *FbsportsBalanceReq, opts ...grpc.CallOption) (*FbsportsBalanceResp, error) {
	out := new(FbsportsBalanceResp)
	err := c.cc.Invoke(ctx, Core_FbsportsBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsOrderPay(ctx context.Context, in *FbsportsOrderPayReq, opts ...grpc.CallOption) (*FbsportsOrderPayResp, error) {
	out := new(FbsportsOrderPayResp)
	err := c.cc.Invoke(ctx, Core_FbsportsOrderPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsCheckOrderPay(ctx context.Context, in *FbsportsOrderPayReq, opts ...grpc.CallOption) (*FbsportsOrderPayResp, error) {
	out := new(FbsportsOrderPayResp)
	err := c.cc.Invoke(ctx, Core_FbsportsCheckOrderPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsSyncTransaction(ctx context.Context, in *FbsportsSyncTransactionReq, opts ...grpc.CallOption) (*FbsportsSyncTransactionResp, error) {
	out := new(FbsportsSyncTransactionResp)
	err := c.cc.Invoke(ctx, Core_FbsportsSyncTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsSyncOrders(ctx context.Context, in *FbsportsSyncOrdersReq, opts ...grpc.CallOption) (*FbsportsSyncOrdersResp, error) {
	out := new(FbsportsSyncOrdersResp)
	err := c.cc.Invoke(ctx, Core_FbsportsSyncOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsSyncCashOut(ctx context.Context, in *FbsportsSyncCashOutReq, opts ...grpc.CallOption) (*FbsportsSyncCashOutResp, error) {
	out := new(FbsportsSyncCashOutResp)
	err := c.cc.Invoke(ctx, Core_FbsportsSyncCashOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbsportsHealth(ctx context.Context, in *FbsportsHealthReq, opts ...grpc.CallOption) (*FbsportsHealthResp, error) {
	out := new(FbsportsHealthResp)
	err := c.cc.Invoke(ctx, Core_FbsportsHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BatchBetMatchMarketOfJumpLine(ctx context.Context, in *BatchBetMatchMarketOfJumpLineReq, opts ...grpc.CallOption) (*BatchBetMatchMarketOfJumpLineResp, error) {
	out := new(BatchBetMatchMarketOfJumpLineResp)
	err := c.cc.Invoke(ctx, Core_BatchBetMatchMarketOfJumpLine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetSinglePass(ctx context.Context, in *BetSinglePassReq, opts ...grpc.CallOption) (*BetSinglePassResp, error) {
	out := new(BetSinglePassResp)
	err := c.cc.Invoke(ctx, Core_BetSinglePass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetMultiple(ctx context.Context, in *BetMultipleReq, opts ...grpc.CallOption) (*BetMultipleResp, error) {
	out := new(BetMultipleResp)
	err := c.cc.Invoke(ctx, Core_BetMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbBetList(ctx context.Context, in *FbBetListReq, opts ...grpc.CallOption) (*FbBetListResp, error) {
	out := new(FbBetListResp)
	err := c.cc.Invoke(ctx, Core_FbBetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FbNewBetList(ctx context.Context, in *FbNewBetListReq, opts ...grpc.CallOption) (*FbNewBetListResp, error) {
	out := new(FbNewBetListResp)
	err := c.cc.Invoke(ctx, Core_FbNewBetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetStakeOrderStatus(ctx context.Context, in *GetStakeOrderStatusReq, opts ...grpc.CallOption) (*GetStakeOrderStatusResp, error) {
	out := new(GetStakeOrderStatusResp)
	err := c.cc.Invoke(ctx, Core_GetStakeOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FunkyGetBalance(ctx context.Context, in *FunkyGetBalanceReq, opts ...grpc.CallOption) (*FunkyResp, error) {
	out := new(FunkyResp)
	err := c.cc.Invoke(ctx, Core_FunkyGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FunkyPlaceBet(ctx context.Context, in *FunkyPlaceBetReq, opts ...grpc.CallOption) (*FunkyResp, error) {
	out := new(FunkyResp)
	err := c.cc.Invoke(ctx, Core_FunkyPlaceBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FunkyBetSettle(ctx context.Context, in *FunkyBetSettleReq, opts ...grpc.CallOption) (*FunkyResp, error) {
	out := new(FunkyResp)
	err := c.cc.Invoke(ctx, Core_FunkyBetSettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FunkyCancelBet(ctx context.Context, in *FunkyCancelBetReq, opts ...grpc.CallOption) (*FunkyResp, error) {
	out := new(FunkyResp)
	err := c.cc.Invoke(ctx, Core_FunkyCancelBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FunkyCheckBet(ctx context.Context, in *FunkyCheckBetReq, opts ...grpc.CallOption) (*FunkyResp, error) {
	out := new(FunkyResp)
	err := c.cc.Invoke(ctx, Core_FunkyCheckBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) HabaPlayerDetail(ctx context.Context, in *HabaPlayerDetailReq, opts ...grpc.CallOption) (*HabaPlayerDetailResp, error) {
	out := new(HabaPlayerDetailResp)
	err := c.cc.Invoke(ctx, Core_HabaPlayerDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) HabaTx(ctx context.Context, in *HabaFundTxReq, opts ...grpc.CallOption) (*HabaFundTxResp, error) {
	out := new(HabaFundTxResp)
	err := c.cc.Invoke(ctx, Core_HabaTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) HabaQuery(ctx context.Context, in *HabaQueryReq, opts ...grpc.CallOption) (*HabaFundTxResp, error) {
	out := new(HabaFundTxResp)
	err := c.cc.Invoke(ctx, Core_HabaQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) HabaPlayerEndSession(ctx context.Context, in *HabaPlayerEndSessionReq, opts ...grpc.CallOption) (*HabaEmpty, error) {
	out := new(HabaEmpty)
	err := c.cc.Invoke(ctx, Core_HabaPlayerEndSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) HabaAltFunds(ctx context.Context, in *HabaAltFundsReq, opts ...grpc.CallOption) (*HabaFundTxResp, error) {
	out := new(HabaFundTxResp)
	err := c.cc.Invoke(ctx, Core_HabaAltFunds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RtgGetBalance(ctx context.Context, in *RtgGetBalanceReq, opts ...grpc.CallOption) (*RtgResp, error) {
	out := new(RtgResp)
	err := c.cc.Invoke(ctx, Core_RtgGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RtgPlaceBet(ctx context.Context, in *RtgPlaceBetReq, opts ...grpc.CallOption) (*RtgResp, error) {
	out := new(RtgResp)
	err := c.cc.Invoke(ctx, Core_RtgPlaceBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RtgSettlement(ctx context.Context, in *RtgSettlementReq, opts ...grpc.CallOption) (*RtgResp, error) {
	out := new(RtgResp)
	err := c.cc.Invoke(ctx, Core_RtgSettlement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RtgCancelBet(ctx context.Context, in *RtgCancelBetReq, opts ...grpc.CallOption) (*RtgResp, error) {
	out := new(RtgResp)
	err := c.cc.Invoke(ctx, Core_RtgCancelBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TpgGetBalance(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error) {
	out := new(TpgResp)
	err := c.cc.Invoke(ctx, Core_TpgGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TpgDeduction(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error) {
	out := new(TpgResp)
	err := c.cc.Invoke(ctx, Core_TpgDeduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TpgPayout(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error) {
	out := new(TpgResp)
	err := c.cc.Invoke(ctx, Core_TpgPayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TpgRollback(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error) {
	out := new(TpgResp)
	err := c.cc.Invoke(ctx, Core_TpgRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TpgDeductAndPayout(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error) {
	out := new(TpgResp)
	err := c.cc.Invoke(ctx, Core_TpgDeductAndPayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TpgBatchDeduction(ctx context.Context, in *TpgReq, opts ...grpc.CallOption) (*TpgResp, error) {
	out := new(TpgResp)
	err := c.cc.Invoke(ctx, Core_TpgBatchDeduction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) JdbCallback(ctx context.Context, in *JdbReq, opts ...grpc.CallOption) (*JdbRsp, error) {
	out := new(JdbRsp)
	err := c.cc.Invoke(ctx, Core_JdbCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) JiLiAuth(ctx context.Context, in *JiLiAuthReq, opts ...grpc.CallOption) (*JiLiAuthResp, error) {
	out := new(JiLiAuthResp)
	err := c.cc.Invoke(ctx, Core_JiLiAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) JiLiBet(ctx context.Context, in *JiLiBetReq, opts ...grpc.CallOption) (*JiLiBetResp, error) {
	out := new(JiLiBetResp)
	err := c.cc.Invoke(ctx, Core_JiLiBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) JiLiCancelBet(ctx context.Context, in *JiLiCancelBetReq, opts ...grpc.CallOption) (*JiLiCancelBetResp, error) {
	out := new(JiLiCancelBetResp)
	err := c.cc.Invoke(ctx, Core_JiLiCancelBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) JiLiSessionBet(ctx context.Context, in *JiLiSessionBetReq, opts ...grpc.CallOption) (*JiLiSessionBetResp, error) {
	out := new(JiLiSessionBetResp)
	err := c.cc.Invoke(ctx, Core_JiLiSessionBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) JiLiCancelSessionBet(ctx context.Context, in *JiLiCancelSessionBetReq, opts ...grpc.CallOption) (*JiLiCancelSessionBetResp, error) {
	out := new(JiLiCancelSessionBetResp)
	err := c.cc.Invoke(ctx, Core_JiLiCancelSessionBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ObTransfer(ctx context.Context, in *ObTransferReq, opts ...grpc.CallOption) (*ObResp, error) {
	out := new(ObResp)
	err := c.cc.Invoke(ctx, Core_ObTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ObCancelTransfer(ctx context.Context, in *ObCancelTransferReq, opts ...grpc.CallOption) (*ObResp, error) {
	out := new(ObResp)
	err := c.cc.Invoke(ctx, Core_ObCancelTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PachinkoMoneyTransfer(ctx context.Context, in *PachinkoRequest, opts ...grpc.CallOption) (*PachinkoTransferResponse, error) {
	out := new(PachinkoTransferResponse)
	err := c.cc.Invoke(ctx, Core_PachinkoMoneyTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PachinkoGetBalance(ctx context.Context, in *PachinkoBalanceRequest, opts ...grpc.CallOption) (*PachinkoBalanceResponse, error) {
	out := new(PachinkoBalanceResponse)
	err := c.cc.Invoke(ctx, Core_PachinkoGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PgVerifySession(ctx context.Context, in *PgVerifySessionReq, opts ...grpc.CallOption) (*PgVerifySessionResp, error) {
	out := new(PgVerifySessionResp)
	err := c.cc.Invoke(ctx, Core_PgVerifySession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PgCashGet(ctx context.Context, in *PgCashGetReq, opts ...grpc.CallOption) (*PgCashGetResp, error) {
	out := new(PgCashGetResp)
	err := c.cc.Invoke(ctx, Core_PgCashGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PgCashTransferOut(ctx context.Context, in *PgCashTransferOutReq, opts ...grpc.CallOption) (*PgCashTransferOutResp, error) {
	out := new(PgCashTransferOutResp)
	err := c.cc.Invoke(ctx, Core_PgCashTransferOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnaclePing(ctx context.Context, in *PinnaclePingReq, opts ...grpc.CallOption) (*PinnaclePingRsp, error) {
	out := new(PinnaclePingRsp)
	err := c.cc.Invoke(ctx, Core_PinnaclePing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleGetbalance(ctx context.Context, in *PinnacleGetbalanceReq, opts ...grpc.CallOption) (*PinnacleGetbalanceRsp, error) {
	out := new(PinnacleGetbalanceRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleGetbalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleDebit(ctx context.Context, in *PinnacleDebitReq, opts ...grpc.CallOption) (*PinnacleDebitRsp, error) {
	out := new(PinnacleDebitRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleDebit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleCredit(ctx context.Context, in *PinnacleCreditReq, opts ...grpc.CallOption) (*PinnacleCreditRsp, error) {
	out := new(PinnacleCreditRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleCredit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleQuery(ctx context.Context, in *PinnacleQueryReq, opts ...grpc.CallOption) (*PinnacleQueryRsp, error) {
	out := new(PinnacleQueryRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringBetted(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringBetted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringAccepted(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringAccepted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringRollbacked(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringRollbacked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringRejected(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringRejected_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringSettled(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringSettled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringCancelled(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringCancelled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PinnacleWageringUnsettled(ctx context.Context, in *PinnacleWageringReq, opts ...grpc.CallOption) (*PinnacleWageringRsp, error) {
	out := new(PinnacleWageringRsp)
	err := c.cc.Invoke(ctx, Core_PinnacleWageringUnsettled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error) {
	out := new(AuthRes)
	err := c.cc.Invoke(ctx, Core_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) LogOut(ctx context.Context, in *LogOutReq, opts ...grpc.CallOption) (*LogOutRes, error) {
	out := new(LogOutRes)
	err := c.cc.Invoke(ctx, Core_LogOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Bet(ctx context.Context, in *BetReq, opts ...grpc.CallOption) (*BetRes, error) {
	out := new(BetRes)
	err := c.cc.Invoke(ctx, Core_Bet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetResult(ctx context.Context, in *BetResultReq, opts ...grpc.CallOption) (*BetResultRes, error) {
	out := new(BetResultRes)
	err := c.cc.Invoke(ctx, Core_BetResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) BetRefund(ctx context.Context, in *BetRefundReq, opts ...grpc.CallOption) (*BetRefundRes, error) {
	out := new(BetRefundRes)
	err := c.cc.Invoke(ctx, Core_BetRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Bonus(ctx context.Context, in *BonusReq, opts ...grpc.CallOption) (*BonusRes, error) {
	out := new(BonusRes)
	err := c.cc.Invoke(ctx, Core_Bonus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error) {
	out := new(GetBalanceRes)
	err := c.cc.Invoke(ctx, Core_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Resultex(ctx context.Context, in *ResultexReq, opts ...grpc.CallOption) (*ResultexReq, error) {
	out := new(ResultexReq)
	err := c.cc.Invoke(ctx, Core_Resultex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpBet(ctx context.Context, in *PpBetReq, opts ...grpc.CallOption) (*PpBetResp, error) {
	out := new(PpBetResp)
	err := c.cc.Invoke(ctx, Core_PpBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpRefund(ctx context.Context, in *PpRefundReq, opts ...grpc.CallOption) (*PpRefundResp, error) {
	out := new(PpRefundResp)
	err := c.cc.Invoke(ctx, Core_PpRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpResult(ctx context.Context, in *PpResultReq, opts ...grpc.CallOption) (*PpResultResp, error) {
	out := new(PpResultResp)
	err := c.cc.Invoke(ctx, Core_PpResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpBonusWin(ctx context.Context, in *PpBonusWinReq, opts ...grpc.CallOption) (*PpBonusWinResp, error) {
	out := new(PpBonusWinResp)
	err := c.cc.Invoke(ctx, Core_PpBonusWin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpJackpotWin(ctx context.Context, in *PpJackpotWinReq, opts ...grpc.CallOption) (*PpJackpotWinResp, error) {
	out := new(PpJackpotWinResp)
	err := c.cc.Invoke(ctx, Core_PpJackpotWin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpPromoWin(ctx context.Context, in *PpPromoWinReq, opts ...grpc.CallOption) (*PpPromoWinResp, error) {
	out := new(PpPromoWinResp)
	err := c.cc.Invoke(ctx, Core_PpPromoWin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PpAdjustment(ctx context.Context, in *PpAdjustmentReq, opts ...grpc.CallOption) (*PpBonusWinResp, error) {
	out := new(PpBonusWinResp)
	err := c.cc.Invoke(ctx, Core_PpAdjustment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaGetBalance(ctx context.Context, in *SabaGetBalanceReq, opts ...grpc.CallOption) (*SabaGetBalanceResp, error) {
	out := new(SabaGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_SabaGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaPlaceBet(ctx context.Context, in *SabaPlaceBetReq, opts ...grpc.CallOption) (*SabaPlaceBetResp, error) {
	out := new(SabaPlaceBetResp)
	err := c.cc.Invoke(ctx, Core_SabaPlaceBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaConfirmBet(ctx context.Context, in *SabaConfirmBetReq, opts ...grpc.CallOption) (*SabaConfirmBetResp, error) {
	out := new(SabaConfirmBetResp)
	err := c.cc.Invoke(ctx, Core_SabaConfirmBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaConfirmBet3Rd(ctx context.Context, in *SabaConfirmBet3RdReq, opts ...grpc.CallOption) (*SabaConfirmBet3RdResp, error) {
	out := new(SabaConfirmBet3RdResp)
	err := c.cc.Invoke(ctx, Core_SabaConfirmBet3Rd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaCheckMemberOnline(ctx context.Context, in *SabaCheckMemberOnlineReq, opts ...grpc.CallOption) (*SabaCheckMemberOnlineResp, error) {
	out := new(SabaCheckMemberOnlineResp)
	err := c.cc.Invoke(ctx, Core_SabaCheckMemberOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaCancelBet(ctx context.Context, in *SabaCancelBetReq, opts ...grpc.CallOption) (*SabaCancelBetResp, error) {
	out := new(SabaCancelBetResp)
	err := c.cc.Invoke(ctx, Core_SabaCancelBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaCancelBetent(ctx context.Context, in *SabaCancelBetentReq, opts ...grpc.CallOption) (*SabaCancelBetentResp, error) {
	out := new(SabaCancelBetentResp)
	err := c.cc.Invoke(ctx, Core_SabaCancelBetent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaSettle(ctx context.Context, in *SabaSettleReq, opts ...grpc.CallOption) (*SabaSettleResp, error) {
	out := new(SabaSettleResp)
	err := c.cc.Invoke(ctx, Core_SabaSettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaSettleent(ctx context.Context, in *SabaSettleentReq, opts ...grpc.CallOption) (*SabaSettleentResp, error) {
	out := new(SabaSettleentResp)
	err := c.cc.Invoke(ctx, Core_SabaSettleent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaGetTicketInfo(ctx context.Context, in *SabaGetTicketInfoReq, opts ...grpc.CallOption) (*SabaGetTicketInfoResp, error) {
	out := new(SabaGetTicketInfoResp)
	err := c.cc.Invoke(ctx, Core_SabaGetTicketInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaResettle(ctx context.Context, in *SabaSettleReq, opts ...grpc.CallOption) (*SabaSettleResp, error) {
	out := new(SabaSettleResp)
	err := c.cc.Invoke(ctx, Core_SabaResettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaUnsettle(ctx context.Context, in *SabaUnsettleReq, opts ...grpc.CallOption) (*SabaUnsettleResp, error) {
	out := new(SabaUnsettleResp)
	err := c.cc.Invoke(ctx, Core_SabaUnsettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaHealthCheck(ctx context.Context, in *SabaHealthCheckReq, opts ...grpc.CallOption) (*SabaHealthCheckResp, error) {
	out := new(SabaHealthCheckResp)
	err := c.cc.Invoke(ctx, Core_SabaHealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaAdjustBalance(ctx context.Context, in *SabaAdjustBalanceReq, opts ...grpc.CallOption) (*SabaAdjustBalanceResp, error) {
	out := new(SabaAdjustBalanceResp)
	err := c.cc.Invoke(ctx, Core_SabaAdjustBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaPlaceBetParlay(ctx context.Context, in *SabaPlaceBetParlayReq, opts ...grpc.CallOption) (*SabaPlaceBetParlayResp, error) {
	out := new(SabaPlaceBetParlayResp)
	err := c.cc.Invoke(ctx, Core_SabaPlaceBetParlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaPlace3RdParlay(ctx context.Context, in *SabaPlace3RdParlayReq, opts ...grpc.CallOption) (*SabaPlace3RdParlayResp, error) {
	out := new(SabaPlace3RdParlayResp)
	err := c.cc.Invoke(ctx, Core_SabaPlace3RdParlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaPlaceBetent(ctx context.Context, in *SabaPlaceBetentReq, opts ...grpc.CallOption) (*SabaPlaceBetentResp, error) {
	out := new(SabaPlaceBetentResp)
	err := c.cc.Invoke(ctx, Core_SabaPlaceBetent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SabaConfirmBetParlay(ctx context.Context, in *SabaConfirmBetParlayReq, opts ...grpc.CallOption) (*SabaConfirmBetParlayResp, error) {
	out := new(SabaConfirmBetParlayResp)
	err := c.cc.Invoke(ctx, Core_SabaConfirmBetParlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TurboProfile(ctx context.Context, in *TurboProfileReq, opts ...grpc.CallOption) (*TurboProfileResp, error) {
	out := new(TurboProfileResp)
	err := c.cc.Invoke(ctx, Core_TurboProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TurboPlace(ctx context.Context, in *TurboBodyReq, opts ...grpc.CallOption) (*TurboPlaceResp, error) {
	out := new(TurboPlaceResp)
	err := c.cc.Invoke(ctx, Core_TurboPlace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TurboSettle(ctx context.Context, in *TurboBodyReq, opts ...grpc.CallOption) (*TurboSettleResp, error) {
	out := new(TurboSettleResp)
	err := c.cc.Invoke(ctx, Core_TurboSettle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) TurboCancel(ctx context.Context, in *TurboBodyReq, opts ...grpc.CallOption) (*TurboCancelResp, error) {
	out := new(TurboCancelResp)
	err := c.cc.Invoke(ctx, Core_TurboCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Debit(ctx context.Context, in *DebitReq, opts ...grpc.CallOption) (*DebitResp, error) {
	out := new(DebitResp)
	err := c.cc.Invoke(ctx, Core_Debit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Credit(ctx context.Context, in *CreditReq, opts ...grpc.CallOption) (*CreditResp, error) {
	out := new(CreditResp)
	err := c.cc.Invoke(ctx, Core_Credit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Rollback(ctx context.Context, in *RollbackReq, opts ...grpc.CallOption) (*RollbackResp, error) {
	out := new(RollbackResp)
	err := c.cc.Invoke(ctx, Core_Rollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RsaGenerate(ctx context.Context, in *RsaGenerateReq, opts ...grpc.CallOption) (*RsaGenerateResp, error) {
	out := new(RsaGenerateResp)
	err := c.cc.Invoke(ctx, Core_RsaGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PlatLogin(ctx context.Context, in *PlatLoginReq, opts ...grpc.CallOption) (*PlatLoginResp, error) {
	out := new(PlatLoginResp)
	err := c.cc.Invoke(ctx, Core_PlatLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) InitGame(ctx context.Context, in *InitGameReq, opts ...grpc.CallOption) (*InitGameResp, error) {
	out := new(InitGameResp)
	err := c.cc.Invoke(ctx, Core_InitGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PlayGame(ctx context.Context, in *PlayGameReq, opts ...grpc.CallOption) (*PlayGameResp, error) {
	out := new(PlayGameResp)
	err := c.cc.Invoke(ctx, Core_PlayGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PlaySlotsGame(ctx context.Context, in *PlaySlotsGameReq, opts ...grpc.CallOption) (*PlaySlotsGameResp, error) {
	out := new(PlaySlotsGameResp)
	err := c.cc.Invoke(ctx, Core_PlaySlotsGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PlayGameResult(ctx context.Context, in *PlayGameResultReq, opts ...grpc.CallOption) (*PlayGameResultResp, error) {
	out := new(PlayGameResultResp)
	err := c.cc.Invoke(ctx, Core_PlayGameResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) PlayGameList(ctx context.Context, in *PlayGameListReq, opts ...grpc.CallOption) (*PlayGameListResp, error) {
	out := new(PlayGameListResp)
	err := c.cc.Invoke(ctx, Core_PlayGameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListResp, error) {
	out := new(GameListResp)
	err := c.cc.Invoke(ctx, Core_GameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) OverGameResult(ctx context.Context, in *OverGameResultReq, opts ...grpc.CallOption) (*OverGameResultResp, error) {
	out := new(OverGameResultResp)
	err := c.cc.Invoke(ctx, Core_OverGameResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) SendEMQXTest(ctx context.Context, in *SendEMQXTestReq, opts ...grpc.CallOption) (*SendEMQXTestResp, error) {
	out := new(SendEMQXTestResp)
	err := c.cc.Invoke(ctx, Core_SendEMQXTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronAuthorize(ctx context.Context, in *ElectronAuthorizeReq, opts ...grpc.CallOption) (*ElectronAuthorizeResp, error) {
	out := new(ElectronAuthorizeResp)
	err := c.cc.Invoke(ctx, Core_ElectronAuthorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronWithdraw(ctx context.Context, in *ElectronWithdrawReq, opts ...grpc.CallOption) (*ElectronWithdrawResp, error) {
	out := new(ElectronWithdrawResp)
	err := c.cc.Invoke(ctx, Core_ElectronWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronDeposit(ctx context.Context, in *ElectronDepositReq, opts ...grpc.CallOption) (*ElectronDepositResp, error) {
	out := new(ElectronDepositResp)
	err := c.cc.Invoke(ctx, Core_ElectronDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronQueryOrder(ctx context.Context, in *ElectronQueryOrderReq, opts ...grpc.CallOption) (*ElectronQueryOrderResp, error) {
	out := new(ElectronQueryOrderResp)
	err := c.cc.Invoke(ctx, Core_ElectronQueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronUserInfo(ctx context.Context, in *ElectronUserInfoReq, opts ...grpc.CallOption) (*ElectronUserInfoResp, error) {
	out := new(ElectronUserInfoResp)
	err := c.cc.Invoke(ctx, Core_ElectronUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronUserLogout(ctx context.Context, in *ElectronUserLogoutReq, opts ...grpc.CallOption) (*ElectronUserLogoutResp, error) {
	out := new(ElectronUserLogoutResp)
	err := c.cc.Invoke(ctx, Core_ElectronUserLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ElectronUserBroadcast(ctx context.Context, in *ElectronUserBroadcastReq, opts ...grpc.CallOption) (*ElectronUserBroadcastResp, error) {
	out := new(ElectronUserBroadcastResp)
	err := c.cc.Invoke(ctx, Core_ElectronUserBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) CompetitionRankingRewards(ctx context.Context, in *CompetitionRankingRewardsReq, opts ...grpc.CallOption) (*CompetitionRankingRewardsResp, error) {
	out := new(CompetitionRankingRewardsResp)
	err := c.cc.Invoke(ctx, Core_CompetitionRankingRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EgAfbGetBalance(ctx context.Context, in *EgAfbGetBalanceReq, opts ...grpc.CallOption) (*EgAfbGetBalanceResp, error) {
	out := new(EgAfbGetBalanceResp)
	err := c.cc.Invoke(ctx, Core_EgAfbGetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) EgAfbBet(ctx context.Context, in *EgAfbBetReq, opts ...grpc.CallOption) (*EgAfbBetResp, error) {
	out := new(EgAfbBetResp)
	err := c.cc.Invoke(ctx, Core_EgAfbBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	// group: agintl
	AgIntlLivePostTransfer(context.Context, *LivePostTransfer) (*LiveTransferResponse, error)
	// group: agintl
	AgIntlEvent(context.Context, *AgIntlEventRequest) (*LiveTransferResponse, error)
	// group: agqj
	// application/json;charset=UTF-8
	AgQJgetBalance(context.Context, *AgQJgetBalanceRequest) (*AgQJBalanceResponse, error)
	// group: agqj
	AgQJplayerTransfer(context.Context, *AgQJPlayerTransferRequest) (*AgQJPlayerTransferResponse, error)
	// group: agqj
	AgQJgameResult(context.Context, *AgQJgameResultRequest) (*AgQJgameResultResponse, error)
	// group: agqj
	AgQJgetCusTrans(context.Context, *AgQJCusTransRequest) (*AgQJCusTransResponse, error)
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// group: base
	HealthZ(context.Context, *Empty) (*HealthZResp, error)
	// 此方法用于验证合作伙伴平台提供的应用程序接口是否可用。
	// 在合作伙伴平台运行正常的情况下，Betby 将按照描述的格式返回响应 200
	// group: betby
	BetByPing(context.Context, *BetByPingRequest) (*BetByPingResponse, error)
	// 该方法在玩家下注时使用。
	// 合作伙伴应处理以下请求，并提供描述格式的响应。
	// group: betby
	// lock:Transaction.Id:zero-platend-rpc-game-betby-make:2
	BetByBetMake(context.Context, *BetByBetMakeRequest) (*BetByBetMakeResponse, error)
	// 该请求用于通知合作伙伴投注已结束。
	// 在 BET_WIN（LOST、REFUND）请求发出后，请求将延迟 30 天发出。在此期间，可以发送回滚请求。
	// group: betby
	BetByBetSettlement(context.Context, *BetByBetSettlementRequest) (*BetByBetSettlementResponse, error)
	// 当玩家在投注计算完成后，应收到一定金额的余额时，Betby 会发出该请求。
	// 投注状态可以是赢钱、提现、半赢、半输、退款）。
	// 合作伙伴必须执行下面描述的响应。
	// group: betby
	// lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetWin(context.Context, *BetWinRequest) (*BetByBetWinResponse, error)
	// 当玩家投注输掉时，Betby 会发出请求，交易金额始终为 0。
	// 合作伙伴必须按下文所述执行响应。
	// group: betby
	// lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetLost(context.Context, *BetByBetLostRequest) (*BetLostResponse, error)
	//	该方法在投注过程失败时触发。
	//	目前，导致使用此方法的主要原因有两个：
	//	连接丢失或结果不理想（投注被风险管理系统拒绝或任何其他内部原因）。
	//	如果合作伙伴已经处理了投注交易，则投注金额应返回用户余额。
	//
	// NB. 有两种情况可能导致连接中断。
	// 1.BET_MAKE（投注）请求尚未转给合作伙伴。
	//  2. 合作伙伴的响应还没有传送到 Betby。
	//     在这两种情况下，Betby 都在等待合作伙伴的回复 200。
	//     请注意，在第一种情况下，无法在 BET_DISCARD 请求中找到交易 ID。
	//     在第一种情况下，由于合作伙伴没有收到 BET_MAKE 请求，因此无法在合作伙伴端找到 BET_DISCARD 请求中提供的交易 ID。
	//     group: betby
	//     lock:TransactionId:zero-platend-rpc-game-betby-make:2
	BetByBetDiscard(context.Context, *BetByBetDiscardRequest) (*BetByBetDiscardResponse, error)
	// group: betby
	// 如果投注已取消，则使用此请求。合作伙伴必须执行下面所述的 "响应"。
	// lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetRefund(context.Context, *BetByBetRefundRequest) (*BetByBetRefundResponse, error)
	//	该请求用于 Betby 进行投注回滚。回滚发生在投注最初以一种方式结算、
	//	但随后（可能是几分钟后，有时甚至是几天后）结果发生变化，投注以不同的方式结算。
	//	投注回滚意味着投注状态会变为之前的投注状态（未结），然后可以以相反的方式结算。
	//	要注意的是，当玩家之前获得的资金不再可用时、
	//	不再可用。在这种情况下有几种操作方法。
	//  1. 玩家的余额为负数。
	//  2. 余额显示为 0。合作伙伴系统向经理发出用户欠款警报。
	//     group: betby
	//     lock:Transaction.Id:zero-platend-rpc-game-betby:2
	BetByBetRollback(context.Context, *BetByBetRollbackRequest) (*BetByBetRollbackResponse, error)
	// group:booming
	BoomingCallback(context.Context, *BoomingCallbackReq) (*BoomingCallbackResp, error)
	// group:Cq9
	Cq9PlayerCheck(context.Context, *Cq9PlayerCheckReq) (*Cq9PlayerCheckRes, error)
	// group:Cq9
	Cq9TransactionBalance(context.Context, *Cq9TransactionBalanceReq) (*Cq9TransactionBalanceRes, error)
	// group:Cq9
	Cq9Bet(context.Context, *Cq9BetReq) (*Cq9BetRes, error)
	// group:Cq9
	Cq9EndRound(context.Context, *Cq9EndRoundReq) (*Cq9EndRoundRes, error)
	// group:Cq9
	Cq9TakeAll(context.Context, *Cq9TakeAllReq) (*Cq9TakeAllRes, error)
	// group:Cq9
	Cq9Debit(context.Context, *Cq9DebitReq) (*Cq9DebitRes, error)
	// group:Cq9
	Cq9Credit(context.Context, *Cq9CreditReq) (*Cq9CreditRes, error)
	// group:Cq9
	Cq9Rollin(context.Context, *Cq9RollinReq) (*Cq9RollinRes, error)
	// group:Cq9
	Cq9Rollout(context.Context, *Cq9RolloutReq) (*Cq9RolloutRes, error)
	// group:Cq9
	Cq9Payoff(context.Context, *Cq9PayoffReq) (*Cq9PayoffRes, error)
	// group:Cq9
	Cq9Record(context.Context, *Cq9RecordReq) (*Cq9RecordRes, error)
	// group:Cq9
	Cq9Refund(context.Context, *Cq9RefundReq) (*Cq9RefundRes, error)
	// group: crown
	CrownGenericBet(context.Context, *CrownGenericRequest) (*CrownGenericResponse, error)
	// group: elbet
	GetElUserInfo(context.Context, *ElGetUserReq) (*ElGetUserResp, error)
	// group: elbet
	GetElBalance(context.Context, *ElGetUserReq) (*ElGetBalanceResp, error)
	// group: elbet
	BetEl(context.Context, *ElBetReq) (*ElGetBalanceResp, error)
	// group: elbet
	WinEl(context.Context, *ElWinReq) (*ElGetBalanceResp, error)
	// group: elbet
	CancelElBet(context.Context, *ElCancelReq) (*ElGetBalanceResp, error)
	// group: gameEnding
	EndingGetBalance(context.Context, *EndingGetBalanceReq) (*EndingGetBalanceResp, error)
	// group: gameEnding
	EndingPlaceBet(context.Context, *EndingPlaceBetReq) (*EndingPlaceBetResp, error)
	// group: gameEnding
	EndingSettle(context.Context, *EndingSettleReq) (*EndingSettleResp, error)
	// group: gameEvo
	EvoCheck(context.Context, *EvoCheckReq) (*EvoResp, error)
	// group: gameEvo
	EvoBalance(context.Context, *EvoBalanceReq) (*EvoResp, error)
	// group: gameEvo
	// lock:UserId:zero-platend-rpc-game-evo:2
	EvoDebit(context.Context, *EvoMainReq) (*EvoResp, error)
	// group: gameEvo
	// lock:UserId:zero-platend-rpc-game-evo:2
	EvoCredit(context.Context, *EvoMainReq) (*EvoResp, error)
	// group: gameEvo
	// lock:UserId:zero-platend-rpc-game-evo:2
	EvoCancel(context.Context, *EvoMainReq) (*EvoResp, error)
	// group: gameEvo
	EvoPromoPayout(context.Context, *EvoPromoPayoutReq) (*EvoResp, error)
	// group: gameFbsports
	FbsportsBalance(context.Context, *FbsportsBalanceReq) (*FbsportsBalanceResp, error)
	// group: gameFbsports
	FbsportsOrderPay(context.Context, *FbsportsOrderPayReq) (*FbsportsOrderPayResp, error)
	// group: gameFbsports
	FbsportsCheckOrderPay(context.Context, *FbsportsOrderPayReq) (*FbsportsOrderPayResp, error)
	// group: gameFbsports
	FbsportsSyncTransaction(context.Context, *FbsportsSyncTransactionReq) (*FbsportsSyncTransactionResp, error)
	// group: gameFbsports
	FbsportsSyncOrders(context.Context, *FbsportsSyncOrdersReq) (*FbsportsSyncOrdersResp, error)
	// group: gameFbsports
	FbsportsSyncCashOut(context.Context, *FbsportsSyncCashOutReq) (*FbsportsSyncCashOutResp, error)
	// group: gameFbsports
	FbsportsHealth(context.Context, *FbsportsHealthReq) (*FbsportsHealthResp, error)
	// group: gameFbsports
	BatchBetMatchMarketOfJumpLine(context.Context, *BatchBetMatchMarketOfJumpLineReq) (*BatchBetMatchMarketOfJumpLineResp, error)
	// group: gameFbsports
	BetSinglePass(context.Context, *BetSinglePassReq) (*BetSinglePassResp, error)
	// group: gameFbsports
	BetMultiple(context.Context, *BetMultipleReq) (*BetMultipleResp, error)
	// group: gameFbsports
	FbBetList(context.Context, *FbBetListReq) (*FbBetListResp, error)
	// group: gameFbsports
	FbNewBetList(context.Context, *FbNewBetListReq) (*FbNewBetListResp, error)
	// group: gameFbsports
	GetStakeOrderStatus(context.Context, *GetStakeOrderStatusReq) (*GetStakeOrderStatusResp, error)
	// group: gameFunky
	FunkyGetBalance(context.Context, *FunkyGetBalanceReq) (*FunkyResp, error)
	// group: gameFunky
	FunkyPlaceBet(context.Context, *FunkyPlaceBetReq) (*FunkyResp, error)
	// group: gameFunky
	FunkyBetSettle(context.Context, *FunkyBetSettleReq) (*FunkyResp, error)
	// group: gameFunky
	FunkyCancelBet(context.Context, *FunkyCancelBetReq) (*FunkyResp, error)
	// group: gameFunky
	FunkyCheckBet(context.Context, *FunkyCheckBetReq) (*FunkyResp, error)
	// group: gameHaba
	HabaPlayerDetail(context.Context, *HabaPlayerDetailReq) (*HabaPlayerDetailResp, error)
	// group: gameHaba
	HabaTx(context.Context, *HabaFundTxReq) (*HabaFundTxResp, error)
	// group: gameHaba
	HabaQuery(context.Context, *HabaQueryReq) (*HabaFundTxResp, error)
	// group: gameHaba
	HabaPlayerEndSession(context.Context, *HabaPlayerEndSessionReq) (*HabaEmpty, error)
	// group: gameHaba
	HabaAltFunds(context.Context, *HabaAltFundsReq) (*HabaFundTxResp, error)
	// group: gameRtg
	RtgGetBalance(context.Context, *RtgGetBalanceReq) (*RtgResp, error)
	// group: gameRtg
	RtgPlaceBet(context.Context, *RtgPlaceBetReq) (*RtgResp, error)
	// group: gameRtg
	RtgSettlement(context.Context, *RtgSettlementReq) (*RtgResp, error)
	// group: gameRtg
	RtgCancelBet(context.Context, *RtgCancelBetReq) (*RtgResp, error)
	// group: gameTpg
	TpgGetBalance(context.Context, *TpgReq) (*TpgResp, error)
	// group: gameTpg
	TpgDeduction(context.Context, *TpgReq) (*TpgResp, error)
	// group: gameTpg
	TpgPayout(context.Context, *TpgReq) (*TpgResp, error)
	// group: gameTpg
	TpgRollback(context.Context, *TpgReq) (*TpgResp, error)
	// group: gameTpg
	TpgDeductAndPayout(context.Context, *TpgReq) (*TpgResp, error)
	// group: gameTpg
	TpgBatchDeduction(context.Context, *TpgReq) (*TpgResp, error)
	// group: jdb
	JdbCallback(context.Context, *JdbReq) (*JdbRsp, error)
	// jiLi management
	// group: jiLi
	JiLiAuth(context.Context, *JiLiAuthReq) (*JiLiAuthResp, error)
	// group: jiLi
	JiLiBet(context.Context, *JiLiBetReq) (*JiLiBetResp, error)
	// group: jiLi
	JiLiCancelBet(context.Context, *JiLiCancelBetReq) (*JiLiCancelBetResp, error)
	// group: jiLi
	JiLiSessionBet(context.Context, *JiLiSessionBetReq) (*JiLiSessionBetResp, error)
	// group: jiLi
	// lock:Username:zero-platend-rpc-dl:2
	JiLiCancelSessionBet(context.Context, *JiLiCancelSessionBetReq) (*JiLiCancelSessionBetResp, error)
	// group: ob
	ObTransfer(context.Context, *ObTransferReq) (*ObResp, error)
	// group: ob
	ObCancelTransfer(context.Context, *ObCancelTransferReq) (*ObResp, error)
	// group: pachinko
	PachinkoMoneyTransfer(context.Context, *PachinkoRequest) (*PachinkoTransferResponse, error)
	// group: pachinko
	PachinkoGetBalance(context.Context, *PachinkoBalanceRequest) (*PachinkoBalanceResponse, error)
	// group: pg
	PgVerifySession(context.Context, *PgVerifySessionReq) (*PgVerifySessionResp, error)
	// group: pg
	PgCashGet(context.Context, *PgCashGetReq) (*PgCashGetResp, error)
	// group: pg
	PgCashTransferOut(context.Context, *PgCashTransferOutReq) (*PgCashTransferOutResp, error)
	// group: pinnacle
	PinnaclePing(context.Context, *PinnaclePingReq) (*PinnaclePingRsp, error)
	// group: pinnacle
	PinnacleGetbalance(context.Context, *PinnacleGetbalanceReq) (*PinnacleGetbalanceRsp, error)
	// group: pinnacle
	PinnacleDebit(context.Context, *PinnacleDebitReq) (*PinnacleDebitRsp, error)
	// group: pinnacle
	PinnacleCredit(context.Context, *PinnacleCreditReq) (*PinnacleCreditRsp, error)
	// group: pinnacle
	PinnacleQuery(context.Context, *PinnacleQueryReq) (*PinnacleQueryRsp, error)
	// group: pinnacle
	PinnacleWageringBetted(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringAccepted(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringRollbacked(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringRejected(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringSettled(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringCancelled(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: pinnacle
	PinnacleWageringUnsettled(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error)
	// group: playStar
	Auth(context.Context, *AuthReq) (*AuthRes, error)
	// group: playStar
	LogOut(context.Context, *LogOutReq) (*LogOutRes, error)
	// group: playStar
	Bet(context.Context, *BetReq) (*BetRes, error)
	// group: playStar
	BetResult(context.Context, *BetResultReq) (*BetResultRes, error)
	// group: playStar
	BetRefund(context.Context, *BetRefundReq) (*BetRefundRes, error)
	// group: playStar
	Bonus(context.Context, *BonusReq) (*BonusRes, error)
	// group: playStar
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRes, error)
	// group: playStar
	Resultex(context.Context, *ResultexReq) (*ResultexReq, error)
	// group: pp
	PpBet(context.Context, *PpBetReq) (*PpBetResp, error)
	// group: pp
	PpRefund(context.Context, *PpRefundReq) (*PpRefundResp, error)
	// group: pp
	PpResult(context.Context, *PpResultReq) (*PpResultResp, error)
	// group: pp
	PpBonusWin(context.Context, *PpBonusWinReq) (*PpBonusWinResp, error)
	// group: pp
	PpJackpotWin(context.Context, *PpJackpotWinReq) (*PpJackpotWinResp, error)
	// group: pp
	PpPromoWin(context.Context, *PpPromoWinReq) (*PpPromoWinResp, error)
	// group: pp
	PpAdjustment(context.Context, *PpAdjustmentReq) (*PpBonusWinResp, error)
	// group:saba
	SabaGetBalance(context.Context, *SabaGetBalanceReq) (*SabaGetBalanceResp, error)
	// group:saba
	SabaPlaceBet(context.Context, *SabaPlaceBetReq) (*SabaPlaceBetResp, error)
	// group:saba
	SabaConfirmBet(context.Context, *SabaConfirmBetReq) (*SabaConfirmBetResp, error)
	// group:saba
	SabaConfirmBet3Rd(context.Context, *SabaConfirmBet3RdReq) (*SabaConfirmBet3RdResp, error)
	// group:saba
	SabaCheckMemberOnline(context.Context, *SabaCheckMemberOnlineReq) (*SabaCheckMemberOnlineResp, error)
	// group:saba
	SabaCancelBet(context.Context, *SabaCancelBetReq) (*SabaCancelBetResp, error)
	// group:saba
	SabaCancelBetent(context.Context, *SabaCancelBetentReq) (*SabaCancelBetentResp, error)
	// group:saba
	SabaSettle(context.Context, *SabaSettleReq) (*SabaSettleResp, error)
	// group:saba
	SabaSettleent(context.Context, *SabaSettleentReq) (*SabaSettleentResp, error)
	// group:saba
	SabaGetTicketInfo(context.Context, *SabaGetTicketInfoReq) (*SabaGetTicketInfoResp, error)
	// group:saba
	SabaResettle(context.Context, *SabaSettleReq) (*SabaSettleResp, error)
	// group:saba
	SabaUnsettle(context.Context, *SabaUnsettleReq) (*SabaUnsettleResp, error)
	// group:saba
	SabaHealthCheck(context.Context, *SabaHealthCheckReq) (*SabaHealthCheckResp, error)
	SabaAdjustBalance(context.Context, *SabaAdjustBalanceReq) (*SabaAdjustBalanceResp, error)
	// group:saba
	SabaPlaceBetParlay(context.Context, *SabaPlaceBetParlayReq) (*SabaPlaceBetParlayResp, error)
	// group:saba
	SabaPlace3RdParlay(context.Context, *SabaPlace3RdParlayReq) (*SabaPlace3RdParlayResp, error)
	// group:saba
	SabaPlaceBetent(context.Context, *SabaPlaceBetentReq) (*SabaPlaceBetentResp, error)
	// group:saba
	SabaConfirmBetParlay(context.Context, *SabaConfirmBetParlayReq) (*SabaConfirmBetParlayResp, error)
	// turbo management
	// group: turbo
	TurboProfile(context.Context, *TurboProfileReq) (*TurboProfileResp, error)
	// group: turbo
	TurboPlace(context.Context, *TurboBodyReq) (*TurboPlaceResp, error)
	// group: turbo
	TurboSettle(context.Context, *TurboBodyReq) (*TurboSettleResp, error)
	// group: turbo
	TurboCancel(context.Context, *TurboBodyReq) (*TurboCancelResp, error)
	// group: we
	Debit(context.Context, *DebitReq) (*DebitResp, error)
	// group: we
	Credit(context.Context, *CreditReq) (*CreditResp, error)
	// group: we
	Rollback(context.Context, *RollbackReq) (*RollbackResp, error)
	// group: playGame
	RsaGenerate(context.Context, *RsaGenerateReq) (*RsaGenerateResp, error)
	// group: playGame
	PlatLogin(context.Context, *PlatLoginReq) (*PlatLoginResp, error)
	// group: playGame
	InitGame(context.Context, *InitGameReq) (*InitGameResp, error)
	// group: playGame 下单不立刻出结果的游戏
	PlayGame(context.Context, *PlayGameReq) (*PlayGameResp, error)
	// group: playGame Slots 类型的游戏
	PlaySlotsGame(context.Context, *PlaySlotsGameReq) (*PlaySlotsGameResp, error)
	// group: playGame
	PlayGameResult(context.Context, *PlayGameResultReq) (*PlayGameResultResp, error)
	// group: playGame
	PlayGameList(context.Context, *PlayGameListReq) (*PlayGameListResp, error)
	// group: playGame
	GameList(context.Context, *GameListReq) (*GameListResp, error)
	// group: playGame
	OverGameResult(context.Context, *OverGameResultReq) (*OverGameResultResp, error)
	// group: playGame
	SendEMQXTest(context.Context, *SendEMQXTestReq) (*SendEMQXTestResp, error)
	// Catching fish
	ElectronAuthorize(context.Context, *ElectronAuthorizeReq) (*ElectronAuthorizeResp, error)
	ElectronWithdraw(context.Context, *ElectronWithdrawReq) (*ElectronWithdrawResp, error)
	ElectronDeposit(context.Context, *ElectronDepositReq) (*ElectronDepositResp, error)
	ElectronQueryOrder(context.Context, *ElectronQueryOrderReq) (*ElectronQueryOrderResp, error)
	ElectronUserInfo(context.Context, *ElectronUserInfoReq) (*ElectronUserInfoResp, error)
	ElectronUserLogout(context.Context, *ElectronUserLogoutReq) (*ElectronUserLogoutResp, error)
	ElectronUserBroadcast(context.Context, *ElectronUserBroadcastReq) (*ElectronUserBroadcastResp, error)
	CompetitionRankingRewards(context.Context, *CompetitionRankingRewardsReq) (*CompetitionRankingRewardsResp, error)
	// eg
	EgAfbGetBalance(context.Context, *EgAfbGetBalanceReq) (*EgAfbGetBalanceResp, error)
	EgAfbBet(context.Context, *EgAfbBetReq) (*EgAfbBetResp, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) AgIntlLivePostTransfer(context.Context, *LivePostTransfer) (*LiveTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgIntlLivePostTransfer not implemented")
}
func (UnimplementedCoreServer) AgIntlEvent(context.Context, *AgIntlEventRequest) (*LiveTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgIntlEvent not implemented")
}
func (UnimplementedCoreServer) AgQJgetBalance(context.Context, *AgQJgetBalanceRequest) (*AgQJBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgQJgetBalance not implemented")
}
func (UnimplementedCoreServer) AgQJplayerTransfer(context.Context, *AgQJPlayerTransferRequest) (*AgQJPlayerTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgQJplayerTransfer not implemented")
}
func (UnimplementedCoreServer) AgQJgameResult(context.Context, *AgQJgameResultRequest) (*AgQJgameResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgQJgameResult not implemented")
}
func (UnimplementedCoreServer) AgQJgetCusTrans(context.Context, *AgQJCusTransRequest) (*AgQJCusTransResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgQJgetCusTrans not implemented")
}
func (UnimplementedCoreServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedCoreServer) HealthZ(context.Context, *Empty) (*HealthZResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthZ not implemented")
}
func (UnimplementedCoreServer) BetByPing(context.Context, *BetByPingRequest) (*BetByPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByPing not implemented")
}
func (UnimplementedCoreServer) BetByBetMake(context.Context, *BetByBetMakeRequest) (*BetByBetMakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetMake not implemented")
}
func (UnimplementedCoreServer) BetByBetSettlement(context.Context, *BetByBetSettlementRequest) (*BetByBetSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetSettlement not implemented")
}
func (UnimplementedCoreServer) BetByBetWin(context.Context, *BetWinRequest) (*BetByBetWinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetWin not implemented")
}
func (UnimplementedCoreServer) BetByBetLost(context.Context, *BetByBetLostRequest) (*BetLostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetLost not implemented")
}
func (UnimplementedCoreServer) BetByBetDiscard(context.Context, *BetByBetDiscardRequest) (*BetByBetDiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetDiscard not implemented")
}
func (UnimplementedCoreServer) BetByBetRefund(context.Context, *BetByBetRefundRequest) (*BetByBetRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetRefund not implemented")
}
func (UnimplementedCoreServer) BetByBetRollback(context.Context, *BetByBetRollbackRequest) (*BetByBetRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetByBetRollback not implemented")
}
func (UnimplementedCoreServer) BoomingCallback(context.Context, *BoomingCallbackReq) (*BoomingCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoomingCallback not implemented")
}
func (UnimplementedCoreServer) Cq9PlayerCheck(context.Context, *Cq9PlayerCheckReq) (*Cq9PlayerCheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9PlayerCheck not implemented")
}
func (UnimplementedCoreServer) Cq9TransactionBalance(context.Context, *Cq9TransactionBalanceReq) (*Cq9TransactionBalanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9TransactionBalance not implemented")
}
func (UnimplementedCoreServer) Cq9Bet(context.Context, *Cq9BetReq) (*Cq9BetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Bet not implemented")
}
func (UnimplementedCoreServer) Cq9EndRound(context.Context, *Cq9EndRoundReq) (*Cq9EndRoundRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9EndRound not implemented")
}
func (UnimplementedCoreServer) Cq9TakeAll(context.Context, *Cq9TakeAllReq) (*Cq9TakeAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9TakeAll not implemented")
}
func (UnimplementedCoreServer) Cq9Debit(context.Context, *Cq9DebitReq) (*Cq9DebitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Debit not implemented")
}
func (UnimplementedCoreServer) Cq9Credit(context.Context, *Cq9CreditReq) (*Cq9CreditRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Credit not implemented")
}
func (UnimplementedCoreServer) Cq9Rollin(context.Context, *Cq9RollinReq) (*Cq9RollinRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Rollin not implemented")
}
func (UnimplementedCoreServer) Cq9Rollout(context.Context, *Cq9RolloutReq) (*Cq9RolloutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Rollout not implemented")
}
func (UnimplementedCoreServer) Cq9Payoff(context.Context, *Cq9PayoffReq) (*Cq9PayoffRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Payoff not implemented")
}
func (UnimplementedCoreServer) Cq9Record(context.Context, *Cq9RecordReq) (*Cq9RecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Record not implemented")
}
func (UnimplementedCoreServer) Cq9Refund(context.Context, *Cq9RefundReq) (*Cq9RefundRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cq9Refund not implemented")
}
func (UnimplementedCoreServer) CrownGenericBet(context.Context, *CrownGenericRequest) (*CrownGenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrownGenericBet not implemented")
}
func (UnimplementedCoreServer) GetElUserInfo(context.Context, *ElGetUserReq) (*ElGetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElUserInfo not implemented")
}
func (UnimplementedCoreServer) GetElBalance(context.Context, *ElGetUserReq) (*ElGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElBalance not implemented")
}
func (UnimplementedCoreServer) BetEl(context.Context, *ElBetReq) (*ElGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetEl not implemented")
}
func (UnimplementedCoreServer) WinEl(context.Context, *ElWinReq) (*ElGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WinEl not implemented")
}
func (UnimplementedCoreServer) CancelElBet(context.Context, *ElCancelReq) (*ElGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelElBet not implemented")
}
func (UnimplementedCoreServer) EndingGetBalance(context.Context, *EndingGetBalanceReq) (*EndingGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndingGetBalance not implemented")
}
func (UnimplementedCoreServer) EndingPlaceBet(context.Context, *EndingPlaceBetReq) (*EndingPlaceBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndingPlaceBet not implemented")
}
func (UnimplementedCoreServer) EndingSettle(context.Context, *EndingSettleReq) (*EndingSettleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndingSettle not implemented")
}
func (UnimplementedCoreServer) EvoCheck(context.Context, *EvoCheckReq) (*EvoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvoCheck not implemented")
}
func (UnimplementedCoreServer) EvoBalance(context.Context, *EvoBalanceReq) (*EvoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvoBalance not implemented")
}
func (UnimplementedCoreServer) EvoDebit(context.Context, *EvoMainReq) (*EvoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvoDebit not implemented")
}
func (UnimplementedCoreServer) EvoCredit(context.Context, *EvoMainReq) (*EvoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvoCredit not implemented")
}
func (UnimplementedCoreServer) EvoCancel(context.Context, *EvoMainReq) (*EvoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvoCancel not implemented")
}
func (UnimplementedCoreServer) EvoPromoPayout(context.Context, *EvoPromoPayoutReq) (*EvoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvoPromoPayout not implemented")
}
func (UnimplementedCoreServer) FbsportsBalance(context.Context, *FbsportsBalanceReq) (*FbsportsBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsBalance not implemented")
}
func (UnimplementedCoreServer) FbsportsOrderPay(context.Context, *FbsportsOrderPayReq) (*FbsportsOrderPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsOrderPay not implemented")
}
func (UnimplementedCoreServer) FbsportsCheckOrderPay(context.Context, *FbsportsOrderPayReq) (*FbsportsOrderPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsCheckOrderPay not implemented")
}
func (UnimplementedCoreServer) FbsportsSyncTransaction(context.Context, *FbsportsSyncTransactionReq) (*FbsportsSyncTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsSyncTransaction not implemented")
}
func (UnimplementedCoreServer) FbsportsSyncOrders(context.Context, *FbsportsSyncOrdersReq) (*FbsportsSyncOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsSyncOrders not implemented")
}
func (UnimplementedCoreServer) FbsportsSyncCashOut(context.Context, *FbsportsSyncCashOutReq) (*FbsportsSyncCashOutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsSyncCashOut not implemented")
}
func (UnimplementedCoreServer) FbsportsHealth(context.Context, *FbsportsHealthReq) (*FbsportsHealthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbsportsHealth not implemented")
}
func (UnimplementedCoreServer) BatchBetMatchMarketOfJumpLine(context.Context, *BatchBetMatchMarketOfJumpLineReq) (*BatchBetMatchMarketOfJumpLineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchBetMatchMarketOfJumpLine not implemented")
}
func (UnimplementedCoreServer) BetSinglePass(context.Context, *BetSinglePassReq) (*BetSinglePassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetSinglePass not implemented")
}
func (UnimplementedCoreServer) BetMultiple(context.Context, *BetMultipleReq) (*BetMultipleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetMultiple not implemented")
}
func (UnimplementedCoreServer) FbBetList(context.Context, *FbBetListReq) (*FbBetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbBetList not implemented")
}
func (UnimplementedCoreServer) FbNewBetList(context.Context, *FbNewBetListReq) (*FbNewBetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbNewBetList not implemented")
}
func (UnimplementedCoreServer) GetStakeOrderStatus(context.Context, *GetStakeOrderStatusReq) (*GetStakeOrderStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeOrderStatus not implemented")
}
func (UnimplementedCoreServer) FunkyGetBalance(context.Context, *FunkyGetBalanceReq) (*FunkyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunkyGetBalance not implemented")
}
func (UnimplementedCoreServer) FunkyPlaceBet(context.Context, *FunkyPlaceBetReq) (*FunkyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunkyPlaceBet not implemented")
}
func (UnimplementedCoreServer) FunkyBetSettle(context.Context, *FunkyBetSettleReq) (*FunkyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunkyBetSettle not implemented")
}
func (UnimplementedCoreServer) FunkyCancelBet(context.Context, *FunkyCancelBetReq) (*FunkyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunkyCancelBet not implemented")
}
func (UnimplementedCoreServer) FunkyCheckBet(context.Context, *FunkyCheckBetReq) (*FunkyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunkyCheckBet not implemented")
}
func (UnimplementedCoreServer) HabaPlayerDetail(context.Context, *HabaPlayerDetailReq) (*HabaPlayerDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HabaPlayerDetail not implemented")
}
func (UnimplementedCoreServer) HabaTx(context.Context, *HabaFundTxReq) (*HabaFundTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HabaTx not implemented")
}
func (UnimplementedCoreServer) HabaQuery(context.Context, *HabaQueryReq) (*HabaFundTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HabaQuery not implemented")
}
func (UnimplementedCoreServer) HabaPlayerEndSession(context.Context, *HabaPlayerEndSessionReq) (*HabaEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HabaPlayerEndSession not implemented")
}
func (UnimplementedCoreServer) HabaAltFunds(context.Context, *HabaAltFundsReq) (*HabaFundTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HabaAltFunds not implemented")
}
func (UnimplementedCoreServer) RtgGetBalance(context.Context, *RtgGetBalanceReq) (*RtgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RtgGetBalance not implemented")
}
func (UnimplementedCoreServer) RtgPlaceBet(context.Context, *RtgPlaceBetReq) (*RtgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RtgPlaceBet not implemented")
}
func (UnimplementedCoreServer) RtgSettlement(context.Context, *RtgSettlementReq) (*RtgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RtgSettlement not implemented")
}
func (UnimplementedCoreServer) RtgCancelBet(context.Context, *RtgCancelBetReq) (*RtgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RtgCancelBet not implemented")
}
func (UnimplementedCoreServer) TpgGetBalance(context.Context, *TpgReq) (*TpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpgGetBalance not implemented")
}
func (UnimplementedCoreServer) TpgDeduction(context.Context, *TpgReq) (*TpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpgDeduction not implemented")
}
func (UnimplementedCoreServer) TpgPayout(context.Context, *TpgReq) (*TpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpgPayout not implemented")
}
func (UnimplementedCoreServer) TpgRollback(context.Context, *TpgReq) (*TpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpgRollback not implemented")
}
func (UnimplementedCoreServer) TpgDeductAndPayout(context.Context, *TpgReq) (*TpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpgDeductAndPayout not implemented")
}
func (UnimplementedCoreServer) TpgBatchDeduction(context.Context, *TpgReq) (*TpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpgBatchDeduction not implemented")
}
func (UnimplementedCoreServer) JdbCallback(context.Context, *JdbReq) (*JdbRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JdbCallback not implemented")
}
func (UnimplementedCoreServer) JiLiAuth(context.Context, *JiLiAuthReq) (*JiLiAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JiLiAuth not implemented")
}
func (UnimplementedCoreServer) JiLiBet(context.Context, *JiLiBetReq) (*JiLiBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JiLiBet not implemented")
}
func (UnimplementedCoreServer) JiLiCancelBet(context.Context, *JiLiCancelBetReq) (*JiLiCancelBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JiLiCancelBet not implemented")
}
func (UnimplementedCoreServer) JiLiSessionBet(context.Context, *JiLiSessionBetReq) (*JiLiSessionBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JiLiSessionBet not implemented")
}
func (UnimplementedCoreServer) JiLiCancelSessionBet(context.Context, *JiLiCancelSessionBetReq) (*JiLiCancelSessionBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JiLiCancelSessionBet not implemented")
}
func (UnimplementedCoreServer) ObTransfer(context.Context, *ObTransferReq) (*ObResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObTransfer not implemented")
}
func (UnimplementedCoreServer) ObCancelTransfer(context.Context, *ObCancelTransferReq) (*ObResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObCancelTransfer not implemented")
}
func (UnimplementedCoreServer) PachinkoMoneyTransfer(context.Context, *PachinkoRequest) (*PachinkoTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PachinkoMoneyTransfer not implemented")
}
func (UnimplementedCoreServer) PachinkoGetBalance(context.Context, *PachinkoBalanceRequest) (*PachinkoBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PachinkoGetBalance not implemented")
}
func (UnimplementedCoreServer) PgVerifySession(context.Context, *PgVerifySessionReq) (*PgVerifySessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PgVerifySession not implemented")
}
func (UnimplementedCoreServer) PgCashGet(context.Context, *PgCashGetReq) (*PgCashGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PgCashGet not implemented")
}
func (UnimplementedCoreServer) PgCashTransferOut(context.Context, *PgCashTransferOutReq) (*PgCashTransferOutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PgCashTransferOut not implemented")
}
func (UnimplementedCoreServer) PinnaclePing(context.Context, *PinnaclePingReq) (*PinnaclePingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnaclePing not implemented")
}
func (UnimplementedCoreServer) PinnacleGetbalance(context.Context, *PinnacleGetbalanceReq) (*PinnacleGetbalanceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleGetbalance not implemented")
}
func (UnimplementedCoreServer) PinnacleDebit(context.Context, *PinnacleDebitReq) (*PinnacleDebitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleDebit not implemented")
}
func (UnimplementedCoreServer) PinnacleCredit(context.Context, *PinnacleCreditReq) (*PinnacleCreditRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleCredit not implemented")
}
func (UnimplementedCoreServer) PinnacleQuery(context.Context, *PinnacleQueryReq) (*PinnacleQueryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleQuery not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringBetted(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringBetted not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringAccepted(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringAccepted not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringRollbacked(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringRollbacked not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringRejected(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringRejected not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringSettled(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringSettled not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringCancelled(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringCancelled not implemented")
}
func (UnimplementedCoreServer) PinnacleWageringUnsettled(context.Context, *PinnacleWageringReq) (*PinnacleWageringRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinnacleWageringUnsettled not implemented")
}
func (UnimplementedCoreServer) Auth(context.Context, *AuthReq) (*AuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedCoreServer) LogOut(context.Context, *LogOutReq) (*LogOutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedCoreServer) Bet(context.Context, *BetReq) (*BetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bet not implemented")
}
func (UnimplementedCoreServer) BetResult(context.Context, *BetResultReq) (*BetResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetResult not implemented")
}
func (UnimplementedCoreServer) BetRefund(context.Context, *BetRefundReq) (*BetRefundRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetRefund not implemented")
}
func (UnimplementedCoreServer) Bonus(context.Context, *BonusReq) (*BonusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bonus not implemented")
}
func (UnimplementedCoreServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedCoreServer) Resultex(context.Context, *ResultexReq) (*ResultexReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resultex not implemented")
}
func (UnimplementedCoreServer) PpBet(context.Context, *PpBetReq) (*PpBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpBet not implemented")
}
func (UnimplementedCoreServer) PpRefund(context.Context, *PpRefundReq) (*PpRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpRefund not implemented")
}
func (UnimplementedCoreServer) PpResult(context.Context, *PpResultReq) (*PpResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpResult not implemented")
}
func (UnimplementedCoreServer) PpBonusWin(context.Context, *PpBonusWinReq) (*PpBonusWinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpBonusWin not implemented")
}
func (UnimplementedCoreServer) PpJackpotWin(context.Context, *PpJackpotWinReq) (*PpJackpotWinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpJackpotWin not implemented")
}
func (UnimplementedCoreServer) PpPromoWin(context.Context, *PpPromoWinReq) (*PpPromoWinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpPromoWin not implemented")
}
func (UnimplementedCoreServer) PpAdjustment(context.Context, *PpAdjustmentReq) (*PpBonusWinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpAdjustment not implemented")
}
func (UnimplementedCoreServer) SabaGetBalance(context.Context, *SabaGetBalanceReq) (*SabaGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaGetBalance not implemented")
}
func (UnimplementedCoreServer) SabaPlaceBet(context.Context, *SabaPlaceBetReq) (*SabaPlaceBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaPlaceBet not implemented")
}
func (UnimplementedCoreServer) SabaConfirmBet(context.Context, *SabaConfirmBetReq) (*SabaConfirmBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaConfirmBet not implemented")
}
func (UnimplementedCoreServer) SabaConfirmBet3Rd(context.Context, *SabaConfirmBet3RdReq) (*SabaConfirmBet3RdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaConfirmBet3Rd not implemented")
}
func (UnimplementedCoreServer) SabaCheckMemberOnline(context.Context, *SabaCheckMemberOnlineReq) (*SabaCheckMemberOnlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaCheckMemberOnline not implemented")
}
func (UnimplementedCoreServer) SabaCancelBet(context.Context, *SabaCancelBetReq) (*SabaCancelBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaCancelBet not implemented")
}
func (UnimplementedCoreServer) SabaCancelBetent(context.Context, *SabaCancelBetentReq) (*SabaCancelBetentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaCancelBetent not implemented")
}
func (UnimplementedCoreServer) SabaSettle(context.Context, *SabaSettleReq) (*SabaSettleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaSettle not implemented")
}
func (UnimplementedCoreServer) SabaSettleent(context.Context, *SabaSettleentReq) (*SabaSettleentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaSettleent not implemented")
}
func (UnimplementedCoreServer) SabaGetTicketInfo(context.Context, *SabaGetTicketInfoReq) (*SabaGetTicketInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaGetTicketInfo not implemented")
}
func (UnimplementedCoreServer) SabaResettle(context.Context, *SabaSettleReq) (*SabaSettleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaResettle not implemented")
}
func (UnimplementedCoreServer) SabaUnsettle(context.Context, *SabaUnsettleReq) (*SabaUnsettleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaUnsettle not implemented")
}
func (UnimplementedCoreServer) SabaHealthCheck(context.Context, *SabaHealthCheckReq) (*SabaHealthCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaHealthCheck not implemented")
}
func (UnimplementedCoreServer) SabaAdjustBalance(context.Context, *SabaAdjustBalanceReq) (*SabaAdjustBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaAdjustBalance not implemented")
}
func (UnimplementedCoreServer) SabaPlaceBetParlay(context.Context, *SabaPlaceBetParlayReq) (*SabaPlaceBetParlayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaPlaceBetParlay not implemented")
}
func (UnimplementedCoreServer) SabaPlace3RdParlay(context.Context, *SabaPlace3RdParlayReq) (*SabaPlace3RdParlayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaPlace3RdParlay not implemented")
}
func (UnimplementedCoreServer) SabaPlaceBetent(context.Context, *SabaPlaceBetentReq) (*SabaPlaceBetentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaPlaceBetent not implemented")
}
func (UnimplementedCoreServer) SabaConfirmBetParlay(context.Context, *SabaConfirmBetParlayReq) (*SabaConfirmBetParlayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SabaConfirmBetParlay not implemented")
}
func (UnimplementedCoreServer) TurboProfile(context.Context, *TurboProfileReq) (*TurboProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurboProfile not implemented")
}
func (UnimplementedCoreServer) TurboPlace(context.Context, *TurboBodyReq) (*TurboPlaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurboPlace not implemented")
}
func (UnimplementedCoreServer) TurboSettle(context.Context, *TurboBodyReq) (*TurboSettleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurboSettle not implemented")
}
func (UnimplementedCoreServer) TurboCancel(context.Context, *TurboBodyReq) (*TurboCancelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurboCancel not implemented")
}
func (UnimplementedCoreServer) Debit(context.Context, *DebitReq) (*DebitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debit not implemented")
}
func (UnimplementedCoreServer) Credit(context.Context, *CreditReq) (*CreditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedCoreServer) Rollback(context.Context, *RollbackReq) (*RollbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedCoreServer) RsaGenerate(context.Context, *RsaGenerateReq) (*RsaGenerateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RsaGenerate not implemented")
}
func (UnimplementedCoreServer) PlatLogin(context.Context, *PlatLoginReq) (*PlatLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatLogin not implemented")
}
func (UnimplementedCoreServer) InitGame(context.Context, *InitGameReq) (*InitGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitGame not implemented")
}
func (UnimplementedCoreServer) PlayGame(context.Context, *PlayGameReq) (*PlayGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGame not implemented")
}
func (UnimplementedCoreServer) PlaySlotsGame(context.Context, *PlaySlotsGameReq) (*PlaySlotsGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySlotsGame not implemented")
}
func (UnimplementedCoreServer) PlayGameResult(context.Context, *PlayGameResultReq) (*PlayGameResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGameResult not implemented")
}
func (UnimplementedCoreServer) PlayGameList(context.Context, *PlayGameListReq) (*PlayGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGameList not implemented")
}
func (UnimplementedCoreServer) GameList(context.Context, *GameListReq) (*GameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameList not implemented")
}
func (UnimplementedCoreServer) OverGameResult(context.Context, *OverGameResultReq) (*OverGameResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverGameResult not implemented")
}
func (UnimplementedCoreServer) SendEMQXTest(context.Context, *SendEMQXTestReq) (*SendEMQXTestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEMQXTest not implemented")
}
func (UnimplementedCoreServer) ElectronAuthorize(context.Context, *ElectronAuthorizeReq) (*ElectronAuthorizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronAuthorize not implemented")
}
func (UnimplementedCoreServer) ElectronWithdraw(context.Context, *ElectronWithdrawReq) (*ElectronWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronWithdraw not implemented")
}
func (UnimplementedCoreServer) ElectronDeposit(context.Context, *ElectronDepositReq) (*ElectronDepositResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronDeposit not implemented")
}
func (UnimplementedCoreServer) ElectronQueryOrder(context.Context, *ElectronQueryOrderReq) (*ElectronQueryOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronQueryOrder not implemented")
}
func (UnimplementedCoreServer) ElectronUserInfo(context.Context, *ElectronUserInfoReq) (*ElectronUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronUserInfo not implemented")
}
func (UnimplementedCoreServer) ElectronUserLogout(context.Context, *ElectronUserLogoutReq) (*ElectronUserLogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronUserLogout not implemented")
}
func (UnimplementedCoreServer) ElectronUserBroadcast(context.Context, *ElectronUserBroadcastReq) (*ElectronUserBroadcastResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectronUserBroadcast not implemented")
}
func (UnimplementedCoreServer) CompetitionRankingRewards(context.Context, *CompetitionRankingRewardsReq) (*CompetitionRankingRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompetitionRankingRewards not implemented")
}
func (UnimplementedCoreServer) EgAfbGetBalance(context.Context, *EgAfbGetBalanceReq) (*EgAfbGetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EgAfbGetBalance not implemented")
}
func (UnimplementedCoreServer) EgAfbBet(context.Context, *EgAfbBetReq) (*EgAfbBetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EgAfbBet not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_AgIntlLivePostTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivePostTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AgIntlLivePostTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AgIntlLivePostTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AgIntlLivePostTransfer(ctx, req.(*LivePostTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AgIntlEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgIntlEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AgIntlEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AgIntlEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AgIntlEvent(ctx, req.(*AgIntlEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AgQJgetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgQJgetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AgQJgetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AgQJgetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AgQJgetBalance(ctx, req.(*AgQJgetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AgQJplayerTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgQJPlayerTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AgQJplayerTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AgQJplayerTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AgQJplayerTransfer(ctx, req.(*AgQJPlayerTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AgQJgameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgQJgameResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AgQJgameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AgQJgameResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AgQJgameResult(ctx, req.(*AgQJgameResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_AgQJgetCusTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgQJCusTransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).AgQJgetCusTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_AgQJgetCusTrans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).AgQJgetCusTrans(ctx, req.(*AgQJCusTransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_HealthZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).HealthZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_HealthZ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).HealthZ(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByPing(ctx, req.(*BetByPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByBetMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetMake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetMake(ctx, req.(*BetByBetMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByBetSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetSettlement(ctx, req.(*BetByBetSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetWin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetWinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetWin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetWin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetWin(ctx, req.(*BetWinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetLost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByBetLostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetLost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetLost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetLost(ctx, req.(*BetByBetLostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetDiscard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByBetDiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetDiscard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetDiscard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetDiscard(ctx, req.(*BetByBetDiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByBetRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetRefund(ctx, req.(*BetByBetRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetByBetRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetByBetRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetByBetRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetByBetRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetByBetRollback(ctx, req.(*BetByBetRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BoomingCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoomingCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BoomingCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BoomingCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BoomingCallback(ctx, req.(*BoomingCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9PlayerCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9PlayerCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9PlayerCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9PlayerCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9PlayerCheck(ctx, req.(*Cq9PlayerCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9TransactionBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9TransactionBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9TransactionBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9TransactionBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9TransactionBalance(ctx, req.(*Cq9TransactionBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9BetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Bet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Bet(ctx, req.(*Cq9BetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9EndRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9EndRoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9EndRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9EndRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9EndRound(ctx, req.(*Cq9EndRoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9TakeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9TakeAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9TakeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9TakeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9TakeAll(ctx, req.(*Cq9TakeAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Debit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9DebitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Debit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Debit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Debit(ctx, req.(*Cq9DebitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9CreditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Credit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Credit(ctx, req.(*Cq9CreditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Rollin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9RollinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Rollin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Rollin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Rollin(ctx, req.(*Cq9RollinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Rollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9RolloutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Rollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Rollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Rollout(ctx, req.(*Cq9RolloutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Payoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9PayoffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Payoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Payoff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Payoff(ctx, req.(*Cq9PayoffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9RecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Record_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Record(ctx, req.(*Cq9RecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Cq9Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cq9RefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Cq9Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Cq9Refund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Cq9Refund(ctx, req.(*Cq9RefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CrownGenericBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrownGenericRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CrownGenericBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CrownGenericBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CrownGenericBet(ctx, req.(*CrownGenericRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetElUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElGetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetElUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetElUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetElUserInfo(ctx, req.(*ElGetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetElBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElGetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetElBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetElBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetElBalance(ctx, req.(*ElGetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetEl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetEl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetEl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetEl(ctx, req.(*ElBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_WinEl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElWinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).WinEl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_WinEl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).WinEl(ctx, req.(*ElWinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CancelElBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CancelElBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CancelElBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CancelElBet(ctx, req.(*ElCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EndingGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndingGetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EndingGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EndingGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EndingGetBalance(ctx, req.(*EndingGetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EndingPlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndingPlaceBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EndingPlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EndingPlaceBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EndingPlaceBet(ctx, req.(*EndingPlaceBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EndingSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndingSettleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EndingSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EndingSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EndingSettle(ctx, req.(*EndingSettleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EvoCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvoCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EvoCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EvoCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EvoCheck(ctx, req.(*EvoCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EvoBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvoBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EvoBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EvoBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EvoBalance(ctx, req.(*EvoBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EvoDebit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvoMainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EvoDebit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EvoDebit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EvoDebit(ctx, req.(*EvoMainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EvoCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvoMainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EvoCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EvoCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EvoCredit(ctx, req.(*EvoMainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EvoCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvoMainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EvoCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EvoCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EvoCancel(ctx, req.(*EvoMainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EvoPromoPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvoPromoPayoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EvoPromoPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EvoPromoPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EvoPromoPayout(ctx, req.(*EvoPromoPayoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsBalance(ctx, req.(*FbsportsBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsOrderPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsOrderPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsOrderPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsOrderPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsOrderPay(ctx, req.(*FbsportsOrderPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsCheckOrderPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsOrderPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsCheckOrderPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsCheckOrderPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsCheckOrderPay(ctx, req.(*FbsportsOrderPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsSyncTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsSyncTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsSyncTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsSyncTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsSyncTransaction(ctx, req.(*FbsportsSyncTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsSyncOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsSyncOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsSyncOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsSyncOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsSyncOrders(ctx, req.(*FbsportsSyncOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsSyncCashOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsSyncCashOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsSyncCashOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsSyncCashOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsSyncCashOut(ctx, req.(*FbsportsSyncCashOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbsportsHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbsportsHealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbsportsHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbsportsHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbsportsHealth(ctx, req.(*FbsportsHealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BatchBetMatchMarketOfJumpLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchBetMatchMarketOfJumpLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BatchBetMatchMarketOfJumpLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BatchBetMatchMarketOfJumpLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BatchBetMatchMarketOfJumpLine(ctx, req.(*BatchBetMatchMarketOfJumpLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetSinglePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetSinglePassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetSinglePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetSinglePass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetSinglePass(ctx, req.(*BetSinglePassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetMultipleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetMultiple(ctx, req.(*BetMultipleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbBetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbBetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbBetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbBetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbBetList(ctx, req.(*FbBetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FbNewBetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbNewBetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FbNewBetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FbNewBetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FbNewBetList(ctx, req.(*FbNewBetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetStakeOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeOrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetStakeOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetStakeOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetStakeOrderStatus(ctx, req.(*GetStakeOrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FunkyGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunkyGetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FunkyGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FunkyGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FunkyGetBalance(ctx, req.(*FunkyGetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FunkyPlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunkyPlaceBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FunkyPlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FunkyPlaceBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FunkyPlaceBet(ctx, req.(*FunkyPlaceBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FunkyBetSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunkyBetSettleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FunkyBetSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FunkyBetSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FunkyBetSettle(ctx, req.(*FunkyBetSettleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FunkyCancelBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunkyCancelBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FunkyCancelBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FunkyCancelBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FunkyCancelBet(ctx, req.(*FunkyCancelBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FunkyCheckBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunkyCheckBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FunkyCheckBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_FunkyCheckBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FunkyCheckBet(ctx, req.(*FunkyCheckBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_HabaPlayerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabaPlayerDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).HabaPlayerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_HabaPlayerDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).HabaPlayerDetail(ctx, req.(*HabaPlayerDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_HabaTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabaFundTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).HabaTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_HabaTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).HabaTx(ctx, req.(*HabaFundTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_HabaQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabaQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).HabaQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_HabaQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).HabaQuery(ctx, req.(*HabaQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_HabaPlayerEndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabaPlayerEndSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).HabaPlayerEndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_HabaPlayerEndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).HabaPlayerEndSession(ctx, req.(*HabaPlayerEndSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_HabaAltFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabaAltFundsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).HabaAltFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_HabaAltFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).HabaAltFunds(ctx, req.(*HabaAltFundsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RtgGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtgGetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RtgGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RtgGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RtgGetBalance(ctx, req.(*RtgGetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RtgPlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtgPlaceBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RtgPlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RtgPlaceBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RtgPlaceBet(ctx, req.(*RtgPlaceBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RtgSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtgSettlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RtgSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RtgSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RtgSettlement(ctx, req.(*RtgSettlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RtgCancelBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtgCancelBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RtgCancelBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RtgCancelBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RtgCancelBet(ctx, req.(*RtgCancelBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TpgGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TpgGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TpgGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TpgGetBalance(ctx, req.(*TpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TpgDeduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TpgDeduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TpgDeduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TpgDeduction(ctx, req.(*TpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TpgPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TpgPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TpgPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TpgPayout(ctx, req.(*TpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TpgRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TpgRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TpgRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TpgRollback(ctx, req.(*TpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TpgDeductAndPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TpgDeductAndPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TpgDeductAndPayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TpgDeductAndPayout(ctx, req.(*TpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TpgBatchDeduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TpgBatchDeduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TpgBatchDeduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TpgBatchDeduction(ctx, req.(*TpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_JdbCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JdbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).JdbCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_JdbCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).JdbCallback(ctx, req.(*JdbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_JiLiAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JiLiAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).JiLiAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_JiLiAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).JiLiAuth(ctx, req.(*JiLiAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_JiLiBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JiLiBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).JiLiBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_JiLiBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).JiLiBet(ctx, req.(*JiLiBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_JiLiCancelBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JiLiCancelBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).JiLiCancelBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_JiLiCancelBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).JiLiCancelBet(ctx, req.(*JiLiCancelBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_JiLiSessionBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JiLiSessionBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).JiLiSessionBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_JiLiSessionBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).JiLiSessionBet(ctx, req.(*JiLiSessionBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_JiLiCancelSessionBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JiLiCancelSessionBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).JiLiCancelSessionBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_JiLiCancelSessionBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).JiLiCancelSessionBet(ctx, req.(*JiLiCancelSessionBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ObTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ObTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ObTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ObTransfer(ctx, req.(*ObTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ObCancelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObCancelTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ObCancelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ObCancelTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ObCancelTransfer(ctx, req.(*ObCancelTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PachinkoMoneyTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PachinkoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PachinkoMoneyTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PachinkoMoneyTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PachinkoMoneyTransfer(ctx, req.(*PachinkoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PachinkoGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PachinkoBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PachinkoGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PachinkoGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PachinkoGetBalance(ctx, req.(*PachinkoBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PgVerifySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgVerifySessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PgVerifySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PgVerifySession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PgVerifySession(ctx, req.(*PgVerifySessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PgCashGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgCashGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PgCashGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PgCashGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PgCashGet(ctx, req.(*PgCashGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PgCashTransferOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgCashTransferOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PgCashTransferOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PgCashTransferOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PgCashTransferOut(ctx, req.(*PgCashTransferOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnaclePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnaclePingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnaclePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnaclePing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnaclePing(ctx, req.(*PinnaclePingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleGetbalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleGetbalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleGetbalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleGetbalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleGetbalance(ctx, req.(*PinnacleGetbalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleDebit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleDebitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleDebit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleDebit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleDebit(ctx, req.(*PinnacleDebitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleCreditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleCredit(ctx, req.(*PinnacleCreditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleQuery(ctx, req.(*PinnacleQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringBetted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringBetted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringBetted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringBetted(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringAccepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringAccepted(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringRollbacked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringRollbacked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringRollbacked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringRollbacked(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringRejected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringRejected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringRejected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringRejected(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringSettled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringSettled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringSettled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringSettled(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringCancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringCancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringCancelled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringCancelled(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PinnacleWageringUnsettled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinnacleWageringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PinnacleWageringUnsettled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PinnacleWageringUnsettled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PinnacleWageringUnsettled(ctx, req.(*PinnacleWageringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_LogOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).LogOut(ctx, req.(*LogOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Bet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Bet(ctx, req.(*BetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetResult(ctx, req.(*BetResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_BetRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).BetRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_BetRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).BetRefund(ctx, req.(*BetRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Bonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BonusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Bonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Bonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Bonus(ctx, req.(*BonusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Resultex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Resultex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Resultex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Resultex(ctx, req.(*ResultexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpBet(ctx, req.(*PpBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpRefund(ctx, req.(*PpRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpResult(ctx, req.(*PpResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpBonusWin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpBonusWinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpBonusWin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpBonusWin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpBonusWin(ctx, req.(*PpBonusWinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpJackpotWin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpJackpotWinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpJackpotWin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpJackpotWin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpJackpotWin(ctx, req.(*PpJackpotWinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpPromoWin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpPromoWinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpPromoWin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpPromoWin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpPromoWin(ctx, req.(*PpPromoWinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PpAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PpAdjustmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PpAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PpAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PpAdjustment(ctx, req.(*PpAdjustmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaGetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaGetBalance(ctx, req.(*SabaGetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaPlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaPlaceBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaPlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaPlaceBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaPlaceBet(ctx, req.(*SabaPlaceBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaConfirmBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaConfirmBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaConfirmBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaConfirmBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaConfirmBet(ctx, req.(*SabaConfirmBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaConfirmBet3Rd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaConfirmBet3RdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaConfirmBet3Rd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaConfirmBet3Rd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaConfirmBet3Rd(ctx, req.(*SabaConfirmBet3RdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaCheckMemberOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaCheckMemberOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaCheckMemberOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaCheckMemberOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaCheckMemberOnline(ctx, req.(*SabaCheckMemberOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaCancelBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaCancelBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaCancelBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaCancelBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaCancelBet(ctx, req.(*SabaCancelBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaCancelBetent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaCancelBetentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaCancelBetent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaCancelBetent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaCancelBetent(ctx, req.(*SabaCancelBetentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaSettleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaSettle(ctx, req.(*SabaSettleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaSettleent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaSettleentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaSettleent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaSettleent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaSettleent(ctx, req.(*SabaSettleentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaGetTicketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaGetTicketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaGetTicketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaGetTicketInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaGetTicketInfo(ctx, req.(*SabaGetTicketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaResettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaSettleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaResettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaResettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaResettle(ctx, req.(*SabaSettleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaUnsettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaUnsettleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaUnsettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaUnsettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaUnsettle(ctx, req.(*SabaUnsettleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaHealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaHealthCheck(ctx, req.(*SabaHealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaAdjustBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaAdjustBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaAdjustBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaAdjustBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaAdjustBalance(ctx, req.(*SabaAdjustBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaPlaceBetParlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaPlaceBetParlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaPlaceBetParlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaPlaceBetParlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaPlaceBetParlay(ctx, req.(*SabaPlaceBetParlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaPlace3RdParlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaPlace3RdParlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaPlace3RdParlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaPlace3RdParlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaPlace3RdParlay(ctx, req.(*SabaPlace3RdParlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaPlaceBetent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaPlaceBetentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaPlaceBetent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaPlaceBetent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaPlaceBetent(ctx, req.(*SabaPlaceBetentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SabaConfirmBetParlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SabaConfirmBetParlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SabaConfirmBetParlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SabaConfirmBetParlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SabaConfirmBetParlay(ctx, req.(*SabaConfirmBetParlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TurboProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurboProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TurboProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TurboProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TurboProfile(ctx, req.(*TurboProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TurboPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurboBodyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TurboPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TurboPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TurboPlace(ctx, req.(*TurboBodyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TurboSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurboBodyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TurboSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TurboSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TurboSettle(ctx, req.(*TurboBodyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_TurboCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurboBodyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).TurboCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_TurboCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).TurboCancel(ctx, req.(*TurboBodyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Debit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Debit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Debit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Debit(ctx, req.(*DebitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Credit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Credit(ctx, req.(*CreditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Rollback(ctx, req.(*RollbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RsaGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RsaGenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RsaGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_RsaGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RsaGenerate(ctx, req.(*RsaGenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PlatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PlatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PlatLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PlatLogin(ctx, req.(*PlatLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_InitGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).InitGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_InitGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).InitGame(ctx, req.(*InitGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PlayGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PlayGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PlayGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PlayGame(ctx, req.(*PlayGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PlaySlotsGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaySlotsGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PlaySlotsGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PlaySlotsGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PlaySlotsGame(ctx, req.(*PlaySlotsGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PlayGameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayGameResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PlayGameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PlayGameResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PlayGameResult(ctx, req.(*PlayGameResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_PlayGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).PlayGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_PlayGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).PlayGameList(ctx, req.(*PlayGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_GameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GameList(ctx, req.(*GameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_OverGameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverGameResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).OverGameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_OverGameResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).OverGameResult(ctx, req.(*OverGameResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_SendEMQXTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEMQXTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).SendEMQXTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_SendEMQXTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).SendEMQXTest(ctx, req.(*SendEMQXTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronAuthorizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronAuthorize(ctx, req.(*ElectronAuthorizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronWithdraw(ctx, req.(*ElectronWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronDepositReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronDeposit(ctx, req.(*ElectronDepositReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronQueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronQueryOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronQueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronQueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronQueryOrder(ctx, req.(*ElectronQueryOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronUserInfo(ctx, req.(*ElectronUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronUserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronUserLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronUserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronUserLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronUserLogout(ctx, req.(*ElectronUserLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ElectronUserBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectronUserBroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ElectronUserBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_ElectronUserBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ElectronUserBroadcast(ctx, req.(*ElectronUserBroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_CompetitionRankingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionRankingRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).CompetitionRankingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_CompetitionRankingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).CompetitionRankingRewards(ctx, req.(*CompetitionRankingRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EgAfbGetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EgAfbGetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EgAfbGetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EgAfbGetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EgAfbGetBalance(ctx, req.(*EgAfbGetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_EgAfbBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EgAfbBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).EgAfbBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_EgAfbBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).EgAfbBet(ctx, req.(*EgAfbBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgIntlLivePostTransfer",
			Handler:    _Core_AgIntlLivePostTransfer_Handler,
		},
		{
			MethodName: "AgIntlEvent",
			Handler:    _Core_AgIntlEvent_Handler,
		},
		{
			MethodName: "AgQJgetBalance",
			Handler:    _Core_AgQJgetBalance_Handler,
		},
		{
			MethodName: "AgQJplayerTransfer",
			Handler:    _Core_AgQJplayerTransfer_Handler,
		},
		{
			MethodName: "AgQJgameResult",
			Handler:    _Core_AgQJgameResult_Handler,
		},
		{
			MethodName: "AgQJgetCusTrans",
			Handler:    _Core_AgQJgetCusTrans_Handler,
		},
		{
			MethodName: "initDatabase",
			Handler:    _Core_InitDatabase_Handler,
		},
		{
			MethodName: "healthZ",
			Handler:    _Core_HealthZ_Handler,
		},
		{
			MethodName: "BetByPing",
			Handler:    _Core_BetByPing_Handler,
		},
		{
			MethodName: "BetByBetMake",
			Handler:    _Core_BetByBetMake_Handler,
		},
		{
			MethodName: "BetByBetSettlement",
			Handler:    _Core_BetByBetSettlement_Handler,
		},
		{
			MethodName: "BetByBetWin",
			Handler:    _Core_BetByBetWin_Handler,
		},
		{
			MethodName: "BetByBetLost",
			Handler:    _Core_BetByBetLost_Handler,
		},
		{
			MethodName: "BetByBetDiscard",
			Handler:    _Core_BetByBetDiscard_Handler,
		},
		{
			MethodName: "BetByBetRefund",
			Handler:    _Core_BetByBetRefund_Handler,
		},
		{
			MethodName: "BetByBetRollback",
			Handler:    _Core_BetByBetRollback_Handler,
		},
		{
			MethodName: "BoomingCallback",
			Handler:    _Core_BoomingCallback_Handler,
		},
		{
			MethodName: "Cq9PlayerCheck",
			Handler:    _Core_Cq9PlayerCheck_Handler,
		},
		{
			MethodName: "Cq9TransactionBalance",
			Handler:    _Core_Cq9TransactionBalance_Handler,
		},
		{
			MethodName: "Cq9Bet",
			Handler:    _Core_Cq9Bet_Handler,
		},
		{
			MethodName: "Cq9EndRound",
			Handler:    _Core_Cq9EndRound_Handler,
		},
		{
			MethodName: "Cq9TakeAll",
			Handler:    _Core_Cq9TakeAll_Handler,
		},
		{
			MethodName: "Cq9Debit",
			Handler:    _Core_Cq9Debit_Handler,
		},
		{
			MethodName: "Cq9Credit",
			Handler:    _Core_Cq9Credit_Handler,
		},
		{
			MethodName: "Cq9Rollin",
			Handler:    _Core_Cq9Rollin_Handler,
		},
		{
			MethodName: "Cq9Rollout",
			Handler:    _Core_Cq9Rollout_Handler,
		},
		{
			MethodName: "Cq9Payoff",
			Handler:    _Core_Cq9Payoff_Handler,
		},
		{
			MethodName: "Cq9Record",
			Handler:    _Core_Cq9Record_Handler,
		},
		{
			MethodName: "Cq9Refund",
			Handler:    _Core_Cq9Refund_Handler,
		},
		{
			MethodName: "CrownGenericBet",
			Handler:    _Core_CrownGenericBet_Handler,
		},
		{
			MethodName: "getElUserInfo",
			Handler:    _Core_GetElUserInfo_Handler,
		},
		{
			MethodName: "getElBalance",
			Handler:    _Core_GetElBalance_Handler,
		},
		{
			MethodName: "betEl",
			Handler:    _Core_BetEl_Handler,
		},
		{
			MethodName: "winEl",
			Handler:    _Core_WinEl_Handler,
		},
		{
			MethodName: "cancelElBet",
			Handler:    _Core_CancelElBet_Handler,
		},
		{
			MethodName: "endingGetBalance",
			Handler:    _Core_EndingGetBalance_Handler,
		},
		{
			MethodName: "endingPlaceBet",
			Handler:    _Core_EndingPlaceBet_Handler,
		},
		{
			MethodName: "endingSettle",
			Handler:    _Core_EndingSettle_Handler,
		},
		{
			MethodName: "EvoCheck",
			Handler:    _Core_EvoCheck_Handler,
		},
		{
			MethodName: "EvoBalance",
			Handler:    _Core_EvoBalance_Handler,
		},
		{
			MethodName: "EvoDebit",
			Handler:    _Core_EvoDebit_Handler,
		},
		{
			MethodName: "EvoCredit",
			Handler:    _Core_EvoCredit_Handler,
		},
		{
			MethodName: "EvoCancel",
			Handler:    _Core_EvoCancel_Handler,
		},
		{
			MethodName: "EvoPromoPayout",
			Handler:    _Core_EvoPromoPayout_Handler,
		},
		{
			MethodName: "fbsportsBalance",
			Handler:    _Core_FbsportsBalance_Handler,
		},
		{
			MethodName: "fbsportsOrderPay",
			Handler:    _Core_FbsportsOrderPay_Handler,
		},
		{
			MethodName: "fbsportsCheckOrderPay",
			Handler:    _Core_FbsportsCheckOrderPay_Handler,
		},
		{
			MethodName: "fbsportsSyncTransaction",
			Handler:    _Core_FbsportsSyncTransaction_Handler,
		},
		{
			MethodName: "fbsportsSyncOrders",
			Handler:    _Core_FbsportsSyncOrders_Handler,
		},
		{
			MethodName: "fbsportsSyncCashOut",
			Handler:    _Core_FbsportsSyncCashOut_Handler,
		},
		{
			MethodName: "fbsportsHealth",
			Handler:    _Core_FbsportsHealth_Handler,
		},
		{
			MethodName: "batchBetMatchMarketOfJumpLine",
			Handler:    _Core_BatchBetMatchMarketOfJumpLine_Handler,
		},
		{
			MethodName: "BetSinglePass",
			Handler:    _Core_BetSinglePass_Handler,
		},
		{
			MethodName: "BetMultiple",
			Handler:    _Core_BetMultiple_Handler,
		},
		{
			MethodName: "FbBetList",
			Handler:    _Core_FbBetList_Handler,
		},
		{
			MethodName: "FbNewBetList",
			Handler:    _Core_FbNewBetList_Handler,
		},
		{
			MethodName: "GetStakeOrderStatus",
			Handler:    _Core_GetStakeOrderStatus_Handler,
		},
		{
			MethodName: "FunkyGetBalance",
			Handler:    _Core_FunkyGetBalance_Handler,
		},
		{
			MethodName: "FunkyPlaceBet",
			Handler:    _Core_FunkyPlaceBet_Handler,
		},
		{
			MethodName: "FunkyBetSettle",
			Handler:    _Core_FunkyBetSettle_Handler,
		},
		{
			MethodName: "FunkyCancelBet",
			Handler:    _Core_FunkyCancelBet_Handler,
		},
		{
			MethodName: "FunkyCheckBet",
			Handler:    _Core_FunkyCheckBet_Handler,
		},
		{
			MethodName: "HabaPlayerDetail",
			Handler:    _Core_HabaPlayerDetail_Handler,
		},
		{
			MethodName: "HabaTx",
			Handler:    _Core_HabaTx_Handler,
		},
		{
			MethodName: "HabaQuery",
			Handler:    _Core_HabaQuery_Handler,
		},
		{
			MethodName: "HabaPlayerEndSession",
			Handler:    _Core_HabaPlayerEndSession_Handler,
		},
		{
			MethodName: "HabaAltFunds",
			Handler:    _Core_HabaAltFunds_Handler,
		},
		{
			MethodName: "RtgGetBalance",
			Handler:    _Core_RtgGetBalance_Handler,
		},
		{
			MethodName: "RtgPlaceBet",
			Handler:    _Core_RtgPlaceBet_Handler,
		},
		{
			MethodName: "RtgSettlement",
			Handler:    _Core_RtgSettlement_Handler,
		},
		{
			MethodName: "RtgCancelBet",
			Handler:    _Core_RtgCancelBet_Handler,
		},
		{
			MethodName: "tpgGetBalance",
			Handler:    _Core_TpgGetBalance_Handler,
		},
		{
			MethodName: "tpgDeduction",
			Handler:    _Core_TpgDeduction_Handler,
		},
		{
			MethodName: "tpgPayout",
			Handler:    _Core_TpgPayout_Handler,
		},
		{
			MethodName: "tpgRollback",
			Handler:    _Core_TpgRollback_Handler,
		},
		{
			MethodName: "tpgDeductAndPayout",
			Handler:    _Core_TpgDeductAndPayout_Handler,
		},
		{
			MethodName: "tpgBatchDeduction",
			Handler:    _Core_TpgBatchDeduction_Handler,
		},
		{
			MethodName: "JdbCallback",
			Handler:    _Core_JdbCallback_Handler,
		},
		{
			MethodName: "jiLiAuth",
			Handler:    _Core_JiLiAuth_Handler,
		},
		{
			MethodName: "jiLiBet",
			Handler:    _Core_JiLiBet_Handler,
		},
		{
			MethodName: "jiLiCancelBet",
			Handler:    _Core_JiLiCancelBet_Handler,
		},
		{
			MethodName: "jiLiSessionBet",
			Handler:    _Core_JiLiSessionBet_Handler,
		},
		{
			MethodName: "jiLiCancelSessionBet",
			Handler:    _Core_JiLiCancelSessionBet_Handler,
		},
		{
			MethodName: "ObTransfer",
			Handler:    _Core_ObTransfer_Handler,
		},
		{
			MethodName: "ObCancelTransfer",
			Handler:    _Core_ObCancelTransfer_Handler,
		},
		{
			MethodName: "PachinkoMoneyTransfer",
			Handler:    _Core_PachinkoMoneyTransfer_Handler,
		},
		{
			MethodName: "PachinkoGetBalance",
			Handler:    _Core_PachinkoGetBalance_Handler,
		},
		{
			MethodName: "PgVerifySession",
			Handler:    _Core_PgVerifySession_Handler,
		},
		{
			MethodName: "PgCashGet",
			Handler:    _Core_PgCashGet_Handler,
		},
		{
			MethodName: "PgCashTransferOut",
			Handler:    _Core_PgCashTransferOut_Handler,
		},
		{
			MethodName: "PinnaclePing",
			Handler:    _Core_PinnaclePing_Handler,
		},
		{
			MethodName: "PinnacleGetbalance",
			Handler:    _Core_PinnacleGetbalance_Handler,
		},
		{
			MethodName: "PinnacleDebit",
			Handler:    _Core_PinnacleDebit_Handler,
		},
		{
			MethodName: "PinnacleCredit",
			Handler:    _Core_PinnacleCredit_Handler,
		},
		{
			MethodName: "PinnacleQuery",
			Handler:    _Core_PinnacleQuery_Handler,
		},
		{
			MethodName: "PinnacleWageringBetted",
			Handler:    _Core_PinnacleWageringBetted_Handler,
		},
		{
			MethodName: "PinnacleWageringAccepted",
			Handler:    _Core_PinnacleWageringAccepted_Handler,
		},
		{
			MethodName: "PinnacleWageringRollbacked",
			Handler:    _Core_PinnacleWageringRollbacked_Handler,
		},
		{
			MethodName: "PinnacleWageringRejected",
			Handler:    _Core_PinnacleWageringRejected_Handler,
		},
		{
			MethodName: "PinnacleWageringSettled",
			Handler:    _Core_PinnacleWageringSettled_Handler,
		},
		{
			MethodName: "PinnacleWageringCancelled",
			Handler:    _Core_PinnacleWageringCancelled_Handler,
		},
		{
			MethodName: "PinnacleWageringUnsettled",
			Handler:    _Core_PinnacleWageringUnsettled_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Core_Auth_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _Core_LogOut_Handler,
		},
		{
			MethodName: "Bet",
			Handler:    _Core_Bet_Handler,
		},
		{
			MethodName: "BetResult",
			Handler:    _Core_BetResult_Handler,
		},
		{
			MethodName: "BetRefund",
			Handler:    _Core_BetRefund_Handler,
		},
		{
			MethodName: "Bonus",
			Handler:    _Core_Bonus_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Core_GetBalance_Handler,
		},
		{
			MethodName: "Resultex",
			Handler:    _Core_Resultex_Handler,
		},
		{
			MethodName: "PpBet",
			Handler:    _Core_PpBet_Handler,
		},
		{
			MethodName: "PpRefund",
			Handler:    _Core_PpRefund_Handler,
		},
		{
			MethodName: "PpResult",
			Handler:    _Core_PpResult_Handler,
		},
		{
			MethodName: "PpBonusWin",
			Handler:    _Core_PpBonusWin_Handler,
		},
		{
			MethodName: "PpJackpotWin",
			Handler:    _Core_PpJackpotWin_Handler,
		},
		{
			MethodName: "PpPromoWin",
			Handler:    _Core_PpPromoWin_Handler,
		},
		{
			MethodName: "PpAdjustment",
			Handler:    _Core_PpAdjustment_Handler,
		},
		{
			MethodName: "sabaGetBalance",
			Handler:    _Core_SabaGetBalance_Handler,
		},
		{
			MethodName: "sabaPlaceBet",
			Handler:    _Core_SabaPlaceBet_Handler,
		},
		{
			MethodName: "sabaConfirmBet",
			Handler:    _Core_SabaConfirmBet_Handler,
		},
		{
			MethodName: "sabaConfirmBet3rd",
			Handler:    _Core_SabaConfirmBet3Rd_Handler,
		},
		{
			MethodName: "sabaCheckMemberOnline",
			Handler:    _Core_SabaCheckMemberOnline_Handler,
		},
		{
			MethodName: "sabaCancelBet",
			Handler:    _Core_SabaCancelBet_Handler,
		},
		{
			MethodName: "sabaCancelBetent",
			Handler:    _Core_SabaCancelBetent_Handler,
		},
		{
			MethodName: "sabaSettle",
			Handler:    _Core_SabaSettle_Handler,
		},
		{
			MethodName: "sabaSettleent",
			Handler:    _Core_SabaSettleent_Handler,
		},
		{
			MethodName: "sabaGetTicketInfo",
			Handler:    _Core_SabaGetTicketInfo_Handler,
		},
		{
			MethodName: "sabaResettle",
			Handler:    _Core_SabaResettle_Handler,
		},
		{
			MethodName: "sabaUnsettle",
			Handler:    _Core_SabaUnsettle_Handler,
		},
		{
			MethodName: "sabaHealthCheck",
			Handler:    _Core_SabaHealthCheck_Handler,
		},
		{
			MethodName: "sabaAdjustBalance",
			Handler:    _Core_SabaAdjustBalance_Handler,
		},
		{
			MethodName: "sabaPlaceBetParlay",
			Handler:    _Core_SabaPlaceBetParlay_Handler,
		},
		{
			MethodName: "sabaPlace3rdParlay",
			Handler:    _Core_SabaPlace3RdParlay_Handler,
		},
		{
			MethodName: "SabaPlaceBetent",
			Handler:    _Core_SabaPlaceBetent_Handler,
		},
		{
			MethodName: "sabaConfirmBetParlay",
			Handler:    _Core_SabaConfirmBetParlay_Handler,
		},
		{
			MethodName: "turboProfile",
			Handler:    _Core_TurboProfile_Handler,
		},
		{
			MethodName: "turboPlace",
			Handler:    _Core_TurboPlace_Handler,
		},
		{
			MethodName: "turboSettle",
			Handler:    _Core_TurboSettle_Handler,
		},
		{
			MethodName: "turboCancel",
			Handler:    _Core_TurboCancel_Handler,
		},
		{
			MethodName: "Debit",
			Handler:    _Core_Debit_Handler,
		},
		{
			MethodName: "Credit",
			Handler:    _Core_Credit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Core_Rollback_Handler,
		},
		{
			MethodName: "RsaGenerate",
			Handler:    _Core_RsaGenerate_Handler,
		},
		{
			MethodName: "platLogin",
			Handler:    _Core_PlatLogin_Handler,
		},
		{
			MethodName: "initGame",
			Handler:    _Core_InitGame_Handler,
		},
		{
			MethodName: "playGame",
			Handler:    _Core_PlayGame_Handler,
		},
		{
			MethodName: "playSlotsGame",
			Handler:    _Core_PlaySlotsGame_Handler,
		},
		{
			MethodName: "playGameResult",
			Handler:    _Core_PlayGameResult_Handler,
		},
		{
			MethodName: "playGameList",
			Handler:    _Core_PlayGameList_Handler,
		},
		{
			MethodName: "GameList",
			Handler:    _Core_GameList_Handler,
		},
		{
			MethodName: "OverGameResult",
			Handler:    _Core_OverGameResult_Handler,
		},
		{
			MethodName: "SendEMQXTest",
			Handler:    _Core_SendEMQXTest_Handler,
		},
		{
			MethodName: "ElectronAuthorize",
			Handler:    _Core_ElectronAuthorize_Handler,
		},
		{
			MethodName: "ElectronWithdraw",
			Handler:    _Core_ElectronWithdraw_Handler,
		},
		{
			MethodName: "ElectronDeposit",
			Handler:    _Core_ElectronDeposit_Handler,
		},
		{
			MethodName: "ElectronQueryOrder",
			Handler:    _Core_ElectronQueryOrder_Handler,
		},
		{
			MethodName: "ElectronUserInfo",
			Handler:    _Core_ElectronUserInfo_Handler,
		},
		{
			MethodName: "ElectronUserLogout",
			Handler:    _Core_ElectronUserLogout_Handler,
		},
		{
			MethodName: "ElectronUserBroadcast",
			Handler:    _Core_ElectronUserBroadcast_Handler,
		},
		{
			MethodName: "CompetitionRankingRewards",
			Handler:    _Core_CompetitionRankingRewards_Handler,
		},
		{
			MethodName: "EgAfbGetBalance",
			Handler:    _Core_EgAfbGetBalance_Handler,
		},
		{
			MethodName: "EgAfbBet",
			Handler:    _Core_EgAfbBet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core.proto",
}
