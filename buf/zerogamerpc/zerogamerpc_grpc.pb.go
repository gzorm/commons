// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc2
// source: zerogamerpc.proto

package zerogamerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Zerogamerpc_FbTourist_FullMethodName                             = "/zerogamerpc.Zerogamerpc/FbTourist"
	Zerogamerpc_GameList_FullMethodName                              = "/zerogamerpc.Zerogamerpc/GameList"
	Zerogamerpc_GameDetails_FullMethodName                           = "/zerogamerpc.Zerogamerpc/GameDetails"
	Zerogamerpc_StartGame_FullMethodName                             = "/zerogamerpc.Zerogamerpc/startGame"
	Zerogamerpc_OutGameForTransferWallet_FullMethodName              = "/zerogamerpc.Zerogamerpc/outGameForTransferWallet"
	Zerogamerpc_PostFrb_FullMethodName                               = "/zerogamerpc.Zerogamerpc/postFrb"
	Zerogamerpc_SlotGameList_FullMethodName                          = "/zerogamerpc.Zerogamerpc/slotGameList"
	Zerogamerpc_BetList_FullMethodName                               = "/zerogamerpc.Zerogamerpc/betList"
	Zerogamerpc_BetStatistics_FullMethodName                         = "/zerogamerpc.Zerogamerpc/betStatistics"
	Zerogamerpc_GameFavorite_FullMethodName                          = "/zerogamerpc.Zerogamerpc/gameFavorite"
	Zerogamerpc_GetRankList_FullMethodName                           = "/zerogamerpc.Zerogamerpc/getRankList"
	Zerogamerpc_GetPlatformProfit_FullMethodName                     = "/zerogamerpc.Zerogamerpc/getPlatformProfit"
	Zerogamerpc_GetPlatformProfitList_FullMethodName                 = "/zerogamerpc.Zerogamerpc/getPlatformProfitList"
	Zerogamerpc_PlatProfitAndBetCountChart_FullMethodName            = "/zerogamerpc.Zerogamerpc/platProfitAndBetCountChart"
	Zerogamerpc_UserSummary_FullMethodName                           = "/zerogamerpc.Zerogamerpc/userSummary"
	Zerogamerpc_TradingManageList_FullMethodName                     = "/zerogamerpc.Zerogamerpc/tradingManageList"
	Zerogamerpc_StatisticsTrading_FullMethodName                     = "/zerogamerpc.Zerogamerpc/statisticsTrading"
	Zerogamerpc_FreeGameRecordList_FullMethodName                    = "/zerogamerpc.Zerogamerpc/freeGameRecordList"
	Zerogamerpc_CreateFreeGame_FullMethodName                        = "/zerogamerpc.Zerogamerpc/createFreeGame"
	Zerogamerpc_DeleteFreeGame_FullMethodName                        = "/zerogamerpc.Zerogamerpc/deleteFreeGame"
	Zerogamerpc_UpdateSubGame_FullMethodName                         = "/zerogamerpc.Zerogamerpc/UpdateSubGame"
	Zerogamerpc_AddSubGame_FullMethodName                            = "/zerogamerpc.Zerogamerpc/AddSubGame"
	Zerogamerpc_ListSubGame_FullMethodName                           = "/zerogamerpc.Zerogamerpc/listSubGame"
	Zerogamerpc_GetAllGameProvider_FullMethodName                    = "/zerogamerpc.Zerogamerpc/GetAllGameProvider"
	Zerogamerpc_SearchGameList_FullMethodName                        = "/zerogamerpc.Zerogamerpc/searchGameList"
	Zerogamerpc_AdminBetStatistics_FullMethodName                    = "/zerogamerpc.Zerogamerpc/AdminBetStatistics"
	Zerogamerpc_BetPage_FullMethodName                               = "/zerogamerpc.Zerogamerpc/BetPage"
	Zerogamerpc_BetSummary_FullMethodName                            = "/zerogamerpc.Zerogamerpc/BetSummary"
	Zerogamerpc_AgentBetSummary_FullMethodName                       = "/zerogamerpc.Zerogamerpc/AgentBetSummary"
	Zerogamerpc_AgentBetPage_FullMethodName                          = "/zerogamerpc.Zerogamerpc/AgentBetPage"
	Zerogamerpc_AgentBetStatistics_FullMethodName                    = "/zerogamerpc.Zerogamerpc/AgentBetStatistics"
	Zerogamerpc_AgentGameList_FullMethodName                         = "/zerogamerpc.Zerogamerpc/AgentGameList"
	Zerogamerpc_AgentGetGamesByCategory_FullMethodName               = "/zerogamerpc.Zerogamerpc/AgentGetGamesByCategory"
	Zerogamerpc_AgentGamePagcorList_FullMethodName                   = "/zerogamerpc.Zerogamerpc/AgentGamePagcorList"
	Zerogamerpc_AgentListSubGame_FullMethodName                      = "/zerogamerpc.Zerogamerpc/AgentListSubGame"
	Zerogamerpc_DailyReportStatisticsPlatCoin_FullMethodName         = "/zerogamerpc.Zerogamerpc/DailyReportStatisticsPlatCoin"
	Zerogamerpc_AdminBetGameList_FullMethodName                      = "/zerogamerpc.Zerogamerpc/AdminBetGameList"
	Zerogamerpc_AddGameOperationUrl_FullMethodName                   = "/zerogamerpc.Zerogamerpc/addGameOperationUrl"
	Zerogamerpc_DelGameOperationUrl_FullMethodName                   = "/zerogamerpc.Zerogamerpc/delGameOperationUrl"
	Zerogamerpc_UpdateGameOperationUrl_FullMethodName                = "/zerogamerpc.Zerogamerpc/updateGameOperationUrl"
	Zerogamerpc_GetUpdateGameOperationUrlDetail_FullMethodName       = "/zerogamerpc.Zerogamerpc/getUpdateGameOperationUrlDetail"
	Zerogamerpc_GetGameOperationUrlList_FullMethodName               = "/zerogamerpc.Zerogamerpc/getGameOperationUrlList"
	Zerogamerpc_GetSportHotGameList_FullMethodName                   = "/zerogamerpc.Zerogamerpc/GetSportHotGameList"
	Zerogamerpc_StartSportHotGame_FullMethodName                     = "/zerogamerpc.Zerogamerpc/startSportHotGame"
	Zerogamerpc_AddFrontClassifyInfoCms_FullMethodName               = "/zerogamerpc.Zerogamerpc/AddFrontClassifyInfoCms"
	Zerogamerpc_FrontClassifyGameInfoPage_FullMethodName             = "/zerogamerpc.Zerogamerpc/frontClassifyGameInfoPage"
	Zerogamerpc_ValidStakeCron_FullMethodName                        = "/zerogamerpc.Zerogamerpc/ValidStakeCron"
	Zerogamerpc_ValidStakeWeekCron_FullMethodName                    = "/zerogamerpc.Zerogamerpc/ValidStakeWeekCron"
	Zerogamerpc_ValidStakeMonthCron_FullMethodName                   = "/zerogamerpc.Zerogamerpc/ValidStakeMonthCron"
	Zerogamerpc_MonthlyReductionInCoding_FullMethodName              = "/zerogamerpc.Zerogamerpc/MonthlyReductionInCoding"
	Zerogamerpc_GetMatchPageList_FullMethodName                      = "/zerogamerpc.Zerogamerpc/getMatchPageList"
	Zerogamerpc_GetRecommendMatchList_FullMethodName                 = "/zerogamerpc.Zerogamerpc/getRecommendMatchList"
	Zerogamerpc_GetRecomendPlayMatchList_FullMethodName              = "/zerogamerpc.Zerogamerpc/getRecomendPlayMatchList"
	Zerogamerpc_GetFutureMatchCount_FullMethodName                   = "/zerogamerpc.Zerogamerpc/getFutureMatchCount"
	Zerogamerpc_GetMatchMarketGroup_FullMethodName                   = "/zerogamerpc.Zerogamerpc/getMatchMarketGroup"
	Zerogamerpc_GetMatchStatistical_FullMethodName                   = "/zerogamerpc.Zerogamerpc/getMatchStatistical"
	Zerogamerpc_GetMatchDetail_FullMethodName                        = "/zerogamerpc.Zerogamerpc/getMatchDetail"
	Zerogamerpc_GetMatchLeaguesList_FullMethodName                   = "/zerogamerpc.Zerogamerpc/getMatchLeaguesList"
	Zerogamerpc_GetMatchResultPageList_FullMethodName                = "/zerogamerpc.Zerogamerpc/getMatchResultPageList"
	Zerogamerpc_GetMatchResultInfo_FullMethodName                    = "/zerogamerpc.Zerogamerpc/getMatchResultInfo"
	Zerogamerpc_GetMatchByRecommend_FullMethodName                   = "/zerogamerpc.Zerogamerpc/getMatchByRecommend"
	Zerogamerpc_GetMatchLeaguesRecomment_FullMethodName              = "/zerogamerpc.Zerogamerpc/getMatchLeaguesRecomment"
	Zerogamerpc_GetMatchTopRecomment_FullMethodName                  = "/zerogamerpc.Zerogamerpc/getMatchTopRecomment"
	Zerogamerpc_GetMatchIndexMainList_FullMethodName                 = "/zerogamerpc.Zerogamerpc/getMatchIndexMainList"
	Zerogamerpc_GetMatchIndexMarkets_FullMethodName                  = "/zerogamerpc.Zerogamerpc/getMatchIndexMarkets"
	Zerogamerpc_GetMatchIndexUrl_FullMethodName                      = "/zerogamerpc.Zerogamerpc/getMatchIndexUrl"
	Zerogamerpc_SaveLiveAnchor_FullMethodName                        = "/zerogamerpc.Zerogamerpc/saveLiveAnchor"
	Zerogamerpc_DeleteLiveAnchor_FullMethodName                      = "/zerogamerpc.Zerogamerpc/deleteLiveAnchor"
	Zerogamerpc_GetLiveAnchorList_FullMethodName                     = "/zerogamerpc.Zerogamerpc/getLiveAnchorList"
	Zerogamerpc_SaveLiveRoom_FullMethodName                          = "/zerogamerpc.Zerogamerpc/saveLiveRoom"
	Zerogamerpc_DeleteLiveRoom_FullMethodName                        = "/zerogamerpc.Zerogamerpc/deleteLiveRoom"
	Zerogamerpc_DownLiveRoom_FullMethodName                          = "/zerogamerpc.Zerogamerpc/downLiveRoom"
	Zerogamerpc_GetLiveRoomList_FullMethodName                       = "/zerogamerpc.Zerogamerpc/getLiveRoomList"
	Zerogamerpc_GetLiveRoomMatchList_FullMethodName                  = "/zerogamerpc.Zerogamerpc/getLiveRoomMatchList"
	Zerogamerpc_LiveRoomCallBack_FullMethodName                      = "/zerogamerpc.Zerogamerpc/liveRoomCallBack"
	Zerogamerpc_GetRecommendLiveRoomMatchList_FullMethodName         = "/zerogamerpc.Zerogamerpc/getRecommendLiveRoomMatchList"
	Zerogamerpc_GetRecommentLiveRoomMatchDetailOption_FullMethodName = "/zerogamerpc.Zerogamerpc/getRecommentLiveRoomMatchDetailOption"
	Zerogamerpc_GetRecommentLiveRoomMatchResult_FullMethodName       = "/zerogamerpc.Zerogamerpc/getRecommentLiveRoomMatchResult"
)

// ZerogamerpcClient is the client API for Zerogamerpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZerogamerpcClient interface {
	// group: playGame
	FbTourist(ctx context.Context, in *FbTouristReq, opts ...grpc.CallOption) (*FbTouristResp, error)
	// group: playGame
	GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListResp, error)
	// group: playGame
	GameDetails(ctx context.Context, in *GameDetailsReq, opts ...grpc.CallOption) (*GameDetailsResp, error)
	// group: startGame
	StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameResp, error)
	// group: startGame
	OutGameForTransferWallet(ctx context.Context, in *OutGameForTransferWalletReq, opts ...grpc.CallOption) (*OutGameForTransferWalletResp, error)
	// group: startGame
	PostFrb(ctx context.Context, in *BonusesReq, opts ...grpc.CallOption) (*BonusesRes, error)
	// group: startGame
	SlotGameList(ctx context.Context, in *SlotGameListReq, opts ...grpc.CallOption) (*SlotGameListResp, error)
	// group: startGame
	BetList(ctx context.Context, in *BetListReq, opts ...grpc.CallOption) (*BetListResp, error)
	// group: startGame
	BetStatistics(ctx context.Context, in *BetStatisticsReq, opts ...grpc.CallOption) (*BetStatisticsResp, error)
	// group: startGame
	GameFavorite(ctx context.Context, in *GameFavoriteReq, opts ...grpc.CallOption) (*GameFavoriteResp, error)
	// group: startGame
	GetRankList(ctx context.Context, in *GetRankListReq, opts ...grpc.CallOption) (*GetRankListResp, error)
	// group: report
	GetPlatformProfit(ctx context.Context, in *GetPlatformProfitReq, opts ...grpc.CallOption) (*GetPlatformProfitResp, error)
	// group: report
	GetPlatformProfitList(ctx context.Context, in *GetPlatformProfitListReq, opts ...grpc.CallOption) (*GetPlatformProfitListResp, error)
	// group: report
	PlatProfitAndBetCountChart(ctx context.Context, in *PlatProfitAndBetCountChartReq, opts ...grpc.CallOption) (*PlatProfitAndBetCountChartResp, error)
	// group: report
	UserSummary(ctx context.Context, in *UserSummaryReq, opts ...grpc.CallOption) (*UserSummaryResp, error)
	// group: report
	TradingManageList(ctx context.Context, in *TradingManageListReq, opts ...grpc.CallOption) (*TradingManageListResp, error)
	// group: report
	StatisticsTrading(ctx context.Context, in *StatisticsTradingReq, opts ...grpc.CallOption) (*StatisticsTradingResp, error)
	// group: system
	FreeGameRecordList(ctx context.Context, in *FreeGameRecordListReq, opts ...grpc.CallOption) (*FreeGameRecordListResp, error)
	// group: system
	CreateFreeGame(ctx context.Context, in *CreateFreeGameReq, opts ...grpc.CallOption) (*CreateFreeGameResp, error)
	// group: system
	DeleteFreeGame(ctx context.Context, in *DeleteFreeGameReq, opts ...grpc.CallOption) (*DeleteFreeGameResp, error)
	//group:system
	UpdateSubGame(ctx context.Context, in *UpdateSubGameReq, opts ...grpc.CallOption) (*UpdateSubGameResp, error)
	//group:system
	AddSubGame(ctx context.Context, in *AddSubGameReq, opts ...grpc.CallOption) (*AddSubGameResp, error)
	//group:system
	ListSubGame(ctx context.Context, in *ListSubGameReq, opts ...grpc.CallOption) (*ListSubGameResp, error)
	//group:system
	GetAllGameProvider(ctx context.Context, in *GetAllGameProviderReq, opts ...grpc.CallOption) (*GetAllGameProviderResp, error)
	// group: startGame
	SearchGameList(ctx context.Context, in *SearchGameListReq, opts ...grpc.CallOption) (*SearchGameListResp, error)
	// group: admin bet record
	AdminBetStatistics(ctx context.Context, in *AdminBetStatisticsRequest, opts ...grpc.CallOption) (*AdminBetStatisticsResponse, error)
	// group: admin bet record
	BetPage(ctx context.Context, in *BetPageRequest, opts ...grpc.CallOption) (*BetPageResponse, error)
	// group: admin bet record
	BetSummary(ctx context.Context, in *BetSummaryRequest, opts ...grpc.CallOption) (*BetSummaryResponse, error)
	// group: agent
	AgentBetSummary(ctx context.Context, in *AgentBetSummaryRequest, opts ...grpc.CallOption) (*AgentBetSummaryResponse, error)
	// group: agent
	AgentBetPage(ctx context.Context, in *AgentBetPageRequest, opts ...grpc.CallOption) (*AgentBetPageResponse, error)
	// group: agent
	AgentBetStatistics(ctx context.Context, in *AgentBetStatisticsRequest, opts ...grpc.CallOption) (*AgentBetStatisticsResponse, error)
	// group: agent
	AgentGameList(ctx context.Context, in *AgentGameListReq, opts ...grpc.CallOption) (*AgentGameListResp, error)
	// group: agent
	AgentGetGamesByCategory(ctx context.Context, in *AgentGetGamesByCategoryReq, opts ...grpc.CallOption) (*AgentGetGamesByCategoryResp, error)
	// group: agent
	AgentGamePagcorList(ctx context.Context, in *AgentGamePagcorListReq, opts ...grpc.CallOption) (*AgentGamePagcorListResp, error)
	// group: agent
	AgentListSubGame(ctx context.Context, in *AgentListSubGameReq, opts ...grpc.CallOption) (*AgentListSubGameResp, error)
	// group: report
	DailyReportStatisticsPlatCoin(ctx context.Context, in *DailyReportStatisticsPlatCoinReq, opts ...grpc.CallOption) (*DailyReportStatisticsPlatCoinResp, error)
	// group: report
	AdminBetGameList(ctx context.Context, in *AdminBetGameListReq, opts ...grpc.CallOption) (*AdminBetGameListResp, error)
	// group: gameOperationUrl
	AddGameOperationUrl(ctx context.Context, in *AddGameOperationUrlReq, opts ...grpc.CallOption) (*AddGameOperationUrlResp, error)
	// group: gameOperationUrl
	DelGameOperationUrl(ctx context.Context, in *DelGameOperationUrlReq, opts ...grpc.CallOption) (*DelGameOperationUrlResp, error)
	// group: gameOperationUrl
	UpdateGameOperationUrl(ctx context.Context, in *UpdateGameOperationUrlReq, opts ...grpc.CallOption) (*UpdateGameOperationUrlResp, error)
	// group: gameOperationUrl
	GetUpdateGameOperationUrlDetail(ctx context.Context, in *GetUpdateGameOperationUrlDetailReq, opts ...grpc.CallOption) (*GetUpdateGameOperationUrlDetailResp, error)
	// group: gameOperationUrl
	GetGameOperationUrlList(ctx context.Context, in *GetGameOperationUrlListReq, opts ...grpc.CallOption) (*GetGameOperationUrlListResp, error)
	// group: system
	GetSportHotGameList(ctx context.Context, in *GetSportHotGameListReq, opts ...grpc.CallOption) (*GetSportHotGameListResp, error)
	// group: startGame
	StartSportHotGame(ctx context.Context, in *StartSportHotGameReq, opts ...grpc.CallOption) (*StartSportHotGameResp, error)
	// group: system
	AddFrontClassifyInfoCms(ctx context.Context, in *AddFrontClassifyInfoCmsReq, opts ...grpc.CallOption) (*AddFrontClassifyInfoCmsResp, error)
	//group:system
	FrontClassifyGameInfoPage(ctx context.Context, in *FrontClassifyGameInfoPageReq, opts ...grpc.CallOption) (*FrontClassifyGameInfoPageResp, error)
	// group: crontab
	ValidStakeCron(ctx context.Context, in *ValidStakeCronReq, opts ...grpc.CallOption) (*ValidStakeCronResp, error)
	// group: crontab
	ValidStakeWeekCron(ctx context.Context, in *ValidStakeWeekCronReq, opts ...grpc.CallOption) (*ValidStakeWeekCronResp, error)
	// group: crontab
	ValidStakeMonthCron(ctx context.Context, in *ValidStakeMonthCronReq, opts ...grpc.CallOption) (*ValidStakeMonthCronResp, error)
	// group: crontab
	MonthlyReductionInCoding(ctx context.Context, in *MonthlyReductionInCodingReq, opts ...grpc.CallOption) (*MonthlyReductionInCodingResp, error)
	// group: match
	GetMatchPageList(ctx context.Context, in *GetMatchPageListReq, opts ...grpc.CallOption) (*GetMatchPageListResp, error)
	// group: match
	GetRecommendMatchList(ctx context.Context, in *GetRecommendMatchListReq, opts ...grpc.CallOption) (*GetRecommendMatchListResp, error)
	// group: match
	GetRecomendPlayMatchList(ctx context.Context, in *GetRecomendPlayMatchListReq, opts ...grpc.CallOption) (*GetRecomendPlayMatchListResp, error)
	// group: match
	GetFutureMatchCount(ctx context.Context, in *GetFutureMatchCountReq, opts ...grpc.CallOption) (*GetFutureMatchCountResp, error)
	// group: match
	GetMatchMarketGroup(ctx context.Context, in *GetMatchMarketGroupReq, opts ...grpc.CallOption) (*GetMatchMarketGroupResp, error)
	// group: match
	GetMatchStatistical(ctx context.Context, in *GetMatchStatisticalReq, opts ...grpc.CallOption) (*GetMatchStatisticalResp, error)
	// group: match
	GetMatchDetail(ctx context.Context, in *GetMatchDetailReq, opts ...grpc.CallOption) (*GetMatchDetailResp, error)
	// group: match
	GetMatchLeaguesList(ctx context.Context, in *GetMatchLeaguesListReq, opts ...grpc.CallOption) (*GetMatchLeaguesListResp, error)
	// group: match
	GetMatchResultPageList(ctx context.Context, in *GetMatchResultPageListReq, opts ...grpc.CallOption) (*GetMatchResultPageListResp, error)
	// group: match
	GetMatchResultInfo(ctx context.Context, in *GetMatchResultInfoReq, opts ...grpc.CallOption) (*GetMatchResultInfoResp, error)
	// group: match
	GetMatchByRecommend(ctx context.Context, in *GetMatchByRecommendReq, opts ...grpc.CallOption) (*GetMatchByRecommendResp, error)
	// group: match
	GetMatchLeaguesRecomment(ctx context.Context, in *GetMatchLeaguesRecommentReq, opts ...grpc.CallOption) (*GetMatchLeaguesRecommentResp, error)
	// group: match
	GetMatchTopRecomment(ctx context.Context, in *GetMatchTopRecommentReq, opts ...grpc.CallOption) (*GetMatchTopRecommentResp, error)
	//group:match
	GetMatchIndexMainList(ctx context.Context, in *GetMatchIndexMainListReq, opts ...grpc.CallOption) (*GetMatchIndexMainListResp, error)
	//group:match
	GetMatchIndexMarkets(ctx context.Context, in *GetMatchIndexMarketsReq, opts ...grpc.CallOption) (*GetMatchIndexMarketsResp, error)
	//group:match
	GetMatchIndexUrl(ctx context.Context, in *GetMatchIndexUrlReq, opts ...grpc.CallOption) (*GetMatchIndexUrlResp, error)
	//group:live
	SaveLiveAnchor(ctx context.Context, in *SaveLiveAnchorReq, opts ...grpc.CallOption) (*SaveLiveAnchorResp, error)
	//group:live
	DeleteLiveAnchor(ctx context.Context, in *DeleteLiveAnchorReq, opts ...grpc.CallOption) (*DeleteLiveAnchorResp, error)
	//group:live
	GetLiveAnchorList(ctx context.Context, in *GetLiveAnchorListReq, opts ...grpc.CallOption) (*GetLiveAnchorListResp, error)
	//group:live
	SaveLiveRoom(ctx context.Context, in *SaveLiveRoomReq, opts ...grpc.CallOption) (*SaveLiveRoomResp, error)
	//group:live
	DeleteLiveRoom(ctx context.Context, in *DeleteLiveRoomReq, opts ...grpc.CallOption) (*DeleteLiveRoomResp, error)
	//group:live
	DownLiveRoom(ctx context.Context, in *DownLiveRoomReq, opts ...grpc.CallOption) (*DownLiveRoomResp, error)
	//group:live
	GetLiveRoomList(ctx context.Context, in *GetLiveRoomListReq, opts ...grpc.CallOption) (*GetLiveRoomListResp, error)
	//group:live
	GetLiveRoomMatchList(ctx context.Context, in *GetLiveRoomMatchListReq, opts ...grpc.CallOption) (*GetLiveRoomMatchListResp, error)
	//group:live
	LiveRoomCallBack(ctx context.Context, in *LiveRoomCallBackReq, opts ...grpc.CallOption) (*LiveRoomCallBackResp, error)
	//group:live
	GetRecommendLiveRoomMatchList(ctx context.Context, in *GetRecommendLiveRoomMatchListReq, opts ...grpc.CallOption) (*GetRecommendLiveRoomMatchListResp, error)
	//group:live
	GetRecommentLiveRoomMatchDetailOption(ctx context.Context, in *GetRecommentLiveRoomMatchDetailOptionReq, opts ...grpc.CallOption) (*GetRecommentLiveRoomMatchDetailOptionResp, error)
	//group:live
	GetRecommentLiveRoomMatchResult(ctx context.Context, in *GetRecommentLiveRoomMatchResultReq, opts ...grpc.CallOption) (*GetRecommentLiveRoomMatchResultResp, error)
}

type zerogamerpcClient struct {
	cc grpc.ClientConnInterface
}

func NewZerogamerpcClient(cc grpc.ClientConnInterface) ZerogamerpcClient {
	return &zerogamerpcClient{cc}
}

func (c *zerogamerpcClient) FbTourist(ctx context.Context, in *FbTouristReq, opts ...grpc.CallOption) (*FbTouristResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FbTouristResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_FbTourist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GameDetails(ctx context.Context, in *GameDetailsReq, opts ...grpc.CallOption) (*GameDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameDetailsResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GameDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_StartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) OutGameForTransferWallet(ctx context.Context, in *OutGameForTransferWalletReq, opts ...grpc.CallOption) (*OutGameForTransferWalletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutGameForTransferWalletResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_OutGameForTransferWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) PostFrb(ctx context.Context, in *BonusesReq, opts ...grpc.CallOption) (*BonusesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BonusesRes)
	err := c.cc.Invoke(ctx, Zerogamerpc_PostFrb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) SlotGameList(ctx context.Context, in *SlotGameListReq, opts ...grpc.CallOption) (*SlotGameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SlotGameListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_SlotGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) BetList(ctx context.Context, in *BetListReq, opts ...grpc.CallOption) (*BetListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BetListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_BetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) BetStatistics(ctx context.Context, in *BetStatisticsReq, opts ...grpc.CallOption) (*BetStatisticsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BetStatisticsResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_BetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GameFavorite(ctx context.Context, in *GameFavoriteReq, opts ...grpc.CallOption) (*GameFavoriteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameFavoriteResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GameFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetRankList(ctx context.Context, in *GetRankListReq, opts ...grpc.CallOption) (*GetRankListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetRankList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetPlatformProfit(ctx context.Context, in *GetPlatformProfitReq, opts ...grpc.CallOption) (*GetPlatformProfitResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlatformProfitResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetPlatformProfit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetPlatformProfitList(ctx context.Context, in *GetPlatformProfitListReq, opts ...grpc.CallOption) (*GetPlatformProfitListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlatformProfitListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetPlatformProfitList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) PlatProfitAndBetCountChart(ctx context.Context, in *PlatProfitAndBetCountChartReq, opts ...grpc.CallOption) (*PlatProfitAndBetCountChartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlatProfitAndBetCountChartResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_PlatProfitAndBetCountChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) UserSummary(ctx context.Context, in *UserSummaryReq, opts ...grpc.CallOption) (*UserSummaryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSummaryResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_UserSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) TradingManageList(ctx context.Context, in *TradingManageListReq, opts ...grpc.CallOption) (*TradingManageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TradingManageListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_TradingManageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) StatisticsTrading(ctx context.Context, in *StatisticsTradingReq, opts ...grpc.CallOption) (*StatisticsTradingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticsTradingResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_StatisticsTrading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) FreeGameRecordList(ctx context.Context, in *FreeGameRecordListReq, opts ...grpc.CallOption) (*FreeGameRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreeGameRecordListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_FreeGameRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) CreateFreeGame(ctx context.Context, in *CreateFreeGameReq, opts ...grpc.CallOption) (*CreateFreeGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFreeGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_CreateFreeGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) DeleteFreeGame(ctx context.Context, in *DeleteFreeGameReq, opts ...grpc.CallOption) (*DeleteFreeGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFreeGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_DeleteFreeGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) UpdateSubGame(ctx context.Context, in *UpdateSubGameReq, opts ...grpc.CallOption) (*UpdateSubGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_UpdateSubGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AddSubGame(ctx context.Context, in *AddSubGameReq, opts ...grpc.CallOption) (*AddSubGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSubGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AddSubGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) ListSubGame(ctx context.Context, in *ListSubGameReq, opts ...grpc.CallOption) (*ListSubGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_ListSubGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetAllGameProvider(ctx context.Context, in *GetAllGameProviderReq, opts ...grpc.CallOption) (*GetAllGameProviderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGameProviderResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetAllGameProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) SearchGameList(ctx context.Context, in *SearchGameListReq, opts ...grpc.CallOption) (*SearchGameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchGameListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_SearchGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AdminBetStatistics(ctx context.Context, in *AdminBetStatisticsRequest, opts ...grpc.CallOption) (*AdminBetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminBetStatisticsResponse)
	err := c.cc.Invoke(ctx, Zerogamerpc_AdminBetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) BetPage(ctx context.Context, in *BetPageRequest, opts ...grpc.CallOption) (*BetPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BetPageResponse)
	err := c.cc.Invoke(ctx, Zerogamerpc_BetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) BetSummary(ctx context.Context, in *BetSummaryRequest, opts ...grpc.CallOption) (*BetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BetSummaryResponse)
	err := c.cc.Invoke(ctx, Zerogamerpc_BetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentBetSummary(ctx context.Context, in *AgentBetSummaryRequest, opts ...grpc.CallOption) (*AgentBetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentBetSummaryResponse)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentBetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentBetPage(ctx context.Context, in *AgentBetPageRequest, opts ...grpc.CallOption) (*AgentBetPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentBetPageResponse)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentBetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentBetStatistics(ctx context.Context, in *AgentBetStatisticsRequest, opts ...grpc.CallOption) (*AgentBetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentBetStatisticsResponse)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentBetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentGameList(ctx context.Context, in *AgentGameListReq, opts ...grpc.CallOption) (*AgentGameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentGameListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentGetGamesByCategory(ctx context.Context, in *AgentGetGamesByCategoryReq, opts ...grpc.CallOption) (*AgentGetGamesByCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentGetGamesByCategoryResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentGetGamesByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentGamePagcorList(ctx context.Context, in *AgentGamePagcorListReq, opts ...grpc.CallOption) (*AgentGamePagcorListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentGamePagcorListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentGamePagcorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AgentListSubGame(ctx context.Context, in *AgentListSubGameReq, opts ...grpc.CallOption) (*AgentListSubGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentListSubGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AgentListSubGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) DailyReportStatisticsPlatCoin(ctx context.Context, in *DailyReportStatisticsPlatCoinReq, opts ...grpc.CallOption) (*DailyReportStatisticsPlatCoinResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyReportStatisticsPlatCoinResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_DailyReportStatisticsPlatCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AdminBetGameList(ctx context.Context, in *AdminBetGameListReq, opts ...grpc.CallOption) (*AdminBetGameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminBetGameListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AdminBetGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AddGameOperationUrl(ctx context.Context, in *AddGameOperationUrlReq, opts ...grpc.CallOption) (*AddGameOperationUrlResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGameOperationUrlResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AddGameOperationUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) DelGameOperationUrl(ctx context.Context, in *DelGameOperationUrlReq, opts ...grpc.CallOption) (*DelGameOperationUrlResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelGameOperationUrlResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_DelGameOperationUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) UpdateGameOperationUrl(ctx context.Context, in *UpdateGameOperationUrlReq, opts ...grpc.CallOption) (*UpdateGameOperationUrlResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGameOperationUrlResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_UpdateGameOperationUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetUpdateGameOperationUrlDetail(ctx context.Context, in *GetUpdateGameOperationUrlDetailReq, opts ...grpc.CallOption) (*GetUpdateGameOperationUrlDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpdateGameOperationUrlDetailResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetUpdateGameOperationUrlDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetGameOperationUrlList(ctx context.Context, in *GetGameOperationUrlListReq, opts ...grpc.CallOption) (*GetGameOperationUrlListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameOperationUrlListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetGameOperationUrlList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetSportHotGameList(ctx context.Context, in *GetSportHotGameListReq, opts ...grpc.CallOption) (*GetSportHotGameListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSportHotGameListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetSportHotGameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) StartSportHotGame(ctx context.Context, in *StartSportHotGameReq, opts ...grpc.CallOption) (*StartSportHotGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSportHotGameResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_StartSportHotGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) AddFrontClassifyInfoCms(ctx context.Context, in *AddFrontClassifyInfoCmsReq, opts ...grpc.CallOption) (*AddFrontClassifyInfoCmsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFrontClassifyInfoCmsResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_AddFrontClassifyInfoCms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) FrontClassifyGameInfoPage(ctx context.Context, in *FrontClassifyGameInfoPageReq, opts ...grpc.CallOption) (*FrontClassifyGameInfoPageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrontClassifyGameInfoPageResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_FrontClassifyGameInfoPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) ValidStakeCron(ctx context.Context, in *ValidStakeCronReq, opts ...grpc.CallOption) (*ValidStakeCronResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidStakeCronResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_ValidStakeCron_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) ValidStakeWeekCron(ctx context.Context, in *ValidStakeWeekCronReq, opts ...grpc.CallOption) (*ValidStakeWeekCronResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidStakeWeekCronResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_ValidStakeWeekCron_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) ValidStakeMonthCron(ctx context.Context, in *ValidStakeMonthCronReq, opts ...grpc.CallOption) (*ValidStakeMonthCronResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidStakeMonthCronResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_ValidStakeMonthCron_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) MonthlyReductionInCoding(ctx context.Context, in *MonthlyReductionInCodingReq, opts ...grpc.CallOption) (*MonthlyReductionInCodingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthlyReductionInCodingResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_MonthlyReductionInCoding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchPageList(ctx context.Context, in *GetMatchPageListReq, opts ...grpc.CallOption) (*GetMatchPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchPageListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetRecommendMatchList(ctx context.Context, in *GetRecommendMatchListReq, opts ...grpc.CallOption) (*GetRecommendMatchListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendMatchListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetRecommendMatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetRecomendPlayMatchList(ctx context.Context, in *GetRecomendPlayMatchListReq, opts ...grpc.CallOption) (*GetRecomendPlayMatchListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecomendPlayMatchListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetRecomendPlayMatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetFutureMatchCount(ctx context.Context, in *GetFutureMatchCountReq, opts ...grpc.CallOption) (*GetFutureMatchCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFutureMatchCountResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetFutureMatchCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchMarketGroup(ctx context.Context, in *GetMatchMarketGroupReq, opts ...grpc.CallOption) (*GetMatchMarketGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchMarketGroupResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchMarketGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchStatistical(ctx context.Context, in *GetMatchStatisticalReq, opts ...grpc.CallOption) (*GetMatchStatisticalResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchStatisticalResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchStatistical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchDetail(ctx context.Context, in *GetMatchDetailReq, opts ...grpc.CallOption) (*GetMatchDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchDetailResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchLeaguesList(ctx context.Context, in *GetMatchLeaguesListReq, opts ...grpc.CallOption) (*GetMatchLeaguesListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchLeaguesListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchLeaguesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchResultPageList(ctx context.Context, in *GetMatchResultPageListReq, opts ...grpc.CallOption) (*GetMatchResultPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchResultPageListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchResultPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchResultInfo(ctx context.Context, in *GetMatchResultInfoReq, opts ...grpc.CallOption) (*GetMatchResultInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchResultInfoResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchResultInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchByRecommend(ctx context.Context, in *GetMatchByRecommendReq, opts ...grpc.CallOption) (*GetMatchByRecommendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchByRecommendResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchByRecommend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchLeaguesRecomment(ctx context.Context, in *GetMatchLeaguesRecommentReq, opts ...grpc.CallOption) (*GetMatchLeaguesRecommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchLeaguesRecommentResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchLeaguesRecomment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchTopRecomment(ctx context.Context, in *GetMatchTopRecommentReq, opts ...grpc.CallOption) (*GetMatchTopRecommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchTopRecommentResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchTopRecomment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchIndexMainList(ctx context.Context, in *GetMatchIndexMainListReq, opts ...grpc.CallOption) (*GetMatchIndexMainListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchIndexMainListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchIndexMainList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchIndexMarkets(ctx context.Context, in *GetMatchIndexMarketsReq, opts ...grpc.CallOption) (*GetMatchIndexMarketsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchIndexMarketsResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchIndexMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetMatchIndexUrl(ctx context.Context, in *GetMatchIndexUrlReq, opts ...grpc.CallOption) (*GetMatchIndexUrlResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchIndexUrlResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetMatchIndexUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) SaveLiveAnchor(ctx context.Context, in *SaveLiveAnchorReq, opts ...grpc.CallOption) (*SaveLiveAnchorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveLiveAnchorResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_SaveLiveAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) DeleteLiveAnchor(ctx context.Context, in *DeleteLiveAnchorReq, opts ...grpc.CallOption) (*DeleteLiveAnchorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLiveAnchorResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_DeleteLiveAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetLiveAnchorList(ctx context.Context, in *GetLiveAnchorListReq, opts ...grpc.CallOption) (*GetLiveAnchorListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLiveAnchorListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetLiveAnchorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) SaveLiveRoom(ctx context.Context, in *SaveLiveRoomReq, opts ...grpc.CallOption) (*SaveLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveLiveRoomResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_SaveLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) DeleteLiveRoom(ctx context.Context, in *DeleteLiveRoomReq, opts ...grpc.CallOption) (*DeleteLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLiveRoomResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_DeleteLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) DownLiveRoom(ctx context.Context, in *DownLiveRoomReq, opts ...grpc.CallOption) (*DownLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownLiveRoomResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_DownLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetLiveRoomList(ctx context.Context, in *GetLiveRoomListReq, opts ...grpc.CallOption) (*GetLiveRoomListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLiveRoomListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetLiveRoomList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetLiveRoomMatchList(ctx context.Context, in *GetLiveRoomMatchListReq, opts ...grpc.CallOption) (*GetLiveRoomMatchListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLiveRoomMatchListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetLiveRoomMatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) LiveRoomCallBack(ctx context.Context, in *LiveRoomCallBackReq, opts ...grpc.CallOption) (*LiveRoomCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiveRoomCallBackResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_LiveRoomCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetRecommendLiveRoomMatchList(ctx context.Context, in *GetRecommendLiveRoomMatchListReq, opts ...grpc.CallOption) (*GetRecommendLiveRoomMatchListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendLiveRoomMatchListResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetRecommendLiveRoomMatchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetRecommentLiveRoomMatchDetailOption(ctx context.Context, in *GetRecommentLiveRoomMatchDetailOptionReq, opts ...grpc.CallOption) (*GetRecommentLiveRoomMatchDetailOptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommentLiveRoomMatchDetailOptionResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetRecommentLiveRoomMatchDetailOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerogamerpcClient) GetRecommentLiveRoomMatchResult(ctx context.Context, in *GetRecommentLiveRoomMatchResultReq, opts ...grpc.CallOption) (*GetRecommentLiveRoomMatchResultResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommentLiveRoomMatchResultResp)
	err := c.cc.Invoke(ctx, Zerogamerpc_GetRecommentLiveRoomMatchResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZerogamerpcServer is the server API for Zerogamerpc service.
// All implementations must embed UnimplementedZerogamerpcServer
// for forward compatibility.
type ZerogamerpcServer interface {
	// group: playGame
	FbTourist(context.Context, *FbTouristReq) (*FbTouristResp, error)
	// group: playGame
	GameList(context.Context, *GameListReq) (*GameListResp, error)
	// group: playGame
	GameDetails(context.Context, *GameDetailsReq) (*GameDetailsResp, error)
	// group: startGame
	StartGame(context.Context, *StartGameReq) (*StartGameResp, error)
	// group: startGame
	OutGameForTransferWallet(context.Context, *OutGameForTransferWalletReq) (*OutGameForTransferWalletResp, error)
	// group: startGame
	PostFrb(context.Context, *BonusesReq) (*BonusesRes, error)
	// group: startGame
	SlotGameList(context.Context, *SlotGameListReq) (*SlotGameListResp, error)
	// group: startGame
	BetList(context.Context, *BetListReq) (*BetListResp, error)
	// group: startGame
	BetStatistics(context.Context, *BetStatisticsReq) (*BetStatisticsResp, error)
	// group: startGame
	GameFavorite(context.Context, *GameFavoriteReq) (*GameFavoriteResp, error)
	// group: startGame
	GetRankList(context.Context, *GetRankListReq) (*GetRankListResp, error)
	// group: report
	GetPlatformProfit(context.Context, *GetPlatformProfitReq) (*GetPlatformProfitResp, error)
	// group: report
	GetPlatformProfitList(context.Context, *GetPlatformProfitListReq) (*GetPlatformProfitListResp, error)
	// group: report
	PlatProfitAndBetCountChart(context.Context, *PlatProfitAndBetCountChartReq) (*PlatProfitAndBetCountChartResp, error)
	// group: report
	UserSummary(context.Context, *UserSummaryReq) (*UserSummaryResp, error)
	// group: report
	TradingManageList(context.Context, *TradingManageListReq) (*TradingManageListResp, error)
	// group: report
	StatisticsTrading(context.Context, *StatisticsTradingReq) (*StatisticsTradingResp, error)
	// group: system
	FreeGameRecordList(context.Context, *FreeGameRecordListReq) (*FreeGameRecordListResp, error)
	// group: system
	CreateFreeGame(context.Context, *CreateFreeGameReq) (*CreateFreeGameResp, error)
	// group: system
	DeleteFreeGame(context.Context, *DeleteFreeGameReq) (*DeleteFreeGameResp, error)
	//group:system
	UpdateSubGame(context.Context, *UpdateSubGameReq) (*UpdateSubGameResp, error)
	//group:system
	AddSubGame(context.Context, *AddSubGameReq) (*AddSubGameResp, error)
	//group:system
	ListSubGame(context.Context, *ListSubGameReq) (*ListSubGameResp, error)
	//group:system
	GetAllGameProvider(context.Context, *GetAllGameProviderReq) (*GetAllGameProviderResp, error)
	// group: startGame
	SearchGameList(context.Context, *SearchGameListReq) (*SearchGameListResp, error)
	// group: admin bet record
	AdminBetStatistics(context.Context, *AdminBetStatisticsRequest) (*AdminBetStatisticsResponse, error)
	// group: admin bet record
	BetPage(context.Context, *BetPageRequest) (*BetPageResponse, error)
	// group: admin bet record
	BetSummary(context.Context, *BetSummaryRequest) (*BetSummaryResponse, error)
	// group: agent
	AgentBetSummary(context.Context, *AgentBetSummaryRequest) (*AgentBetSummaryResponse, error)
	// group: agent
	AgentBetPage(context.Context, *AgentBetPageRequest) (*AgentBetPageResponse, error)
	// group: agent
	AgentBetStatistics(context.Context, *AgentBetStatisticsRequest) (*AgentBetStatisticsResponse, error)
	// group: agent
	AgentGameList(context.Context, *AgentGameListReq) (*AgentGameListResp, error)
	// group: agent
	AgentGetGamesByCategory(context.Context, *AgentGetGamesByCategoryReq) (*AgentGetGamesByCategoryResp, error)
	// group: agent
	AgentGamePagcorList(context.Context, *AgentGamePagcorListReq) (*AgentGamePagcorListResp, error)
	// group: agent
	AgentListSubGame(context.Context, *AgentListSubGameReq) (*AgentListSubGameResp, error)
	// group: report
	DailyReportStatisticsPlatCoin(context.Context, *DailyReportStatisticsPlatCoinReq) (*DailyReportStatisticsPlatCoinResp, error)
	// group: report
	AdminBetGameList(context.Context, *AdminBetGameListReq) (*AdminBetGameListResp, error)
	// group: gameOperationUrl
	AddGameOperationUrl(context.Context, *AddGameOperationUrlReq) (*AddGameOperationUrlResp, error)
	// group: gameOperationUrl
	DelGameOperationUrl(context.Context, *DelGameOperationUrlReq) (*DelGameOperationUrlResp, error)
	// group: gameOperationUrl
	UpdateGameOperationUrl(context.Context, *UpdateGameOperationUrlReq) (*UpdateGameOperationUrlResp, error)
	// group: gameOperationUrl
	GetUpdateGameOperationUrlDetail(context.Context, *GetUpdateGameOperationUrlDetailReq) (*GetUpdateGameOperationUrlDetailResp, error)
	// group: gameOperationUrl
	GetGameOperationUrlList(context.Context, *GetGameOperationUrlListReq) (*GetGameOperationUrlListResp, error)
	// group: system
	GetSportHotGameList(context.Context, *GetSportHotGameListReq) (*GetSportHotGameListResp, error)
	// group: startGame
	StartSportHotGame(context.Context, *StartSportHotGameReq) (*StartSportHotGameResp, error)
	// group: system
	AddFrontClassifyInfoCms(context.Context, *AddFrontClassifyInfoCmsReq) (*AddFrontClassifyInfoCmsResp, error)
	//group:system
	FrontClassifyGameInfoPage(context.Context, *FrontClassifyGameInfoPageReq) (*FrontClassifyGameInfoPageResp, error)
	// group: crontab
	ValidStakeCron(context.Context, *ValidStakeCronReq) (*ValidStakeCronResp, error)
	// group: crontab
	ValidStakeWeekCron(context.Context, *ValidStakeWeekCronReq) (*ValidStakeWeekCronResp, error)
	// group: crontab
	ValidStakeMonthCron(context.Context, *ValidStakeMonthCronReq) (*ValidStakeMonthCronResp, error)
	// group: crontab
	MonthlyReductionInCoding(context.Context, *MonthlyReductionInCodingReq) (*MonthlyReductionInCodingResp, error)
	// group: match
	GetMatchPageList(context.Context, *GetMatchPageListReq) (*GetMatchPageListResp, error)
	// group: match
	GetRecommendMatchList(context.Context, *GetRecommendMatchListReq) (*GetRecommendMatchListResp, error)
	// group: match
	GetRecomendPlayMatchList(context.Context, *GetRecomendPlayMatchListReq) (*GetRecomendPlayMatchListResp, error)
	// group: match
	GetFutureMatchCount(context.Context, *GetFutureMatchCountReq) (*GetFutureMatchCountResp, error)
	// group: match
	GetMatchMarketGroup(context.Context, *GetMatchMarketGroupReq) (*GetMatchMarketGroupResp, error)
	// group: match
	GetMatchStatistical(context.Context, *GetMatchStatisticalReq) (*GetMatchStatisticalResp, error)
	// group: match
	GetMatchDetail(context.Context, *GetMatchDetailReq) (*GetMatchDetailResp, error)
	// group: match
	GetMatchLeaguesList(context.Context, *GetMatchLeaguesListReq) (*GetMatchLeaguesListResp, error)
	// group: match
	GetMatchResultPageList(context.Context, *GetMatchResultPageListReq) (*GetMatchResultPageListResp, error)
	// group: match
	GetMatchResultInfo(context.Context, *GetMatchResultInfoReq) (*GetMatchResultInfoResp, error)
	// group: match
	GetMatchByRecommend(context.Context, *GetMatchByRecommendReq) (*GetMatchByRecommendResp, error)
	// group: match
	GetMatchLeaguesRecomment(context.Context, *GetMatchLeaguesRecommentReq) (*GetMatchLeaguesRecommentResp, error)
	// group: match
	GetMatchTopRecomment(context.Context, *GetMatchTopRecommentReq) (*GetMatchTopRecommentResp, error)
	//group:match
	GetMatchIndexMainList(context.Context, *GetMatchIndexMainListReq) (*GetMatchIndexMainListResp, error)
	//group:match
	GetMatchIndexMarkets(context.Context, *GetMatchIndexMarketsReq) (*GetMatchIndexMarketsResp, error)
	//group:match
	GetMatchIndexUrl(context.Context, *GetMatchIndexUrlReq) (*GetMatchIndexUrlResp, error)
	//group:live
	SaveLiveAnchor(context.Context, *SaveLiveAnchorReq) (*SaveLiveAnchorResp, error)
	//group:live
	DeleteLiveAnchor(context.Context, *DeleteLiveAnchorReq) (*DeleteLiveAnchorResp, error)
	//group:live
	GetLiveAnchorList(context.Context, *GetLiveAnchorListReq) (*GetLiveAnchorListResp, error)
	//group:live
	SaveLiveRoom(context.Context, *SaveLiveRoomReq) (*SaveLiveRoomResp, error)
	//group:live
	DeleteLiveRoom(context.Context, *DeleteLiveRoomReq) (*DeleteLiveRoomResp, error)
	//group:live
	DownLiveRoom(context.Context, *DownLiveRoomReq) (*DownLiveRoomResp, error)
	//group:live
	GetLiveRoomList(context.Context, *GetLiveRoomListReq) (*GetLiveRoomListResp, error)
	//group:live
	GetLiveRoomMatchList(context.Context, *GetLiveRoomMatchListReq) (*GetLiveRoomMatchListResp, error)
	//group:live
	LiveRoomCallBack(context.Context, *LiveRoomCallBackReq) (*LiveRoomCallBackResp, error)
	//group:live
	GetRecommendLiveRoomMatchList(context.Context, *GetRecommendLiveRoomMatchListReq) (*GetRecommendLiveRoomMatchListResp, error)
	//group:live
	GetRecommentLiveRoomMatchDetailOption(context.Context, *GetRecommentLiveRoomMatchDetailOptionReq) (*GetRecommentLiveRoomMatchDetailOptionResp, error)
	//group:live
	GetRecommentLiveRoomMatchResult(context.Context, *GetRecommentLiveRoomMatchResultReq) (*GetRecommentLiveRoomMatchResultResp, error)
	mustEmbedUnimplementedZerogamerpcServer()
}

// UnimplementedZerogamerpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZerogamerpcServer struct{}

func (UnimplementedZerogamerpcServer) FbTourist(context.Context, *FbTouristReq) (*FbTouristResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FbTourist not implemented")
}
func (UnimplementedZerogamerpcServer) GameList(context.Context, *GameListReq) (*GameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameList not implemented")
}
func (UnimplementedZerogamerpcServer) GameDetails(context.Context, *GameDetailsReq) (*GameDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameDetails not implemented")
}
func (UnimplementedZerogamerpcServer) StartGame(context.Context, *StartGameReq) (*StartGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedZerogamerpcServer) OutGameForTransferWallet(context.Context, *OutGameForTransferWalletReq) (*OutGameForTransferWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutGameForTransferWallet not implemented")
}
func (UnimplementedZerogamerpcServer) PostFrb(context.Context, *BonusesReq) (*BonusesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFrb not implemented")
}
func (UnimplementedZerogamerpcServer) SlotGameList(context.Context, *SlotGameListReq) (*SlotGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotGameList not implemented")
}
func (UnimplementedZerogamerpcServer) BetList(context.Context, *BetListReq) (*BetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetList not implemented")
}
func (UnimplementedZerogamerpcServer) BetStatistics(context.Context, *BetStatisticsReq) (*BetStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetStatistics not implemented")
}
func (UnimplementedZerogamerpcServer) GameFavorite(context.Context, *GameFavoriteReq) (*GameFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameFavorite not implemented")
}
func (UnimplementedZerogamerpcServer) GetRankList(context.Context, *GetRankListReq) (*GetRankListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankList not implemented")
}
func (UnimplementedZerogamerpcServer) GetPlatformProfit(context.Context, *GetPlatformProfitReq) (*GetPlatformProfitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformProfit not implemented")
}
func (UnimplementedZerogamerpcServer) GetPlatformProfitList(context.Context, *GetPlatformProfitListReq) (*GetPlatformProfitListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformProfitList not implemented")
}
func (UnimplementedZerogamerpcServer) PlatProfitAndBetCountChart(context.Context, *PlatProfitAndBetCountChartReq) (*PlatProfitAndBetCountChartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatProfitAndBetCountChart not implemented")
}
func (UnimplementedZerogamerpcServer) UserSummary(context.Context, *UserSummaryReq) (*UserSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSummary not implemented")
}
func (UnimplementedZerogamerpcServer) TradingManageList(context.Context, *TradingManageListReq) (*TradingManageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingManageList not implemented")
}
func (UnimplementedZerogamerpcServer) StatisticsTrading(context.Context, *StatisticsTradingReq) (*StatisticsTradingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsTrading not implemented")
}
func (UnimplementedZerogamerpcServer) FreeGameRecordList(context.Context, *FreeGameRecordListReq) (*FreeGameRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeGameRecordList not implemented")
}
func (UnimplementedZerogamerpcServer) CreateFreeGame(context.Context, *CreateFreeGameReq) (*CreateFreeGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFreeGame not implemented")
}
func (UnimplementedZerogamerpcServer) DeleteFreeGame(context.Context, *DeleteFreeGameReq) (*DeleteFreeGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFreeGame not implemented")
}
func (UnimplementedZerogamerpcServer) UpdateSubGame(context.Context, *UpdateSubGameReq) (*UpdateSubGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubGame not implemented")
}
func (UnimplementedZerogamerpcServer) AddSubGame(context.Context, *AddSubGameReq) (*AddSubGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubGame not implemented")
}
func (UnimplementedZerogamerpcServer) ListSubGame(context.Context, *ListSubGameReq) (*ListSubGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubGame not implemented")
}
func (UnimplementedZerogamerpcServer) GetAllGameProvider(context.Context, *GetAllGameProviderReq) (*GetAllGameProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGameProvider not implemented")
}
func (UnimplementedZerogamerpcServer) SearchGameList(context.Context, *SearchGameListReq) (*SearchGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGameList not implemented")
}
func (UnimplementedZerogamerpcServer) AdminBetStatistics(context.Context, *AdminBetStatisticsRequest) (*AdminBetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBetStatistics not implemented")
}
func (UnimplementedZerogamerpcServer) BetPage(context.Context, *BetPageRequest) (*BetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetPage not implemented")
}
func (UnimplementedZerogamerpcServer) BetSummary(context.Context, *BetSummaryRequest) (*BetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BetSummary not implemented")
}
func (UnimplementedZerogamerpcServer) AgentBetSummary(context.Context, *AgentBetSummaryRequest) (*AgentBetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentBetSummary not implemented")
}
func (UnimplementedZerogamerpcServer) AgentBetPage(context.Context, *AgentBetPageRequest) (*AgentBetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentBetPage not implemented")
}
func (UnimplementedZerogamerpcServer) AgentBetStatistics(context.Context, *AgentBetStatisticsRequest) (*AgentBetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentBetStatistics not implemented")
}
func (UnimplementedZerogamerpcServer) AgentGameList(context.Context, *AgentGameListReq) (*AgentGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGameList not implemented")
}
func (UnimplementedZerogamerpcServer) AgentGetGamesByCategory(context.Context, *AgentGetGamesByCategoryReq) (*AgentGetGamesByCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetGamesByCategory not implemented")
}
func (UnimplementedZerogamerpcServer) AgentGamePagcorList(context.Context, *AgentGamePagcorListReq) (*AgentGamePagcorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGamePagcorList not implemented")
}
func (UnimplementedZerogamerpcServer) AgentListSubGame(context.Context, *AgentListSubGameReq) (*AgentListSubGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentListSubGame not implemented")
}
func (UnimplementedZerogamerpcServer) DailyReportStatisticsPlatCoin(context.Context, *DailyReportStatisticsPlatCoinReq) (*DailyReportStatisticsPlatCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyReportStatisticsPlatCoin not implemented")
}
func (UnimplementedZerogamerpcServer) AdminBetGameList(context.Context, *AdminBetGameListReq) (*AdminBetGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBetGameList not implemented")
}
func (UnimplementedZerogamerpcServer) AddGameOperationUrl(context.Context, *AddGameOperationUrlReq) (*AddGameOperationUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameOperationUrl not implemented")
}
func (UnimplementedZerogamerpcServer) DelGameOperationUrl(context.Context, *DelGameOperationUrlReq) (*DelGameOperationUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGameOperationUrl not implemented")
}
func (UnimplementedZerogamerpcServer) UpdateGameOperationUrl(context.Context, *UpdateGameOperationUrlReq) (*UpdateGameOperationUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameOperationUrl not implemented")
}
func (UnimplementedZerogamerpcServer) GetUpdateGameOperationUrlDetail(context.Context, *GetUpdateGameOperationUrlDetailReq) (*GetUpdateGameOperationUrlDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateGameOperationUrlDetail not implemented")
}
func (UnimplementedZerogamerpcServer) GetGameOperationUrlList(context.Context, *GetGameOperationUrlListReq) (*GetGameOperationUrlListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameOperationUrlList not implemented")
}
func (UnimplementedZerogamerpcServer) GetSportHotGameList(context.Context, *GetSportHotGameListReq) (*GetSportHotGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSportHotGameList not implemented")
}
func (UnimplementedZerogamerpcServer) StartSportHotGame(context.Context, *StartSportHotGameReq) (*StartSportHotGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSportHotGame not implemented")
}
func (UnimplementedZerogamerpcServer) AddFrontClassifyInfoCms(context.Context, *AddFrontClassifyInfoCmsReq) (*AddFrontClassifyInfoCmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFrontClassifyInfoCms not implemented")
}
func (UnimplementedZerogamerpcServer) FrontClassifyGameInfoPage(context.Context, *FrontClassifyGameInfoPageReq) (*FrontClassifyGameInfoPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontClassifyGameInfoPage not implemented")
}
func (UnimplementedZerogamerpcServer) ValidStakeCron(context.Context, *ValidStakeCronReq) (*ValidStakeCronResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidStakeCron not implemented")
}
func (UnimplementedZerogamerpcServer) ValidStakeWeekCron(context.Context, *ValidStakeWeekCronReq) (*ValidStakeWeekCronResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidStakeWeekCron not implemented")
}
func (UnimplementedZerogamerpcServer) ValidStakeMonthCron(context.Context, *ValidStakeMonthCronReq) (*ValidStakeMonthCronResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidStakeMonthCron not implemented")
}
func (UnimplementedZerogamerpcServer) MonthlyReductionInCoding(context.Context, *MonthlyReductionInCodingReq) (*MonthlyReductionInCodingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonthlyReductionInCoding not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchPageList(context.Context, *GetMatchPageListReq) (*GetMatchPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchPageList not implemented")
}
func (UnimplementedZerogamerpcServer) GetRecommendMatchList(context.Context, *GetRecommendMatchListReq) (*GetRecommendMatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendMatchList not implemented")
}
func (UnimplementedZerogamerpcServer) GetRecomendPlayMatchList(context.Context, *GetRecomendPlayMatchListReq) (*GetRecomendPlayMatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecomendPlayMatchList not implemented")
}
func (UnimplementedZerogamerpcServer) GetFutureMatchCount(context.Context, *GetFutureMatchCountReq) (*GetFutureMatchCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFutureMatchCount not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchMarketGroup(context.Context, *GetMatchMarketGroupReq) (*GetMatchMarketGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchMarketGroup not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchStatistical(context.Context, *GetMatchStatisticalReq) (*GetMatchStatisticalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchStatistical not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchDetail(context.Context, *GetMatchDetailReq) (*GetMatchDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchDetail not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchLeaguesList(context.Context, *GetMatchLeaguesListReq) (*GetMatchLeaguesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchLeaguesList not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchResultPageList(context.Context, *GetMatchResultPageListReq) (*GetMatchResultPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchResultPageList not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchResultInfo(context.Context, *GetMatchResultInfoReq) (*GetMatchResultInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchResultInfo not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchByRecommend(context.Context, *GetMatchByRecommendReq) (*GetMatchByRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchByRecommend not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchLeaguesRecomment(context.Context, *GetMatchLeaguesRecommentReq) (*GetMatchLeaguesRecommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchLeaguesRecomment not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchTopRecomment(context.Context, *GetMatchTopRecommentReq) (*GetMatchTopRecommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchTopRecomment not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchIndexMainList(context.Context, *GetMatchIndexMainListReq) (*GetMatchIndexMainListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchIndexMainList not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchIndexMarkets(context.Context, *GetMatchIndexMarketsReq) (*GetMatchIndexMarketsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchIndexMarkets not implemented")
}
func (UnimplementedZerogamerpcServer) GetMatchIndexUrl(context.Context, *GetMatchIndexUrlReq) (*GetMatchIndexUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchIndexUrl not implemented")
}
func (UnimplementedZerogamerpcServer) SaveLiveAnchor(context.Context, *SaveLiveAnchorReq) (*SaveLiveAnchorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLiveAnchor not implemented")
}
func (UnimplementedZerogamerpcServer) DeleteLiveAnchor(context.Context, *DeleteLiveAnchorReq) (*DeleteLiveAnchorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveAnchor not implemented")
}
func (UnimplementedZerogamerpcServer) GetLiveAnchorList(context.Context, *GetLiveAnchorListReq) (*GetLiveAnchorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveAnchorList not implemented")
}
func (UnimplementedZerogamerpcServer) SaveLiveRoom(context.Context, *SaveLiveRoomReq) (*SaveLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLiveRoom not implemented")
}
func (UnimplementedZerogamerpcServer) DeleteLiveRoom(context.Context, *DeleteLiveRoomReq) (*DeleteLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveRoom not implemented")
}
func (UnimplementedZerogamerpcServer) DownLiveRoom(context.Context, *DownLiveRoomReq) (*DownLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLiveRoom not implemented")
}
func (UnimplementedZerogamerpcServer) GetLiveRoomList(context.Context, *GetLiveRoomListReq) (*GetLiveRoomListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveRoomList not implemented")
}
func (UnimplementedZerogamerpcServer) GetLiveRoomMatchList(context.Context, *GetLiveRoomMatchListReq) (*GetLiveRoomMatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveRoomMatchList not implemented")
}
func (UnimplementedZerogamerpcServer) LiveRoomCallBack(context.Context, *LiveRoomCallBackReq) (*LiveRoomCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomCallBack not implemented")
}
func (UnimplementedZerogamerpcServer) GetRecommendLiveRoomMatchList(context.Context, *GetRecommendLiveRoomMatchListReq) (*GetRecommendLiveRoomMatchListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendLiveRoomMatchList not implemented")
}
func (UnimplementedZerogamerpcServer) GetRecommentLiveRoomMatchDetailOption(context.Context, *GetRecommentLiveRoomMatchDetailOptionReq) (*GetRecommentLiveRoomMatchDetailOptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommentLiveRoomMatchDetailOption not implemented")
}
func (UnimplementedZerogamerpcServer) GetRecommentLiveRoomMatchResult(context.Context, *GetRecommentLiveRoomMatchResultReq) (*GetRecommentLiveRoomMatchResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommentLiveRoomMatchResult not implemented")
}
func (UnimplementedZerogamerpcServer) mustEmbedUnimplementedZerogamerpcServer() {}
func (UnimplementedZerogamerpcServer) testEmbeddedByValue()                     {}

// UnsafeZerogamerpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZerogamerpcServer will
// result in compilation errors.
type UnsafeZerogamerpcServer interface {
	mustEmbedUnimplementedZerogamerpcServer()
}

func RegisterZerogamerpcServer(s grpc.ServiceRegistrar, srv ZerogamerpcServer) {
	// If the following call pancis, it indicates UnimplementedZerogamerpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Zerogamerpc_ServiceDesc, srv)
}

func _Zerogamerpc_FbTourist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbTouristReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).FbTourist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_FbTourist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).FbTourist(ctx, req.(*FbTouristReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GameList(ctx, req.(*GameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GameDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GameDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GameDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GameDetails(ctx, req.(*GameDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).StartGame(ctx, req.(*StartGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_OutGameForTransferWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutGameForTransferWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).OutGameForTransferWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_OutGameForTransferWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).OutGameForTransferWallet(ctx, req.(*OutGameForTransferWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_PostFrb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BonusesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).PostFrb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_PostFrb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).PostFrb(ctx, req.(*BonusesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_SlotGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).SlotGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_SlotGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).SlotGameList(ctx, req.(*SlotGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_BetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).BetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_BetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).BetList(ctx, req.(*BetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_BetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetStatisticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).BetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_BetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).BetStatistics(ctx, req.(*BetStatisticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GameFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GameFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GameFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GameFavorite(ctx, req.(*GameFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetRankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetRankList(ctx, req.(*GetRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetPlatformProfit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformProfitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetPlatformProfit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetPlatformProfit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetPlatformProfit(ctx, req.(*GetPlatformProfitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetPlatformProfitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformProfitListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetPlatformProfitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetPlatformProfitList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetPlatformProfitList(ctx, req.(*GetPlatformProfitListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_PlatProfitAndBetCountChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatProfitAndBetCountChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).PlatProfitAndBetCountChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_PlatProfitAndBetCountChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).PlatProfitAndBetCountChart(ctx, req.(*PlatProfitAndBetCountChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_UserSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).UserSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_UserSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).UserSummary(ctx, req.(*UserSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_TradingManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradingManageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).TradingManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_TradingManageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).TradingManageList(ctx, req.(*TradingManageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_StatisticsTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsTradingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).StatisticsTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_StatisticsTrading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).StatisticsTrading(ctx, req.(*StatisticsTradingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_FreeGameRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeGameRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).FreeGameRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_FreeGameRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).FreeGameRecordList(ctx, req.(*FreeGameRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_CreateFreeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFreeGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).CreateFreeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_CreateFreeGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).CreateFreeGame(ctx, req.(*CreateFreeGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_DeleteFreeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFreeGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).DeleteFreeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_DeleteFreeGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).DeleteFreeGame(ctx, req.(*DeleteFreeGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_UpdateSubGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).UpdateSubGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_UpdateSubGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).UpdateSubGame(ctx, req.(*UpdateSubGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AddSubGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AddSubGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AddSubGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AddSubGame(ctx, req.(*AddSubGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_ListSubGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).ListSubGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_ListSubGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).ListSubGame(ctx, req.(*ListSubGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetAllGameProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGameProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetAllGameProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetAllGameProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetAllGameProvider(ctx, req.(*GetAllGameProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_SearchGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).SearchGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_SearchGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).SearchGameList(ctx, req.(*SearchGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AdminBetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AdminBetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AdminBetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AdminBetStatistics(ctx, req.(*AdminBetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_BetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).BetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_BetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).BetPage(ctx, req.(*BetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_BetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).BetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_BetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).BetSummary(ctx, req.(*BetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentBetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentBetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentBetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentBetSummary(ctx, req.(*AgentBetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentBetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentBetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentBetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentBetPage(ctx, req.(*AgentBetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentBetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentBetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentBetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentBetStatistics(ctx, req.(*AgentBetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentGameList(ctx, req.(*AgentGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentGetGamesByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetGamesByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentGetGamesByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentGetGamesByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentGetGamesByCategory(ctx, req.(*AgentGetGamesByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentGamePagcorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGamePagcorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentGamePagcorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentGamePagcorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentGamePagcorList(ctx, req.(*AgentGamePagcorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AgentListSubGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentListSubGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AgentListSubGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AgentListSubGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AgentListSubGame(ctx, req.(*AgentListSubGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_DailyReportStatisticsPlatCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyReportStatisticsPlatCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).DailyReportStatisticsPlatCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_DailyReportStatisticsPlatCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).DailyReportStatisticsPlatCoin(ctx, req.(*DailyReportStatisticsPlatCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AdminBetGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBetGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AdminBetGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AdminBetGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AdminBetGameList(ctx, req.(*AdminBetGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AddGameOperationUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameOperationUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AddGameOperationUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AddGameOperationUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AddGameOperationUrl(ctx, req.(*AddGameOperationUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_DelGameOperationUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGameOperationUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).DelGameOperationUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_DelGameOperationUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).DelGameOperationUrl(ctx, req.(*DelGameOperationUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_UpdateGameOperationUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameOperationUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).UpdateGameOperationUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_UpdateGameOperationUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).UpdateGameOperationUrl(ctx, req.(*UpdateGameOperationUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetUpdateGameOperationUrlDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateGameOperationUrlDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetUpdateGameOperationUrlDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetUpdateGameOperationUrlDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetUpdateGameOperationUrlDetail(ctx, req.(*GetUpdateGameOperationUrlDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetGameOperationUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameOperationUrlListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetGameOperationUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetGameOperationUrlList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetGameOperationUrlList(ctx, req.(*GetGameOperationUrlListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetSportHotGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSportHotGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetSportHotGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetSportHotGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetSportHotGameList(ctx, req.(*GetSportHotGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_StartSportHotGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSportHotGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).StartSportHotGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_StartSportHotGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).StartSportHotGame(ctx, req.(*StartSportHotGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_AddFrontClassifyInfoCms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFrontClassifyInfoCmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).AddFrontClassifyInfoCms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_AddFrontClassifyInfoCms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).AddFrontClassifyInfoCms(ctx, req.(*AddFrontClassifyInfoCmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_FrontClassifyGameInfoPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontClassifyGameInfoPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).FrontClassifyGameInfoPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_FrontClassifyGameInfoPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).FrontClassifyGameInfoPage(ctx, req.(*FrontClassifyGameInfoPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_ValidStakeCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidStakeCronReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).ValidStakeCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_ValidStakeCron_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).ValidStakeCron(ctx, req.(*ValidStakeCronReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_ValidStakeWeekCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidStakeWeekCronReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).ValidStakeWeekCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_ValidStakeWeekCron_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).ValidStakeWeekCron(ctx, req.(*ValidStakeWeekCronReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_ValidStakeMonthCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidStakeMonthCronReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).ValidStakeMonthCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_ValidStakeMonthCron_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).ValidStakeMonthCron(ctx, req.(*ValidStakeMonthCronReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_MonthlyReductionInCoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlyReductionInCodingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).MonthlyReductionInCoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_MonthlyReductionInCoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).MonthlyReductionInCoding(ctx, req.(*MonthlyReductionInCodingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchPageList(ctx, req.(*GetMatchPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetRecommendMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendMatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetRecommendMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetRecommendMatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetRecommendMatchList(ctx, req.(*GetRecommendMatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetRecomendPlayMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecomendPlayMatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetRecomendPlayMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetRecomendPlayMatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetRecomendPlayMatchList(ctx, req.(*GetRecomendPlayMatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetFutureMatchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFutureMatchCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetFutureMatchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetFutureMatchCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetFutureMatchCount(ctx, req.(*GetFutureMatchCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchMarketGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchMarketGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchMarketGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchMarketGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchMarketGroup(ctx, req.(*GetMatchMarketGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchStatistical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchStatisticalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchStatistical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchStatistical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchStatistical(ctx, req.(*GetMatchStatisticalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchDetail(ctx, req.(*GetMatchDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchLeaguesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchLeaguesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchLeaguesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchLeaguesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchLeaguesList(ctx, req.(*GetMatchLeaguesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchResultPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchResultPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchResultPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchResultPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchResultPageList(ctx, req.(*GetMatchResultPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchResultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchResultInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchResultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchResultInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchResultInfo(ctx, req.(*GetMatchResultInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchByRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchByRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchByRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchByRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchByRecommend(ctx, req.(*GetMatchByRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchLeaguesRecomment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchLeaguesRecommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchLeaguesRecomment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchLeaguesRecomment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchLeaguesRecomment(ctx, req.(*GetMatchLeaguesRecommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchTopRecomment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchTopRecommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchTopRecomment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchTopRecomment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchTopRecomment(ctx, req.(*GetMatchTopRecommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchIndexMainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchIndexMainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchIndexMainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchIndexMainList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchIndexMainList(ctx, req.(*GetMatchIndexMainListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchIndexMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchIndexMarketsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchIndexMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchIndexMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchIndexMarkets(ctx, req.(*GetMatchIndexMarketsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetMatchIndexUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchIndexUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetMatchIndexUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetMatchIndexUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetMatchIndexUrl(ctx, req.(*GetMatchIndexUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_SaveLiveAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLiveAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).SaveLiveAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_SaveLiveAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).SaveLiveAnchor(ctx, req.(*SaveLiveAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_DeleteLiveAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).DeleteLiveAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_DeleteLiveAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).DeleteLiveAnchor(ctx, req.(*DeleteLiveAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetLiveAnchorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveAnchorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetLiveAnchorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetLiveAnchorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetLiveAnchorList(ctx, req.(*GetLiveAnchorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_SaveLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLiveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).SaveLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_SaveLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).SaveLiveRoom(ctx, req.(*SaveLiveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_DeleteLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).DeleteLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_DeleteLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).DeleteLiveRoom(ctx, req.(*DeleteLiveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_DownLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownLiveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).DownLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_DownLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).DownLiveRoom(ctx, req.(*DownLiveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetLiveRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveRoomListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetLiveRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetLiveRoomList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetLiveRoomList(ctx, req.(*GetLiveRoomListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetLiveRoomMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveRoomMatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetLiveRoomMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetLiveRoomMatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetLiveRoomMatchList(ctx, req.(*GetLiveRoomMatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_LiveRoomCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveRoomCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).LiveRoomCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_LiveRoomCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).LiveRoomCallBack(ctx, req.(*LiveRoomCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetRecommendLiveRoomMatchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendLiveRoomMatchListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetRecommendLiveRoomMatchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetRecommendLiveRoomMatchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetRecommendLiveRoomMatchList(ctx, req.(*GetRecommendLiveRoomMatchListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetRecommentLiveRoomMatchDetailOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommentLiveRoomMatchDetailOptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetRecommentLiveRoomMatchDetailOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetRecommentLiveRoomMatchDetailOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetRecommentLiveRoomMatchDetailOption(ctx, req.(*GetRecommentLiveRoomMatchDetailOptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerogamerpc_GetRecommentLiveRoomMatchResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommentLiveRoomMatchResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerogamerpcServer).GetRecommentLiveRoomMatchResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zerogamerpc_GetRecommentLiveRoomMatchResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerogamerpcServer).GetRecommentLiveRoomMatchResult(ctx, req.(*GetRecommentLiveRoomMatchResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Zerogamerpc_ServiceDesc is the grpc.ServiceDesc for Zerogamerpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zerogamerpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zerogamerpc.Zerogamerpc",
	HandlerType: (*ZerogamerpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FbTourist",
			Handler:    _Zerogamerpc_FbTourist_Handler,
		},
		{
			MethodName: "GameList",
			Handler:    _Zerogamerpc_GameList_Handler,
		},
		{
			MethodName: "GameDetails",
			Handler:    _Zerogamerpc_GameDetails_Handler,
		},
		{
			MethodName: "startGame",
			Handler:    _Zerogamerpc_StartGame_Handler,
		},
		{
			MethodName: "outGameForTransferWallet",
			Handler:    _Zerogamerpc_OutGameForTransferWallet_Handler,
		},
		{
			MethodName: "postFrb",
			Handler:    _Zerogamerpc_PostFrb_Handler,
		},
		{
			MethodName: "slotGameList",
			Handler:    _Zerogamerpc_SlotGameList_Handler,
		},
		{
			MethodName: "betList",
			Handler:    _Zerogamerpc_BetList_Handler,
		},
		{
			MethodName: "betStatistics",
			Handler:    _Zerogamerpc_BetStatistics_Handler,
		},
		{
			MethodName: "gameFavorite",
			Handler:    _Zerogamerpc_GameFavorite_Handler,
		},
		{
			MethodName: "getRankList",
			Handler:    _Zerogamerpc_GetRankList_Handler,
		},
		{
			MethodName: "getPlatformProfit",
			Handler:    _Zerogamerpc_GetPlatformProfit_Handler,
		},
		{
			MethodName: "getPlatformProfitList",
			Handler:    _Zerogamerpc_GetPlatformProfitList_Handler,
		},
		{
			MethodName: "platProfitAndBetCountChart",
			Handler:    _Zerogamerpc_PlatProfitAndBetCountChart_Handler,
		},
		{
			MethodName: "userSummary",
			Handler:    _Zerogamerpc_UserSummary_Handler,
		},
		{
			MethodName: "tradingManageList",
			Handler:    _Zerogamerpc_TradingManageList_Handler,
		},
		{
			MethodName: "statisticsTrading",
			Handler:    _Zerogamerpc_StatisticsTrading_Handler,
		},
		{
			MethodName: "freeGameRecordList",
			Handler:    _Zerogamerpc_FreeGameRecordList_Handler,
		},
		{
			MethodName: "createFreeGame",
			Handler:    _Zerogamerpc_CreateFreeGame_Handler,
		},
		{
			MethodName: "deleteFreeGame",
			Handler:    _Zerogamerpc_DeleteFreeGame_Handler,
		},
		{
			MethodName: "UpdateSubGame",
			Handler:    _Zerogamerpc_UpdateSubGame_Handler,
		},
		{
			MethodName: "AddSubGame",
			Handler:    _Zerogamerpc_AddSubGame_Handler,
		},
		{
			MethodName: "listSubGame",
			Handler:    _Zerogamerpc_ListSubGame_Handler,
		},
		{
			MethodName: "GetAllGameProvider",
			Handler:    _Zerogamerpc_GetAllGameProvider_Handler,
		},
		{
			MethodName: "searchGameList",
			Handler:    _Zerogamerpc_SearchGameList_Handler,
		},
		{
			MethodName: "AdminBetStatistics",
			Handler:    _Zerogamerpc_AdminBetStatistics_Handler,
		},
		{
			MethodName: "BetPage",
			Handler:    _Zerogamerpc_BetPage_Handler,
		},
		{
			MethodName: "BetSummary",
			Handler:    _Zerogamerpc_BetSummary_Handler,
		},
		{
			MethodName: "AgentBetSummary",
			Handler:    _Zerogamerpc_AgentBetSummary_Handler,
		},
		{
			MethodName: "AgentBetPage",
			Handler:    _Zerogamerpc_AgentBetPage_Handler,
		},
		{
			MethodName: "AgentBetStatistics",
			Handler:    _Zerogamerpc_AgentBetStatistics_Handler,
		},
		{
			MethodName: "AgentGameList",
			Handler:    _Zerogamerpc_AgentGameList_Handler,
		},
		{
			MethodName: "AgentGetGamesByCategory",
			Handler:    _Zerogamerpc_AgentGetGamesByCategory_Handler,
		},
		{
			MethodName: "AgentGamePagcorList",
			Handler:    _Zerogamerpc_AgentGamePagcorList_Handler,
		},
		{
			MethodName: "AgentListSubGame",
			Handler:    _Zerogamerpc_AgentListSubGame_Handler,
		},
		{
			MethodName: "DailyReportStatisticsPlatCoin",
			Handler:    _Zerogamerpc_DailyReportStatisticsPlatCoin_Handler,
		},
		{
			MethodName: "AdminBetGameList",
			Handler:    _Zerogamerpc_AdminBetGameList_Handler,
		},
		{
			MethodName: "addGameOperationUrl",
			Handler:    _Zerogamerpc_AddGameOperationUrl_Handler,
		},
		{
			MethodName: "delGameOperationUrl",
			Handler:    _Zerogamerpc_DelGameOperationUrl_Handler,
		},
		{
			MethodName: "updateGameOperationUrl",
			Handler:    _Zerogamerpc_UpdateGameOperationUrl_Handler,
		},
		{
			MethodName: "getUpdateGameOperationUrlDetail",
			Handler:    _Zerogamerpc_GetUpdateGameOperationUrlDetail_Handler,
		},
		{
			MethodName: "getGameOperationUrlList",
			Handler:    _Zerogamerpc_GetGameOperationUrlList_Handler,
		},
		{
			MethodName: "GetSportHotGameList",
			Handler:    _Zerogamerpc_GetSportHotGameList_Handler,
		},
		{
			MethodName: "startSportHotGame",
			Handler:    _Zerogamerpc_StartSportHotGame_Handler,
		},
		{
			MethodName: "AddFrontClassifyInfoCms",
			Handler:    _Zerogamerpc_AddFrontClassifyInfoCms_Handler,
		},
		{
			MethodName: "frontClassifyGameInfoPage",
			Handler:    _Zerogamerpc_FrontClassifyGameInfoPage_Handler,
		},
		{
			MethodName: "ValidStakeCron",
			Handler:    _Zerogamerpc_ValidStakeCron_Handler,
		},
		{
			MethodName: "ValidStakeWeekCron",
			Handler:    _Zerogamerpc_ValidStakeWeekCron_Handler,
		},
		{
			MethodName: "ValidStakeMonthCron",
			Handler:    _Zerogamerpc_ValidStakeMonthCron_Handler,
		},
		{
			MethodName: "MonthlyReductionInCoding",
			Handler:    _Zerogamerpc_MonthlyReductionInCoding_Handler,
		},
		{
			MethodName: "getMatchPageList",
			Handler:    _Zerogamerpc_GetMatchPageList_Handler,
		},
		{
			MethodName: "getRecommendMatchList",
			Handler:    _Zerogamerpc_GetRecommendMatchList_Handler,
		},
		{
			MethodName: "getRecomendPlayMatchList",
			Handler:    _Zerogamerpc_GetRecomendPlayMatchList_Handler,
		},
		{
			MethodName: "getFutureMatchCount",
			Handler:    _Zerogamerpc_GetFutureMatchCount_Handler,
		},
		{
			MethodName: "getMatchMarketGroup",
			Handler:    _Zerogamerpc_GetMatchMarketGroup_Handler,
		},
		{
			MethodName: "getMatchStatistical",
			Handler:    _Zerogamerpc_GetMatchStatistical_Handler,
		},
		{
			MethodName: "getMatchDetail",
			Handler:    _Zerogamerpc_GetMatchDetail_Handler,
		},
		{
			MethodName: "getMatchLeaguesList",
			Handler:    _Zerogamerpc_GetMatchLeaguesList_Handler,
		},
		{
			MethodName: "getMatchResultPageList",
			Handler:    _Zerogamerpc_GetMatchResultPageList_Handler,
		},
		{
			MethodName: "getMatchResultInfo",
			Handler:    _Zerogamerpc_GetMatchResultInfo_Handler,
		},
		{
			MethodName: "getMatchByRecommend",
			Handler:    _Zerogamerpc_GetMatchByRecommend_Handler,
		},
		{
			MethodName: "getMatchLeaguesRecomment",
			Handler:    _Zerogamerpc_GetMatchLeaguesRecomment_Handler,
		},
		{
			MethodName: "getMatchTopRecomment",
			Handler:    _Zerogamerpc_GetMatchTopRecomment_Handler,
		},
		{
			MethodName: "getMatchIndexMainList",
			Handler:    _Zerogamerpc_GetMatchIndexMainList_Handler,
		},
		{
			MethodName: "getMatchIndexMarkets",
			Handler:    _Zerogamerpc_GetMatchIndexMarkets_Handler,
		},
		{
			MethodName: "getMatchIndexUrl",
			Handler:    _Zerogamerpc_GetMatchIndexUrl_Handler,
		},
		{
			MethodName: "saveLiveAnchor",
			Handler:    _Zerogamerpc_SaveLiveAnchor_Handler,
		},
		{
			MethodName: "deleteLiveAnchor",
			Handler:    _Zerogamerpc_DeleteLiveAnchor_Handler,
		},
		{
			MethodName: "getLiveAnchorList",
			Handler:    _Zerogamerpc_GetLiveAnchorList_Handler,
		},
		{
			MethodName: "saveLiveRoom",
			Handler:    _Zerogamerpc_SaveLiveRoom_Handler,
		},
		{
			MethodName: "deleteLiveRoom",
			Handler:    _Zerogamerpc_DeleteLiveRoom_Handler,
		},
		{
			MethodName: "downLiveRoom",
			Handler:    _Zerogamerpc_DownLiveRoom_Handler,
		},
		{
			MethodName: "getLiveRoomList",
			Handler:    _Zerogamerpc_GetLiveRoomList_Handler,
		},
		{
			MethodName: "getLiveRoomMatchList",
			Handler:    _Zerogamerpc_GetLiveRoomMatchList_Handler,
		},
		{
			MethodName: "liveRoomCallBack",
			Handler:    _Zerogamerpc_LiveRoomCallBack_Handler,
		},
		{
			MethodName: "getRecommendLiveRoomMatchList",
			Handler:    _Zerogamerpc_GetRecommendLiveRoomMatchList_Handler,
		},
		{
			MethodName: "getRecommentLiveRoomMatchDetailOption",
			Handler:    _Zerogamerpc_GetRecommentLiveRoomMatchDetailOption_Handler,
		},
		{
			MethodName: "getRecommentLiveRoomMatchResult",
			Handler:    _Zerogamerpc_GetRecommentLiveRoomMatchResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zerogamerpc.proto",
}
