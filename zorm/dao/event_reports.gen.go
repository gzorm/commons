// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newEventReports(db *gorm.DB, opts ...gen.DOOption) eventReports {
	_eventReports := eventReports{}

	_eventReports.eventReportsDo.UseDB(db, opts...)
	_eventReports.eventReportsDo.UseModel(&model.EventReports{})

	tableName := _eventReports.eventReportsDo.TableName()
	_eventReports.ALL = field.NewAsterisk(tableName)
	_eventReports.ID = field.NewInt64(tableName, "id")
	_eventReports.UID = field.NewInt64(tableName, "uid")
	_eventReports.Username = field.NewString(tableName, "username")
	_eventReports.EventType = field.NewInt64(tableName, "event_type")
	_eventReports.IPAddress = field.NewString(tableName, "ip_address")
	_eventReports.DeviceID = field.NewString(tableName, "device_id")
	_eventReports.Device = field.NewString(tableName, "device")
	_eventReports.UserAgent = field.NewString(tableName, "user_agent")
	_eventReports.CreatedAt = field.NewTime(tableName, "created_at")
	_eventReports.UpdateAt = field.NewTime(tableName, "update_at")

	_eventReports.fillFieldMap()

	return _eventReports
}

// eventReports 点击事件上报表
type eventReports struct {
	eventReportsDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.Int64  // 用户ID
	Username  field.String // 用户名称
	EventType field.Int64  // 事件类型:登录页=1,注册页=2
	IPAddress field.String // IP地址
	DeviceID  field.String // 设备号
	Device    field.String // 设备类型
	UserAgent field.String // ua
	CreatedAt field.Time   // 上报时间
	UpdateAt  field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e eventReports) Table(newTableName string) *eventReports {
	e.eventReportsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventReports) As(alias string) *eventReports {
	e.eventReportsDo.DO = *(e.eventReportsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventReports) updateTableName(table string) *eventReports {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.UID = field.NewInt64(table, "uid")
	e.Username = field.NewString(table, "username")
	e.EventType = field.NewInt64(table, "event_type")
	e.IPAddress = field.NewString(table, "ip_address")
	e.DeviceID = field.NewString(table, "device_id")
	e.Device = field.NewString(table, "device")
	e.UserAgent = field.NewString(table, "user_agent")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdateAt = field.NewTime(table, "update_at")

	e.fillFieldMap()

	return e
}

func (e *eventReports) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventReports) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["username"] = e.Username
	e.fieldMap["event_type"] = e.EventType
	e.fieldMap["ip_address"] = e.IPAddress
	e.fieldMap["device_id"] = e.DeviceID
	e.fieldMap["device"] = e.Device
	e.fieldMap["user_agent"] = e.UserAgent
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["update_at"] = e.UpdateAt
}

func (e eventReports) clone(db *gorm.DB) eventReports {
	e.eventReportsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventReports) replaceDB(db *gorm.DB) eventReports {
	e.eventReportsDo.ReplaceDB(db)
	return e
}

type eventReportsDo struct{ gen.DO }

type IEventReportsDo interface {
	gen.SubQuery
	Debug() IEventReportsDo
	WithContext(ctx context.Context) IEventReportsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventReportsDo
	WriteDB() IEventReportsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventReportsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventReportsDo
	Not(conds ...gen.Condition) IEventReportsDo
	Or(conds ...gen.Condition) IEventReportsDo
	Select(conds ...field.Expr) IEventReportsDo
	Where(conds ...gen.Condition) IEventReportsDo
	Order(conds ...field.Expr) IEventReportsDo
	Distinct(cols ...field.Expr) IEventReportsDo
	Omit(cols ...field.Expr) IEventReportsDo
	Join(table schema.Tabler, on ...field.Expr) IEventReportsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventReportsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventReportsDo
	Group(cols ...field.Expr) IEventReportsDo
	Having(conds ...gen.Condition) IEventReportsDo
	Limit(limit int) IEventReportsDo
	Offset(offset int) IEventReportsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventReportsDo
	Unscoped() IEventReportsDo
	Create(values ...*model.EventReports) error
	CreateInBatches(values []*model.EventReports, batchSize int) error
	Save(values ...*model.EventReports) error
	First() (*model.EventReports, error)
	Take() (*model.EventReports, error)
	Last() (*model.EventReports, error)
	Find() ([]*model.EventReports, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventReports, err error)
	FindInBatches(result *[]*model.EventReports, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EventReports) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventReportsDo
	Assign(attrs ...field.AssignExpr) IEventReportsDo
	Joins(fields ...field.RelationField) IEventReportsDo
	Preload(fields ...field.RelationField) IEventReportsDo
	FirstOrInit() (*model.EventReports, error)
	FirstOrCreate() (*model.EventReports, error)
	FindByPage(offset int, limit int) (result []*model.EventReports, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventReportsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eventReportsDo) Debug() IEventReportsDo {
	return e.withDO(e.DO.Debug())
}

func (e eventReportsDo) WithContext(ctx context.Context) IEventReportsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventReportsDo) ReadDB() IEventReportsDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventReportsDo) WriteDB() IEventReportsDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventReportsDo) Session(config *gorm.Session) IEventReportsDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventReportsDo) Clauses(conds ...clause.Expression) IEventReportsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventReportsDo) Returning(value interface{}, columns ...string) IEventReportsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventReportsDo) Not(conds ...gen.Condition) IEventReportsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventReportsDo) Or(conds ...gen.Condition) IEventReportsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventReportsDo) Select(conds ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventReportsDo) Where(conds ...gen.Condition) IEventReportsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventReportsDo) Order(conds ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventReportsDo) Distinct(cols ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventReportsDo) Omit(cols ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventReportsDo) Join(table schema.Tabler, on ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventReportsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventReportsDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventReportsDo) Group(cols ...field.Expr) IEventReportsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventReportsDo) Having(conds ...gen.Condition) IEventReportsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventReportsDo) Limit(limit int) IEventReportsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventReportsDo) Offset(offset int) IEventReportsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventReportsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventReportsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventReportsDo) Unscoped() IEventReportsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventReportsDo) Create(values ...*model.EventReports) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventReportsDo) CreateInBatches(values []*model.EventReports, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventReportsDo) Save(values ...*model.EventReports) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventReportsDo) First() (*model.EventReports, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventReports), nil
	}
}

func (e eventReportsDo) Take() (*model.EventReports, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventReports), nil
	}
}

func (e eventReportsDo) Last() (*model.EventReports, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventReports), nil
	}
}

func (e eventReportsDo) Find() ([]*model.EventReports, error) {
	result, err := e.DO.Find()
	return result.([]*model.EventReports), err
}

func (e eventReportsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventReports, err error) {
	buf := make([]*model.EventReports, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventReportsDo) FindInBatches(result *[]*model.EventReports, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventReportsDo) Attrs(attrs ...field.AssignExpr) IEventReportsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventReportsDo) Assign(attrs ...field.AssignExpr) IEventReportsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventReportsDo) Joins(fields ...field.RelationField) IEventReportsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventReportsDo) Preload(fields ...field.RelationField) IEventReportsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventReportsDo) FirstOrInit() (*model.EventReports, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventReports), nil
	}
}

func (e eventReportsDo) FirstOrCreate() (*model.EventReports, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventReports), nil
	}
}

func (e eventReportsDo) FindByPage(offset int, limit int) (result []*model.EventReports, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventReportsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventReportsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventReportsDo) Delete(models ...*model.EventReports) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventReportsDo) withDO(do gen.Dao) *eventReportsDo {
	e.DO = *do.(*gen.DO)
	return e
}
