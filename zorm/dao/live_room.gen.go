// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newLiveRoom(db *gorm.DB, opts ...gen.DOOption) liveRoom {
	_liveRoom := liveRoom{}

	_liveRoom.liveRoomDo.UseDB(db, opts...)
	_liveRoom.liveRoomDo.UseModel(&model.LiveRoom{})

	tableName := _liveRoom.liveRoomDo.TableName()
	_liveRoom.ALL = field.NewAsterisk(tableName)
	_liveRoom.ID = field.NewInt64(tableName, "id")
	_liveRoom.RoomName = field.NewString(tableName, "room_name")
	_liveRoom.AnchorID = field.NewInt64(tableName, "anchor_id")
	_liveRoom.AnchorNick = field.NewString(tableName, "anchor_nick")
	_liveRoom.AnchorAccount = field.NewString(tableName, "anchor_account")
	_liveRoom.RoomImage = field.NewString(tableName, "room_image")
	_liveRoom.MatchType = field.NewInt64(tableName, "match_type")
	_liveRoom.MatchID = field.NewInt64(tableName, "match_id")
	_liveRoom.MatchName = field.NewString(tableName, "match_name")
	_liveRoom.LeagueName = field.NewString(tableName, "league_name")
	_liveRoom.HomeTeam = field.NewString(tableName, "home_team")
	_liveRoom.AwayTeam = field.NewString(tableName, "away_team")
	_liveRoom.MatchStatus = field.NewInt64(tableName, "match_status")
	_liveRoom.StartTime = field.NewInt64(tableName, "start_time")
	_liveRoom.EndTime = field.NewInt64(tableName, "end_time")
	_liveRoom.HomeLogo = field.NewString(tableName, "home_logo")
	_liveRoom.AwayLogo = field.NewString(tableName, "away_logo")
	_liveRoom.LiveStatus = field.NewInt64(tableName, "live_status")
	_liveRoom.PushURL = field.NewString(tableName, "push_url")
	_liveRoom.PlayURL = field.NewString(tableName, "play_url")
	_liveRoom.CreatedAt = field.NewInt64(tableName, "created_at")
	_liveRoom.CreatedBy = field.NewString(tableName, "created_by")
	_liveRoom.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_liveRoom.UpdatedBy = field.NewString(tableName, "updated_by")
	_liveRoom.IsDeleted = field.NewInt64(tableName, "is_deleted")

	_liveRoom.fillFieldMap()

	return _liveRoom
}

// liveRoom 直播室表
type liveRoom struct {
	liveRoomDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键ID
	RoomName      field.String // 直播间名称
	AnchorID      field.Int64  // 主播序号
	AnchorNick    field.String // 主播昵称
	AnchorAccount field.String // 主播账户
	RoomImage     field.String // 直播间图片
	MatchType     field.Int64  // 赛事类型(1=足球，3=篮球)
	MatchID       field.Int64  // 赛事ID
	MatchName     field.String // 赛事名称
	LeagueName    field.String // 联赛名称
	HomeTeam      field.String // 主队名称
	AwayTeam      field.String // 客队名称
	MatchStatus   field.Int64  // 赛事状态（1=未开赛，3=结束，5=其他）
	StartTime     field.Int64  // 赛事开始时间
	EndTime       field.Int64  // 赛事结束时间
	HomeLogo      field.String // 主队LOGO
	AwayLogo      field.String // 客队LOGO
	LiveStatus    field.Int64  // 直播状态(1=未开始，3=直播中，5=已结束)
	PushURL       field.String // 推流地址
	PlayURL       field.String // 播放地址
	CreatedAt     field.Int64  // 创建时间
	CreatedBy     field.String // 创建人姓名
	UpdatedAt     field.Int64  // 更新时间
	UpdatedBy     field.String // 更新人姓名
	IsDeleted     field.Int64  // 是否删除(1=否，3=是)

	fieldMap map[string]field.Expr
}

func (l liveRoom) Table(newTableName string) *liveRoom {
	l.liveRoomDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveRoom) As(alias string) *liveRoom {
	l.liveRoomDo.DO = *(l.liveRoomDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveRoom) updateTableName(table string) *liveRoom {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.RoomName = field.NewString(table, "room_name")
	l.AnchorID = field.NewInt64(table, "anchor_id")
	l.AnchorNick = field.NewString(table, "anchor_nick")
	l.AnchorAccount = field.NewString(table, "anchor_account")
	l.RoomImage = field.NewString(table, "room_image")
	l.MatchType = field.NewInt64(table, "match_type")
	l.MatchID = field.NewInt64(table, "match_id")
	l.MatchName = field.NewString(table, "match_name")
	l.LeagueName = field.NewString(table, "league_name")
	l.HomeTeam = field.NewString(table, "home_team")
	l.AwayTeam = field.NewString(table, "away_team")
	l.MatchStatus = field.NewInt64(table, "match_status")
	l.StartTime = field.NewInt64(table, "start_time")
	l.EndTime = field.NewInt64(table, "end_time")
	l.HomeLogo = field.NewString(table, "home_logo")
	l.AwayLogo = field.NewString(table, "away_logo")
	l.LiveStatus = field.NewInt64(table, "live_status")
	l.PushURL = field.NewString(table, "push_url")
	l.PlayURL = field.NewString(table, "play_url")
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.CreatedBy = field.NewString(table, "created_by")
	l.UpdatedAt = field.NewInt64(table, "updated_at")
	l.UpdatedBy = field.NewString(table, "updated_by")
	l.IsDeleted = field.NewInt64(table, "is_deleted")

	l.fillFieldMap()

	return l
}

func (l *liveRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveRoom) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 25)
	l.fieldMap["id"] = l.ID
	l.fieldMap["room_name"] = l.RoomName
	l.fieldMap["anchor_id"] = l.AnchorID
	l.fieldMap["anchor_nick"] = l.AnchorNick
	l.fieldMap["anchor_account"] = l.AnchorAccount
	l.fieldMap["room_image"] = l.RoomImage
	l.fieldMap["match_type"] = l.MatchType
	l.fieldMap["match_id"] = l.MatchID
	l.fieldMap["match_name"] = l.MatchName
	l.fieldMap["league_name"] = l.LeagueName
	l.fieldMap["home_team"] = l.HomeTeam
	l.fieldMap["away_team"] = l.AwayTeam
	l.fieldMap["match_status"] = l.MatchStatus
	l.fieldMap["start_time"] = l.StartTime
	l.fieldMap["end_time"] = l.EndTime
	l.fieldMap["home_logo"] = l.HomeLogo
	l.fieldMap["away_logo"] = l.AwayLogo
	l.fieldMap["live_status"] = l.LiveStatus
	l.fieldMap["push_url"] = l.PushURL
	l.fieldMap["play_url"] = l.PlayURL
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["created_by"] = l.CreatedBy
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["updated_by"] = l.UpdatedBy
	l.fieldMap["is_deleted"] = l.IsDeleted
}

func (l liveRoom) clone(db *gorm.DB) liveRoom {
	l.liveRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveRoom) replaceDB(db *gorm.DB) liveRoom {
	l.liveRoomDo.ReplaceDB(db)
	return l
}

type liveRoomDo struct{ gen.DO }

type ILiveRoomDo interface {
	gen.SubQuery
	Debug() ILiveRoomDo
	WithContext(ctx context.Context) ILiveRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveRoomDo
	WriteDB() ILiveRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveRoomDo
	Not(conds ...gen.Condition) ILiveRoomDo
	Or(conds ...gen.Condition) ILiveRoomDo
	Select(conds ...field.Expr) ILiveRoomDo
	Where(conds ...gen.Condition) ILiveRoomDo
	Order(conds ...field.Expr) ILiveRoomDo
	Distinct(cols ...field.Expr) ILiveRoomDo
	Omit(cols ...field.Expr) ILiveRoomDo
	Join(table schema.Tabler, on ...field.Expr) ILiveRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveRoomDo
	Group(cols ...field.Expr) ILiveRoomDo
	Having(conds ...gen.Condition) ILiveRoomDo
	Limit(limit int) ILiveRoomDo
	Offset(offset int) ILiveRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveRoomDo
	Unscoped() ILiveRoomDo
	Create(values ...*model.LiveRoom) error
	CreateInBatches(values []*model.LiveRoom, batchSize int) error
	Save(values ...*model.LiveRoom) error
	First() (*model.LiveRoom, error)
	Take() (*model.LiveRoom, error)
	Last() (*model.LiveRoom, error)
	Find() ([]*model.LiveRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveRoom, err error)
	FindInBatches(result *[]*model.LiveRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveRoomDo
	Assign(attrs ...field.AssignExpr) ILiveRoomDo
	Joins(fields ...field.RelationField) ILiveRoomDo
	Preload(fields ...field.RelationField) ILiveRoomDo
	FirstOrInit() (*model.LiveRoom, error)
	FirstOrCreate() (*model.LiveRoom, error)
	FindByPage(offset int, limit int) (result []*model.LiveRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveRoomDo) Debug() ILiveRoomDo {
	return l.withDO(l.DO.Debug())
}

func (l liveRoomDo) WithContext(ctx context.Context) ILiveRoomDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveRoomDo) ReadDB() ILiveRoomDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveRoomDo) WriteDB() ILiveRoomDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveRoomDo) Session(config *gorm.Session) ILiveRoomDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveRoomDo) Clauses(conds ...clause.Expression) ILiveRoomDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveRoomDo) Returning(value interface{}, columns ...string) ILiveRoomDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveRoomDo) Not(conds ...gen.Condition) ILiveRoomDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveRoomDo) Or(conds ...gen.Condition) ILiveRoomDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveRoomDo) Select(conds ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveRoomDo) Where(conds ...gen.Condition) ILiveRoomDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveRoomDo) Order(conds ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveRoomDo) Distinct(cols ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveRoomDo) Omit(cols ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveRoomDo) Join(table schema.Tabler, on ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveRoomDo) Group(cols ...field.Expr) ILiveRoomDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveRoomDo) Having(conds ...gen.Condition) ILiveRoomDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveRoomDo) Limit(limit int) ILiveRoomDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveRoomDo) Offset(offset int) ILiveRoomDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveRoomDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveRoomDo) Unscoped() ILiveRoomDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveRoomDo) Create(values ...*model.LiveRoom) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveRoomDo) CreateInBatches(values []*model.LiveRoom, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveRoomDo) Save(values ...*model.LiveRoom) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveRoomDo) First() (*model.LiveRoom, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRoom), nil
	}
}

func (l liveRoomDo) Take() (*model.LiveRoom, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRoom), nil
	}
}

func (l liveRoomDo) Last() (*model.LiveRoom, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRoom), nil
	}
}

func (l liveRoomDo) Find() ([]*model.LiveRoom, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveRoom), err
}

func (l liveRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveRoom, err error) {
	buf := make([]*model.LiveRoom, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveRoomDo) FindInBatches(result *[]*model.LiveRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveRoomDo) Attrs(attrs ...field.AssignExpr) ILiveRoomDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveRoomDo) Assign(attrs ...field.AssignExpr) ILiveRoomDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveRoomDo) Joins(fields ...field.RelationField) ILiveRoomDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveRoomDo) Preload(fields ...field.RelationField) ILiveRoomDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveRoomDo) FirstOrInit() (*model.LiveRoom, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRoom), nil
	}
}

func (l liveRoomDo) FirstOrCreate() (*model.LiveRoom, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveRoom), nil
	}
}

func (l liveRoomDo) FindByPage(offset int, limit int) (result []*model.LiveRoom, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveRoomDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveRoomDo) Delete(models ...*model.LiveRoom) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveRoomDo) withDO(do gen.Dao) *liveRoomDo {
	l.DO = *do.(*gen.DO)
	return l
}
