// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newLiveAnchor(db *gorm.DB, opts ...gen.DOOption) liveAnchor {
	_liveAnchor := liveAnchor{}

	_liveAnchor.liveAnchorDo.UseDB(db, opts...)
	_liveAnchor.liveAnchorDo.UseModel(&model.LiveAnchor{})

	tableName := _liveAnchor.liveAnchorDo.TableName()
	_liveAnchor.ALL = field.NewAsterisk(tableName)
	_liveAnchor.ID = field.NewInt64(tableName, "id")
	_liveAnchor.UserID = field.NewInt64(tableName, "user_id")
	_liveAnchor.AnchorNick = field.NewString(tableName, "anchor_nick")
	_liveAnchor.UserName = field.NewString(tableName, "user_name")
	_liveAnchor.UserAvatar = field.NewString(tableName, "user_avatar")
	_liveAnchor.Phone = field.NewString(tableName, "phone")
	_liveAnchor.RoomNumber = field.NewInt64(tableName, "room_number")
	_liveAnchor.Image = field.NewString(tableName, "image")
	_liveAnchor.AnchorType = field.NewInt64(tableName, "anchor_type")
	_liveAnchor.FansCount = field.NewInt64(tableName, "fans_count")
	_liveAnchor.IsLive = field.NewInt64(tableName, "is_live")
	_liveAnchor.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_liveAnchor.CreatedAt = field.NewInt64(tableName, "created_at")
	_liveAnchor.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_liveAnchor.fillFieldMap()

	return _liveAnchor
}

// liveAnchor 主播表
type liveAnchor struct {
	liveAnchorDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	UserID     field.Int64  // 用户ID
	AnchorNick field.String // 主播昵称
	UserName   field.String // 用户名称
	UserAvatar field.String // 用户头像
	Phone      field.String // 手机号
	RoomNumber field.Int64  // 房间号（数字类型）
	Image      field.String // 图片
	AnchorType field.Int64  // 主播类型(1=系统主播，3=真人主播，5=优质主播)
	FansCount  field.Int64  // 粉丝数量
	IsLive     field.Int64  // 是否直播(1=否，3=是)
	IsDeleted  field.Int64  // 是否删除(1=否，3=是)
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (l liveAnchor) Table(newTableName string) *liveAnchor {
	l.liveAnchorDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveAnchor) As(alias string) *liveAnchor {
	l.liveAnchorDo.DO = *(l.liveAnchorDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveAnchor) updateTableName(table string) *liveAnchor {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.UserID = field.NewInt64(table, "user_id")
	l.AnchorNick = field.NewString(table, "anchor_nick")
	l.UserName = field.NewString(table, "user_name")
	l.UserAvatar = field.NewString(table, "user_avatar")
	l.Phone = field.NewString(table, "phone")
	l.RoomNumber = field.NewInt64(table, "room_number")
	l.Image = field.NewString(table, "image")
	l.AnchorType = field.NewInt64(table, "anchor_type")
	l.FansCount = field.NewInt64(table, "fans_count")
	l.IsLive = field.NewInt64(table, "is_live")
	l.IsDeleted = field.NewInt64(table, "is_deleted")
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.UpdatedAt = field.NewInt64(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *liveAnchor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveAnchor) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["id"] = l.ID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["anchor_nick"] = l.AnchorNick
	l.fieldMap["user_name"] = l.UserName
	l.fieldMap["user_avatar"] = l.UserAvatar
	l.fieldMap["phone"] = l.Phone
	l.fieldMap["room_number"] = l.RoomNumber
	l.fieldMap["image"] = l.Image
	l.fieldMap["anchor_type"] = l.AnchorType
	l.fieldMap["fans_count"] = l.FansCount
	l.fieldMap["is_live"] = l.IsLive
	l.fieldMap["is_deleted"] = l.IsDeleted
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l liveAnchor) clone(db *gorm.DB) liveAnchor {
	l.liveAnchorDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveAnchor) replaceDB(db *gorm.DB) liveAnchor {
	l.liveAnchorDo.ReplaceDB(db)
	return l
}

type liveAnchorDo struct{ gen.DO }

type ILiveAnchorDo interface {
	gen.SubQuery
	Debug() ILiveAnchorDo
	WithContext(ctx context.Context) ILiveAnchorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveAnchorDo
	WriteDB() ILiveAnchorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveAnchorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveAnchorDo
	Not(conds ...gen.Condition) ILiveAnchorDo
	Or(conds ...gen.Condition) ILiveAnchorDo
	Select(conds ...field.Expr) ILiveAnchorDo
	Where(conds ...gen.Condition) ILiveAnchorDo
	Order(conds ...field.Expr) ILiveAnchorDo
	Distinct(cols ...field.Expr) ILiveAnchorDo
	Omit(cols ...field.Expr) ILiveAnchorDo
	Join(table schema.Tabler, on ...field.Expr) ILiveAnchorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveAnchorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveAnchorDo
	Group(cols ...field.Expr) ILiveAnchorDo
	Having(conds ...gen.Condition) ILiveAnchorDo
	Limit(limit int) ILiveAnchorDo
	Offset(offset int) ILiveAnchorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveAnchorDo
	Unscoped() ILiveAnchorDo
	Create(values ...*model.LiveAnchor) error
	CreateInBatches(values []*model.LiveAnchor, batchSize int) error
	Save(values ...*model.LiveAnchor) error
	First() (*model.LiveAnchor, error)
	Take() (*model.LiveAnchor, error)
	Last() (*model.LiveAnchor, error)
	Find() ([]*model.LiveAnchor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveAnchor, err error)
	FindInBatches(result *[]*model.LiveAnchor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveAnchor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveAnchorDo
	Assign(attrs ...field.AssignExpr) ILiveAnchorDo
	Joins(fields ...field.RelationField) ILiveAnchorDo
	Preload(fields ...field.RelationField) ILiveAnchorDo
	FirstOrInit() (*model.LiveAnchor, error)
	FirstOrCreate() (*model.LiveAnchor, error)
	FindByPage(offset int, limit int) (result []*model.LiveAnchor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveAnchorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveAnchorDo) Debug() ILiveAnchorDo {
	return l.withDO(l.DO.Debug())
}

func (l liveAnchorDo) WithContext(ctx context.Context) ILiveAnchorDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveAnchorDo) ReadDB() ILiveAnchorDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveAnchorDo) WriteDB() ILiveAnchorDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveAnchorDo) Session(config *gorm.Session) ILiveAnchorDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveAnchorDo) Clauses(conds ...clause.Expression) ILiveAnchorDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveAnchorDo) Returning(value interface{}, columns ...string) ILiveAnchorDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveAnchorDo) Not(conds ...gen.Condition) ILiveAnchorDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveAnchorDo) Or(conds ...gen.Condition) ILiveAnchorDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveAnchorDo) Select(conds ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveAnchorDo) Where(conds ...gen.Condition) ILiveAnchorDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveAnchorDo) Order(conds ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveAnchorDo) Distinct(cols ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveAnchorDo) Omit(cols ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveAnchorDo) Join(table schema.Tabler, on ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveAnchorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveAnchorDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveAnchorDo) Group(cols ...field.Expr) ILiveAnchorDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveAnchorDo) Having(conds ...gen.Condition) ILiveAnchorDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveAnchorDo) Limit(limit int) ILiveAnchorDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveAnchorDo) Offset(offset int) ILiveAnchorDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveAnchorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveAnchorDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveAnchorDo) Unscoped() ILiveAnchorDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveAnchorDo) Create(values ...*model.LiveAnchor) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveAnchorDo) CreateInBatches(values []*model.LiveAnchor, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveAnchorDo) Save(values ...*model.LiveAnchor) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveAnchorDo) First() (*model.LiveAnchor, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveAnchor), nil
	}
}

func (l liveAnchorDo) Take() (*model.LiveAnchor, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveAnchor), nil
	}
}

func (l liveAnchorDo) Last() (*model.LiveAnchor, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveAnchor), nil
	}
}

func (l liveAnchorDo) Find() ([]*model.LiveAnchor, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveAnchor), err
}

func (l liveAnchorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveAnchor, err error) {
	buf := make([]*model.LiveAnchor, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveAnchorDo) FindInBatches(result *[]*model.LiveAnchor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveAnchorDo) Attrs(attrs ...field.AssignExpr) ILiveAnchorDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveAnchorDo) Assign(attrs ...field.AssignExpr) ILiveAnchorDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveAnchorDo) Joins(fields ...field.RelationField) ILiveAnchorDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveAnchorDo) Preload(fields ...field.RelationField) ILiveAnchorDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveAnchorDo) FirstOrInit() (*model.LiveAnchor, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveAnchor), nil
	}
}

func (l liveAnchorDo) FirstOrCreate() (*model.LiveAnchor, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveAnchor), nil
	}
}

func (l liveAnchorDo) FindByPage(offset int, limit int) (result []*model.LiveAnchor, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveAnchorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveAnchorDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveAnchorDo) Delete(models ...*model.LiveAnchor) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveAnchorDo) withDO(do gen.Dao) *liveAnchorDo {
	l.DO = *do.(*gen.DO)
	return l
}
