// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gzorm/commons/zorm/model"
)

func newLiveGame(db *gorm.DB, opts ...gen.DOOption) liveGame {
	_liveGame := liveGame{}

	_liveGame.liveGameDo.UseDB(db, opts...)
	_liveGame.liveGameDo.UseModel(&model.LiveGame{})

	tableName := _liveGame.liveGameDo.TableName()
	_liveGame.ALL = field.NewAsterisk(tableName)
	_liveGame.ID = field.NewInt64(tableName, "id")
	_liveGame.MatchType = field.NewInt64(tableName, "match_type")
	_liveGame.MatchID = field.NewInt64(tableName, "match_id")
	_liveGame.MatchName = field.NewString(tableName, "match_name")
	_liveGame.MatchNameEn = field.NewString(tableName, "match_name_en")
	_liveGame.LeagueID = field.NewInt64(tableName, "league_id")
	_liveGame.LeagueName = field.NewString(tableName, "league_name")
	_liveGame.LeagueNameEn = field.NewString(tableName, "league_name_en")
	_liveGame.CoverImage = field.NewString(tableName, "cover_image")
	_liveGame.HomeTeam = field.NewString(tableName, "home_team")
	_liveGame.HomeTeamEn = field.NewString(tableName, "home_team_en")
	_liveGame.AwayTeam = field.NewString(tableName, "away_team")
	_liveGame.AwayTeamEn = field.NewString(tableName, "away_team_en")
	_liveGame.MatchStatus = field.NewInt64(tableName, "match_status")
	_liveGame.StartTime = field.NewInt64(tableName, "start_time")
	_liveGame.EndTime = field.NewInt64(tableName, "end_time")
	_liveGame.HomeLogo = field.NewString(tableName, "home_logo")
	_liveGame.AwayLogo = field.NewString(tableName, "away_logo")
	_liveGame.LiveStatus = field.NewInt64(tableName, "live_status")
	_liveGame.PushURL = field.NewString(tableName, "push_url")
	_liveGame.PlayURL = field.NewString(tableName, "play_url")
	_liveGame.LiveAppName = field.NewString(tableName, "live_app_name")
	_liveGame.LiveStreamName = field.NewString(tableName, "live_stream_name")
	_liveGame.Position = field.NewInt64(tableName, "position")
	_liveGame.CreatedAt = field.NewInt64(tableName, "created_at")
	_liveGame.CreatedBy = field.NewString(tableName, "created_by")
	_liveGame.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_liveGame.UpdatedBy = field.NewString(tableName, "updated_by")
	_liveGame.IsDeleted = field.NewInt64(tableName, "is_deleted")

	_liveGame.fillFieldMap()

	return _liveGame
}

// liveGame 直播赛事表
type liveGame struct {
	liveGameDo

	ALL            field.Asterisk
	ID             field.Int64  // 直播ID
	MatchType      field.Int64  // 赛事类型(1=足球，3=篮球)
	MatchID        field.Int64  // 赛事ID
	MatchName      field.String // 赛事名称
	MatchNameEn    field.String // 赛事名称(英文)
	LeagueID       field.Int64  // 联赛ID
	LeagueName     field.String // 联赛名称
	LeagueNameEn   field.String // 联赛名称(英文)
	CoverImage     field.String // 封面图片
	HomeTeam       field.String // 主队名称
	HomeTeamEn     field.String // 主队名称(英文)
	AwayTeam       field.String // 客队名称
	AwayTeamEn     field.String // 客队名称(英文)
	MatchStatus    field.Int64  // 赛事状态（1=未开赛，3=结束，5=其他）
	StartTime      field.Int64  // 赛事开始时间
	EndTime        field.Int64  // 赛事结束时间
	HomeLogo       field.String // 主队LOGO
	AwayLogo       field.String // 客队LOGO
	LiveStatus     field.Int64  // 直播状态(1=未开始，3=直播中，5=已结束, 7=回放中)
	PushURL        field.String // 推流地址
	PlayURL        field.String // 播放地址
	LiveAppName    field.String // 推流APP名称
	LiveStreamName field.String // 推流的名称
	Position       field.Int64  // 排序号
	CreatedAt      field.Int64  // 创建时间
	CreatedBy      field.String // 创建人姓名
	UpdatedAt      field.Int64  // 更新时间
	UpdatedBy      field.String // 更新人姓名
	IsDeleted      field.Int64  // 是否删除(1=否，3=是)

	fieldMap map[string]field.Expr
}

func (l liveGame) Table(newTableName string) *liveGame {
	l.liveGameDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveGame) As(alias string) *liveGame {
	l.liveGameDo.DO = *(l.liveGameDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveGame) updateTableName(table string) *liveGame {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.MatchType = field.NewInt64(table, "match_type")
	l.MatchID = field.NewInt64(table, "match_id")
	l.MatchName = field.NewString(table, "match_name")
	l.MatchNameEn = field.NewString(table, "match_name_en")
	l.LeagueID = field.NewInt64(table, "league_id")
	l.LeagueName = field.NewString(table, "league_name")
	l.LeagueNameEn = field.NewString(table, "league_name_en")
	l.CoverImage = field.NewString(table, "cover_image")
	l.HomeTeam = field.NewString(table, "home_team")
	l.HomeTeamEn = field.NewString(table, "home_team_en")
	l.AwayTeam = field.NewString(table, "away_team")
	l.AwayTeamEn = field.NewString(table, "away_team_en")
	l.MatchStatus = field.NewInt64(table, "match_status")
	l.StartTime = field.NewInt64(table, "start_time")
	l.EndTime = field.NewInt64(table, "end_time")
	l.HomeLogo = field.NewString(table, "home_logo")
	l.AwayLogo = field.NewString(table, "away_logo")
	l.LiveStatus = field.NewInt64(table, "live_status")
	l.PushURL = field.NewString(table, "push_url")
	l.PlayURL = field.NewString(table, "play_url")
	l.LiveAppName = field.NewString(table, "live_app_name")
	l.LiveStreamName = field.NewString(table, "live_stream_name")
	l.Position = field.NewInt64(table, "position")
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.CreatedBy = field.NewString(table, "created_by")
	l.UpdatedAt = field.NewInt64(table, "updated_at")
	l.UpdatedBy = field.NewString(table, "updated_by")
	l.IsDeleted = field.NewInt64(table, "is_deleted")

	l.fillFieldMap()

	return l
}

func (l *liveGame) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveGame) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 29)
	l.fieldMap["id"] = l.ID
	l.fieldMap["match_type"] = l.MatchType
	l.fieldMap["match_id"] = l.MatchID
	l.fieldMap["match_name"] = l.MatchName
	l.fieldMap["match_name_en"] = l.MatchNameEn
	l.fieldMap["league_id"] = l.LeagueID
	l.fieldMap["league_name"] = l.LeagueName
	l.fieldMap["league_name_en"] = l.LeagueNameEn
	l.fieldMap["cover_image"] = l.CoverImage
	l.fieldMap["home_team"] = l.HomeTeam
	l.fieldMap["home_team_en"] = l.HomeTeamEn
	l.fieldMap["away_team"] = l.AwayTeam
	l.fieldMap["away_team_en"] = l.AwayTeamEn
	l.fieldMap["match_status"] = l.MatchStatus
	l.fieldMap["start_time"] = l.StartTime
	l.fieldMap["end_time"] = l.EndTime
	l.fieldMap["home_logo"] = l.HomeLogo
	l.fieldMap["away_logo"] = l.AwayLogo
	l.fieldMap["live_status"] = l.LiveStatus
	l.fieldMap["push_url"] = l.PushURL
	l.fieldMap["play_url"] = l.PlayURL
	l.fieldMap["live_app_name"] = l.LiveAppName
	l.fieldMap["live_stream_name"] = l.LiveStreamName
	l.fieldMap["position"] = l.Position
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["created_by"] = l.CreatedBy
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["updated_by"] = l.UpdatedBy
	l.fieldMap["is_deleted"] = l.IsDeleted
}

func (l liveGame) clone(db *gorm.DB) liveGame {
	l.liveGameDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveGame) replaceDB(db *gorm.DB) liveGame {
	l.liveGameDo.ReplaceDB(db)
	return l
}

type liveGameDo struct{ gen.DO }

type ILiveGameDo interface {
	gen.SubQuery
	Debug() ILiveGameDo
	WithContext(ctx context.Context) ILiveGameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveGameDo
	WriteDB() ILiveGameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveGameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveGameDo
	Not(conds ...gen.Condition) ILiveGameDo
	Or(conds ...gen.Condition) ILiveGameDo
	Select(conds ...field.Expr) ILiveGameDo
	Where(conds ...gen.Condition) ILiveGameDo
	Order(conds ...field.Expr) ILiveGameDo
	Distinct(cols ...field.Expr) ILiveGameDo
	Omit(cols ...field.Expr) ILiveGameDo
	Join(table schema.Tabler, on ...field.Expr) ILiveGameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveGameDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveGameDo
	Group(cols ...field.Expr) ILiveGameDo
	Having(conds ...gen.Condition) ILiveGameDo
	Limit(limit int) ILiveGameDo
	Offset(offset int) ILiveGameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveGameDo
	Unscoped() ILiveGameDo
	Create(values ...*model.LiveGame) error
	CreateInBatches(values []*model.LiveGame, batchSize int) error
	Save(values ...*model.LiveGame) error
	First() (*model.LiveGame, error)
	Take() (*model.LiveGame, error)
	Last() (*model.LiveGame, error)
	Find() ([]*model.LiveGame, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveGame, err error)
	FindInBatches(result *[]*model.LiveGame, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveGame) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveGameDo
	Assign(attrs ...field.AssignExpr) ILiveGameDo
	Joins(fields ...field.RelationField) ILiveGameDo
	Preload(fields ...field.RelationField) ILiveGameDo
	FirstOrInit() (*model.LiveGame, error)
	FirstOrCreate() (*model.LiveGame, error)
	FindByPage(offset int, limit int) (result []*model.LiveGame, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveGameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveGameDo) Debug() ILiveGameDo {
	return l.withDO(l.DO.Debug())
}

func (l liveGameDo) WithContext(ctx context.Context) ILiveGameDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveGameDo) ReadDB() ILiveGameDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveGameDo) WriteDB() ILiveGameDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveGameDo) Session(config *gorm.Session) ILiveGameDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveGameDo) Clauses(conds ...clause.Expression) ILiveGameDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveGameDo) Returning(value interface{}, columns ...string) ILiveGameDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveGameDo) Not(conds ...gen.Condition) ILiveGameDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveGameDo) Or(conds ...gen.Condition) ILiveGameDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveGameDo) Select(conds ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveGameDo) Where(conds ...gen.Condition) ILiveGameDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveGameDo) Order(conds ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveGameDo) Distinct(cols ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveGameDo) Omit(cols ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveGameDo) Join(table schema.Tabler, on ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveGameDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveGameDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveGameDo) Group(cols ...field.Expr) ILiveGameDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveGameDo) Having(conds ...gen.Condition) ILiveGameDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveGameDo) Limit(limit int) ILiveGameDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveGameDo) Offset(offset int) ILiveGameDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveGameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveGameDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveGameDo) Unscoped() ILiveGameDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveGameDo) Create(values ...*model.LiveGame) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveGameDo) CreateInBatches(values []*model.LiveGame, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveGameDo) Save(values ...*model.LiveGame) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveGameDo) First() (*model.LiveGame, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveGame), nil
	}
}

func (l liveGameDo) Take() (*model.LiveGame, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveGame), nil
	}
}

func (l liveGameDo) Last() (*model.LiveGame, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveGame), nil
	}
}

func (l liveGameDo) Find() ([]*model.LiveGame, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveGame), err
}

func (l liveGameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveGame, err error) {
	buf := make([]*model.LiveGame, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveGameDo) FindInBatches(result *[]*model.LiveGame, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveGameDo) Attrs(attrs ...field.AssignExpr) ILiveGameDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveGameDo) Assign(attrs ...field.AssignExpr) ILiveGameDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveGameDo) Joins(fields ...field.RelationField) ILiveGameDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveGameDo) Preload(fields ...field.RelationField) ILiveGameDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveGameDo) FirstOrInit() (*model.LiveGame, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveGame), nil
	}
}

func (l liveGameDo) FirstOrCreate() (*model.LiveGame, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveGame), nil
	}
}

func (l liveGameDo) FindByPage(offset int, limit int) (result []*model.LiveGame, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveGameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveGameDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveGameDo) Delete(models ...*model.LiveGame) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveGameDo) withDO(do gen.Dao) *liveGameDo {
	l.DO = *do.(*gen.DO)
	return l
}
